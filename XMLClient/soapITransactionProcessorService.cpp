/* soapITransactionProcessorService.cpp
   Generated by gSOAP 2.8.116 for service.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapITransactionProcessorService.h"

ITransactionProcessorService::ITransactionProcessorService()
{	this->soap = soap_new();
	this->soap_own = true;
	ITransactionProcessorService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ITransactionProcessorService::ITransactionProcessorService(const ITransactionProcessorService& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
}

ITransactionProcessorService::ITransactionProcessorService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	ITransactionProcessorService_init(_soap->imode, _soap->omode);
}

ITransactionProcessorService::ITransactionProcessorService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	ITransactionProcessorService_init(iomode, iomode);
}

ITransactionProcessorService::ITransactionProcessorService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	ITransactionProcessorService_init(imode, omode);
}

ITransactionProcessorService::~ITransactionProcessorService()
{	if (this->soap_own)
	{	ITransactionProcessorService::destroy();
		soap_free(this->soap);
	}
}

void ITransactionProcessorService::ITransactionProcessorService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL },
        { "SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL },
        { "ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL },
        { "saml1", "urn:oasis:names:tc:SAML:1.0:assertion", NULL, NULL },
        { "saml2", "urn:oasis:names:tc:SAML:2.0:assertion", NULL, NULL },
        { "wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL },
        { "xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL },
        { "wsc", "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512", "http://schemas.xmlsoap.org/ws/2005/02/sc", NULL },
        { "wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL },
        { "ns1", "urn:schemas-cybersource-com:transaction-data:TransactionProcessor", NULL, NULL },
        { "ns2", "urn:schemas-cybersource-com:transaction-data-1.183", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

void ITransactionProcessorService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void ITransactionProcessorService::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	ITransactionProcessorService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
ITransactionProcessorService *ITransactionProcessorService::copy()
{	ITransactionProcessorService *dup = SOAP_NEW_UNMANAGED(ITransactionProcessorService);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}
#endif

ITransactionProcessorService& ITransactionProcessorService::operator=(const ITransactionProcessorService& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
	}
	return *this;
}

int ITransactionProcessorService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int ITransactionProcessorService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int ITransactionProcessorService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int ITransactionProcessorService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int ITransactionProcessorService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int ITransactionProcessorService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void ITransactionProcessorService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ITransactionProcessorService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *ITransactionProcessorService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void ITransactionProcessorService::soap_noheader()
{	this->soap->header = NULL;
}

void ITransactionProcessorService::soap_header(struct _wsse__Security *wsse__Security)
{
	::soap_header(this->soap);
	this->soap->header->wsse__Security = wsse__Security;
}

::SOAP_ENV__Header *ITransactionProcessorService::soap_header()
{	return this->soap->header;
}

#ifndef WITH_NOIO
int ITransactionProcessorService::run(int port, int backlog)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, backlog)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int ITransactionProcessorService::ssl_run(int port, int backlog)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, backlog)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}
#endif

SOAP_SOCKET ITransactionProcessorService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET ITransactionProcessorService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int ITransactionProcessorService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif
#endif

int ITransactionProcessorService::serve()
{
#ifndef WITH_FASTCGI
	this->soap->keep_alive = this->soap->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->soap->keep_alive > 0 && this->soap->max_keep_alive > 0)
			this->soap->keep_alive--;
#endif
		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if ((dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap))) && this->soap->error && this->soap->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___ns1__runTransaction(struct soap*, ITransactionProcessorService*);

int ITransactionProcessorService::dispatch()
{	return dispatch(this->soap);
}

int ITransactionProcessorService::dispatch(struct soap* soap)
{
	ITransactionProcessorService_init(soap->imode, soap->omode);
	(void)soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns2:requestMessage"))
		return serve___ns1__runTransaction(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve___ns1__runTransaction(struct soap *soap, ITransactionProcessorService *service)
{

    struct __ns1__runTransaction soap_tmp___ns1__runTransaction;
	ns2__ReplyMessage ns2__replyMessage;
	ns2__replyMessage.soap_default(soap);
	soap_default___ns1__runTransaction(soap, &soap_tmp___ns1__runTransaction);
	if (!soap_get___ns1__runTransaction(soap, &soap_tmp___ns1__runTransaction, "-ns1:runTransaction", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->runTransaction(soap_tmp___ns1__runTransaction.ns2__requestMessage, ns2__replyMessage);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns2__replyMessage.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns2__replyMessage.soap_put(soap, "ns2:replyMessage", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns2__replyMessage.soap_put(soap, "ns2:replyMessage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
