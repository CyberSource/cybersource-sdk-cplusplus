/* soapH.h
   Generated by gSOAP 2.8.116 for ../wsdl/service.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* ns2__RestrictedDecimal is a typedef synonym of xsd__decimal */

#ifndef SOAP_TYPE_ns2__RestrictedDecimal_DEFINED
#define SOAP_TYPE_ns2__RestrictedDecimal_DEFINED

#define soap_default_ns2__RestrictedDecimal soap_default_xsd__decimal


#define soap_serialize_ns2__RestrictedDecimal soap_serialize_xsd__decimal


#define soap_ns2__RestrictedDecimal2s(soap, a) ((a).c_str())

#define soap_out_ns2__RestrictedDecimal soap_out_xsd__decimal


#define soap_s2ns2__RestrictedDecimal(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")

#define soap_in_ns2__RestrictedDecimal soap_in_xsd__decimal


#define soap_instantiate_ns2__RestrictedDecimal soap_instantiate_xsd__decimal


#define soap_new_ns2__RestrictedDecimal soap_new_xsd__decimal


#define soap_put_ns2__RestrictedDecimal soap_put_xsd__decimal


#define soap_write_ns2__RestrictedDecimal soap_write_xsd__decimal


#define soap_PUT_ns2__RestrictedDecimal soap_PUT_xsd__decimal


#define soap_PATCH_ns2__RestrictedDecimal soap_PATCH_xsd__decimal


#define soap_POST_send_ns2__RestrictedDecimal soap_POST_send_xsd__decimal


#define soap_get_ns2__RestrictedDecimal soap_get_xsd__decimal


#define soap_read_ns2__RestrictedDecimal soap_read_xsd__decimal


#define soap_GET_ns2__RestrictedDecimal soap_GET_xsd__decimal


#define soap_POST_recv_ns2__RestrictedDecimal soap_POST_recv_xsd__decimal

#endif

#ifndef SOAP_TYPE_ns2__RestrictedString_DEFINED
#define SOAP_TYPE_ns2__RestrictedString_DEFINED

inline void soap_default_ns2__RestrictedString(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__RestrictedString(struct soap*, const std::string *);

#define soap_ns2__RestrictedString2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RestrictedString(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns2__RestrictedString(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 90, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__RestrictedString(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns2__RestrictedString soap_instantiate_std__string


#define soap_new_ns2__RestrictedString soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__RestrictedString(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns2__RestrictedString(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns2__RestrictedString(soap, p, "ns2:RestrictedString", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns2__RestrictedString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__RestrictedString(soap, p, "ns2:RestrictedString", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__RestrictedString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__RestrictedString(soap, p, "ns2:RestrictedString", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__RestrictedString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__RestrictedString(soap, p, "ns2:RestrictedString", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__RestrictedString(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns2__RestrictedString(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns2__RestrictedString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__RestrictedString(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__RestrictedString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__RestrictedString(struct soap *soap, std::string *p)
{
	if (::soap_read_ns2__RestrictedString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__dateTime_DEFINED
#define SOAP_TYPE_ns2__dateTime_DEFINED

inline void soap_default_ns2__dateTime(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__dateTime(struct soap*, const std::string *);

#define soap_ns2__dateTime2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__dateTime(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns2__dateTime(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__dateTime(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns2__dateTime soap_instantiate_std__string


#define soap_new_ns2__dateTime soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__dateTime(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns2__dateTime(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns2__dateTime(soap, p, "ns2:dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns2__dateTime(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__dateTime(soap, p, "ns2:dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__dateTime(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__dateTime(soap, p, "ns2:dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__dateTime(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__dateTime(soap, p, "ns2:dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__dateTime(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns2__dateTime(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns2__dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__dateTime(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__dateTime(struct soap *soap, std::string *p)
{
	if (::soap_read_ns2__dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__boolean_DEFINED
#define SOAP_TYPE_ns2__boolean_DEFINED

inline void soap_default_ns2__boolean(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__boolean(struct soap*, const std::string *);

#define soap_ns2__boolean2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__boolean(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns2__boolean(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__boolean(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns2__boolean soap_instantiate_std__string


#define soap_new_ns2__boolean soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__boolean(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns2__boolean(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns2__boolean(soap, p, "ns2:boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns2__boolean(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__boolean(soap, p, "ns2:boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__boolean(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__boolean(soap, p, "ns2:boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__boolean(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__boolean(soap, p, "ns2:boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__boolean(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns2__boolean(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns2__boolean(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__boolean(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__boolean(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__boolean(struct soap *soap, std::string *p)
{
	if (::soap_read_ns2__boolean(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__amount_DEFINED
#define SOAP_TYPE_ns2__amount_DEFINED

inline void soap_default_ns2__amount(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__amount(struct soap*, const std::string *);

#define soap_ns2__amount2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__amount(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns2__amount(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__amount(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns2__amount soap_instantiate_std__string


#define soap_new_ns2__amount soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__amount(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns2__amount(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns2__amount(soap, p, "ns2:amount", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns2__amount(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__amount(soap, p, "ns2:amount", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__amount(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__amount(soap, p, "ns2:amount", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__amount(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__amount(soap, p, "ns2:amount", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__amount(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns2__amount(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns2__amount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__amount(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__amount(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__amount(struct soap *soap, std::string *p)
{
	if (::soap_read_ns2__amount(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__payByPoints_DEFINED
#define SOAP_TYPE_ns2__payByPoints_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__payByPoints(struct soap*, const char*, int, const ns2__payByPoints *, const char*);
SOAP_FMAC3 ns2__payByPoints * SOAP_FMAC4 soap_in_ns2__payByPoints(struct soap*, const char*, ns2__payByPoints *, const char*);
SOAP_FMAC1 ns2__payByPoints * SOAP_FMAC2 soap_instantiate_ns2__payByPoints(struct soap*, int, const char*, const char*, size_t*);

inline ns2__payByPoints * soap_new_ns2__payByPoints(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__payByPoints(soap, n, NULL, NULL, NULL);
}

inline ns2__payByPoints * soap_new_req_ns2__payByPoints(
	struct soap *soap)
{
	ns2__payByPoints *_p = ::soap_new_ns2__payByPoints(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__payByPoints * soap_new_set_ns2__payByPoints(
	struct soap *soap,
	std::string *indicator,
	std::string *pointsBeforeRedemption,
	std::string *pointsValueBeforeRedemption,
	std::string *pointsRedeemed,
	std::string *pointsValueRedeemed,
	std::string *pointsAfterRedemption,
	std::string *pointsValueAfterRedemption)
{
	ns2__payByPoints *_p = ::soap_new_ns2__payByPoints(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__payByPoints::indicator = indicator;
		_p->ns2__payByPoints::pointsBeforeRedemption = pointsBeforeRedemption;
		_p->ns2__payByPoints::pointsValueBeforeRedemption = pointsValueBeforeRedemption;
		_p->ns2__payByPoints::pointsRedeemed = pointsRedeemed;
		_p->ns2__payByPoints::pointsValueRedeemed = pointsValueRedeemed;
		_p->ns2__payByPoints::pointsAfterRedemption = pointsAfterRedemption;
		_p->ns2__payByPoints::pointsValueAfterRedemption = pointsValueAfterRedemption;
	}
	return _p;
}

inline int soap_write_ns2__payByPoints(struct soap *soap, ns2__payByPoints const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:payByPoints", p->soap_type() == SOAP_TYPE_ns2__payByPoints ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__payByPoints(struct soap *soap, const char *URL, ns2__payByPoints const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:payByPoints", p->soap_type() == SOAP_TYPE_ns2__payByPoints ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__payByPoints(struct soap *soap, const char *URL, ns2__payByPoints const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:payByPoints", p->soap_type() == SOAP_TYPE_ns2__payByPoints ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__payByPoints(struct soap *soap, const char *URL, ns2__payByPoints const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:payByPoints", p->soap_type() == SOAP_TYPE_ns2__payByPoints ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__payByPoints * SOAP_FMAC4 soap_get_ns2__payByPoints(struct soap*, ns2__payByPoints *, const char*, const char*);

inline int soap_read_ns2__payByPoints(struct soap *soap, ns2__payByPoints *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__payByPoints(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__payByPoints(struct soap *soap, const char *URL, ns2__payByPoints *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__payByPoints(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__payByPoints(struct soap *soap, ns2__payByPoints *p)
{
	if (::soap_read_ns2__payByPoints(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PauseRuleResultItem_DEFINED
#define SOAP_TYPE_ns2__PauseRuleResultItem_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PauseRuleResultItem(struct soap*, const char*, int, const ns2__PauseRuleResultItem *, const char*);
SOAP_FMAC3 ns2__PauseRuleResultItem * SOAP_FMAC4 soap_in_ns2__PauseRuleResultItem(struct soap*, const char*, ns2__PauseRuleResultItem *, const char*);
SOAP_FMAC1 ns2__PauseRuleResultItem * SOAP_FMAC2 soap_instantiate_ns2__PauseRuleResultItem(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PauseRuleResultItem * soap_new_ns2__PauseRuleResultItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PauseRuleResultItem(soap, n, NULL, NULL, NULL);
}

inline ns2__PauseRuleResultItem * soap_new_req_ns2__PauseRuleResultItem(
	struct soap *soap)
{
	ns2__PauseRuleResultItem *_p = ::soap_new_ns2__PauseRuleResultItem(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__PauseRuleResultItem * soap_new_set_ns2__PauseRuleResultItem(
	struct soap *soap,
	std::string *ruleID,
	std::string *name,
	std::string *action,
	std::string *evaluation,
	std::string *orderModification)
{
	ns2__PauseRuleResultItem *_p = ::soap_new_ns2__PauseRuleResultItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PauseRuleResultItem::ruleID = ruleID;
		_p->ns2__PauseRuleResultItem::name = name;
		_p->ns2__PauseRuleResultItem::action = action;
		_p->ns2__PauseRuleResultItem::evaluation = evaluation;
		_p->ns2__PauseRuleResultItem::orderModification = orderModification;
	}
	return _p;
}

inline int soap_write_ns2__PauseRuleResultItem(struct soap *soap, ns2__PauseRuleResultItem const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PauseRuleResultItem", p->soap_type() == SOAP_TYPE_ns2__PauseRuleResultItem ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PauseRuleResultItem(struct soap *soap, const char *URL, ns2__PauseRuleResultItem const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PauseRuleResultItem", p->soap_type() == SOAP_TYPE_ns2__PauseRuleResultItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PauseRuleResultItem(struct soap *soap, const char *URL, ns2__PauseRuleResultItem const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PauseRuleResultItem", p->soap_type() == SOAP_TYPE_ns2__PauseRuleResultItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PauseRuleResultItem(struct soap *soap, const char *URL, ns2__PauseRuleResultItem const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PauseRuleResultItem", p->soap_type() == SOAP_TYPE_ns2__PauseRuleResultItem ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PauseRuleResultItem * SOAP_FMAC4 soap_get_ns2__PauseRuleResultItem(struct soap*, ns2__PauseRuleResultItem *, const char*, const char*);

inline int soap_read_ns2__PauseRuleResultItem(struct soap *soap, ns2__PauseRuleResultItem *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PauseRuleResultItem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PauseRuleResultItem(struct soap *soap, const char *URL, ns2__PauseRuleResultItem *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PauseRuleResultItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PauseRuleResultItem(struct soap *soap, ns2__PauseRuleResultItem *p)
{
	if (::soap_read_ns2__PauseRuleResultItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PauseRuleResultItems_DEFINED
#define SOAP_TYPE_ns2__PauseRuleResultItems_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PauseRuleResultItems(struct soap*, const char*, int, const ns2__PauseRuleResultItems *, const char*);
SOAP_FMAC3 ns2__PauseRuleResultItems * SOAP_FMAC4 soap_in_ns2__PauseRuleResultItems(struct soap*, const char*, ns2__PauseRuleResultItems *, const char*);
SOAP_FMAC1 ns2__PauseRuleResultItems * SOAP_FMAC2 soap_instantiate_ns2__PauseRuleResultItems(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PauseRuleResultItems * soap_new_ns2__PauseRuleResultItems(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PauseRuleResultItems(soap, n, NULL, NULL, NULL);
}

inline ns2__PauseRuleResultItems * soap_new_req_ns2__PauseRuleResultItems(
	struct soap *soap)
{
	ns2__PauseRuleResultItems *_p = ::soap_new_ns2__PauseRuleResultItems(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__PauseRuleResultItems * soap_new_set_ns2__PauseRuleResultItems(
	struct soap *soap,
	const std::vector<ns2__PauseRuleResultItem *> & ruleResultItem)
{
	ns2__PauseRuleResultItems *_p = ::soap_new_ns2__PauseRuleResultItems(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PauseRuleResultItems::ruleResultItem = ruleResultItem;
	}
	return _p;
}

inline int soap_write_ns2__PauseRuleResultItems(struct soap *soap, ns2__PauseRuleResultItems const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PauseRuleResultItems", p->soap_type() == SOAP_TYPE_ns2__PauseRuleResultItems ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PauseRuleResultItems(struct soap *soap, const char *URL, ns2__PauseRuleResultItems const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PauseRuleResultItems", p->soap_type() == SOAP_TYPE_ns2__PauseRuleResultItems ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PauseRuleResultItems(struct soap *soap, const char *URL, ns2__PauseRuleResultItems const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PauseRuleResultItems", p->soap_type() == SOAP_TYPE_ns2__PauseRuleResultItems ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PauseRuleResultItems(struct soap *soap, const char *URL, ns2__PauseRuleResultItems const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PauseRuleResultItems", p->soap_type() == SOAP_TYPE_ns2__PauseRuleResultItems ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PauseRuleResultItems * SOAP_FMAC4 soap_get_ns2__PauseRuleResultItems(struct soap*, ns2__PauseRuleResultItems *, const char*, const char*);

inline int soap_read_ns2__PauseRuleResultItems(struct soap *soap, ns2__PauseRuleResultItems *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PauseRuleResultItems(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PauseRuleResultItems(struct soap *soap, const char *URL, ns2__PauseRuleResultItems *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PauseRuleResultItems(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PauseRuleResultItems(struct soap *soap, ns2__PauseRuleResultItems *p)
{
	if (::soap_read_ns2__PauseRuleResultItems(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ProfileReplyEarly_DEFINED
#define SOAP_TYPE_ns2__ProfileReplyEarly_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ProfileReplyEarly(struct soap*, const char*, int, const ns2__ProfileReplyEarly *, const char*);
SOAP_FMAC3 ns2__ProfileReplyEarly * SOAP_FMAC4 soap_in_ns2__ProfileReplyEarly(struct soap*, const char*, ns2__ProfileReplyEarly *, const char*);
SOAP_FMAC1 ns2__ProfileReplyEarly * SOAP_FMAC2 soap_instantiate_ns2__ProfileReplyEarly(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ProfileReplyEarly * soap_new_ns2__ProfileReplyEarly(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ProfileReplyEarly(soap, n, NULL, NULL, NULL);
}

inline ns2__ProfileReplyEarly * soap_new_req_ns2__ProfileReplyEarly(
	struct soap *soap)
{
	ns2__ProfileReplyEarly *_p = ::soap_new_ns2__ProfileReplyEarly(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__ProfileReplyEarly * soap_new_set_ns2__ProfileReplyEarly(
	struct soap *soap,
	std::string *name,
	std::string *selectedBy,
	ns2__PauseRuleResultItems *pauseRulesTriggered,
	ns2__RuleResultItems *rulesTriggered)
{
	ns2__ProfileReplyEarly *_p = ::soap_new_ns2__ProfileReplyEarly(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ProfileReplyEarly::name = name;
		_p->ns2__ProfileReplyEarly::selectedBy = selectedBy;
		_p->ns2__ProfileReplyEarly::pauseRulesTriggered = pauseRulesTriggered;
		_p->ns2__ProfileReplyEarly::rulesTriggered = rulesTriggered;
	}
	return _p;
}

inline int soap_write_ns2__ProfileReplyEarly(struct soap *soap, ns2__ProfileReplyEarly const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ProfileReplyEarly", p->soap_type() == SOAP_TYPE_ns2__ProfileReplyEarly ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ProfileReplyEarly(struct soap *soap, const char *URL, ns2__ProfileReplyEarly const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ProfileReplyEarly", p->soap_type() == SOAP_TYPE_ns2__ProfileReplyEarly ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ProfileReplyEarly(struct soap *soap, const char *URL, ns2__ProfileReplyEarly const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ProfileReplyEarly", p->soap_type() == SOAP_TYPE_ns2__ProfileReplyEarly ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ProfileReplyEarly(struct soap *soap, const char *URL, ns2__ProfileReplyEarly const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ProfileReplyEarly", p->soap_type() == SOAP_TYPE_ns2__ProfileReplyEarly ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ProfileReplyEarly * SOAP_FMAC4 soap_get_ns2__ProfileReplyEarly(struct soap*, ns2__ProfileReplyEarly *, const char*, const char*);

inline int soap_read_ns2__ProfileReplyEarly(struct soap *soap, ns2__ProfileReplyEarly *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ProfileReplyEarly(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ProfileReplyEarly(struct soap *soap, const char *URL, ns2__ProfileReplyEarly *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ProfileReplyEarly(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ProfileReplyEarly(struct soap *soap, ns2__ProfileReplyEarly *p)
{
	if (::soap_read_ns2__ProfileReplyEarly(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DecisionEarlyReply_DEFINED
#define SOAP_TYPE_ns2__DecisionEarlyReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DecisionEarlyReply(struct soap*, const char*, int, const ns2__DecisionEarlyReply *, const char*);
SOAP_FMAC3 ns2__DecisionEarlyReply * SOAP_FMAC4 soap_in_ns2__DecisionEarlyReply(struct soap*, const char*, ns2__DecisionEarlyReply *, const char*);
SOAP_FMAC1 ns2__DecisionEarlyReply * SOAP_FMAC2 soap_instantiate_ns2__DecisionEarlyReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DecisionEarlyReply * soap_new_ns2__DecisionEarlyReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DecisionEarlyReply(soap, n, NULL, NULL, NULL);
}

inline ns2__DecisionEarlyReply * soap_new_req_ns2__DecisionEarlyReply(
	struct soap *soap)
{
	ns2__DecisionEarlyReply *_p = ::soap_new_ns2__DecisionEarlyReply(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__DecisionEarlyReply * soap_new_set_ns2__DecisionEarlyReply(
	struct soap *soap,
	std::string *casePriority,
	std::string *decision,
	std::string *action,
	std::string *applicableOrderModifications,
	std::string *appliedOrderModifications,
	ns2__ProfileReplyEarly *activeProfileReply)
{
	ns2__DecisionEarlyReply *_p = ::soap_new_ns2__DecisionEarlyReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DecisionEarlyReply::casePriority = casePriority;
		_p->ns2__DecisionEarlyReply::decision = decision;
		_p->ns2__DecisionEarlyReply::action = action;
		_p->ns2__DecisionEarlyReply::applicableOrderModifications = applicableOrderModifications;
		_p->ns2__DecisionEarlyReply::appliedOrderModifications = appliedOrderModifications;
		_p->ns2__DecisionEarlyReply::activeProfileReply = activeProfileReply;
	}
	return _p;
}

inline int soap_write_ns2__DecisionEarlyReply(struct soap *soap, ns2__DecisionEarlyReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecisionEarlyReply", p->soap_type() == SOAP_TYPE_ns2__DecisionEarlyReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DecisionEarlyReply(struct soap *soap, const char *URL, ns2__DecisionEarlyReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecisionEarlyReply", p->soap_type() == SOAP_TYPE_ns2__DecisionEarlyReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DecisionEarlyReply(struct soap *soap, const char *URL, ns2__DecisionEarlyReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecisionEarlyReply", p->soap_type() == SOAP_TYPE_ns2__DecisionEarlyReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DecisionEarlyReply(struct soap *soap, const char *URL, ns2__DecisionEarlyReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecisionEarlyReply", p->soap_type() == SOAP_TYPE_ns2__DecisionEarlyReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DecisionEarlyReply * SOAP_FMAC4 soap_get_ns2__DecisionEarlyReply(struct soap*, ns2__DecisionEarlyReply *, const char*, const char*);

inline int soap_read_ns2__DecisionEarlyReply(struct soap *soap, ns2__DecisionEarlyReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DecisionEarlyReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DecisionEarlyReply(struct soap *soap, const char *URL, ns2__DecisionEarlyReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DecisionEarlyReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DecisionEarlyReply(struct soap *soap, ns2__DecisionEarlyReply *p)
{
	if (::soap_read_ns2__DecisionEarlyReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__merchant_DEFINED
#define SOAP_TYPE_ns2__merchant_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__merchant(struct soap*, const char*, int, const ns2__merchant *, const char*);
SOAP_FMAC3 ns2__merchant * SOAP_FMAC4 soap_in_ns2__merchant(struct soap*, const char*, ns2__merchant *, const char*);
SOAP_FMAC1 ns2__merchant * SOAP_FMAC2 soap_instantiate_ns2__merchant(struct soap*, int, const char*, const char*, size_t*);

inline ns2__merchant * soap_new_ns2__merchant(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__merchant(soap, n, NULL, NULL, NULL);
}

inline ns2__merchant * soap_new_req_ns2__merchant(
	struct soap *soap)
{
	ns2__merchant *_p = ::soap_new_ns2__merchant(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__merchant * soap_new_set_ns2__merchant(
	struct soap *soap,
	std::string *acquirerBIN,
	std::string *cardAcceptorID,
	std::string *visaMerchantID)
{
	ns2__merchant *_p = ::soap_new_ns2__merchant(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__merchant::acquirerBIN = acquirerBIN;
		_p->ns2__merchant::cardAcceptorID = cardAcceptorID;
		_p->ns2__merchant::visaMerchantID = visaMerchantID;
	}
	return _p;
}

inline int soap_write_ns2__merchant(struct soap *soap, ns2__merchant const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:merchant", p->soap_type() == SOAP_TYPE_ns2__merchant ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__merchant(struct soap *soap, const char *URL, ns2__merchant const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:merchant", p->soap_type() == SOAP_TYPE_ns2__merchant ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__merchant(struct soap *soap, const char *URL, ns2__merchant const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:merchant", p->soap_type() == SOAP_TYPE_ns2__merchant ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__merchant(struct soap *soap, const char *URL, ns2__merchant const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:merchant", p->soap_type() == SOAP_TYPE_ns2__merchant ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__merchant * SOAP_FMAC4 soap_get_ns2__merchant(struct soap*, ns2__merchant *, const char*, const char*);

inline int soap_read_ns2__merchant(struct soap *soap, ns2__merchant *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__merchant(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__merchant(struct soap *soap, const char *URL, ns2__merchant *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__merchant(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__merchant(struct soap *soap, ns2__merchant *p)
{
	if (::soap_read_ns2__merchant(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__AbortReply_DEFINED
#define SOAP_TYPE_ns2__AbortReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AbortReply(struct soap*, const char*, int, const ns2__AbortReply *, const char*);
SOAP_FMAC3 ns2__AbortReply * SOAP_FMAC4 soap_in_ns2__AbortReply(struct soap*, const char*, ns2__AbortReply *, const char*);
SOAP_FMAC1 ns2__AbortReply * SOAP_FMAC2 soap_instantiate_ns2__AbortReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AbortReply * soap_new_ns2__AbortReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__AbortReply(soap, n, NULL, NULL, NULL);
}

inline ns2__AbortReply * soap_new_req_ns2__AbortReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__AbortReply *_p = ::soap_new_ns2__AbortReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AbortReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__AbortReply * soap_new_set_ns2__AbortReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *requestDateTime,
	std::string *reason)
{
	ns2__AbortReply *_p = ::soap_new_ns2__AbortReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AbortReply::reasonCode = reasonCode;
		_p->ns2__AbortReply::requestDateTime = requestDateTime;
		_p->ns2__AbortReply::reason = reason;
	}
	return _p;
}

inline int soap_write_ns2__AbortReply(struct soap *soap, ns2__AbortReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AbortReply", p->soap_type() == SOAP_TYPE_ns2__AbortReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__AbortReply(struct soap *soap, const char *URL, ns2__AbortReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AbortReply", p->soap_type() == SOAP_TYPE_ns2__AbortReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__AbortReply(struct soap *soap, const char *URL, ns2__AbortReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AbortReply", p->soap_type() == SOAP_TYPE_ns2__AbortReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__AbortReply(struct soap *soap, const char *URL, ns2__AbortReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AbortReply", p->soap_type() == SOAP_TYPE_ns2__AbortReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__AbortReply * SOAP_FMAC4 soap_get_ns2__AbortReply(struct soap*, ns2__AbortReply *, const char*, const char*);

inline int soap_read_ns2__AbortReply(struct soap *soap, ns2__AbortReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__AbortReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__AbortReply(struct soap *soap, const char *URL, ns2__AbortReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__AbortReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__AbortReply(struct soap *soap, ns2__AbortReply *p)
{
	if (::soap_read_ns2__AbortReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__AbortService_DEFINED
#define SOAP_TYPE_ns2__AbortService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AbortService(struct soap*, const char*, int, const ns2__AbortService *, const char*);
SOAP_FMAC3 ns2__AbortService * SOAP_FMAC4 soap_in_ns2__AbortService(struct soap*, const char*, ns2__AbortService *, const char*);
SOAP_FMAC1 ns2__AbortService * SOAP_FMAC2 soap_instantiate_ns2__AbortService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AbortService * soap_new_ns2__AbortService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__AbortService(soap, n, NULL, NULL, NULL);
}

inline ns2__AbortService * soap_new_req_ns2__AbortService(
	struct soap *soap,
	const std::string& run)
{
	ns2__AbortService *_p = ::soap_new_ns2__AbortService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AbortService::run = run;
	}
	return _p;
}

inline ns2__AbortService * soap_new_set_ns2__AbortService(
	struct soap *soap,
	std::string *authRequestID,
	std::string *creditRequestID,
	std::string *cardholderVerificationMethod,
	std::string *commerceIndicator,
	const std::string& run)
{
	ns2__AbortService *_p = ::soap_new_ns2__AbortService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AbortService::authRequestID = authRequestID;
		_p->ns2__AbortService::creditRequestID = creditRequestID;
		_p->ns2__AbortService::cardholderVerificationMethod = cardholderVerificationMethod;
		_p->ns2__AbortService::commerceIndicator = commerceIndicator;
		_p->ns2__AbortService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__AbortService(struct soap *soap, ns2__AbortService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AbortService", p->soap_type() == SOAP_TYPE_ns2__AbortService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__AbortService(struct soap *soap, const char *URL, ns2__AbortService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AbortService", p->soap_type() == SOAP_TYPE_ns2__AbortService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__AbortService(struct soap *soap, const char *URL, ns2__AbortService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AbortService", p->soap_type() == SOAP_TYPE_ns2__AbortService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__AbortService(struct soap *soap, const char *URL, ns2__AbortService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AbortService", p->soap_type() == SOAP_TYPE_ns2__AbortService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__AbortService * SOAP_FMAC4 soap_get_ns2__AbortService(struct soap*, ns2__AbortService *, const char*, const char*);

inline int soap_read_ns2__AbortService(struct soap *soap, ns2__AbortService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__AbortService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__AbortService(struct soap *soap, const char *URL, ns2__AbortService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__AbortService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__AbortService(struct soap *soap, ns2__AbortService *p)
{
	if (::soap_read_ns2__AbortService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__mPOS_DEFINED
#define SOAP_TYPE_ns2__mPOS_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__mPOS(struct soap*, const char*, int, const ns2__mPOS *, const char*);
SOAP_FMAC3 ns2__mPOS * SOAP_FMAC4 soap_in_ns2__mPOS(struct soap*, const char*, ns2__mPOS *, const char*);
SOAP_FMAC1 ns2__mPOS * SOAP_FMAC2 soap_instantiate_ns2__mPOS(struct soap*, int, const char*, const char*, size_t*);

inline ns2__mPOS * soap_new_ns2__mPOS(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__mPOS(soap, n, NULL, NULL, NULL);
}

inline ns2__mPOS * soap_new_req_ns2__mPOS(
	struct soap *soap)
{
	ns2__mPOS *_p = ::soap_new_ns2__mPOS(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__mPOS * soap_new_set_ns2__mPOS(
	struct soap *soap,
	std::string *deviceType)
{
	ns2__mPOS *_p = ::soap_new_ns2__mPOS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__mPOS::deviceType = deviceType;
	}
	return _p;
}

inline int soap_write_ns2__mPOS(struct soap *soap, ns2__mPOS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:mPOS", p->soap_type() == SOAP_TYPE_ns2__mPOS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__mPOS(struct soap *soap, const char *URL, ns2__mPOS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:mPOS", p->soap_type() == SOAP_TYPE_ns2__mPOS ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__mPOS(struct soap *soap, const char *URL, ns2__mPOS const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:mPOS", p->soap_type() == SOAP_TYPE_ns2__mPOS ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__mPOS(struct soap *soap, const char *URL, ns2__mPOS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:mPOS", p->soap_type() == SOAP_TYPE_ns2__mPOS ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__mPOS * SOAP_FMAC4 soap_get_ns2__mPOS(struct soap*, ns2__mPOS *, const char*, const char*);

inline int soap_read_ns2__mPOS(struct soap *soap, ns2__mPOS *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__mPOS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__mPOS(struct soap *soap, const char *URL, ns2__mPOS *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__mPOS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__mPOS(struct soap *soap, ns2__mPOS *p)
{
	if (::soap_read_ns2__mPOS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__GiftCardRefundReply_DEFINED
#define SOAP_TYPE_ns2__GiftCardRefundReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GiftCardRefundReply(struct soap*, const char*, int, const ns2__GiftCardRefundReply *, const char*);
SOAP_FMAC3 ns2__GiftCardRefundReply * SOAP_FMAC4 soap_in_ns2__GiftCardRefundReply(struct soap*, const char*, ns2__GiftCardRefundReply *, const char*);
SOAP_FMAC1 ns2__GiftCardRefundReply * SOAP_FMAC2 soap_instantiate_ns2__GiftCardRefundReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GiftCardRefundReply * soap_new_ns2__GiftCardRefundReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__GiftCardRefundReply(soap, n, NULL, NULL, NULL);
}

inline ns2__GiftCardRefundReply * soap_new_req_ns2__GiftCardRefundReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__GiftCardRefundReply *_p = ::soap_new_ns2__GiftCardRefundReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardRefundReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__GiftCardRefundReply * soap_new_set_ns2__GiftCardRefundReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *authorizationCode,
	std::string *processorResponse,
	std::string *requestDateTime,
	std::string *reconciliationID)
{
	ns2__GiftCardRefundReply *_p = ::soap_new_ns2__GiftCardRefundReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardRefundReply::reasonCode = reasonCode;
		_p->ns2__GiftCardRefundReply::authorizationCode = authorizationCode;
		_p->ns2__GiftCardRefundReply::processorResponse = processorResponse;
		_p->ns2__GiftCardRefundReply::requestDateTime = requestDateTime;
		_p->ns2__GiftCardRefundReply::reconciliationID = reconciliationID;
	}
	return _p;
}

inline int soap_write_ns2__GiftCardRefundReply(struct soap *soap, ns2__GiftCardRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardRefundReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardRefundReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__GiftCardRefundReply(struct soap *soap, const char *URL, ns2__GiftCardRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardRefundReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardRefundReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__GiftCardRefundReply(struct soap *soap, const char *URL, ns2__GiftCardRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardRefundReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardRefundReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__GiftCardRefundReply(struct soap *soap, const char *URL, ns2__GiftCardRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardRefundReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardRefundReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__GiftCardRefundReply * SOAP_FMAC4 soap_get_ns2__GiftCardRefundReply(struct soap*, ns2__GiftCardRefundReply *, const char*, const char*);

inline int soap_read_ns2__GiftCardRefundReply(struct soap *soap, ns2__GiftCardRefundReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__GiftCardRefundReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__GiftCardRefundReply(struct soap *soap, const char *URL, ns2__GiftCardRefundReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__GiftCardRefundReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__GiftCardRefundReply(struct soap *soap, ns2__GiftCardRefundReply *p)
{
	if (::soap_read_ns2__GiftCardRefundReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__GiftCardReloadReply_DEFINED
#define SOAP_TYPE_ns2__GiftCardReloadReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GiftCardReloadReply(struct soap*, const char*, int, const ns2__GiftCardReloadReply *, const char*);
SOAP_FMAC3 ns2__GiftCardReloadReply * SOAP_FMAC4 soap_in_ns2__GiftCardReloadReply(struct soap*, const char*, ns2__GiftCardReloadReply *, const char*);
SOAP_FMAC1 ns2__GiftCardReloadReply * SOAP_FMAC2 soap_instantiate_ns2__GiftCardReloadReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GiftCardReloadReply * soap_new_ns2__GiftCardReloadReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__GiftCardReloadReply(soap, n, NULL, NULL, NULL);
}

inline ns2__GiftCardReloadReply * soap_new_req_ns2__GiftCardReloadReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__GiftCardReloadReply *_p = ::soap_new_ns2__GiftCardReloadReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardReloadReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__GiftCardReloadReply * soap_new_set_ns2__GiftCardReloadReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *authorizationCode,
	std::string *processorResponse,
	std::string *requestDateTime,
	std::string *reconciliationID)
{
	ns2__GiftCardReloadReply *_p = ::soap_new_ns2__GiftCardReloadReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardReloadReply::reasonCode = reasonCode;
		_p->ns2__GiftCardReloadReply::authorizationCode = authorizationCode;
		_p->ns2__GiftCardReloadReply::processorResponse = processorResponse;
		_p->ns2__GiftCardReloadReply::requestDateTime = requestDateTime;
		_p->ns2__GiftCardReloadReply::reconciliationID = reconciliationID;
	}
	return _p;
}

inline int soap_write_ns2__GiftCardReloadReply(struct soap *soap, ns2__GiftCardReloadReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardReloadReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardReloadReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__GiftCardReloadReply(struct soap *soap, const char *URL, ns2__GiftCardReloadReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardReloadReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardReloadReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__GiftCardReloadReply(struct soap *soap, const char *URL, ns2__GiftCardReloadReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardReloadReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardReloadReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__GiftCardReloadReply(struct soap *soap, const char *URL, ns2__GiftCardReloadReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardReloadReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardReloadReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__GiftCardReloadReply * SOAP_FMAC4 soap_get_ns2__GiftCardReloadReply(struct soap*, ns2__GiftCardReloadReply *, const char*, const char*);

inline int soap_read_ns2__GiftCardReloadReply(struct soap *soap, ns2__GiftCardReloadReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__GiftCardReloadReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__GiftCardReloadReply(struct soap *soap, const char *URL, ns2__GiftCardReloadReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__GiftCardReloadReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__GiftCardReloadReply(struct soap *soap, ns2__GiftCardReloadReply *p)
{
	if (::soap_read_ns2__GiftCardReloadReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__GiftCardVoidReply_DEFINED
#define SOAP_TYPE_ns2__GiftCardVoidReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GiftCardVoidReply(struct soap*, const char*, int, const ns2__GiftCardVoidReply *, const char*);
SOAP_FMAC3 ns2__GiftCardVoidReply * SOAP_FMAC4 soap_in_ns2__GiftCardVoidReply(struct soap*, const char*, ns2__GiftCardVoidReply *, const char*);
SOAP_FMAC1 ns2__GiftCardVoidReply * SOAP_FMAC2 soap_instantiate_ns2__GiftCardVoidReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GiftCardVoidReply * soap_new_ns2__GiftCardVoidReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__GiftCardVoidReply(soap, n, NULL, NULL, NULL);
}

inline ns2__GiftCardVoidReply * soap_new_req_ns2__GiftCardVoidReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__GiftCardVoidReply *_p = ::soap_new_ns2__GiftCardVoidReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardVoidReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__GiftCardVoidReply * soap_new_set_ns2__GiftCardVoidReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *authorizationCode,
	std::string *processorResponse,
	std::string *requestDeTime,
	std::string *reconciliationID)
{
	ns2__GiftCardVoidReply *_p = ::soap_new_ns2__GiftCardVoidReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardVoidReply::reasonCode = reasonCode;
		_p->ns2__GiftCardVoidReply::authorizationCode = authorizationCode;
		_p->ns2__GiftCardVoidReply::processorResponse = processorResponse;
		_p->ns2__GiftCardVoidReply::requestDeTime = requestDeTime;
		_p->ns2__GiftCardVoidReply::reconciliationID = reconciliationID;
	}
	return _p;
}

inline int soap_write_ns2__GiftCardVoidReply(struct soap *soap, ns2__GiftCardVoidReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardVoidReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardVoidReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__GiftCardVoidReply(struct soap *soap, const char *URL, ns2__GiftCardVoidReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardVoidReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardVoidReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__GiftCardVoidReply(struct soap *soap, const char *URL, ns2__GiftCardVoidReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardVoidReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardVoidReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__GiftCardVoidReply(struct soap *soap, const char *URL, ns2__GiftCardVoidReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardVoidReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardVoidReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__GiftCardVoidReply * SOAP_FMAC4 soap_get_ns2__GiftCardVoidReply(struct soap*, ns2__GiftCardVoidReply *, const char*, const char*);

inline int soap_read_ns2__GiftCardVoidReply(struct soap *soap, ns2__GiftCardVoidReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__GiftCardVoidReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__GiftCardVoidReply(struct soap *soap, const char *URL, ns2__GiftCardVoidReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__GiftCardVoidReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__GiftCardVoidReply(struct soap *soap, ns2__GiftCardVoidReply *p)
{
	if (::soap_read_ns2__GiftCardVoidReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__GiftCardReversalReply_DEFINED
#define SOAP_TYPE_ns2__GiftCardReversalReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GiftCardReversalReply(struct soap*, const char*, int, const ns2__GiftCardReversalReply *, const char*);
SOAP_FMAC3 ns2__GiftCardReversalReply * SOAP_FMAC4 soap_in_ns2__GiftCardReversalReply(struct soap*, const char*, ns2__GiftCardReversalReply *, const char*);
SOAP_FMAC1 ns2__GiftCardReversalReply * SOAP_FMAC2 soap_instantiate_ns2__GiftCardReversalReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GiftCardReversalReply * soap_new_ns2__GiftCardReversalReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__GiftCardReversalReply(soap, n, NULL, NULL, NULL);
}

inline ns2__GiftCardReversalReply * soap_new_req_ns2__GiftCardReversalReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__GiftCardReversalReply *_p = ::soap_new_ns2__GiftCardReversalReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardReversalReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__GiftCardReversalReply * soap_new_set_ns2__GiftCardReversalReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *authorizationCode,
	std::string *processorResponse,
	std::string *requestDateTime,
	std::string *reconciliationID)
{
	ns2__GiftCardReversalReply *_p = ::soap_new_ns2__GiftCardReversalReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardReversalReply::reasonCode = reasonCode;
		_p->ns2__GiftCardReversalReply::authorizationCode = authorizationCode;
		_p->ns2__GiftCardReversalReply::processorResponse = processorResponse;
		_p->ns2__GiftCardReversalReply::requestDateTime = requestDateTime;
		_p->ns2__GiftCardReversalReply::reconciliationID = reconciliationID;
	}
	return _p;
}

inline int soap_write_ns2__GiftCardReversalReply(struct soap *soap, ns2__GiftCardReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardReversalReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardReversalReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__GiftCardReversalReply(struct soap *soap, const char *URL, ns2__GiftCardReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardReversalReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardReversalReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__GiftCardReversalReply(struct soap *soap, const char *URL, ns2__GiftCardReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardReversalReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardReversalReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__GiftCardReversalReply(struct soap *soap, const char *URL, ns2__GiftCardReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardReversalReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardReversalReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__GiftCardReversalReply * SOAP_FMAC4 soap_get_ns2__GiftCardReversalReply(struct soap*, ns2__GiftCardReversalReply *, const char*, const char*);

inline int soap_read_ns2__GiftCardReversalReply(struct soap *soap, ns2__GiftCardReversalReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__GiftCardReversalReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__GiftCardReversalReply(struct soap *soap, const char *URL, ns2__GiftCardReversalReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__GiftCardReversalReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__GiftCardReversalReply(struct soap *soap, ns2__GiftCardReversalReply *p)
{
	if (::soap_read_ns2__GiftCardReversalReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__GiftCardRedemptionReply_DEFINED
#define SOAP_TYPE_ns2__GiftCardRedemptionReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GiftCardRedemptionReply(struct soap*, const char*, int, const ns2__GiftCardRedemptionReply *, const char*);
SOAP_FMAC3 ns2__GiftCardRedemptionReply * SOAP_FMAC4 soap_in_ns2__GiftCardRedemptionReply(struct soap*, const char*, ns2__GiftCardRedemptionReply *, const char*);
SOAP_FMAC1 ns2__GiftCardRedemptionReply * SOAP_FMAC2 soap_instantiate_ns2__GiftCardRedemptionReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GiftCardRedemptionReply * soap_new_ns2__GiftCardRedemptionReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__GiftCardRedemptionReply(soap, n, NULL, NULL, NULL);
}

inline ns2__GiftCardRedemptionReply * soap_new_req_ns2__GiftCardRedemptionReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__GiftCardRedemptionReply *_p = ::soap_new_ns2__GiftCardRedemptionReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardRedemptionReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__GiftCardRedemptionReply * soap_new_set_ns2__GiftCardRedemptionReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *authorizationCode,
	std::string *processorResponse,
	std::string *requestDateTime,
	std::string *reconciliationID)
{
	ns2__GiftCardRedemptionReply *_p = ::soap_new_ns2__GiftCardRedemptionReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardRedemptionReply::reasonCode = reasonCode;
		_p->ns2__GiftCardRedemptionReply::authorizationCode = authorizationCode;
		_p->ns2__GiftCardRedemptionReply::processorResponse = processorResponse;
		_p->ns2__GiftCardRedemptionReply::requestDateTime = requestDateTime;
		_p->ns2__GiftCardRedemptionReply::reconciliationID = reconciliationID;
	}
	return _p;
}

inline int soap_write_ns2__GiftCardRedemptionReply(struct soap *soap, ns2__GiftCardRedemptionReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardRedemptionReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardRedemptionReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__GiftCardRedemptionReply(struct soap *soap, const char *URL, ns2__GiftCardRedemptionReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardRedemptionReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardRedemptionReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__GiftCardRedemptionReply(struct soap *soap, const char *URL, ns2__GiftCardRedemptionReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardRedemptionReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardRedemptionReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__GiftCardRedemptionReply(struct soap *soap, const char *URL, ns2__GiftCardRedemptionReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardRedemptionReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardRedemptionReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__GiftCardRedemptionReply * SOAP_FMAC4 soap_get_ns2__GiftCardRedemptionReply(struct soap*, ns2__GiftCardRedemptionReply *, const char*, const char*);

inline int soap_read_ns2__GiftCardRedemptionReply(struct soap *soap, ns2__GiftCardRedemptionReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__GiftCardRedemptionReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__GiftCardRedemptionReply(struct soap *soap, const char *URL, ns2__GiftCardRedemptionReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__GiftCardRedemptionReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__GiftCardRedemptionReply(struct soap *soap, ns2__GiftCardRedemptionReply *p)
{
	if (::soap_read_ns2__GiftCardRedemptionReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__GiftCardBalanceInquiryReply_DEFINED
#define SOAP_TYPE_ns2__GiftCardBalanceInquiryReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GiftCardBalanceInquiryReply(struct soap*, const char*, int, const ns2__GiftCardBalanceInquiryReply *, const char*);
SOAP_FMAC3 ns2__GiftCardBalanceInquiryReply * SOAP_FMAC4 soap_in_ns2__GiftCardBalanceInquiryReply(struct soap*, const char*, ns2__GiftCardBalanceInquiryReply *, const char*);
SOAP_FMAC1 ns2__GiftCardBalanceInquiryReply * SOAP_FMAC2 soap_instantiate_ns2__GiftCardBalanceInquiryReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GiftCardBalanceInquiryReply * soap_new_ns2__GiftCardBalanceInquiryReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__GiftCardBalanceInquiryReply(soap, n, NULL, NULL, NULL);
}

inline ns2__GiftCardBalanceInquiryReply * soap_new_req_ns2__GiftCardBalanceInquiryReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__GiftCardBalanceInquiryReply *_p = ::soap_new_ns2__GiftCardBalanceInquiryReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardBalanceInquiryReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__GiftCardBalanceInquiryReply * soap_new_set_ns2__GiftCardBalanceInquiryReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *authorizationCode,
	std::string *processorResponse,
	std::string *requestDateTime,
	std::string *reconciliationID)
{
	ns2__GiftCardBalanceInquiryReply *_p = ::soap_new_ns2__GiftCardBalanceInquiryReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardBalanceInquiryReply::reasonCode = reasonCode;
		_p->ns2__GiftCardBalanceInquiryReply::authorizationCode = authorizationCode;
		_p->ns2__GiftCardBalanceInquiryReply::processorResponse = processorResponse;
		_p->ns2__GiftCardBalanceInquiryReply::requestDateTime = requestDateTime;
		_p->ns2__GiftCardBalanceInquiryReply::reconciliationID = reconciliationID;
	}
	return _p;
}

inline int soap_write_ns2__GiftCardBalanceInquiryReply(struct soap *soap, ns2__GiftCardBalanceInquiryReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardBalanceInquiryReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardBalanceInquiryReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__GiftCardBalanceInquiryReply(struct soap *soap, const char *URL, ns2__GiftCardBalanceInquiryReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardBalanceInquiryReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardBalanceInquiryReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__GiftCardBalanceInquiryReply(struct soap *soap, const char *URL, ns2__GiftCardBalanceInquiryReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardBalanceInquiryReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardBalanceInquiryReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__GiftCardBalanceInquiryReply(struct soap *soap, const char *URL, ns2__GiftCardBalanceInquiryReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardBalanceInquiryReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardBalanceInquiryReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__GiftCardBalanceInquiryReply * SOAP_FMAC4 soap_get_ns2__GiftCardBalanceInquiryReply(struct soap*, ns2__GiftCardBalanceInquiryReply *, const char*, const char*);

inline int soap_read_ns2__GiftCardBalanceInquiryReply(struct soap *soap, ns2__GiftCardBalanceInquiryReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__GiftCardBalanceInquiryReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__GiftCardBalanceInquiryReply(struct soap *soap, const char *URL, ns2__GiftCardBalanceInquiryReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__GiftCardBalanceInquiryReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__GiftCardBalanceInquiryReply(struct soap *soap, ns2__GiftCardBalanceInquiryReply *p)
{
	if (::soap_read_ns2__GiftCardBalanceInquiryReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__GiftCardActivationReply_DEFINED
#define SOAP_TYPE_ns2__GiftCardActivationReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GiftCardActivationReply(struct soap*, const char*, int, const ns2__GiftCardActivationReply *, const char*);
SOAP_FMAC3 ns2__GiftCardActivationReply * SOAP_FMAC4 soap_in_ns2__GiftCardActivationReply(struct soap*, const char*, ns2__GiftCardActivationReply *, const char*);
SOAP_FMAC1 ns2__GiftCardActivationReply * SOAP_FMAC2 soap_instantiate_ns2__GiftCardActivationReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GiftCardActivationReply * soap_new_ns2__GiftCardActivationReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__GiftCardActivationReply(soap, n, NULL, NULL, NULL);
}

inline ns2__GiftCardActivationReply * soap_new_req_ns2__GiftCardActivationReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__GiftCardActivationReply *_p = ::soap_new_ns2__GiftCardActivationReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardActivationReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__GiftCardActivationReply * soap_new_set_ns2__GiftCardActivationReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *authorizationCode,
	std::string *processorResponse,
	std::string *requestDateTime,
	std::string *reconciliationID)
{
	ns2__GiftCardActivationReply *_p = ::soap_new_ns2__GiftCardActivationReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardActivationReply::reasonCode = reasonCode;
		_p->ns2__GiftCardActivationReply::authorizationCode = authorizationCode;
		_p->ns2__GiftCardActivationReply::processorResponse = processorResponse;
		_p->ns2__GiftCardActivationReply::requestDateTime = requestDateTime;
		_p->ns2__GiftCardActivationReply::reconciliationID = reconciliationID;
	}
	return _p;
}

inline int soap_write_ns2__GiftCardActivationReply(struct soap *soap, ns2__GiftCardActivationReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardActivationReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardActivationReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__GiftCardActivationReply(struct soap *soap, const char *URL, ns2__GiftCardActivationReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardActivationReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardActivationReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__GiftCardActivationReply(struct soap *soap, const char *URL, ns2__GiftCardActivationReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardActivationReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardActivationReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__GiftCardActivationReply(struct soap *soap, const char *URL, ns2__GiftCardActivationReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardActivationReply", p->soap_type() == SOAP_TYPE_ns2__GiftCardActivationReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__GiftCardActivationReply * SOAP_FMAC4 soap_get_ns2__GiftCardActivationReply(struct soap*, ns2__GiftCardActivationReply *, const char*, const char*);

inline int soap_read_ns2__GiftCardActivationReply(struct soap *soap, ns2__GiftCardActivationReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__GiftCardActivationReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__GiftCardActivationReply(struct soap *soap, const char *URL, ns2__GiftCardActivationReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__GiftCardActivationReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__GiftCardActivationReply(struct soap *soap, ns2__GiftCardActivationReply *p)
{
	if (::soap_read_ns2__GiftCardActivationReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__GiftCard_DEFINED
#define SOAP_TYPE_ns2__GiftCard_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GiftCard(struct soap*, const char*, int, const ns2__GiftCard *, const char*);
SOAP_FMAC3 ns2__GiftCard * SOAP_FMAC4 soap_in_ns2__GiftCard(struct soap*, const char*, ns2__GiftCard *, const char*);
SOAP_FMAC1 ns2__GiftCard * SOAP_FMAC2 soap_instantiate_ns2__GiftCard(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GiftCard * soap_new_ns2__GiftCard(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__GiftCard(soap, n, NULL, NULL, NULL);
}

inline ns2__GiftCard * soap_new_req_ns2__GiftCard(
	struct soap *soap)
{
	ns2__GiftCard *_p = ::soap_new_ns2__GiftCard(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__GiftCard * soap_new_set_ns2__GiftCard(
	struct soap *soap,
	std::string *originalRequestID,
	std::string *redemptionType,
	std::string *count,
	std::string *escheatable,
	std::string *groupID,
	std::string *transactionPostingDate,
	std::string *balanceCurrency,
	std::string *previousBalance,
	std::string *currentBalance,
	std::string *baseCurrencyPreviousBalance,
	std::string *baseCurrencyCurrentBalance,
	std::string *baseCurrencyCashbackAmount,
	std::string *baseCurrency,
	std::string *expirationDate,
	std::string *exchangeRate,
	std::string *bonusAmount,
	std::string *discountAmount,
	std::string *extendedAccountNumber,
	std::string *additionalAccountNumber,
	std::string *physicalCard,
	std::string *returnExtendedAccountNumber,
	std::string *promoCode)
{
	ns2__GiftCard *_p = ::soap_new_ns2__GiftCard(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCard::originalRequestID = originalRequestID;
		_p->ns2__GiftCard::redemptionType = redemptionType;
		_p->ns2__GiftCard::count = count;
		_p->ns2__GiftCard::escheatable = escheatable;
		_p->ns2__GiftCard::groupID = groupID;
		_p->ns2__GiftCard::transactionPostingDate = transactionPostingDate;
		_p->ns2__GiftCard::balanceCurrency = balanceCurrency;
		_p->ns2__GiftCard::previousBalance = previousBalance;
		_p->ns2__GiftCard::currentBalance = currentBalance;
		_p->ns2__GiftCard::baseCurrencyPreviousBalance = baseCurrencyPreviousBalance;
		_p->ns2__GiftCard::baseCurrencyCurrentBalance = baseCurrencyCurrentBalance;
		_p->ns2__GiftCard::baseCurrencyCashbackAmount = baseCurrencyCashbackAmount;
		_p->ns2__GiftCard::baseCurrency = baseCurrency;
		_p->ns2__GiftCard::expirationDate = expirationDate;
		_p->ns2__GiftCard::exchangeRate = exchangeRate;
		_p->ns2__GiftCard::bonusAmount = bonusAmount;
		_p->ns2__GiftCard::discountAmount = discountAmount;
		_p->ns2__GiftCard::extendedAccountNumber = extendedAccountNumber;
		_p->ns2__GiftCard::additionalAccountNumber = additionalAccountNumber;
		_p->ns2__GiftCard::physicalCard = physicalCard;
		_p->ns2__GiftCard::returnExtendedAccountNumber = returnExtendedAccountNumber;
		_p->ns2__GiftCard::promoCode = promoCode;
	}
	return _p;
}

inline int soap_write_ns2__GiftCard(struct soap *soap, ns2__GiftCard const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCard", p->soap_type() == SOAP_TYPE_ns2__GiftCard ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__GiftCard(struct soap *soap, const char *URL, ns2__GiftCard const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCard", p->soap_type() == SOAP_TYPE_ns2__GiftCard ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__GiftCard(struct soap *soap, const char *URL, ns2__GiftCard const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCard", p->soap_type() == SOAP_TYPE_ns2__GiftCard ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__GiftCard(struct soap *soap, const char *URL, ns2__GiftCard const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCard", p->soap_type() == SOAP_TYPE_ns2__GiftCard ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__GiftCard * SOAP_FMAC4 soap_get_ns2__GiftCard(struct soap*, ns2__GiftCard *, const char*, const char*);

inline int soap_read_ns2__GiftCard(struct soap *soap, ns2__GiftCard *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__GiftCard(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__GiftCard(struct soap *soap, const char *URL, ns2__GiftCard *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__GiftCard(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__GiftCard(struct soap *soap, ns2__GiftCard *p)
{
	if (::soap_read_ns2__GiftCard(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__GiftCardRefundService_DEFINED
#define SOAP_TYPE_ns2__GiftCardRefundService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GiftCardRefundService(struct soap*, const char*, int, const ns2__GiftCardRefundService *, const char*);
SOAP_FMAC3 ns2__GiftCardRefundService * SOAP_FMAC4 soap_in_ns2__GiftCardRefundService(struct soap*, const char*, ns2__GiftCardRefundService *, const char*);
SOAP_FMAC1 ns2__GiftCardRefundService * SOAP_FMAC2 soap_instantiate_ns2__GiftCardRefundService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GiftCardRefundService * soap_new_ns2__GiftCardRefundService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__GiftCardRefundService(soap, n, NULL, NULL, NULL);
}

inline ns2__GiftCardRefundService * soap_new_req_ns2__GiftCardRefundService(
	struct soap *soap,
	const std::string& run)
{
	ns2__GiftCardRefundService *_p = ::soap_new_ns2__GiftCardRefundService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardRefundService::run = run;
	}
	return _p;
}

inline ns2__GiftCardRefundService * soap_new_set_ns2__GiftCardRefundService(
	struct soap *soap,
	std::string *reconciliationID,
	std::string *commerceIndicator,
	const std::string& run)
{
	ns2__GiftCardRefundService *_p = ::soap_new_ns2__GiftCardRefundService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardRefundService::reconciliationID = reconciliationID;
		_p->ns2__GiftCardRefundService::commerceIndicator = commerceIndicator;
		_p->ns2__GiftCardRefundService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__GiftCardRefundService(struct soap *soap, ns2__GiftCardRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardRefundService", p->soap_type() == SOAP_TYPE_ns2__GiftCardRefundService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__GiftCardRefundService(struct soap *soap, const char *URL, ns2__GiftCardRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardRefundService", p->soap_type() == SOAP_TYPE_ns2__GiftCardRefundService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__GiftCardRefundService(struct soap *soap, const char *URL, ns2__GiftCardRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardRefundService", p->soap_type() == SOAP_TYPE_ns2__GiftCardRefundService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__GiftCardRefundService(struct soap *soap, const char *URL, ns2__GiftCardRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardRefundService", p->soap_type() == SOAP_TYPE_ns2__GiftCardRefundService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__GiftCardRefundService * SOAP_FMAC4 soap_get_ns2__GiftCardRefundService(struct soap*, ns2__GiftCardRefundService *, const char*, const char*);

inline int soap_read_ns2__GiftCardRefundService(struct soap *soap, ns2__GiftCardRefundService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__GiftCardRefundService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__GiftCardRefundService(struct soap *soap, const char *URL, ns2__GiftCardRefundService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__GiftCardRefundService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__GiftCardRefundService(struct soap *soap, ns2__GiftCardRefundService *p)
{
	if (::soap_read_ns2__GiftCardRefundService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__GiftCardReloadService_DEFINED
#define SOAP_TYPE_ns2__GiftCardReloadService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GiftCardReloadService(struct soap*, const char*, int, const ns2__GiftCardReloadService *, const char*);
SOAP_FMAC3 ns2__GiftCardReloadService * SOAP_FMAC4 soap_in_ns2__GiftCardReloadService(struct soap*, const char*, ns2__GiftCardReloadService *, const char*);
SOAP_FMAC1 ns2__GiftCardReloadService * SOAP_FMAC2 soap_instantiate_ns2__GiftCardReloadService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GiftCardReloadService * soap_new_ns2__GiftCardReloadService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__GiftCardReloadService(soap, n, NULL, NULL, NULL);
}

inline ns2__GiftCardReloadService * soap_new_req_ns2__GiftCardReloadService(
	struct soap *soap,
	const std::string& run)
{
	ns2__GiftCardReloadService *_p = ::soap_new_ns2__GiftCardReloadService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardReloadService::run = run;
	}
	return _p;
}

inline ns2__GiftCardReloadService * soap_new_set_ns2__GiftCardReloadService(
	struct soap *soap,
	std::string *reconciliationID,
	std::string *commerceIndicator,
	const std::string& run)
{
	ns2__GiftCardReloadService *_p = ::soap_new_ns2__GiftCardReloadService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardReloadService::reconciliationID = reconciliationID;
		_p->ns2__GiftCardReloadService::commerceIndicator = commerceIndicator;
		_p->ns2__GiftCardReloadService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__GiftCardReloadService(struct soap *soap, ns2__GiftCardReloadService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardReloadService", p->soap_type() == SOAP_TYPE_ns2__GiftCardReloadService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__GiftCardReloadService(struct soap *soap, const char *URL, ns2__GiftCardReloadService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardReloadService", p->soap_type() == SOAP_TYPE_ns2__GiftCardReloadService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__GiftCardReloadService(struct soap *soap, const char *URL, ns2__GiftCardReloadService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardReloadService", p->soap_type() == SOAP_TYPE_ns2__GiftCardReloadService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__GiftCardReloadService(struct soap *soap, const char *URL, ns2__GiftCardReloadService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardReloadService", p->soap_type() == SOAP_TYPE_ns2__GiftCardReloadService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__GiftCardReloadService * SOAP_FMAC4 soap_get_ns2__GiftCardReloadService(struct soap*, ns2__GiftCardReloadService *, const char*, const char*);

inline int soap_read_ns2__GiftCardReloadService(struct soap *soap, ns2__GiftCardReloadService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__GiftCardReloadService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__GiftCardReloadService(struct soap *soap, const char *URL, ns2__GiftCardReloadService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__GiftCardReloadService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__GiftCardReloadService(struct soap *soap, ns2__GiftCardReloadService *p)
{
	if (::soap_read_ns2__GiftCardReloadService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__GiftCardRedemptionService_DEFINED
#define SOAP_TYPE_ns2__GiftCardRedemptionService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GiftCardRedemptionService(struct soap*, const char*, int, const ns2__GiftCardRedemptionService *, const char*);
SOAP_FMAC3 ns2__GiftCardRedemptionService * SOAP_FMAC4 soap_in_ns2__GiftCardRedemptionService(struct soap*, const char*, ns2__GiftCardRedemptionService *, const char*);
SOAP_FMAC1 ns2__GiftCardRedemptionService * SOAP_FMAC2 soap_instantiate_ns2__GiftCardRedemptionService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GiftCardRedemptionService * soap_new_ns2__GiftCardRedemptionService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__GiftCardRedemptionService(soap, n, NULL, NULL, NULL);
}

inline ns2__GiftCardRedemptionService * soap_new_req_ns2__GiftCardRedemptionService(
	struct soap *soap,
	const std::string& run)
{
	ns2__GiftCardRedemptionService *_p = ::soap_new_ns2__GiftCardRedemptionService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardRedemptionService::run = run;
	}
	return _p;
}

inline ns2__GiftCardRedemptionService * soap_new_set_ns2__GiftCardRedemptionService(
	struct soap *soap,
	std::string *reconciliationID,
	std::string *commerceIndicator,
	const std::string& run)
{
	ns2__GiftCardRedemptionService *_p = ::soap_new_ns2__GiftCardRedemptionService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardRedemptionService::reconciliationID = reconciliationID;
		_p->ns2__GiftCardRedemptionService::commerceIndicator = commerceIndicator;
		_p->ns2__GiftCardRedemptionService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__GiftCardRedemptionService(struct soap *soap, ns2__GiftCardRedemptionService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardRedemptionService", p->soap_type() == SOAP_TYPE_ns2__GiftCardRedemptionService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__GiftCardRedemptionService(struct soap *soap, const char *URL, ns2__GiftCardRedemptionService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardRedemptionService", p->soap_type() == SOAP_TYPE_ns2__GiftCardRedemptionService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__GiftCardRedemptionService(struct soap *soap, const char *URL, ns2__GiftCardRedemptionService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardRedemptionService", p->soap_type() == SOAP_TYPE_ns2__GiftCardRedemptionService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__GiftCardRedemptionService(struct soap *soap, const char *URL, ns2__GiftCardRedemptionService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardRedemptionService", p->soap_type() == SOAP_TYPE_ns2__GiftCardRedemptionService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__GiftCardRedemptionService * SOAP_FMAC4 soap_get_ns2__GiftCardRedemptionService(struct soap*, ns2__GiftCardRedemptionService *, const char*, const char*);

inline int soap_read_ns2__GiftCardRedemptionService(struct soap *soap, ns2__GiftCardRedemptionService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__GiftCardRedemptionService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__GiftCardRedemptionService(struct soap *soap, const char *URL, ns2__GiftCardRedemptionService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__GiftCardRedemptionService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__GiftCardRedemptionService(struct soap *soap, ns2__GiftCardRedemptionService *p)
{
	if (::soap_read_ns2__GiftCardRedemptionService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__GiftCardReversalService_DEFINED
#define SOAP_TYPE_ns2__GiftCardReversalService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GiftCardReversalService(struct soap*, const char*, int, const ns2__GiftCardReversalService *, const char*);
SOAP_FMAC3 ns2__GiftCardReversalService * SOAP_FMAC4 soap_in_ns2__GiftCardReversalService(struct soap*, const char*, ns2__GiftCardReversalService *, const char*);
SOAP_FMAC1 ns2__GiftCardReversalService * SOAP_FMAC2 soap_instantiate_ns2__GiftCardReversalService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GiftCardReversalService * soap_new_ns2__GiftCardReversalService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__GiftCardReversalService(soap, n, NULL, NULL, NULL);
}

inline ns2__GiftCardReversalService * soap_new_req_ns2__GiftCardReversalService(
	struct soap *soap,
	const std::string& run)
{
	ns2__GiftCardReversalService *_p = ::soap_new_ns2__GiftCardReversalService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardReversalService::run = run;
	}
	return _p;
}

inline ns2__GiftCardReversalService * soap_new_set_ns2__GiftCardReversalService(
	struct soap *soap,
	const std::string& run)
{
	ns2__GiftCardReversalService *_p = ::soap_new_ns2__GiftCardReversalService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardReversalService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__GiftCardReversalService(struct soap *soap, ns2__GiftCardReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardReversalService", p->soap_type() == SOAP_TYPE_ns2__GiftCardReversalService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__GiftCardReversalService(struct soap *soap, const char *URL, ns2__GiftCardReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardReversalService", p->soap_type() == SOAP_TYPE_ns2__GiftCardReversalService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__GiftCardReversalService(struct soap *soap, const char *URL, ns2__GiftCardReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardReversalService", p->soap_type() == SOAP_TYPE_ns2__GiftCardReversalService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__GiftCardReversalService(struct soap *soap, const char *URL, ns2__GiftCardReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardReversalService", p->soap_type() == SOAP_TYPE_ns2__GiftCardReversalService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__GiftCardReversalService * SOAP_FMAC4 soap_get_ns2__GiftCardReversalService(struct soap*, ns2__GiftCardReversalService *, const char*, const char*);

inline int soap_read_ns2__GiftCardReversalService(struct soap *soap, ns2__GiftCardReversalService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__GiftCardReversalService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__GiftCardReversalService(struct soap *soap, const char *URL, ns2__GiftCardReversalService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__GiftCardReversalService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__GiftCardReversalService(struct soap *soap, ns2__GiftCardReversalService *p)
{
	if (::soap_read_ns2__GiftCardReversalService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__GiftCardVoidService_DEFINED
#define SOAP_TYPE_ns2__GiftCardVoidService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GiftCardVoidService(struct soap*, const char*, int, const ns2__GiftCardVoidService *, const char*);
SOAP_FMAC3 ns2__GiftCardVoidService * SOAP_FMAC4 soap_in_ns2__GiftCardVoidService(struct soap*, const char*, ns2__GiftCardVoidService *, const char*);
SOAP_FMAC1 ns2__GiftCardVoidService * SOAP_FMAC2 soap_instantiate_ns2__GiftCardVoidService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GiftCardVoidService * soap_new_ns2__GiftCardVoidService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__GiftCardVoidService(soap, n, NULL, NULL, NULL);
}

inline ns2__GiftCardVoidService * soap_new_req_ns2__GiftCardVoidService(
	struct soap *soap,
	const std::string& run)
{
	ns2__GiftCardVoidService *_p = ::soap_new_ns2__GiftCardVoidService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardVoidService::run = run;
	}
	return _p;
}

inline ns2__GiftCardVoidService * soap_new_set_ns2__GiftCardVoidService(
	struct soap *soap,
	const std::string& run)
{
	ns2__GiftCardVoidService *_p = ::soap_new_ns2__GiftCardVoidService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardVoidService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__GiftCardVoidService(struct soap *soap, ns2__GiftCardVoidService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardVoidService", p->soap_type() == SOAP_TYPE_ns2__GiftCardVoidService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__GiftCardVoidService(struct soap *soap, const char *URL, ns2__GiftCardVoidService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardVoidService", p->soap_type() == SOAP_TYPE_ns2__GiftCardVoidService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__GiftCardVoidService(struct soap *soap, const char *URL, ns2__GiftCardVoidService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardVoidService", p->soap_type() == SOAP_TYPE_ns2__GiftCardVoidService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__GiftCardVoidService(struct soap *soap, const char *URL, ns2__GiftCardVoidService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardVoidService", p->soap_type() == SOAP_TYPE_ns2__GiftCardVoidService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__GiftCardVoidService * SOAP_FMAC4 soap_get_ns2__GiftCardVoidService(struct soap*, ns2__GiftCardVoidService *, const char*, const char*);

inline int soap_read_ns2__GiftCardVoidService(struct soap *soap, ns2__GiftCardVoidService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__GiftCardVoidService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__GiftCardVoidService(struct soap *soap, const char *URL, ns2__GiftCardVoidService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__GiftCardVoidService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__GiftCardVoidService(struct soap *soap, ns2__GiftCardVoidService *p)
{
	if (::soap_read_ns2__GiftCardVoidService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__GiftCardBalanceInquiryService_DEFINED
#define SOAP_TYPE_ns2__GiftCardBalanceInquiryService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GiftCardBalanceInquiryService(struct soap*, const char*, int, const ns2__GiftCardBalanceInquiryService *, const char*);
SOAP_FMAC3 ns2__GiftCardBalanceInquiryService * SOAP_FMAC4 soap_in_ns2__GiftCardBalanceInquiryService(struct soap*, const char*, ns2__GiftCardBalanceInquiryService *, const char*);
SOAP_FMAC1 ns2__GiftCardBalanceInquiryService * SOAP_FMAC2 soap_instantiate_ns2__GiftCardBalanceInquiryService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GiftCardBalanceInquiryService * soap_new_ns2__GiftCardBalanceInquiryService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__GiftCardBalanceInquiryService(soap, n, NULL, NULL, NULL);
}

inline ns2__GiftCardBalanceInquiryService * soap_new_req_ns2__GiftCardBalanceInquiryService(
	struct soap *soap,
	const std::string& run)
{
	ns2__GiftCardBalanceInquiryService *_p = ::soap_new_ns2__GiftCardBalanceInquiryService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardBalanceInquiryService::run = run;
	}
	return _p;
}

inline ns2__GiftCardBalanceInquiryService * soap_new_set_ns2__GiftCardBalanceInquiryService(
	struct soap *soap,
	std::string *reconciliationID,
	std::string *commerceIndicator,
	const std::string& run)
{
	ns2__GiftCardBalanceInquiryService *_p = ::soap_new_ns2__GiftCardBalanceInquiryService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardBalanceInquiryService::reconciliationID = reconciliationID;
		_p->ns2__GiftCardBalanceInquiryService::commerceIndicator = commerceIndicator;
		_p->ns2__GiftCardBalanceInquiryService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__GiftCardBalanceInquiryService(struct soap *soap, ns2__GiftCardBalanceInquiryService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardBalanceInquiryService", p->soap_type() == SOAP_TYPE_ns2__GiftCardBalanceInquiryService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__GiftCardBalanceInquiryService(struct soap *soap, const char *URL, ns2__GiftCardBalanceInquiryService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardBalanceInquiryService", p->soap_type() == SOAP_TYPE_ns2__GiftCardBalanceInquiryService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__GiftCardBalanceInquiryService(struct soap *soap, const char *URL, ns2__GiftCardBalanceInquiryService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardBalanceInquiryService", p->soap_type() == SOAP_TYPE_ns2__GiftCardBalanceInquiryService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__GiftCardBalanceInquiryService(struct soap *soap, const char *URL, ns2__GiftCardBalanceInquiryService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardBalanceInquiryService", p->soap_type() == SOAP_TYPE_ns2__GiftCardBalanceInquiryService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__GiftCardBalanceInquiryService * SOAP_FMAC4 soap_get_ns2__GiftCardBalanceInquiryService(struct soap*, ns2__GiftCardBalanceInquiryService *, const char*, const char*);

inline int soap_read_ns2__GiftCardBalanceInquiryService(struct soap *soap, ns2__GiftCardBalanceInquiryService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__GiftCardBalanceInquiryService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__GiftCardBalanceInquiryService(struct soap *soap, const char *URL, ns2__GiftCardBalanceInquiryService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__GiftCardBalanceInquiryService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__GiftCardBalanceInquiryService(struct soap *soap, ns2__GiftCardBalanceInquiryService *p)
{
	if (::soap_read_ns2__GiftCardBalanceInquiryService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__GiftCardActivationService_DEFINED
#define SOAP_TYPE_ns2__GiftCardActivationService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GiftCardActivationService(struct soap*, const char*, int, const ns2__GiftCardActivationService *, const char*);
SOAP_FMAC3 ns2__GiftCardActivationService * SOAP_FMAC4 soap_in_ns2__GiftCardActivationService(struct soap*, const char*, ns2__GiftCardActivationService *, const char*);
SOAP_FMAC1 ns2__GiftCardActivationService * SOAP_FMAC2 soap_instantiate_ns2__GiftCardActivationService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GiftCardActivationService * soap_new_ns2__GiftCardActivationService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__GiftCardActivationService(soap, n, NULL, NULL, NULL);
}

inline ns2__GiftCardActivationService * soap_new_req_ns2__GiftCardActivationService(
	struct soap *soap,
	const std::string& run)
{
	ns2__GiftCardActivationService *_p = ::soap_new_ns2__GiftCardActivationService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardActivationService::run = run;
	}
	return _p;
}

inline ns2__GiftCardActivationService * soap_new_set_ns2__GiftCardActivationService(
	struct soap *soap,
	std::string *reconciliationID,
	std::string *commerceIndicator,
	const std::string& run)
{
	ns2__GiftCardActivationService *_p = ::soap_new_ns2__GiftCardActivationService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GiftCardActivationService::reconciliationID = reconciliationID;
		_p->ns2__GiftCardActivationService::commerceIndicator = commerceIndicator;
		_p->ns2__GiftCardActivationService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__GiftCardActivationService(struct soap *soap, ns2__GiftCardActivationService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardActivationService", p->soap_type() == SOAP_TYPE_ns2__GiftCardActivationService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__GiftCardActivationService(struct soap *soap, const char *URL, ns2__GiftCardActivationService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardActivationService", p->soap_type() == SOAP_TYPE_ns2__GiftCardActivationService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__GiftCardActivationService(struct soap *soap, const char *URL, ns2__GiftCardActivationService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardActivationService", p->soap_type() == SOAP_TYPE_ns2__GiftCardActivationService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__GiftCardActivationService(struct soap *soap, const char *URL, ns2__GiftCardActivationService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GiftCardActivationService", p->soap_type() == SOAP_TYPE_ns2__GiftCardActivationService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__GiftCardActivationService * SOAP_FMAC4 soap_get_ns2__GiftCardActivationService(struct soap*, ns2__GiftCardActivationService *, const char*, const char*);

inline int soap_read_ns2__GiftCardActivationService(struct soap *soap, ns2__GiftCardActivationService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__GiftCardActivationService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__GiftCardActivationService(struct soap *soap, const char *URL, ns2__GiftCardActivationService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__GiftCardActivationService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__GiftCardActivationService(struct soap *soap, ns2__GiftCardActivationService *p)
{
	if (::soap_read_ns2__GiftCardActivationService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ECAVSService_DEFINED
#define SOAP_TYPE_ns2__ECAVSService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ECAVSService(struct soap*, const char*, int, const ns2__ECAVSService *, const char*);
SOAP_FMAC3 ns2__ECAVSService * SOAP_FMAC4 soap_in_ns2__ECAVSService(struct soap*, const char*, ns2__ECAVSService *, const char*);
SOAP_FMAC1 ns2__ECAVSService * SOAP_FMAC2 soap_instantiate_ns2__ECAVSService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ECAVSService * soap_new_ns2__ECAVSService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ECAVSService(soap, n, NULL, NULL, NULL);
}

inline ns2__ECAVSService * soap_new_req_ns2__ECAVSService(
	struct soap *soap,
	const std::string& run)
{
	ns2__ECAVSService *_p = ::soap_new_ns2__ECAVSService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ECAVSService::run = run;
	}
	return _p;
}

inline ns2__ECAVSService * soap_new_set_ns2__ECAVSService(
	struct soap *soap,
	const std::string& run)
{
	ns2__ECAVSService *_p = ::soap_new_ns2__ECAVSService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ECAVSService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__ECAVSService(struct soap *soap, ns2__ECAVSService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECAVSService", p->soap_type() == SOAP_TYPE_ns2__ECAVSService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ECAVSService(struct soap *soap, const char *URL, ns2__ECAVSService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECAVSService", p->soap_type() == SOAP_TYPE_ns2__ECAVSService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ECAVSService(struct soap *soap, const char *URL, ns2__ECAVSService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECAVSService", p->soap_type() == SOAP_TYPE_ns2__ECAVSService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ECAVSService(struct soap *soap, const char *URL, ns2__ECAVSService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECAVSService", p->soap_type() == SOAP_TYPE_ns2__ECAVSService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ECAVSService * SOAP_FMAC4 soap_get_ns2__ECAVSService(struct soap*, ns2__ECAVSService *, const char*, const char*);

inline int soap_read_ns2__ECAVSService(struct soap *soap, ns2__ECAVSService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ECAVSService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ECAVSService(struct soap *soap, const char *URL, ns2__ECAVSService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ECAVSService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ECAVSService(struct soap *soap, ns2__ECAVSService *p)
{
	if (::soap_read_ns2__ECAVSService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Category_DEFINED
#define SOAP_TYPE_ns2__Category_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Category(struct soap*, const char*, int, const ns2__Category *, const char*);
SOAP_FMAC3 ns2__Category * SOAP_FMAC4 soap_in_ns2__Category(struct soap*, const char*, ns2__Category *, const char*);
SOAP_FMAC1 ns2__Category * SOAP_FMAC2 soap_instantiate_ns2__Category(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Category * soap_new_ns2__Category(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Category(soap, n, NULL, NULL, NULL);
}

inline ns2__Category * soap_new_req_ns2__Category(
	struct soap *soap)
{
	ns2__Category *_p = ::soap_new_ns2__Category(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Category * soap_new_set_ns2__Category(
	struct soap *soap,
	std::string *affiliate,
	std::string *campaign,
	std::string *group)
{
	ns2__Category *_p = ::soap_new_ns2__Category(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Category::affiliate = affiliate;
		_p->ns2__Category::campaign = campaign;
		_p->ns2__Category::group = group;
	}
	return _p;
}

inline int soap_write_ns2__Category(struct soap *soap, ns2__Category const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Category", p->soap_type() == SOAP_TYPE_ns2__Category ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Category(struct soap *soap, const char *URL, ns2__Category const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Category", p->soap_type() == SOAP_TYPE_ns2__Category ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Category(struct soap *soap, const char *URL, ns2__Category const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Category", p->soap_type() == SOAP_TYPE_ns2__Category ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Category(struct soap *soap, const char *URL, ns2__Category const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Category", p->soap_type() == SOAP_TYPE_ns2__Category ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Category * SOAP_FMAC4 soap_get_ns2__Category(struct soap*, ns2__Category *, const char*, const char*);

inline int soap_read_ns2__Category(struct soap *soap, ns2__Category *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Category(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Category(struct soap *soap, const char *URL, ns2__Category *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Category(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Category(struct soap *soap, ns2__Category *p)
{
	if (::soap_read_ns2__Category(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APRevokeMandateReply_DEFINED
#define SOAP_TYPE_ns2__APRevokeMandateReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APRevokeMandateReply(struct soap*, const char*, int, const ns2__APRevokeMandateReply *, const char*);
SOAP_FMAC3 ns2__APRevokeMandateReply * SOAP_FMAC4 soap_in_ns2__APRevokeMandateReply(struct soap*, const char*, ns2__APRevokeMandateReply *, const char*);
SOAP_FMAC1 ns2__APRevokeMandateReply * SOAP_FMAC2 soap_instantiate_ns2__APRevokeMandateReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APRevokeMandateReply * soap_new_ns2__APRevokeMandateReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APRevokeMandateReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APRevokeMandateReply * soap_new_req_ns2__APRevokeMandateReply(
	struct soap *soap,
	const std::string& reasonCode,
	const std::string& mandateID,
	const std::string& status)
{
	ns2__APRevokeMandateReply *_p = ::soap_new_ns2__APRevokeMandateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APRevokeMandateReply::reasonCode = reasonCode;
		_p->ns2__APRevokeMandateReply::mandateID = mandateID;
		_p->ns2__APRevokeMandateReply::status = status;
	}
	return _p;
}

inline ns2__APRevokeMandateReply * soap_new_set_ns2__APRevokeMandateReply(
	struct soap *soap,
	const std::string& reasonCode,
	const std::string& mandateID,
	const std::string& status,
	std::string *responseCode,
	std::string *processorTransactionID,
	std::string *dateSigned,
	std::string *dateCreated,
	std::string *dateRevoked,
	std::string *dateTime)
{
	ns2__APRevokeMandateReply *_p = ::soap_new_ns2__APRevokeMandateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APRevokeMandateReply::reasonCode = reasonCode;
		_p->ns2__APRevokeMandateReply::mandateID = mandateID;
		_p->ns2__APRevokeMandateReply::status = status;
		_p->ns2__APRevokeMandateReply::responseCode = responseCode;
		_p->ns2__APRevokeMandateReply::processorTransactionID = processorTransactionID;
		_p->ns2__APRevokeMandateReply::dateSigned = dateSigned;
		_p->ns2__APRevokeMandateReply::dateCreated = dateCreated;
		_p->ns2__APRevokeMandateReply::dateRevoked = dateRevoked;
		_p->ns2__APRevokeMandateReply::dateTime = dateTime;
	}
	return _p;
}

inline int soap_write_ns2__APRevokeMandateReply(struct soap *soap, ns2__APRevokeMandateReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APRevokeMandateReply", p->soap_type() == SOAP_TYPE_ns2__APRevokeMandateReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APRevokeMandateReply(struct soap *soap, const char *URL, ns2__APRevokeMandateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APRevokeMandateReply", p->soap_type() == SOAP_TYPE_ns2__APRevokeMandateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APRevokeMandateReply(struct soap *soap, const char *URL, ns2__APRevokeMandateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APRevokeMandateReply", p->soap_type() == SOAP_TYPE_ns2__APRevokeMandateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APRevokeMandateReply(struct soap *soap, const char *URL, ns2__APRevokeMandateReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APRevokeMandateReply", p->soap_type() == SOAP_TYPE_ns2__APRevokeMandateReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APRevokeMandateReply * SOAP_FMAC4 soap_get_ns2__APRevokeMandateReply(struct soap*, ns2__APRevokeMandateReply *, const char*, const char*);

inline int soap_read_ns2__APRevokeMandateReply(struct soap *soap, ns2__APRevokeMandateReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APRevokeMandateReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APRevokeMandateReply(struct soap *soap, const char *URL, ns2__APRevokeMandateReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APRevokeMandateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APRevokeMandateReply(struct soap *soap, ns2__APRevokeMandateReply *p)
{
	if (::soap_read_ns2__APRevokeMandateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APRevokeMandateService_DEFINED
#define SOAP_TYPE_ns2__APRevokeMandateService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APRevokeMandateService(struct soap*, const char*, int, const ns2__APRevokeMandateService *, const char*);
SOAP_FMAC3 ns2__APRevokeMandateService * SOAP_FMAC4 soap_in_ns2__APRevokeMandateService(struct soap*, const char*, ns2__APRevokeMandateService *, const char*);
SOAP_FMAC1 ns2__APRevokeMandateService * SOAP_FMAC2 soap_instantiate_ns2__APRevokeMandateService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APRevokeMandateService * soap_new_ns2__APRevokeMandateService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APRevokeMandateService(soap, n, NULL, NULL, NULL);
}

inline ns2__APRevokeMandateService * soap_new_req_ns2__APRevokeMandateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APRevokeMandateService *_p = ::soap_new_ns2__APRevokeMandateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APRevokeMandateService::run = run;
	}
	return _p;
}

inline ns2__APRevokeMandateService * soap_new_set_ns2__APRevokeMandateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APRevokeMandateService *_p = ::soap_new_ns2__APRevokeMandateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APRevokeMandateService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__APRevokeMandateService(struct soap *soap, ns2__APRevokeMandateService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APRevokeMandateService", p->soap_type() == SOAP_TYPE_ns2__APRevokeMandateService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APRevokeMandateService(struct soap *soap, const char *URL, ns2__APRevokeMandateService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APRevokeMandateService", p->soap_type() == SOAP_TYPE_ns2__APRevokeMandateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APRevokeMandateService(struct soap *soap, const char *URL, ns2__APRevokeMandateService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APRevokeMandateService", p->soap_type() == SOAP_TYPE_ns2__APRevokeMandateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APRevokeMandateService(struct soap *soap, const char *URL, ns2__APRevokeMandateService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APRevokeMandateService", p->soap_type() == SOAP_TYPE_ns2__APRevokeMandateService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APRevokeMandateService * SOAP_FMAC4 soap_get_ns2__APRevokeMandateService(struct soap*, ns2__APRevokeMandateService *, const char*, const char*);

inline int soap_read_ns2__APRevokeMandateService(struct soap *soap, ns2__APRevokeMandateService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APRevokeMandateService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APRevokeMandateService(struct soap *soap, const char *URL, ns2__APRevokeMandateService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APRevokeMandateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APRevokeMandateService(struct soap *soap, ns2__APRevokeMandateService *p)
{
	if (::soap_read_ns2__APRevokeMandateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APImportMandateReply_DEFINED
#define SOAP_TYPE_ns2__APImportMandateReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APImportMandateReply(struct soap*, const char*, int, const ns2__APImportMandateReply *, const char*);
SOAP_FMAC3 ns2__APImportMandateReply * SOAP_FMAC4 soap_in_ns2__APImportMandateReply(struct soap*, const char*, ns2__APImportMandateReply *, const char*);
SOAP_FMAC1 ns2__APImportMandateReply * SOAP_FMAC2 soap_instantiate_ns2__APImportMandateReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APImportMandateReply * soap_new_ns2__APImportMandateReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APImportMandateReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APImportMandateReply * soap_new_req_ns2__APImportMandateReply(
	struct soap *soap,
	const std::string& reasonCode,
	const std::string& mandateID,
	const std::string& status)
{
	ns2__APImportMandateReply *_p = ::soap_new_ns2__APImportMandateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APImportMandateReply::reasonCode = reasonCode;
		_p->ns2__APImportMandateReply::mandateID = mandateID;
		_p->ns2__APImportMandateReply::status = status;
	}
	return _p;
}

inline ns2__APImportMandateReply * soap_new_set_ns2__APImportMandateReply(
	struct soap *soap,
	const std::string& reasonCode,
	const std::string& mandateID,
	const std::string& status,
	std::string *responseCode,
	std::string *processorTransactionID,
	std::string *dateSigned,
	std::string *dateCreated,
	std::string *dateTime)
{
	ns2__APImportMandateReply *_p = ::soap_new_ns2__APImportMandateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APImportMandateReply::reasonCode = reasonCode;
		_p->ns2__APImportMandateReply::mandateID = mandateID;
		_p->ns2__APImportMandateReply::status = status;
		_p->ns2__APImportMandateReply::responseCode = responseCode;
		_p->ns2__APImportMandateReply::processorTransactionID = processorTransactionID;
		_p->ns2__APImportMandateReply::dateSigned = dateSigned;
		_p->ns2__APImportMandateReply::dateCreated = dateCreated;
		_p->ns2__APImportMandateReply::dateTime = dateTime;
	}
	return _p;
}

inline int soap_write_ns2__APImportMandateReply(struct soap *soap, ns2__APImportMandateReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APImportMandateReply", p->soap_type() == SOAP_TYPE_ns2__APImportMandateReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APImportMandateReply(struct soap *soap, const char *URL, ns2__APImportMandateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APImportMandateReply", p->soap_type() == SOAP_TYPE_ns2__APImportMandateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APImportMandateReply(struct soap *soap, const char *URL, ns2__APImportMandateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APImportMandateReply", p->soap_type() == SOAP_TYPE_ns2__APImportMandateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APImportMandateReply(struct soap *soap, const char *URL, ns2__APImportMandateReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APImportMandateReply", p->soap_type() == SOAP_TYPE_ns2__APImportMandateReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APImportMandateReply * SOAP_FMAC4 soap_get_ns2__APImportMandateReply(struct soap*, ns2__APImportMandateReply *, const char*, const char*);

inline int soap_read_ns2__APImportMandateReply(struct soap *soap, ns2__APImportMandateReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APImportMandateReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APImportMandateReply(struct soap *soap, const char *URL, ns2__APImportMandateReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APImportMandateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APImportMandateReply(struct soap *soap, ns2__APImportMandateReply *p)
{
	if (::soap_read_ns2__APImportMandateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APUpdateMandateReply_DEFINED
#define SOAP_TYPE_ns2__APUpdateMandateReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APUpdateMandateReply(struct soap*, const char*, int, const ns2__APUpdateMandateReply *, const char*);
SOAP_FMAC3 ns2__APUpdateMandateReply * SOAP_FMAC4 soap_in_ns2__APUpdateMandateReply(struct soap*, const char*, ns2__APUpdateMandateReply *, const char*);
SOAP_FMAC1 ns2__APUpdateMandateReply * SOAP_FMAC2 soap_instantiate_ns2__APUpdateMandateReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APUpdateMandateReply * soap_new_ns2__APUpdateMandateReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APUpdateMandateReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APUpdateMandateReply * soap_new_req_ns2__APUpdateMandateReply(
	struct soap *soap,
	const std::string& reasonCode,
	const std::string& mandateID,
	const std::string& status,
	const std::string& merchantURL)
{
	ns2__APUpdateMandateReply *_p = ::soap_new_ns2__APUpdateMandateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APUpdateMandateReply::reasonCode = reasonCode;
		_p->ns2__APUpdateMandateReply::mandateID = mandateID;
		_p->ns2__APUpdateMandateReply::status = status;
		_p->ns2__APUpdateMandateReply::merchantURL = merchantURL;
	}
	return _p;
}

inline ns2__APUpdateMandateReply * soap_new_set_ns2__APUpdateMandateReply(
	struct soap *soap,
	const std::string& reasonCode,
	const std::string& mandateID,
	const std::string& status,
	const std::string& merchantURL,
	std::string *responseCode,
	std::string *processorTransactionID,
	std::string *riskScore,
	std::string *encodedHTML,
	std::string *encodedPopupHTML,
	std::string *dateTime,
	std::string *dateSigned,
	std::string *dateCreated)
{
	ns2__APUpdateMandateReply *_p = ::soap_new_ns2__APUpdateMandateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APUpdateMandateReply::reasonCode = reasonCode;
		_p->ns2__APUpdateMandateReply::mandateID = mandateID;
		_p->ns2__APUpdateMandateReply::status = status;
		_p->ns2__APUpdateMandateReply::merchantURL = merchantURL;
		_p->ns2__APUpdateMandateReply::responseCode = responseCode;
		_p->ns2__APUpdateMandateReply::processorTransactionID = processorTransactionID;
		_p->ns2__APUpdateMandateReply::riskScore = riskScore;
		_p->ns2__APUpdateMandateReply::encodedHTML = encodedHTML;
		_p->ns2__APUpdateMandateReply::encodedPopupHTML = encodedPopupHTML;
		_p->ns2__APUpdateMandateReply::dateTime = dateTime;
		_p->ns2__APUpdateMandateReply::dateSigned = dateSigned;
		_p->ns2__APUpdateMandateReply::dateCreated = dateCreated;
	}
	return _p;
}

inline int soap_write_ns2__APUpdateMandateReply(struct soap *soap, ns2__APUpdateMandateReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APUpdateMandateReply", p->soap_type() == SOAP_TYPE_ns2__APUpdateMandateReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APUpdateMandateReply(struct soap *soap, const char *URL, ns2__APUpdateMandateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APUpdateMandateReply", p->soap_type() == SOAP_TYPE_ns2__APUpdateMandateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APUpdateMandateReply(struct soap *soap, const char *URL, ns2__APUpdateMandateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APUpdateMandateReply", p->soap_type() == SOAP_TYPE_ns2__APUpdateMandateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APUpdateMandateReply(struct soap *soap, const char *URL, ns2__APUpdateMandateReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APUpdateMandateReply", p->soap_type() == SOAP_TYPE_ns2__APUpdateMandateReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APUpdateMandateReply * SOAP_FMAC4 soap_get_ns2__APUpdateMandateReply(struct soap*, ns2__APUpdateMandateReply *, const char*, const char*);

inline int soap_read_ns2__APUpdateMandateReply(struct soap *soap, ns2__APUpdateMandateReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APUpdateMandateReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APUpdateMandateReply(struct soap *soap, const char *URL, ns2__APUpdateMandateReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APUpdateMandateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APUpdateMandateReply(struct soap *soap, ns2__APUpdateMandateReply *p)
{
	if (::soap_read_ns2__APUpdateMandateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__GetMasterpassDataReply_DEFINED
#define SOAP_TYPE_ns2__GetMasterpassDataReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GetMasterpassDataReply(struct soap*, const char*, int, const ns2__GetMasterpassDataReply *, const char*);
SOAP_FMAC3 ns2__GetMasterpassDataReply * SOAP_FMAC4 soap_in_ns2__GetMasterpassDataReply(struct soap*, const char*, ns2__GetMasterpassDataReply *, const char*);
SOAP_FMAC1 ns2__GetMasterpassDataReply * SOAP_FMAC2 soap_instantiate_ns2__GetMasterpassDataReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GetMasterpassDataReply * soap_new_ns2__GetMasterpassDataReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__GetMasterpassDataReply(soap, n, NULL, NULL, NULL);
}

inline ns2__GetMasterpassDataReply * soap_new_req_ns2__GetMasterpassDataReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__GetMasterpassDataReply *_p = ::soap_new_ns2__GetMasterpassDataReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GetMasterpassDataReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__GetMasterpassDataReply * soap_new_set_ns2__GetMasterpassDataReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__GetMasterpassDataReply *_p = ::soap_new_ns2__GetMasterpassDataReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GetMasterpassDataReply::reasonCode = reasonCode;
	}
	return _p;
}

inline int soap_write_ns2__GetMasterpassDataReply(struct soap *soap, ns2__GetMasterpassDataReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetMasterpassDataReply", p->soap_type() == SOAP_TYPE_ns2__GetMasterpassDataReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__GetMasterpassDataReply(struct soap *soap, const char *URL, ns2__GetMasterpassDataReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetMasterpassDataReply", p->soap_type() == SOAP_TYPE_ns2__GetMasterpassDataReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__GetMasterpassDataReply(struct soap *soap, const char *URL, ns2__GetMasterpassDataReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetMasterpassDataReply", p->soap_type() == SOAP_TYPE_ns2__GetMasterpassDataReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__GetMasterpassDataReply(struct soap *soap, const char *URL, ns2__GetMasterpassDataReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetMasterpassDataReply", p->soap_type() == SOAP_TYPE_ns2__GetMasterpassDataReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__GetMasterpassDataReply * SOAP_FMAC4 soap_get_ns2__GetMasterpassDataReply(struct soap*, ns2__GetMasterpassDataReply *, const char*, const char*);

inline int soap_read_ns2__GetMasterpassDataReply(struct soap *soap, ns2__GetMasterpassDataReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__GetMasterpassDataReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__GetMasterpassDataReply(struct soap *soap, const char *URL, ns2__GetMasterpassDataReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__GetMasterpassDataReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__GetMasterpassDataReply(struct soap *soap, ns2__GetMasterpassDataReply *p)
{
	if (::soap_read_ns2__GetMasterpassDataReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__GetMasterpassDataService_DEFINED
#define SOAP_TYPE_ns2__GetMasterpassDataService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GetMasterpassDataService(struct soap*, const char*, int, const ns2__GetMasterpassDataService *, const char*);
SOAP_FMAC3 ns2__GetMasterpassDataService * SOAP_FMAC4 soap_in_ns2__GetMasterpassDataService(struct soap*, const char*, ns2__GetMasterpassDataService *, const char*);
SOAP_FMAC1 ns2__GetMasterpassDataService * SOAP_FMAC2 soap_instantiate_ns2__GetMasterpassDataService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GetMasterpassDataService * soap_new_ns2__GetMasterpassDataService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__GetMasterpassDataService(soap, n, NULL, NULL, NULL);
}

inline ns2__GetMasterpassDataService * soap_new_req_ns2__GetMasterpassDataService(
	struct soap *soap,
	const std::string& run)
{
	ns2__GetMasterpassDataService *_p = ::soap_new_ns2__GetMasterpassDataService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GetMasterpassDataService::run = run;
	}
	return _p;
}

inline ns2__GetMasterpassDataService * soap_new_set_ns2__GetMasterpassDataService(
	struct soap *soap,
	const std::string& run)
{
	ns2__GetMasterpassDataService *_p = ::soap_new_ns2__GetMasterpassDataService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GetMasterpassDataService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__GetMasterpassDataService(struct soap *soap, ns2__GetMasterpassDataService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetMasterpassDataService", p->soap_type() == SOAP_TYPE_ns2__GetMasterpassDataService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__GetMasterpassDataService(struct soap *soap, const char *URL, ns2__GetMasterpassDataService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetMasterpassDataService", p->soap_type() == SOAP_TYPE_ns2__GetMasterpassDataService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__GetMasterpassDataService(struct soap *soap, const char *URL, ns2__GetMasterpassDataService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetMasterpassDataService", p->soap_type() == SOAP_TYPE_ns2__GetMasterpassDataService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__GetMasterpassDataService(struct soap *soap, const char *URL, ns2__GetMasterpassDataService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetMasterpassDataService", p->soap_type() == SOAP_TYPE_ns2__GetMasterpassDataService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__GetMasterpassDataService * SOAP_FMAC4 soap_get_ns2__GetMasterpassDataService(struct soap*, ns2__GetMasterpassDataService *, const char*, const char*);

inline int soap_read_ns2__GetMasterpassDataService(struct soap *soap, ns2__GetMasterpassDataService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__GetMasterpassDataService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__GetMasterpassDataService(struct soap *soap, const char *URL, ns2__GetMasterpassDataService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__GetMasterpassDataService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__GetMasterpassDataService(struct soap *soap, ns2__GetMasterpassDataService *p)
{
	if (::soap_read_ns2__GetMasterpassDataService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APUpdateMandateService_DEFINED
#define SOAP_TYPE_ns2__APUpdateMandateService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APUpdateMandateService(struct soap*, const char*, int, const ns2__APUpdateMandateService *, const char*);
SOAP_FMAC3 ns2__APUpdateMandateService * SOAP_FMAC4 soap_in_ns2__APUpdateMandateService(struct soap*, const char*, ns2__APUpdateMandateService *, const char*);
SOAP_FMAC1 ns2__APUpdateMandateService * SOAP_FMAC2 soap_instantiate_ns2__APUpdateMandateService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APUpdateMandateService * soap_new_ns2__APUpdateMandateService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APUpdateMandateService(soap, n, NULL, NULL, NULL);
}

inline ns2__APUpdateMandateService * soap_new_req_ns2__APUpdateMandateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APUpdateMandateService *_p = ::soap_new_ns2__APUpdateMandateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APUpdateMandateService::run = run;
	}
	return _p;
}

inline ns2__APUpdateMandateService * soap_new_set_ns2__APUpdateMandateService(
	struct soap *soap,
	std::string *esign,
	std::string *cancelURL,
	std::string *successURL,
	std::string *failureURL,
	const std::string& run)
{
	ns2__APUpdateMandateService *_p = ::soap_new_ns2__APUpdateMandateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APUpdateMandateService::esign = esign;
		_p->ns2__APUpdateMandateService::cancelURL = cancelURL;
		_p->ns2__APUpdateMandateService::successURL = successURL;
		_p->ns2__APUpdateMandateService::failureURL = failureURL;
		_p->ns2__APUpdateMandateService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__APUpdateMandateService(struct soap *soap, ns2__APUpdateMandateService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APUpdateMandateService", p->soap_type() == SOAP_TYPE_ns2__APUpdateMandateService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APUpdateMandateService(struct soap *soap, const char *URL, ns2__APUpdateMandateService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APUpdateMandateService", p->soap_type() == SOAP_TYPE_ns2__APUpdateMandateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APUpdateMandateService(struct soap *soap, const char *URL, ns2__APUpdateMandateService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APUpdateMandateService", p->soap_type() == SOAP_TYPE_ns2__APUpdateMandateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APUpdateMandateService(struct soap *soap, const char *URL, ns2__APUpdateMandateService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APUpdateMandateService", p->soap_type() == SOAP_TYPE_ns2__APUpdateMandateService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APUpdateMandateService * SOAP_FMAC4 soap_get_ns2__APUpdateMandateService(struct soap*, ns2__APUpdateMandateService *, const char*, const char*);

inline int soap_read_ns2__APUpdateMandateService(struct soap *soap, ns2__APUpdateMandateService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APUpdateMandateService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APUpdateMandateService(struct soap *soap, const char *URL, ns2__APUpdateMandateService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APUpdateMandateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APUpdateMandateService(struct soap *soap, ns2__APUpdateMandateService *p)
{
	if (::soap_read_ns2__APUpdateMandateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APMandateStatusReply_DEFINED
#define SOAP_TYPE_ns2__APMandateStatusReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APMandateStatusReply(struct soap*, const char*, int, const ns2__APMandateStatusReply *, const char*);
SOAP_FMAC3 ns2__APMandateStatusReply * SOAP_FMAC4 soap_in_ns2__APMandateStatusReply(struct soap*, const char*, ns2__APMandateStatusReply *, const char*);
SOAP_FMAC1 ns2__APMandateStatusReply * SOAP_FMAC2 soap_instantiate_ns2__APMandateStatusReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APMandateStatusReply * soap_new_ns2__APMandateStatusReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APMandateStatusReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APMandateStatusReply * soap_new_req_ns2__APMandateStatusReply(
	struct soap *soap,
	const std::string& reasonCode,
	const std::string& mandateID,
	const std::string& status)
{
	ns2__APMandateStatusReply *_p = ::soap_new_ns2__APMandateStatusReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APMandateStatusReply::reasonCode = reasonCode;
		_p->ns2__APMandateStatusReply::mandateID = mandateID;
		_p->ns2__APMandateStatusReply::status = status;
	}
	return _p;
}

inline ns2__APMandateStatusReply * soap_new_set_ns2__APMandateStatusReply(
	struct soap *soap,
	const std::string& reasonCode,
	const std::string& mandateID,
	const std::string& status,
	std::string *responseCode,
	std::string *processorTransactionID,
	std::string *dateCreated,
	std::string *dateSigned,
	std::string *dateRevoked)
{
	ns2__APMandateStatusReply *_p = ::soap_new_ns2__APMandateStatusReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APMandateStatusReply::reasonCode = reasonCode;
		_p->ns2__APMandateStatusReply::mandateID = mandateID;
		_p->ns2__APMandateStatusReply::status = status;
		_p->ns2__APMandateStatusReply::responseCode = responseCode;
		_p->ns2__APMandateStatusReply::processorTransactionID = processorTransactionID;
		_p->ns2__APMandateStatusReply::dateCreated = dateCreated;
		_p->ns2__APMandateStatusReply::dateSigned = dateSigned;
		_p->ns2__APMandateStatusReply::dateRevoked = dateRevoked;
	}
	return _p;
}

inline int soap_write_ns2__APMandateStatusReply(struct soap *soap, ns2__APMandateStatusReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APMandateStatusReply", p->soap_type() == SOAP_TYPE_ns2__APMandateStatusReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APMandateStatusReply(struct soap *soap, const char *URL, ns2__APMandateStatusReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APMandateStatusReply", p->soap_type() == SOAP_TYPE_ns2__APMandateStatusReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APMandateStatusReply(struct soap *soap, const char *URL, ns2__APMandateStatusReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APMandateStatusReply", p->soap_type() == SOAP_TYPE_ns2__APMandateStatusReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APMandateStatusReply(struct soap *soap, const char *URL, ns2__APMandateStatusReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APMandateStatusReply", p->soap_type() == SOAP_TYPE_ns2__APMandateStatusReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APMandateStatusReply * SOAP_FMAC4 soap_get_ns2__APMandateStatusReply(struct soap*, ns2__APMandateStatusReply *, const char*, const char*);

inline int soap_read_ns2__APMandateStatusReply(struct soap *soap, ns2__APMandateStatusReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APMandateStatusReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APMandateStatusReply(struct soap *soap, const char *URL, ns2__APMandateStatusReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APMandateStatusReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APMandateStatusReply(struct soap *soap, ns2__APMandateStatusReply *p)
{
	if (::soap_read_ns2__APMandateStatusReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APMandateStatusService_DEFINED
#define SOAP_TYPE_ns2__APMandateStatusService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APMandateStatusService(struct soap*, const char*, int, const ns2__APMandateStatusService *, const char*);
SOAP_FMAC3 ns2__APMandateStatusService * SOAP_FMAC4 soap_in_ns2__APMandateStatusService(struct soap*, const char*, ns2__APMandateStatusService *, const char*);
SOAP_FMAC1 ns2__APMandateStatusService * SOAP_FMAC2 soap_instantiate_ns2__APMandateStatusService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APMandateStatusService * soap_new_ns2__APMandateStatusService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APMandateStatusService(soap, n, NULL, NULL, NULL);
}

inline ns2__APMandateStatusService * soap_new_req_ns2__APMandateStatusService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APMandateStatusService *_p = ::soap_new_ns2__APMandateStatusService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APMandateStatusService::run = run;
	}
	return _p;
}

inline ns2__APMandateStatusService * soap_new_set_ns2__APMandateStatusService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APMandateStatusService *_p = ::soap_new_ns2__APMandateStatusService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APMandateStatusService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__APMandateStatusService(struct soap *soap, ns2__APMandateStatusService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APMandateStatusService", p->soap_type() == SOAP_TYPE_ns2__APMandateStatusService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APMandateStatusService(struct soap *soap, const char *URL, ns2__APMandateStatusService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APMandateStatusService", p->soap_type() == SOAP_TYPE_ns2__APMandateStatusService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APMandateStatusService(struct soap *soap, const char *URL, ns2__APMandateStatusService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APMandateStatusService", p->soap_type() == SOAP_TYPE_ns2__APMandateStatusService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APMandateStatusService(struct soap *soap, const char *URL, ns2__APMandateStatusService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APMandateStatusService", p->soap_type() == SOAP_TYPE_ns2__APMandateStatusService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APMandateStatusService * SOAP_FMAC4 soap_get_ns2__APMandateStatusService(struct soap*, ns2__APMandateStatusService *, const char*, const char*);

inline int soap_read_ns2__APMandateStatusService(struct soap *soap, ns2__APMandateStatusService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APMandateStatusService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APMandateStatusService(struct soap *soap, const char *URL, ns2__APMandateStatusService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APMandateStatusService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APMandateStatusService(struct soap *soap, ns2__APMandateStatusService *p)
{
	if (::soap_read_ns2__APMandateStatusService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APCreateMandateReply_DEFINED
#define SOAP_TYPE_ns2__APCreateMandateReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APCreateMandateReply(struct soap*, const char*, int, const ns2__APCreateMandateReply *, const char*);
SOAP_FMAC3 ns2__APCreateMandateReply * SOAP_FMAC4 soap_in_ns2__APCreateMandateReply(struct soap*, const char*, ns2__APCreateMandateReply *, const char*);
SOAP_FMAC1 ns2__APCreateMandateReply * SOAP_FMAC2 soap_instantiate_ns2__APCreateMandateReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APCreateMandateReply * soap_new_ns2__APCreateMandateReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APCreateMandateReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APCreateMandateReply * soap_new_req_ns2__APCreateMandateReply(
	struct soap *soap,
	const std::string& reasonCode,
	const std::string& mandateID,
	const std::string& status,
	const std::string& merchantURL)
{
	ns2__APCreateMandateReply *_p = ::soap_new_ns2__APCreateMandateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APCreateMandateReply::reasonCode = reasonCode;
		_p->ns2__APCreateMandateReply::mandateID = mandateID;
		_p->ns2__APCreateMandateReply::status = status;
		_p->ns2__APCreateMandateReply::merchantURL = merchantURL;
	}
	return _p;
}

inline ns2__APCreateMandateReply * soap_new_set_ns2__APCreateMandateReply(
	struct soap *soap,
	const std::string& reasonCode,
	const std::string& mandateID,
	const std::string& status,
	const std::string& merchantURL,
	std::string *responseCode,
	std::string *processorTransactionID,
	std::string *riskScore,
	std::string *encodedHTML,
	std::string *encodedPopupHTML,
	std::string *dateTime,
	std::string *dateSigned,
	std::string *dateCreated)
{
	ns2__APCreateMandateReply *_p = ::soap_new_ns2__APCreateMandateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APCreateMandateReply::reasonCode = reasonCode;
		_p->ns2__APCreateMandateReply::mandateID = mandateID;
		_p->ns2__APCreateMandateReply::status = status;
		_p->ns2__APCreateMandateReply::merchantURL = merchantURL;
		_p->ns2__APCreateMandateReply::responseCode = responseCode;
		_p->ns2__APCreateMandateReply::processorTransactionID = processorTransactionID;
		_p->ns2__APCreateMandateReply::riskScore = riskScore;
		_p->ns2__APCreateMandateReply::encodedHTML = encodedHTML;
		_p->ns2__APCreateMandateReply::encodedPopupHTML = encodedPopupHTML;
		_p->ns2__APCreateMandateReply::dateTime = dateTime;
		_p->ns2__APCreateMandateReply::dateSigned = dateSigned;
		_p->ns2__APCreateMandateReply::dateCreated = dateCreated;
	}
	return _p;
}

inline int soap_write_ns2__APCreateMandateReply(struct soap *soap, ns2__APCreateMandateReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCreateMandateReply", p->soap_type() == SOAP_TYPE_ns2__APCreateMandateReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APCreateMandateReply(struct soap *soap, const char *URL, ns2__APCreateMandateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCreateMandateReply", p->soap_type() == SOAP_TYPE_ns2__APCreateMandateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APCreateMandateReply(struct soap *soap, const char *URL, ns2__APCreateMandateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCreateMandateReply", p->soap_type() == SOAP_TYPE_ns2__APCreateMandateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APCreateMandateReply(struct soap *soap, const char *URL, ns2__APCreateMandateReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCreateMandateReply", p->soap_type() == SOAP_TYPE_ns2__APCreateMandateReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APCreateMandateReply * SOAP_FMAC4 soap_get_ns2__APCreateMandateReply(struct soap*, ns2__APCreateMandateReply *, const char*, const char*);

inline int soap_read_ns2__APCreateMandateReply(struct soap *soap, ns2__APCreateMandateReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APCreateMandateReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APCreateMandateReply(struct soap *soap, const char *URL, ns2__APCreateMandateReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APCreateMandateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APCreateMandateReply(struct soap *soap, ns2__APCreateMandateReply *p)
{
	if (::soap_read_ns2__APCreateMandateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APCreateMandateService_DEFINED
#define SOAP_TYPE_ns2__APCreateMandateService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APCreateMandateService(struct soap*, const char*, int, const ns2__APCreateMandateService *, const char*);
SOAP_FMAC3 ns2__APCreateMandateService * SOAP_FMAC4 soap_in_ns2__APCreateMandateService(struct soap*, const char*, ns2__APCreateMandateService *, const char*);
SOAP_FMAC1 ns2__APCreateMandateService * SOAP_FMAC2 soap_instantiate_ns2__APCreateMandateService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APCreateMandateService * soap_new_ns2__APCreateMandateService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APCreateMandateService(soap, n, NULL, NULL, NULL);
}

inline ns2__APCreateMandateService * soap_new_req_ns2__APCreateMandateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APCreateMandateService *_p = ::soap_new_ns2__APCreateMandateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APCreateMandateService::run = run;
	}
	return _p;
}

inline ns2__APCreateMandateService * soap_new_set_ns2__APCreateMandateService(
	struct soap *soap,
	std::string *saleRequestID,
	std::string *cancelURL,
	std::string *successURL,
	std::string *failureURL,
	const std::string& run)
{
	ns2__APCreateMandateService *_p = ::soap_new_ns2__APCreateMandateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APCreateMandateService::saleRequestID = saleRequestID;
		_p->ns2__APCreateMandateService::cancelURL = cancelURL;
		_p->ns2__APCreateMandateService::successURL = successURL;
		_p->ns2__APCreateMandateService::failureURL = failureURL;
		_p->ns2__APCreateMandateService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__APCreateMandateService(struct soap *soap, ns2__APCreateMandateService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCreateMandateService", p->soap_type() == SOAP_TYPE_ns2__APCreateMandateService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APCreateMandateService(struct soap *soap, const char *URL, ns2__APCreateMandateService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCreateMandateService", p->soap_type() == SOAP_TYPE_ns2__APCreateMandateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APCreateMandateService(struct soap *soap, const char *URL, ns2__APCreateMandateService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCreateMandateService", p->soap_type() == SOAP_TYPE_ns2__APCreateMandateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APCreateMandateService(struct soap *soap, const char *URL, ns2__APCreateMandateService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCreateMandateService", p->soap_type() == SOAP_TYPE_ns2__APCreateMandateService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APCreateMandateService * SOAP_FMAC4 soap_get_ns2__APCreateMandateService(struct soap*, ns2__APCreateMandateService *, const char*, const char*);

inline int soap_read_ns2__APCreateMandateService(struct soap *soap, ns2__APCreateMandateService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APCreateMandateService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APCreateMandateService(struct soap *soap, const char *URL, ns2__APCreateMandateService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APCreateMandateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APCreateMandateService(struct soap *soap, ns2__APCreateMandateService *p)
{
	if (::soap_read_ns2__APCreateMandateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PostdatedTransaction_DEFINED
#define SOAP_TYPE_ns2__PostdatedTransaction_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PostdatedTransaction(struct soap*, const char*, int, const ns2__PostdatedTransaction *, const char*);
SOAP_FMAC3 ns2__PostdatedTransaction * SOAP_FMAC4 soap_in_ns2__PostdatedTransaction(struct soap*, const char*, ns2__PostdatedTransaction *, const char*);
SOAP_FMAC1 ns2__PostdatedTransaction * SOAP_FMAC2 soap_instantiate_ns2__PostdatedTransaction(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PostdatedTransaction * soap_new_ns2__PostdatedTransaction(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PostdatedTransaction(soap, n, NULL, NULL, NULL);
}

inline ns2__PostdatedTransaction * soap_new_req_ns2__PostdatedTransaction(
	struct soap *soap)
{
	ns2__PostdatedTransaction *_p = ::soap_new_ns2__PostdatedTransaction(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__PostdatedTransaction * soap_new_set_ns2__PostdatedTransaction(
	struct soap *soap,
	std::string *guaranteeIndicator,
	std::string *guaranteeAmount,
	std::string *settlementDate)
{
	ns2__PostdatedTransaction *_p = ::soap_new_ns2__PostdatedTransaction(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PostdatedTransaction::guaranteeIndicator = guaranteeIndicator;
		_p->ns2__PostdatedTransaction::guaranteeAmount = guaranteeAmount;
		_p->ns2__PostdatedTransaction::settlementDate = settlementDate;
	}
	return _p;
}

inline int soap_write_ns2__PostdatedTransaction(struct soap *soap, ns2__PostdatedTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PostdatedTransaction", p->soap_type() == SOAP_TYPE_ns2__PostdatedTransaction ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PostdatedTransaction(struct soap *soap, const char *URL, ns2__PostdatedTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PostdatedTransaction", p->soap_type() == SOAP_TYPE_ns2__PostdatedTransaction ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PostdatedTransaction(struct soap *soap, const char *URL, ns2__PostdatedTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PostdatedTransaction", p->soap_type() == SOAP_TYPE_ns2__PostdatedTransaction ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PostdatedTransaction(struct soap *soap, const char *URL, ns2__PostdatedTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PostdatedTransaction", p->soap_type() == SOAP_TYPE_ns2__PostdatedTransaction ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PostdatedTransaction * SOAP_FMAC4 soap_get_ns2__PostdatedTransaction(struct soap*, ns2__PostdatedTransaction *, const char*, const char*);

inline int soap_read_ns2__PostdatedTransaction(struct soap *soap, ns2__PostdatedTransaction *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PostdatedTransaction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PostdatedTransaction(struct soap *soap, const char *URL, ns2__PostdatedTransaction *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PostdatedTransaction(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PostdatedTransaction(struct soap *soap, ns2__PostdatedTransaction *p)
{
	if (::soap_read_ns2__PostdatedTransaction(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Passenger_DEFINED
#define SOAP_TYPE_ns2__Passenger_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Passenger(struct soap*, const char*, int, const ns2__Passenger *, const char*);
SOAP_FMAC3 ns2__Passenger * SOAP_FMAC4 soap_in_ns2__Passenger(struct soap*, const char*, ns2__Passenger *, const char*);
SOAP_FMAC1 ns2__Passenger * SOAP_FMAC2 soap_instantiate_ns2__Passenger(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Passenger * soap_new_ns2__Passenger(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Passenger(soap, n, NULL, NULL, NULL);
}

inline ns2__Passenger * soap_new_req_ns2__Passenger(
	struct soap *soap,
	const std::string& id)
{
	ns2__Passenger *_p = ::soap_new_ns2__Passenger(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Passenger::id = id;
	}
	return _p;
}

inline ns2__Passenger * soap_new_set_ns2__Passenger(
	struct soap *soap,
	std::string *firstName,
	std::string *lastName,
	const std::string& id)
{
	ns2__Passenger *_p = ::soap_new_ns2__Passenger(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Passenger::firstName = firstName;
		_p->ns2__Passenger::lastName = lastName;
		_p->ns2__Passenger::id = id;
	}
	return _p;
}

inline int soap_write_ns2__Passenger(struct soap *soap, ns2__Passenger const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Passenger", p->soap_type() == SOAP_TYPE_ns2__Passenger ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Passenger(struct soap *soap, const char *URL, ns2__Passenger const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Passenger", p->soap_type() == SOAP_TYPE_ns2__Passenger ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Passenger(struct soap *soap, const char *URL, ns2__Passenger const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Passenger", p->soap_type() == SOAP_TYPE_ns2__Passenger ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Passenger(struct soap *soap, const char *URL, ns2__Passenger const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Passenger", p->soap_type() == SOAP_TYPE_ns2__Passenger ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Passenger * SOAP_FMAC4 soap_get_ns2__Passenger(struct soap*, ns2__Passenger *, const char*, const char*);

inline int soap_read_ns2__Passenger(struct soap *soap, ns2__Passenger *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Passenger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Passenger(struct soap *soap, const char *URL, ns2__Passenger *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Passenger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Passenger(struct soap *soap, ns2__Passenger *p)
{
	if (::soap_read_ns2__Passenger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APBillingAgreementReply_DEFINED
#define SOAP_TYPE_ns2__APBillingAgreementReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APBillingAgreementReply(struct soap*, const char*, int, const ns2__APBillingAgreementReply *, const char*);
SOAP_FMAC3 ns2__APBillingAgreementReply * SOAP_FMAC4 soap_in_ns2__APBillingAgreementReply(struct soap*, const char*, ns2__APBillingAgreementReply *, const char*);
SOAP_FMAC1 ns2__APBillingAgreementReply * SOAP_FMAC2 soap_instantiate_ns2__APBillingAgreementReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APBillingAgreementReply * soap_new_ns2__APBillingAgreementReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APBillingAgreementReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APBillingAgreementReply * soap_new_req_ns2__APBillingAgreementReply(
	struct soap *soap)
{
	ns2__APBillingAgreementReply *_p = ::soap_new_ns2__APBillingAgreementReply(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__APBillingAgreementReply * soap_new_set_ns2__APBillingAgreementReply(
	struct soap *soap,
	std::string *reasonCode,
	std::string *amount,
	std::string *status,
	std::string *processorResponse,
	std::string *dateTime)
{
	ns2__APBillingAgreementReply *_p = ::soap_new_ns2__APBillingAgreementReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APBillingAgreementReply::reasonCode = reasonCode;
		_p->ns2__APBillingAgreementReply::amount = amount;
		_p->ns2__APBillingAgreementReply::status = status;
		_p->ns2__APBillingAgreementReply::processorResponse = processorResponse;
		_p->ns2__APBillingAgreementReply::dateTime = dateTime;
	}
	return _p;
}

inline int soap_write_ns2__APBillingAgreementReply(struct soap *soap, ns2__APBillingAgreementReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APBillingAgreementReply", p->soap_type() == SOAP_TYPE_ns2__APBillingAgreementReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APBillingAgreementReply(struct soap *soap, const char *URL, ns2__APBillingAgreementReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APBillingAgreementReply", p->soap_type() == SOAP_TYPE_ns2__APBillingAgreementReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APBillingAgreementReply(struct soap *soap, const char *URL, ns2__APBillingAgreementReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APBillingAgreementReply", p->soap_type() == SOAP_TYPE_ns2__APBillingAgreementReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APBillingAgreementReply(struct soap *soap, const char *URL, ns2__APBillingAgreementReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APBillingAgreementReply", p->soap_type() == SOAP_TYPE_ns2__APBillingAgreementReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APBillingAgreementReply * SOAP_FMAC4 soap_get_ns2__APBillingAgreementReply(struct soap*, ns2__APBillingAgreementReply *, const char*, const char*);

inline int soap_read_ns2__APBillingAgreementReply(struct soap *soap, ns2__APBillingAgreementReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APBillingAgreementReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APBillingAgreementReply(struct soap *soap, const char *URL, ns2__APBillingAgreementReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APBillingAgreementReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APBillingAgreementReply(struct soap *soap, ns2__APBillingAgreementReply *p)
{
	if (::soap_read_ns2__APBillingAgreementReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APBillingAgreementService_DEFINED
#define SOAP_TYPE_ns2__APBillingAgreementService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APBillingAgreementService(struct soap*, const char*, int, const ns2__APBillingAgreementService *, const char*);
SOAP_FMAC3 ns2__APBillingAgreementService * SOAP_FMAC4 soap_in_ns2__APBillingAgreementService(struct soap*, const char*, ns2__APBillingAgreementService *, const char*);
SOAP_FMAC1 ns2__APBillingAgreementService * SOAP_FMAC2 soap_instantiate_ns2__APBillingAgreementService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APBillingAgreementService * soap_new_ns2__APBillingAgreementService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APBillingAgreementService(soap, n, NULL, NULL, NULL);
}

inline ns2__APBillingAgreementService * soap_new_req_ns2__APBillingAgreementService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APBillingAgreementService *_p = ::soap_new_ns2__APBillingAgreementService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APBillingAgreementService::run = run;
	}
	return _p;
}

inline ns2__APBillingAgreementService * soap_new_set_ns2__APBillingAgreementService(
	struct soap *soap,
	std::string *sessionsRequestID,
	const std::string& run)
{
	ns2__APBillingAgreementService *_p = ::soap_new_ns2__APBillingAgreementService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APBillingAgreementService::sessionsRequestID = sessionsRequestID;
		_p->ns2__APBillingAgreementService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__APBillingAgreementService(struct soap *soap, ns2__APBillingAgreementService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APBillingAgreementService", p->soap_type() == SOAP_TYPE_ns2__APBillingAgreementService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APBillingAgreementService(struct soap *soap, const char *URL, ns2__APBillingAgreementService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APBillingAgreementService", p->soap_type() == SOAP_TYPE_ns2__APBillingAgreementService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APBillingAgreementService(struct soap *soap, const char *URL, ns2__APBillingAgreementService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APBillingAgreementService", p->soap_type() == SOAP_TYPE_ns2__APBillingAgreementService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APBillingAgreementService(struct soap *soap, const char *URL, ns2__APBillingAgreementService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APBillingAgreementService", p->soap_type() == SOAP_TYPE_ns2__APBillingAgreementService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APBillingAgreementService * SOAP_FMAC4 soap_get_ns2__APBillingAgreementService(struct soap*, ns2__APBillingAgreementService *, const char*, const char*);

inline int soap_read_ns2__APBillingAgreementService(struct soap *soap, ns2__APBillingAgreementService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APBillingAgreementService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APBillingAgreementService(struct soap *soap, const char *URL, ns2__APBillingAgreementService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APBillingAgreementService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APBillingAgreementService(struct soap *soap, ns2__APBillingAgreementService *p)
{
	if (::soap_read_ns2__APBillingAgreementService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APCancelReply_DEFINED
#define SOAP_TYPE_ns2__APCancelReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APCancelReply(struct soap*, const char*, int, const ns2__APCancelReply *, const char*);
SOAP_FMAC3 ns2__APCancelReply * SOAP_FMAC4 soap_in_ns2__APCancelReply(struct soap*, const char*, ns2__APCancelReply *, const char*);
SOAP_FMAC1 ns2__APCancelReply * SOAP_FMAC2 soap_instantiate_ns2__APCancelReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APCancelReply * soap_new_ns2__APCancelReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APCancelReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APCancelReply * soap_new_req_ns2__APCancelReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__APCancelReply *_p = ::soap_new_ns2__APCancelReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APCancelReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__APCancelReply * soap_new_set_ns2__APCancelReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *processorTransactionID,
	std::string *status,
	std::string *processorResponse,
	std::string *dateTime,
	std::string *paymentStatus,
	std::string *responseCode,
	std::string *reconciliationID)
{
	ns2__APCancelReply *_p = ::soap_new_ns2__APCancelReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APCancelReply::reasonCode = reasonCode;
		_p->ns2__APCancelReply::processorTransactionID = processorTransactionID;
		_p->ns2__APCancelReply::status = status;
		_p->ns2__APCancelReply::processorResponse = processorResponse;
		_p->ns2__APCancelReply::dateTime = dateTime;
		_p->ns2__APCancelReply::paymentStatus = paymentStatus;
		_p->ns2__APCancelReply::responseCode = responseCode;
		_p->ns2__APCancelReply::reconciliationID = reconciliationID;
	}
	return _p;
}

inline int soap_write_ns2__APCancelReply(struct soap *soap, ns2__APCancelReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCancelReply", p->soap_type() == SOAP_TYPE_ns2__APCancelReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APCancelReply(struct soap *soap, const char *URL, ns2__APCancelReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCancelReply", p->soap_type() == SOAP_TYPE_ns2__APCancelReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APCancelReply(struct soap *soap, const char *URL, ns2__APCancelReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCancelReply", p->soap_type() == SOAP_TYPE_ns2__APCancelReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APCancelReply(struct soap *soap, const char *URL, ns2__APCancelReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCancelReply", p->soap_type() == SOAP_TYPE_ns2__APCancelReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APCancelReply * SOAP_FMAC4 soap_get_ns2__APCancelReply(struct soap*, ns2__APCancelReply *, const char*, const char*);

inline int soap_read_ns2__APCancelReply(struct soap *soap, ns2__APCancelReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APCancelReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APCancelReply(struct soap *soap, const char *URL, ns2__APCancelReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APCancelReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APCancelReply(struct soap *soap, ns2__APCancelReply *p)
{
	if (::soap_read_ns2__APCancelReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APCancelService_DEFINED
#define SOAP_TYPE_ns2__APCancelService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APCancelService(struct soap*, const char*, int, const ns2__APCancelService *, const char*);
SOAP_FMAC3 ns2__APCancelService * SOAP_FMAC4 soap_in_ns2__APCancelService(struct soap*, const char*, ns2__APCancelService *, const char*);
SOAP_FMAC1 ns2__APCancelService * SOAP_FMAC2 soap_instantiate_ns2__APCancelService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APCancelService * soap_new_ns2__APCancelService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APCancelService(soap, n, NULL, NULL, NULL);
}

inline ns2__APCancelService * soap_new_req_ns2__APCancelService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APCancelService *_p = ::soap_new_ns2__APCancelService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APCancelService::run = run;
	}
	return _p;
}

inline ns2__APCancelService * soap_new_set_ns2__APCancelService(
	struct soap *soap,
	std::string *reconciliationID,
	std::string *orderRequestID,
	std::string *saleRequestID,
	const std::string& run)
{
	ns2__APCancelService *_p = ::soap_new_ns2__APCancelService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APCancelService::reconciliationID = reconciliationID;
		_p->ns2__APCancelService::orderRequestID = orderRequestID;
		_p->ns2__APCancelService::saleRequestID = saleRequestID;
		_p->ns2__APCancelService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__APCancelService(struct soap *soap, ns2__APCancelService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCancelService", p->soap_type() == SOAP_TYPE_ns2__APCancelService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APCancelService(struct soap *soap, const char *URL, ns2__APCancelService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCancelService", p->soap_type() == SOAP_TYPE_ns2__APCancelService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APCancelService(struct soap *soap, const char *URL, ns2__APCancelService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCancelService", p->soap_type() == SOAP_TYPE_ns2__APCancelService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APCancelService(struct soap *soap, const char *URL, ns2__APCancelService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCancelService", p->soap_type() == SOAP_TYPE_ns2__APCancelService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APCancelService * SOAP_FMAC4 soap_get_ns2__APCancelService(struct soap*, ns2__APCancelService *, const char*, const char*);

inline int soap_read_ns2__APCancelService(struct soap *soap, ns2__APCancelService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APCancelService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APCancelService(struct soap *soap, const char *URL, ns2__APCancelService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APCancelService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APCancelService(struct soap *soap, ns2__APCancelService *p)
{
	if (::soap_read_ns2__APCancelService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APOrderReply_DEFINED
#define SOAP_TYPE_ns2__APOrderReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APOrderReply(struct soap*, const char*, int, const ns2__APOrderReply *, const char*);
SOAP_FMAC3 ns2__APOrderReply * SOAP_FMAC4 soap_in_ns2__APOrderReply(struct soap*, const char*, ns2__APOrderReply *, const char*);
SOAP_FMAC1 ns2__APOrderReply * SOAP_FMAC2 soap_instantiate_ns2__APOrderReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APOrderReply * soap_new_ns2__APOrderReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APOrderReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APOrderReply * soap_new_req_ns2__APOrderReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__APOrderReply *_p = ::soap_new_ns2__APOrderReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APOrderReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__APOrderReply * soap_new_set_ns2__APOrderReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *amount,
	std::string *reconciliationID,
	std::string *status,
	std::string *processorResponse,
	std::string *dateTime)
{
	ns2__APOrderReply *_p = ::soap_new_ns2__APOrderReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APOrderReply::reasonCode = reasonCode;
		_p->ns2__APOrderReply::amount = amount;
		_p->ns2__APOrderReply::reconciliationID = reconciliationID;
		_p->ns2__APOrderReply::status = status;
		_p->ns2__APOrderReply::processorResponse = processorResponse;
		_p->ns2__APOrderReply::dateTime = dateTime;
	}
	return _p;
}

inline int soap_write_ns2__APOrderReply(struct soap *soap, ns2__APOrderReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APOrderReply", p->soap_type() == SOAP_TYPE_ns2__APOrderReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APOrderReply(struct soap *soap, const char *URL, ns2__APOrderReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APOrderReply", p->soap_type() == SOAP_TYPE_ns2__APOrderReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APOrderReply(struct soap *soap, const char *URL, ns2__APOrderReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APOrderReply", p->soap_type() == SOAP_TYPE_ns2__APOrderReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APOrderReply(struct soap *soap, const char *URL, ns2__APOrderReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APOrderReply", p->soap_type() == SOAP_TYPE_ns2__APOrderReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APOrderReply * SOAP_FMAC4 soap_get_ns2__APOrderReply(struct soap*, ns2__APOrderReply *, const char*, const char*);

inline int soap_read_ns2__APOrderReply(struct soap *soap, ns2__APOrderReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APOrderReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APOrderReply(struct soap *soap, const char *URL, ns2__APOrderReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APOrderReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APOrderReply(struct soap *soap, ns2__APOrderReply *p)
{
	if (::soap_read_ns2__APOrderReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APOrderService_DEFINED
#define SOAP_TYPE_ns2__APOrderService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APOrderService(struct soap*, const char*, int, const ns2__APOrderService *, const char*);
SOAP_FMAC3 ns2__APOrderService * SOAP_FMAC4 soap_in_ns2__APOrderService(struct soap*, const char*, ns2__APOrderService *, const char*);
SOAP_FMAC1 ns2__APOrderService * SOAP_FMAC2 soap_instantiate_ns2__APOrderService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APOrderService * soap_new_ns2__APOrderService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APOrderService(soap, n, NULL, NULL, NULL);
}

inline ns2__APOrderService * soap_new_req_ns2__APOrderService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APOrderService *_p = ::soap_new_ns2__APOrderService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APOrderService::run = run;
	}
	return _p;
}

inline ns2__APOrderService * soap_new_set_ns2__APOrderService(
	struct soap *soap,
	std::string *sessionsRequestID,
	const std::string& run)
{
	ns2__APOrderService *_p = ::soap_new_ns2__APOrderService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APOrderService::sessionsRequestID = sessionsRequestID;
		_p->ns2__APOrderService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__APOrderService(struct soap *soap, ns2__APOrderService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APOrderService", p->soap_type() == SOAP_TYPE_ns2__APOrderService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APOrderService(struct soap *soap, const char *URL, ns2__APOrderService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APOrderService", p->soap_type() == SOAP_TYPE_ns2__APOrderService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APOrderService(struct soap *soap, const char *URL, ns2__APOrderService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APOrderService", p->soap_type() == SOAP_TYPE_ns2__APOrderService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APOrderService(struct soap *soap, const char *URL, ns2__APOrderService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APOrderService", p->soap_type() == SOAP_TYPE_ns2__APOrderService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APOrderService * SOAP_FMAC4 soap_get_ns2__APOrderService(struct soap*, ns2__APOrderService *, const char*, const char*);

inline int soap_read_ns2__APOrderService(struct soap *soap, ns2__APOrderService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APOrderService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APOrderService(struct soap *soap, const char *URL, ns2__APOrderService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APOrderService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APOrderService(struct soap *soap, ns2__APOrderService *p)
{
	if (::soap_read_ns2__APOrderService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Loan_DEFINED
#define SOAP_TYPE_ns2__Loan_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Loan(struct soap*, const char*, int, const ns2__Loan *, const char*);
SOAP_FMAC3 ns2__Loan * SOAP_FMAC4 soap_in_ns2__Loan(struct soap*, const char*, ns2__Loan *, const char*);
SOAP_FMAC1 ns2__Loan * SOAP_FMAC2 soap_instantiate_ns2__Loan(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Loan * soap_new_ns2__Loan(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Loan(soap, n, NULL, NULL, NULL);
}

inline ns2__Loan * soap_new_req_ns2__Loan(
	struct soap *soap)
{
	ns2__Loan *_p = ::soap_new_ns2__Loan(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Loan * soap_new_set_ns2__Loan(
	struct soap *soap,
	std::string *assetType,
	std::string *type)
{
	ns2__Loan *_p = ::soap_new_ns2__Loan(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Loan::assetType = assetType;
		_p->ns2__Loan::type = type;
	}
	return _p;
}

inline int soap_write_ns2__Loan(struct soap *soap, ns2__Loan const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Loan", p->soap_type() == SOAP_TYPE_ns2__Loan ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Loan(struct soap *soap, const char *URL, ns2__Loan const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Loan", p->soap_type() == SOAP_TYPE_ns2__Loan ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Loan(struct soap *soap, const char *URL, ns2__Loan const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Loan", p->soap_type() == SOAP_TYPE_ns2__Loan ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Loan(struct soap *soap, const char *URL, ns2__Loan const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Loan", p->soap_type() == SOAP_TYPE_ns2__Loan ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Loan * SOAP_FMAC4 soap_get_ns2__Loan(struct soap*, ns2__Loan *, const char*, const char*);

inline int soap_read_ns2__Loan(struct soap *soap, ns2__Loan *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Loan(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Loan(struct soap *soap, const char *URL, ns2__Loan *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Loan(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Loan(struct soap *soap, ns2__Loan *p)
{
	if (::soap_read_ns2__Loan(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__TransactionMetadataService_DEFINED
#define SOAP_TYPE_ns2__TransactionMetadataService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TransactionMetadataService(struct soap*, const char*, int, const ns2__TransactionMetadataService *, const char*);
SOAP_FMAC3 ns2__TransactionMetadataService * SOAP_FMAC4 soap_in_ns2__TransactionMetadataService(struct soap*, const char*, ns2__TransactionMetadataService *, const char*);
SOAP_FMAC1 ns2__TransactionMetadataService * SOAP_FMAC2 soap_instantiate_ns2__TransactionMetadataService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TransactionMetadataService * soap_new_ns2__TransactionMetadataService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__TransactionMetadataService(soap, n, NULL, NULL, NULL);
}

inline ns2__TransactionMetadataService * soap_new_req_ns2__TransactionMetadataService(
	struct soap *soap,
	const std::string& run)
{
	ns2__TransactionMetadataService *_p = ::soap_new_ns2__TransactionMetadataService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__TransactionMetadataService::run = run;
	}
	return _p;
}

inline ns2__TransactionMetadataService * soap_new_set_ns2__TransactionMetadataService(
	struct soap *soap,
	std::string *authRequestID,
	const std::string& run)
{
	ns2__TransactionMetadataService *_p = ::soap_new_ns2__TransactionMetadataService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__TransactionMetadataService::authRequestID = authRequestID;
		_p->ns2__TransactionMetadataService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__TransactionMetadataService(struct soap *soap, ns2__TransactionMetadataService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TransactionMetadataService", p->soap_type() == SOAP_TYPE_ns2__TransactionMetadataService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__TransactionMetadataService(struct soap *soap, const char *URL, ns2__TransactionMetadataService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TransactionMetadataService", p->soap_type() == SOAP_TYPE_ns2__TransactionMetadataService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__TransactionMetadataService(struct soap *soap, const char *URL, ns2__TransactionMetadataService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TransactionMetadataService", p->soap_type() == SOAP_TYPE_ns2__TransactionMetadataService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__TransactionMetadataService(struct soap *soap, const char *URL, ns2__TransactionMetadataService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TransactionMetadataService", p->soap_type() == SOAP_TYPE_ns2__TransactionMetadataService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__TransactionMetadataService * SOAP_FMAC4 soap_get_ns2__TransactionMetadataService(struct soap*, ns2__TransactionMetadataService *, const char*, const char*);

inline int soap_read_ns2__TransactionMetadataService(struct soap *soap, ns2__TransactionMetadataService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__TransactionMetadataService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__TransactionMetadataService(struct soap *soap, const char *URL, ns2__TransactionMetadataService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__TransactionMetadataService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__TransactionMetadataService(struct soap *soap, ns2__TransactionMetadataService *p)
{
	if (::soap_read_ns2__TransactionMetadataService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__GETVisaCheckoutDataService_DEFINED
#define SOAP_TYPE_ns2__GETVisaCheckoutDataService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GETVisaCheckoutDataService(struct soap*, const char*, int, const ns2__GETVisaCheckoutDataService *, const char*);
SOAP_FMAC3 ns2__GETVisaCheckoutDataService * SOAP_FMAC4 soap_in_ns2__GETVisaCheckoutDataService(struct soap*, const char*, ns2__GETVisaCheckoutDataService *, const char*);
SOAP_FMAC1 ns2__GETVisaCheckoutDataService * SOAP_FMAC2 soap_instantiate_ns2__GETVisaCheckoutDataService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GETVisaCheckoutDataService * soap_new_ns2__GETVisaCheckoutDataService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__GETVisaCheckoutDataService(soap, n, NULL, NULL, NULL);
}

inline ns2__GETVisaCheckoutDataService * soap_new_req_ns2__GETVisaCheckoutDataService(
	struct soap *soap,
	const std::string& run)
{
	ns2__GETVisaCheckoutDataService *_p = ::soap_new_ns2__GETVisaCheckoutDataService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GETVisaCheckoutDataService::run = run;
	}
	return _p;
}

inline ns2__GETVisaCheckoutDataService * soap_new_set_ns2__GETVisaCheckoutDataService(
	struct soap *soap,
	const std::string& run)
{
	ns2__GETVisaCheckoutDataService *_p = ::soap_new_ns2__GETVisaCheckoutDataService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GETVisaCheckoutDataService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__GETVisaCheckoutDataService(struct soap *soap, ns2__GETVisaCheckoutDataService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GETVisaCheckoutDataService", p->soap_type() == SOAP_TYPE_ns2__GETVisaCheckoutDataService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__GETVisaCheckoutDataService(struct soap *soap, const char *URL, ns2__GETVisaCheckoutDataService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GETVisaCheckoutDataService", p->soap_type() == SOAP_TYPE_ns2__GETVisaCheckoutDataService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__GETVisaCheckoutDataService(struct soap *soap, const char *URL, ns2__GETVisaCheckoutDataService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GETVisaCheckoutDataService", p->soap_type() == SOAP_TYPE_ns2__GETVisaCheckoutDataService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__GETVisaCheckoutDataService(struct soap *soap, const char *URL, ns2__GETVisaCheckoutDataService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GETVisaCheckoutDataService", p->soap_type() == SOAP_TYPE_ns2__GETVisaCheckoutDataService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__GETVisaCheckoutDataService * SOAP_FMAC4 soap_get_ns2__GETVisaCheckoutDataService(struct soap*, ns2__GETVisaCheckoutDataService *, const char*, const char*);

inline int soap_read_ns2__GETVisaCheckoutDataService(struct soap *soap, ns2__GETVisaCheckoutDataService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__GETVisaCheckoutDataService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__GETVisaCheckoutDataService(struct soap *soap, const char *URL, ns2__GETVisaCheckoutDataService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__GETVisaCheckoutDataService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__GETVisaCheckoutDataService(struct soap *soap, ns2__GETVisaCheckoutDataService *p)
{
	if (::soap_read_ns2__GETVisaCheckoutDataService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__issuer_DEFINED
#define SOAP_TYPE_ns2__issuer_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__issuer(struct soap*, const char*, int, const ns2__issuer *, const char*);
SOAP_FMAC3 ns2__issuer * SOAP_FMAC4 soap_in_ns2__issuer(struct soap*, const char*, ns2__issuer *, const char*);
SOAP_FMAC1 ns2__issuer * SOAP_FMAC2 soap_instantiate_ns2__issuer(struct soap*, int, const char*, const char*, size_t*);

inline ns2__issuer * soap_new_ns2__issuer(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__issuer(soap, n, NULL, NULL, NULL);
}

inline ns2__issuer * soap_new_req_ns2__issuer(
	struct soap *soap)
{
	ns2__issuer *_p = ::soap_new_ns2__issuer(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__issuer * soap_new_set_ns2__issuer(
	struct soap *soap,
	std::string *additionalData,
	std::string *name,
	std::string *country,
	std::string *countryNumericCode,
	std::string *phoneNumber,
	std::string *responseCode,
	std::string *riskAnalysisExemptionResult,
	std::string *trustedMerchantExemptionResult)
{
	ns2__issuer *_p = ::soap_new_ns2__issuer(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__issuer::additionalData = additionalData;
		_p->ns2__issuer::name = name;
		_p->ns2__issuer::country = country;
		_p->ns2__issuer::countryNumericCode = countryNumericCode;
		_p->ns2__issuer::phoneNumber = phoneNumber;
		_p->ns2__issuer::responseCode = responseCode;
		_p->ns2__issuer::riskAnalysisExemptionResult = riskAnalysisExemptionResult;
		_p->ns2__issuer::trustedMerchantExemptionResult = trustedMerchantExemptionResult;
	}
	return _p;
}

inline int soap_write_ns2__issuer(struct soap *soap, ns2__issuer const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:issuer", p->soap_type() == SOAP_TYPE_ns2__issuer ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__issuer(struct soap *soap, const char *URL, ns2__issuer const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:issuer", p->soap_type() == SOAP_TYPE_ns2__issuer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__issuer(struct soap *soap, const char *URL, ns2__issuer const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:issuer", p->soap_type() == SOAP_TYPE_ns2__issuer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__issuer(struct soap *soap, const char *URL, ns2__issuer const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:issuer", p->soap_type() == SOAP_TYPE_ns2__issuer ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__issuer * SOAP_FMAC4 soap_get_ns2__issuer(struct soap*, ns2__issuer *, const char*, const char*);

inline int soap_read_ns2__issuer(struct soap *soap, ns2__issuer *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__issuer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__issuer(struct soap *soap, const char *URL, ns2__issuer *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__issuer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__issuer(struct soap *soap, ns2__issuer *p)
{
	if (::soap_read_ns2__issuer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__BinLookupReply_DEFINED
#define SOAP_TYPE_ns2__BinLookupReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BinLookupReply(struct soap*, const char*, int, const ns2__BinLookupReply *, const char*);
SOAP_FMAC3 ns2__BinLookupReply * SOAP_FMAC4 soap_in_ns2__BinLookupReply(struct soap*, const char*, ns2__BinLookupReply *, const char*);
SOAP_FMAC1 ns2__BinLookupReply * SOAP_FMAC2 soap_instantiate_ns2__BinLookupReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BinLookupReply * soap_new_ns2__BinLookupReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__BinLookupReply(soap, n, NULL, NULL, NULL);
}

inline ns2__BinLookupReply * soap_new_req_ns2__BinLookupReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__BinLookupReply *_p = ::soap_new_ns2__BinLookupReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BinLookupReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__BinLookupReply * soap_new_set_ns2__BinLookupReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *requestDateTime,
	std::string *cardCategory)
{
	ns2__BinLookupReply *_p = ::soap_new_ns2__BinLookupReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BinLookupReply::reasonCode = reasonCode;
		_p->ns2__BinLookupReply::requestDateTime = requestDateTime;
		_p->ns2__BinLookupReply::cardCategory = cardCategory;
	}
	return _p;
}

inline int soap_write_ns2__BinLookupReply(struct soap *soap, ns2__BinLookupReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BinLookupReply", p->soap_type() == SOAP_TYPE_ns2__BinLookupReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__BinLookupReply(struct soap *soap, const char *URL, ns2__BinLookupReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BinLookupReply", p->soap_type() == SOAP_TYPE_ns2__BinLookupReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__BinLookupReply(struct soap *soap, const char *URL, ns2__BinLookupReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BinLookupReply", p->soap_type() == SOAP_TYPE_ns2__BinLookupReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__BinLookupReply(struct soap *soap, const char *URL, ns2__BinLookupReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BinLookupReply", p->soap_type() == SOAP_TYPE_ns2__BinLookupReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__BinLookupReply * SOAP_FMAC4 soap_get_ns2__BinLookupReply(struct soap*, ns2__BinLookupReply *, const char*, const char*);

inline int soap_read_ns2__BinLookupReply(struct soap *soap, ns2__BinLookupReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__BinLookupReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__BinLookupReply(struct soap *soap, const char *URL, ns2__BinLookupReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__BinLookupReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__BinLookupReply(struct soap *soap, ns2__BinLookupReply *p)
{
	if (::soap_read_ns2__BinLookupReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__BinLookupService_DEFINED
#define SOAP_TYPE_ns2__BinLookupService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BinLookupService(struct soap*, const char*, int, const ns2__BinLookupService *, const char*);
SOAP_FMAC3 ns2__BinLookupService * SOAP_FMAC4 soap_in_ns2__BinLookupService(struct soap*, const char*, ns2__BinLookupService *, const char*);
SOAP_FMAC1 ns2__BinLookupService * SOAP_FMAC2 soap_instantiate_ns2__BinLookupService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BinLookupService * soap_new_ns2__BinLookupService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__BinLookupService(soap, n, NULL, NULL, NULL);
}

inline ns2__BinLookupService * soap_new_req_ns2__BinLookupService(
	struct soap *soap,
	const std::string& run)
{
	ns2__BinLookupService *_p = ::soap_new_ns2__BinLookupService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BinLookupService::run = run;
	}
	return _p;
}

inline ns2__BinLookupService * soap_new_set_ns2__BinLookupService(
	struct soap *soap,
	std::string *mode,
	std::string *networkOrder,
	std::string *retrievalReferenceNumber,
	const std::string& run)
{
	ns2__BinLookupService *_p = ::soap_new_ns2__BinLookupService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BinLookupService::mode = mode;
		_p->ns2__BinLookupService::networkOrder = networkOrder;
		_p->ns2__BinLookupService::retrievalReferenceNumber = retrievalReferenceNumber;
		_p->ns2__BinLookupService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__BinLookupService(struct soap *soap, ns2__BinLookupService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BinLookupService", p->soap_type() == SOAP_TYPE_ns2__BinLookupService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__BinLookupService(struct soap *soap, const char *URL, ns2__BinLookupService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BinLookupService", p->soap_type() == SOAP_TYPE_ns2__BinLookupService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__BinLookupService(struct soap *soap, const char *URL, ns2__BinLookupService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BinLookupService", p->soap_type() == SOAP_TYPE_ns2__BinLookupService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__BinLookupService(struct soap *soap, const char *URL, ns2__BinLookupService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BinLookupService", p->soap_type() == SOAP_TYPE_ns2__BinLookupService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__BinLookupService * SOAP_FMAC4 soap_get_ns2__BinLookupService(struct soap*, ns2__BinLookupService *, const char*, const char*);

inline int soap_read_ns2__BinLookupService(struct soap *soap, ns2__BinLookupService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__BinLookupService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__BinLookupService(struct soap *soap, const char *URL, ns2__BinLookupService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__BinLookupService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__BinLookupService(struct soap *soap, ns2__BinLookupService *p)
{
	if (::soap_read_ns2__BinLookupService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__EncryptPaymentDataReply_DEFINED
#define SOAP_TYPE_ns2__EncryptPaymentDataReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EncryptPaymentDataReply(struct soap*, const char*, int, const ns2__EncryptPaymentDataReply *, const char*);
SOAP_FMAC3 ns2__EncryptPaymentDataReply * SOAP_FMAC4 soap_in_ns2__EncryptPaymentDataReply(struct soap*, const char*, ns2__EncryptPaymentDataReply *, const char*);
SOAP_FMAC1 ns2__EncryptPaymentDataReply * SOAP_FMAC2 soap_instantiate_ns2__EncryptPaymentDataReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__EncryptPaymentDataReply * soap_new_ns2__EncryptPaymentDataReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__EncryptPaymentDataReply(soap, n, NULL, NULL, NULL);
}

inline ns2__EncryptPaymentDataReply * soap_new_req_ns2__EncryptPaymentDataReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__EncryptPaymentDataReply *_p = ::soap_new_ns2__EncryptPaymentDataReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__EncryptPaymentDataReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__EncryptPaymentDataReply * soap_new_set_ns2__EncryptPaymentDataReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *requestDateTime)
{
	ns2__EncryptPaymentDataReply *_p = ::soap_new_ns2__EncryptPaymentDataReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__EncryptPaymentDataReply::reasonCode = reasonCode;
		_p->ns2__EncryptPaymentDataReply::requestDateTime = requestDateTime;
	}
	return _p;
}

inline int soap_write_ns2__EncryptPaymentDataReply(struct soap *soap, ns2__EncryptPaymentDataReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:EncryptPaymentDataReply", p->soap_type() == SOAP_TYPE_ns2__EncryptPaymentDataReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__EncryptPaymentDataReply(struct soap *soap, const char *URL, ns2__EncryptPaymentDataReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:EncryptPaymentDataReply", p->soap_type() == SOAP_TYPE_ns2__EncryptPaymentDataReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__EncryptPaymentDataReply(struct soap *soap, const char *URL, ns2__EncryptPaymentDataReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:EncryptPaymentDataReply", p->soap_type() == SOAP_TYPE_ns2__EncryptPaymentDataReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__EncryptPaymentDataReply(struct soap *soap, const char *URL, ns2__EncryptPaymentDataReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:EncryptPaymentDataReply", p->soap_type() == SOAP_TYPE_ns2__EncryptPaymentDataReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__EncryptPaymentDataReply * SOAP_FMAC4 soap_get_ns2__EncryptPaymentDataReply(struct soap*, ns2__EncryptPaymentDataReply *, const char*, const char*);

inline int soap_read_ns2__EncryptPaymentDataReply(struct soap *soap, ns2__EncryptPaymentDataReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__EncryptPaymentDataReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__EncryptPaymentDataReply(struct soap *soap, const char *URL, ns2__EncryptPaymentDataReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__EncryptPaymentDataReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__EncryptPaymentDataReply(struct soap *soap, ns2__EncryptPaymentDataReply *p)
{
	if (::soap_read_ns2__EncryptPaymentDataReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__GetVisaCheckoutDataReply_DEFINED
#define SOAP_TYPE_ns2__GetVisaCheckoutDataReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GetVisaCheckoutDataReply(struct soap*, const char*, int, const ns2__GetVisaCheckoutDataReply *, const char*);
SOAP_FMAC3 ns2__GetVisaCheckoutDataReply * SOAP_FMAC4 soap_in_ns2__GetVisaCheckoutDataReply(struct soap*, const char*, ns2__GetVisaCheckoutDataReply *, const char*);
SOAP_FMAC1 ns2__GetVisaCheckoutDataReply * SOAP_FMAC2 soap_instantiate_ns2__GetVisaCheckoutDataReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GetVisaCheckoutDataReply * soap_new_ns2__GetVisaCheckoutDataReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__GetVisaCheckoutDataReply(soap, n, NULL, NULL, NULL);
}

inline ns2__GetVisaCheckoutDataReply * soap_new_req_ns2__GetVisaCheckoutDataReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__GetVisaCheckoutDataReply *_p = ::soap_new_ns2__GetVisaCheckoutDataReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GetVisaCheckoutDataReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__GetVisaCheckoutDataReply * soap_new_set_ns2__GetVisaCheckoutDataReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__GetVisaCheckoutDataReply *_p = ::soap_new_ns2__GetVisaCheckoutDataReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GetVisaCheckoutDataReply::reasonCode = reasonCode;
	}
	return _p;
}

inline int soap_write_ns2__GetVisaCheckoutDataReply(struct soap *soap, ns2__GetVisaCheckoutDataReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetVisaCheckoutDataReply", p->soap_type() == SOAP_TYPE_ns2__GetVisaCheckoutDataReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__GetVisaCheckoutDataReply(struct soap *soap, const char *URL, ns2__GetVisaCheckoutDataReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetVisaCheckoutDataReply", p->soap_type() == SOAP_TYPE_ns2__GetVisaCheckoutDataReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__GetVisaCheckoutDataReply(struct soap *soap, const char *URL, ns2__GetVisaCheckoutDataReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetVisaCheckoutDataReply", p->soap_type() == SOAP_TYPE_ns2__GetVisaCheckoutDataReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__GetVisaCheckoutDataReply(struct soap *soap, const char *URL, ns2__GetVisaCheckoutDataReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetVisaCheckoutDataReply", p->soap_type() == SOAP_TYPE_ns2__GetVisaCheckoutDataReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__GetVisaCheckoutDataReply * SOAP_FMAC4 soap_get_ns2__GetVisaCheckoutDataReply(struct soap*, ns2__GetVisaCheckoutDataReply *, const char*, const char*);

inline int soap_read_ns2__GetVisaCheckoutDataReply(struct soap *soap, ns2__GetVisaCheckoutDataReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__GetVisaCheckoutDataReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__GetVisaCheckoutDataReply(struct soap *soap, const char *URL, ns2__GetVisaCheckoutDataReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__GetVisaCheckoutDataReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__GetVisaCheckoutDataReply(struct soap *soap, ns2__GetVisaCheckoutDataReply *p)
{
	if (::soap_read_ns2__GetVisaCheckoutDataReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DecryptVisaCheckoutDataReply_DEFINED
#define SOAP_TYPE_ns2__DecryptVisaCheckoutDataReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DecryptVisaCheckoutDataReply(struct soap*, const char*, int, const ns2__DecryptVisaCheckoutDataReply *, const char*);
SOAP_FMAC3 ns2__DecryptVisaCheckoutDataReply * SOAP_FMAC4 soap_in_ns2__DecryptVisaCheckoutDataReply(struct soap*, const char*, ns2__DecryptVisaCheckoutDataReply *, const char*);
SOAP_FMAC1 ns2__DecryptVisaCheckoutDataReply * SOAP_FMAC2 soap_instantiate_ns2__DecryptVisaCheckoutDataReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DecryptVisaCheckoutDataReply * soap_new_ns2__DecryptVisaCheckoutDataReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DecryptVisaCheckoutDataReply(soap, n, NULL, NULL, NULL);
}

inline ns2__DecryptVisaCheckoutDataReply * soap_new_req_ns2__DecryptVisaCheckoutDataReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__DecryptVisaCheckoutDataReply *_p = ::soap_new_ns2__DecryptVisaCheckoutDataReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DecryptVisaCheckoutDataReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__DecryptVisaCheckoutDataReply * soap_new_set_ns2__DecryptVisaCheckoutDataReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__DecryptVisaCheckoutDataReply *_p = ::soap_new_ns2__DecryptVisaCheckoutDataReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DecryptVisaCheckoutDataReply::reasonCode = reasonCode;
	}
	return _p;
}

inline int soap_write_ns2__DecryptVisaCheckoutDataReply(struct soap *soap, ns2__DecryptVisaCheckoutDataReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecryptVisaCheckoutDataReply", p->soap_type() == SOAP_TYPE_ns2__DecryptVisaCheckoutDataReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DecryptVisaCheckoutDataReply(struct soap *soap, const char *URL, ns2__DecryptVisaCheckoutDataReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecryptVisaCheckoutDataReply", p->soap_type() == SOAP_TYPE_ns2__DecryptVisaCheckoutDataReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DecryptVisaCheckoutDataReply(struct soap *soap, const char *URL, ns2__DecryptVisaCheckoutDataReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecryptVisaCheckoutDataReply", p->soap_type() == SOAP_TYPE_ns2__DecryptVisaCheckoutDataReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DecryptVisaCheckoutDataReply(struct soap *soap, const char *URL, ns2__DecryptVisaCheckoutDataReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecryptVisaCheckoutDataReply", p->soap_type() == SOAP_TYPE_ns2__DecryptVisaCheckoutDataReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DecryptVisaCheckoutDataReply * SOAP_FMAC4 soap_get_ns2__DecryptVisaCheckoutDataReply(struct soap*, ns2__DecryptVisaCheckoutDataReply *, const char*, const char*);

inline int soap_read_ns2__DecryptVisaCheckoutDataReply(struct soap *soap, ns2__DecryptVisaCheckoutDataReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DecryptVisaCheckoutDataReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DecryptVisaCheckoutDataReply(struct soap *soap, const char *URL, ns2__DecryptVisaCheckoutDataReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DecryptVisaCheckoutDataReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DecryptVisaCheckoutDataReply(struct soap *soap, ns2__DecryptVisaCheckoutDataReply *p)
{
	if (::soap_read_ns2__DecryptVisaCheckoutDataReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__VCCustomData_DEFINED
#define SOAP_TYPE_ns2__VCCustomData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VCCustomData(struct soap*, const char*, int, const ns2__VCCustomData *, const char*);
SOAP_FMAC3 ns2__VCCustomData * SOAP_FMAC4 soap_in_ns2__VCCustomData(struct soap*, const char*, ns2__VCCustomData *, const char*);
SOAP_FMAC1 ns2__VCCustomData * SOAP_FMAC2 soap_instantiate_ns2__VCCustomData(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VCCustomData * soap_new_ns2__VCCustomData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__VCCustomData(soap, n, NULL, NULL, NULL);
}

inline ns2__VCCustomData * soap_new_req_ns2__VCCustomData(
	struct soap *soap)
{
	ns2__VCCustomData *_p = ::soap_new_ns2__VCCustomData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__VCCustomData * soap_new_set_ns2__VCCustomData(
	struct soap *soap,
	std::string *name,
	std::string *value,
	std::string *id)
{
	ns2__VCCustomData *_p = ::soap_new_ns2__VCCustomData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__VCCustomData::name = name;
		_p->ns2__VCCustomData::value = value;
		_p->ns2__VCCustomData::id = id;
	}
	return _p;
}

inline int soap_write_ns2__VCCustomData(struct soap *soap, ns2__VCCustomData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VCCustomData", p->soap_type() == SOAP_TYPE_ns2__VCCustomData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__VCCustomData(struct soap *soap, const char *URL, ns2__VCCustomData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VCCustomData", p->soap_type() == SOAP_TYPE_ns2__VCCustomData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__VCCustomData(struct soap *soap, const char *URL, ns2__VCCustomData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VCCustomData", p->soap_type() == SOAP_TYPE_ns2__VCCustomData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__VCCustomData(struct soap *soap, const char *URL, ns2__VCCustomData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VCCustomData", p->soap_type() == SOAP_TYPE_ns2__VCCustomData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__VCCustomData * SOAP_FMAC4 soap_get_ns2__VCCustomData(struct soap*, ns2__VCCustomData *, const char*, const char*);

inline int soap_read_ns2__VCCustomData(struct soap *soap, ns2__VCCustomData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__VCCustomData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__VCCustomData(struct soap *soap, const char *URL, ns2__VCCustomData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__VCCustomData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__VCCustomData(struct soap *soap, ns2__VCCustomData *p)
{
	if (::soap_read_ns2__VCCustomData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__VCCardArt_DEFINED
#define SOAP_TYPE_ns2__VCCardArt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VCCardArt(struct soap*, const char*, int, const ns2__VCCardArt *, const char*);
SOAP_FMAC3 ns2__VCCardArt * SOAP_FMAC4 soap_in_ns2__VCCardArt(struct soap*, const char*, ns2__VCCardArt *, const char*);
SOAP_FMAC1 ns2__VCCardArt * SOAP_FMAC2 soap_instantiate_ns2__VCCardArt(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VCCardArt * soap_new_ns2__VCCardArt(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__VCCardArt(soap, n, NULL, NULL, NULL);
}

inline ns2__VCCardArt * soap_new_req_ns2__VCCardArt(
	struct soap *soap)
{
	ns2__VCCardArt *_p = ::soap_new_ns2__VCCardArt(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__VCCardArt * soap_new_set_ns2__VCCardArt(
	struct soap *soap,
	std::string *fileName,
	std::string *height,
	std::string *width,
	std::string *id)
{
	ns2__VCCardArt *_p = ::soap_new_ns2__VCCardArt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__VCCardArt::fileName = fileName;
		_p->ns2__VCCardArt::height = height;
		_p->ns2__VCCardArt::width = width;
		_p->ns2__VCCardArt::id = id;
	}
	return _p;
}

inline int soap_write_ns2__VCCardArt(struct soap *soap, ns2__VCCardArt const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VCCardArt", p->soap_type() == SOAP_TYPE_ns2__VCCardArt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__VCCardArt(struct soap *soap, const char *URL, ns2__VCCardArt const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VCCardArt", p->soap_type() == SOAP_TYPE_ns2__VCCardArt ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__VCCardArt(struct soap *soap, const char *URL, ns2__VCCardArt const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VCCardArt", p->soap_type() == SOAP_TYPE_ns2__VCCardArt ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__VCCardArt(struct soap *soap, const char *URL, ns2__VCCardArt const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VCCardArt", p->soap_type() == SOAP_TYPE_ns2__VCCardArt ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__VCCardArt * SOAP_FMAC4 soap_get_ns2__VCCardArt(struct soap*, ns2__VCCardArt *, const char*, const char*);

inline int soap_read_ns2__VCCardArt(struct soap *soap, ns2__VCCardArt *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__VCCardArt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__VCCardArt(struct soap *soap, const char *URL, ns2__VCCardArt *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__VCCardArt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__VCCardArt(struct soap *soap, ns2__VCCardArt *p)
{
	if (::soap_read_ns2__VCCardArt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__VCReply_DEFINED
#define SOAP_TYPE_ns2__VCReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VCReply(struct soap*, const char*, int, const ns2__VCReply *, const char*);
SOAP_FMAC3 ns2__VCReply * SOAP_FMAC4 soap_in_ns2__VCReply(struct soap*, const char*, ns2__VCReply *, const char*);
SOAP_FMAC1 ns2__VCReply * SOAP_FMAC2 soap_instantiate_ns2__VCReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VCReply * soap_new_ns2__VCReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__VCReply(soap, n, NULL, NULL, NULL);
}

inline ns2__VCReply * soap_new_req_ns2__VCReply(
	struct soap *soap)
{
	ns2__VCReply *_p = ::soap_new_ns2__VCReply(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__VCReply * soap_new_set_ns2__VCReply(
	struct soap *soap,
	std::string *creationTimeStamp,
	std::string *alternateShippingAddressCountryCode,
	std::string *alternateShippingAddressPostalCode,
	std::string *vcAccountLoginName,
	std::string *vcAccountFirstName,
	std::string *vcAccountLastName,
	std::string *vcAccountEncryptedID,
	std::string *vcAccountEmail,
	std::string *vcAccountMobilePhoneNumber,
	std::string *merchantReferenceID,
	std::string *subtotalAmount,
	std::string *shippingHandlingAmount,
	std::string *taxAmount,
	std::string *discountAmount,
	std::string *giftWrapAmount,
	std::string *uncategorizedAmount,
	std::string *totalPurchaseAmount,
	std::string *walletReferenceID,
	std::string *promotionCode,
	std::string *paymentInstrumentID,
	std::string *cardVerificationStatus,
	std::string *issuerID,
	std::string *paymentInstrumentNickName,
	std::string *nameOnCard,
	std::string *cardType,
	std::string *cardGroup,
	ns2__VCCardArt *cardArt,
	std::string *riskAdvice,
	std::string *riskScore,
	std::string *riskAdditionalData,
	std::string *avsCodeRaw,
	std::string *cvnCodeRaw,
	std::string *eciRaw,
	std::string *eci,
	std::string *cavv,
	std::string *veresEnrolled,
	std::string *veresTimeStamp,
	std::string *paresStatus,
	std::string *paresTimeStamp,
	std::string *xid,
	ns2__VCCustomData *customData,
	std::string *vcAccountFullName,
	std::string *paymentDescription,
	std::string *billingAddressStreetName,
	std::string *billingAddressAdditionalLocation,
	std::string *billingAddressStreetNumber,
	std::string *expiredCard,
	std::string *cardFirstName,
	std::string *cardLastName,
	std::string *shippingAddressStreetName,
	std::string *shippingAddressAdditionalLocation,
	std::string *shippingAddressStreetNumber,
	std::string *ageOfAccount,
	std::string *newUser)
{
	ns2__VCReply *_p = ::soap_new_ns2__VCReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__VCReply::creationTimeStamp = creationTimeStamp;
		_p->ns2__VCReply::alternateShippingAddressCountryCode = alternateShippingAddressCountryCode;
		_p->ns2__VCReply::alternateShippingAddressPostalCode = alternateShippingAddressPostalCode;
		_p->ns2__VCReply::vcAccountLoginName = vcAccountLoginName;
		_p->ns2__VCReply::vcAccountFirstName = vcAccountFirstName;
		_p->ns2__VCReply::vcAccountLastName = vcAccountLastName;
		_p->ns2__VCReply::vcAccountEncryptedID = vcAccountEncryptedID;
		_p->ns2__VCReply::vcAccountEmail = vcAccountEmail;
		_p->ns2__VCReply::vcAccountMobilePhoneNumber = vcAccountMobilePhoneNumber;
		_p->ns2__VCReply::merchantReferenceID = merchantReferenceID;
		_p->ns2__VCReply::subtotalAmount = subtotalAmount;
		_p->ns2__VCReply::shippingHandlingAmount = shippingHandlingAmount;
		_p->ns2__VCReply::taxAmount = taxAmount;
		_p->ns2__VCReply::discountAmount = discountAmount;
		_p->ns2__VCReply::giftWrapAmount = giftWrapAmount;
		_p->ns2__VCReply::uncategorizedAmount = uncategorizedAmount;
		_p->ns2__VCReply::totalPurchaseAmount = totalPurchaseAmount;
		_p->ns2__VCReply::walletReferenceID = walletReferenceID;
		_p->ns2__VCReply::promotionCode = promotionCode;
		_p->ns2__VCReply::paymentInstrumentID = paymentInstrumentID;
		_p->ns2__VCReply::cardVerificationStatus = cardVerificationStatus;
		_p->ns2__VCReply::issuerID = issuerID;
		_p->ns2__VCReply::paymentInstrumentNickName = paymentInstrumentNickName;
		_p->ns2__VCReply::nameOnCard = nameOnCard;
		_p->ns2__VCReply::cardType = cardType;
		_p->ns2__VCReply::cardGroup = cardGroup;
		_p->ns2__VCReply::cardArt = cardArt;
		_p->ns2__VCReply::riskAdvice = riskAdvice;
		_p->ns2__VCReply::riskScore = riskScore;
		_p->ns2__VCReply::riskAdditionalData = riskAdditionalData;
		_p->ns2__VCReply::avsCodeRaw = avsCodeRaw;
		_p->ns2__VCReply::cvnCodeRaw = cvnCodeRaw;
		_p->ns2__VCReply::eciRaw = eciRaw;
		_p->ns2__VCReply::eci = eci;
		_p->ns2__VCReply::cavv = cavv;
		_p->ns2__VCReply::veresEnrolled = veresEnrolled;
		_p->ns2__VCReply::veresTimeStamp = veresTimeStamp;
		_p->ns2__VCReply::paresStatus = paresStatus;
		_p->ns2__VCReply::paresTimeStamp = paresTimeStamp;
		_p->ns2__VCReply::xid = xid;
		_p->ns2__VCReply::customData = customData;
		_p->ns2__VCReply::vcAccountFullName = vcAccountFullName;
		_p->ns2__VCReply::paymentDescription = paymentDescription;
		_p->ns2__VCReply::billingAddressStreetName = billingAddressStreetName;
		_p->ns2__VCReply::billingAddressAdditionalLocation = billingAddressAdditionalLocation;
		_p->ns2__VCReply::billingAddressStreetNumber = billingAddressStreetNumber;
		_p->ns2__VCReply::expiredCard = expiredCard;
		_p->ns2__VCReply::cardFirstName = cardFirstName;
		_p->ns2__VCReply::cardLastName = cardLastName;
		_p->ns2__VCReply::shippingAddressStreetName = shippingAddressStreetName;
		_p->ns2__VCReply::shippingAddressAdditionalLocation = shippingAddressAdditionalLocation;
		_p->ns2__VCReply::shippingAddressStreetNumber = shippingAddressStreetNumber;
		_p->ns2__VCReply::ageOfAccount = ageOfAccount;
		_p->ns2__VCReply::newUser = newUser;
	}
	return _p;
}

inline int soap_write_ns2__VCReply(struct soap *soap, ns2__VCReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VCReply", p->soap_type() == SOAP_TYPE_ns2__VCReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__VCReply(struct soap *soap, const char *URL, ns2__VCReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VCReply", p->soap_type() == SOAP_TYPE_ns2__VCReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__VCReply(struct soap *soap, const char *URL, ns2__VCReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VCReply", p->soap_type() == SOAP_TYPE_ns2__VCReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__VCReply(struct soap *soap, const char *URL, ns2__VCReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VCReply", p->soap_type() == SOAP_TYPE_ns2__VCReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__VCReply * SOAP_FMAC4 soap_get_ns2__VCReply(struct soap*, ns2__VCReply *, const char*, const char*);

inline int soap_read_ns2__VCReply(struct soap *soap, ns2__VCReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__VCReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__VCReply(struct soap *soap, const char *URL, ns2__VCReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__VCReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__VCReply(struct soap *soap, ns2__VCReply *p)
{
	if (::soap_read_ns2__VCReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__HealthCare_DEFINED
#define SOAP_TYPE_ns2__HealthCare_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__HealthCare(struct soap*, const char*, int, const ns2__HealthCare *, const char*);
SOAP_FMAC3 ns2__HealthCare * SOAP_FMAC4 soap_in_ns2__HealthCare(struct soap*, const char*, ns2__HealthCare *, const char*);
SOAP_FMAC1 ns2__HealthCare * SOAP_FMAC2 soap_instantiate_ns2__HealthCare(struct soap*, int, const char*, const char*, size_t*);

inline ns2__HealthCare * soap_new_ns2__HealthCare(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__HealthCare(soap, n, NULL, NULL, NULL);
}

inline ns2__HealthCare * soap_new_req_ns2__HealthCare(
	struct soap *soap,
	const std::string& id)
{
	ns2__HealthCare *_p = ::soap_new_ns2__HealthCare(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__HealthCare::id = id;
	}
	return _p;
}

inline ns2__HealthCare * soap_new_set_ns2__HealthCare(
	struct soap *soap,
	std::string *amountType,
	std::string *amount,
	const std::string& id)
{
	ns2__HealthCare *_p = ::soap_new_ns2__HealthCare(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__HealthCare::amountType = amountType;
		_p->ns2__HealthCare::amount = amount;
		_p->ns2__HealthCare::id = id;
	}
	return _p;
}

inline int soap_write_ns2__HealthCare(struct soap *soap, ns2__HealthCare const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HealthCare", p->soap_type() == SOAP_TYPE_ns2__HealthCare ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__HealthCare(struct soap *soap, const char *URL, ns2__HealthCare const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HealthCare", p->soap_type() == SOAP_TYPE_ns2__HealthCare ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__HealthCare(struct soap *soap, const char *URL, ns2__HealthCare const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HealthCare", p->soap_type() == SOAP_TYPE_ns2__HealthCare ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__HealthCare(struct soap *soap, const char *URL, ns2__HealthCare const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HealthCare", p->soap_type() == SOAP_TYPE_ns2__HealthCare ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__HealthCare * SOAP_FMAC4 soap_get_ns2__HealthCare(struct soap*, ns2__HealthCare *, const char*, const char*);

inline int soap_read_ns2__HealthCare(struct soap *soap, ns2__HealthCare *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__HealthCare(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__HealthCare(struct soap *soap, const char *URL, ns2__HealthCare *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__HealthCare(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__HealthCare(struct soap *soap, ns2__HealthCare *p)
{
	if (::soap_read_ns2__HealthCare(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__AgencyInformation_DEFINED
#define SOAP_TYPE_ns2__AgencyInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AgencyInformation(struct soap*, const char*, int, const ns2__AgencyInformation *, const char*);
SOAP_FMAC3 ns2__AgencyInformation * SOAP_FMAC4 soap_in_ns2__AgencyInformation(struct soap*, const char*, ns2__AgencyInformation *, const char*);
SOAP_FMAC1 ns2__AgencyInformation * SOAP_FMAC2 soap_instantiate_ns2__AgencyInformation(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AgencyInformation * soap_new_ns2__AgencyInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__AgencyInformation(soap, n, NULL, NULL, NULL);
}

inline ns2__AgencyInformation * soap_new_req_ns2__AgencyInformation(
	struct soap *soap)
{
	ns2__AgencyInformation *_p = ::soap_new_ns2__AgencyInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__AgencyInformation * soap_new_set_ns2__AgencyInformation(
	struct soap *soap,
	std::string *code,
	std::string *name)
{
	ns2__AgencyInformation *_p = ::soap_new_ns2__AgencyInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AgencyInformation::code = code;
		_p->ns2__AgencyInformation::name = name;
	}
	return _p;
}

inline int soap_write_ns2__AgencyInformation(struct soap *soap, ns2__AgencyInformation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AgencyInformation", p->soap_type() == SOAP_TYPE_ns2__AgencyInformation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__AgencyInformation(struct soap *soap, const char *URL, ns2__AgencyInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AgencyInformation", p->soap_type() == SOAP_TYPE_ns2__AgencyInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__AgencyInformation(struct soap *soap, const char *URL, ns2__AgencyInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AgencyInformation", p->soap_type() == SOAP_TYPE_ns2__AgencyInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__AgencyInformation(struct soap *soap, const char *URL, ns2__AgencyInformation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AgencyInformation", p->soap_type() == SOAP_TYPE_ns2__AgencyInformation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__AgencyInformation * SOAP_FMAC4 soap_get_ns2__AgencyInformation(struct soap*, ns2__AgencyInformation *, const char*, const char*);

inline int soap_read_ns2__AgencyInformation(struct soap *soap, ns2__AgencyInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__AgencyInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__AgencyInformation(struct soap *soap, const char *URL, ns2__AgencyInformation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__AgencyInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__AgencyInformation(struct soap *soap, ns2__AgencyInformation *p)
{
	if (::soap_read_ns2__AgencyInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__AutoRental_DEFINED
#define SOAP_TYPE_ns2__AutoRental_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AutoRental(struct soap*, const char*, int, const ns2__AutoRental *, const char*);
SOAP_FMAC3 ns2__AutoRental * SOAP_FMAC4 soap_in_ns2__AutoRental(struct soap*, const char*, ns2__AutoRental *, const char*);
SOAP_FMAC1 ns2__AutoRental * SOAP_FMAC2 soap_instantiate_ns2__AutoRental(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AutoRental * soap_new_ns2__AutoRental(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__AutoRental(soap, n, NULL, NULL, NULL);
}

inline ns2__AutoRental * soap_new_req_ns2__AutoRental(
	struct soap *soap)
{
	ns2__AutoRental *_p = ::soap_new_ns2__AutoRental(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__AutoRental * soap_new_set_ns2__AutoRental(
	struct soap *soap,
	ns2__Promotion *promotion)
{
	ns2__AutoRental *_p = ::soap_new_ns2__AutoRental(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AutoRental::promotion = promotion;
	}
	return _p;
}

inline int soap_write_ns2__AutoRental(struct soap *soap, ns2__AutoRental const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AutoRental", p->soap_type() == SOAP_TYPE_ns2__AutoRental ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__AutoRental(struct soap *soap, const char *URL, ns2__AutoRental const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AutoRental", p->soap_type() == SOAP_TYPE_ns2__AutoRental ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__AutoRental(struct soap *soap, const char *URL, ns2__AutoRental const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AutoRental", p->soap_type() == SOAP_TYPE_ns2__AutoRental ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__AutoRental(struct soap *soap, const char *URL, ns2__AutoRental const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AutoRental", p->soap_type() == SOAP_TYPE_ns2__AutoRental ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__AutoRental * SOAP_FMAC4 soap_get_ns2__AutoRental(struct soap*, ns2__AutoRental *, const char*, const char*);

inline int soap_read_ns2__AutoRental(struct soap *soap, ns2__AutoRental *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__AutoRental(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__AutoRental(struct soap *soap, const char *URL, ns2__AutoRental *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__AutoRental(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__AutoRental(struct soap *soap, ns2__AutoRental *p)
{
	if (::soap_read_ns2__AutoRental(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__AutoRentalData_DEFINED
#define SOAP_TYPE_ns2__AutoRentalData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AutoRentalData(struct soap*, const char*, int, const ns2__AutoRentalData *, const char*);
SOAP_FMAC3 ns2__AutoRentalData * SOAP_FMAC4 soap_in_ns2__AutoRentalData(struct soap*, const char*, ns2__AutoRentalData *, const char*);
SOAP_FMAC1 ns2__AutoRentalData * SOAP_FMAC2 soap_instantiate_ns2__AutoRentalData(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AutoRentalData * soap_new_ns2__AutoRentalData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__AutoRentalData(soap, n, NULL, NULL, NULL);
}

inline ns2__AutoRentalData * soap_new_req_ns2__AutoRentalData(
	struct soap *soap)
{
	ns2__AutoRentalData *_p = ::soap_new_ns2__AutoRentalData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__AutoRentalData * soap_new_set_ns2__AutoRentalData(
	struct soap *soap,
	std::string *adjustmentCost,
	std::string *adjustmentCode,
	std::string *agreementNumber,
	std::string *classCode,
	std::string *customerServicePhoneNumber,
	std::string *dailyRate,
	std::string *mileageCost,
	std::string *gasCost,
	std::string *insuranceCost,
	std::string *lateReturnCost,
	std::string *maximumFreeMiles,
	std::string *milesTraveled,
	std::string *oneWayCost,
	std::string *parkingViolationCost,
	std::string *pickUpCity,
	std::string *pickUpCountry,
	std::string *pickUpDate,
	std::string *pickUpState,
	std::string *pickUpTime,
	std::string *ratePerMile,
	std::string *renterName,
	std::string *returnCity,
	std::string *returnCountry,
	std::string *returnDate,
	std::string *returnLocationID,
	std::string *returnState,
	std::string *returnTime,
	std::string *specialProgramCode,
	std::string *noShowIndicator,
	std::string *timePeriod,
	std::string *weeklyRentalRate,
	std::string *distanceUnit,
	std::string *rentalLocationID,
	std::string *vehicleInsuranceIndicator,
	std::string *programCode,
	std::string *otherCharges,
	std::string *taxRate,
	std::string *taxIndicator,
	std::string *taxStatusIndicator,
	std::string *taxAmount,
	std::string *taxType,
	std::string *taxSummary,
	std::string *returnLocation,
	std::string *odometerReading,
	std::string *vehicleIdentificationNumber,
	std::string *commodityCode,
	std::string *companyId,
	std::string *regularMileageCost,
	std::string *towingCharge,
	std::string *extraCharge,
	std::string *additionalDrivers,
	std::string *rentalAddress,
	std::string *driverAge,
	std::string *vehicleMake,
	std::string *vehicleModel,
	std::string *corporateClientCode,
	std::string *phoneCharge,
	std::string *gpsCharge,
	std::string *pickupLocation,
	std::string *taxAmountSign)
{
	ns2__AutoRentalData *_p = ::soap_new_ns2__AutoRentalData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AutoRentalData::adjustmentCost = adjustmentCost;
		_p->ns2__AutoRentalData::adjustmentCode = adjustmentCode;
		_p->ns2__AutoRentalData::agreementNumber = agreementNumber;
		_p->ns2__AutoRentalData::classCode = classCode;
		_p->ns2__AutoRentalData::customerServicePhoneNumber = customerServicePhoneNumber;
		_p->ns2__AutoRentalData::dailyRate = dailyRate;
		_p->ns2__AutoRentalData::mileageCost = mileageCost;
		_p->ns2__AutoRentalData::gasCost = gasCost;
		_p->ns2__AutoRentalData::insuranceCost = insuranceCost;
		_p->ns2__AutoRentalData::lateReturnCost = lateReturnCost;
		_p->ns2__AutoRentalData::maximumFreeMiles = maximumFreeMiles;
		_p->ns2__AutoRentalData::milesTraveled = milesTraveled;
		_p->ns2__AutoRentalData::oneWayCost = oneWayCost;
		_p->ns2__AutoRentalData::parkingViolationCost = parkingViolationCost;
		_p->ns2__AutoRentalData::pickUpCity = pickUpCity;
		_p->ns2__AutoRentalData::pickUpCountry = pickUpCountry;
		_p->ns2__AutoRentalData::pickUpDate = pickUpDate;
		_p->ns2__AutoRentalData::pickUpState = pickUpState;
		_p->ns2__AutoRentalData::pickUpTime = pickUpTime;
		_p->ns2__AutoRentalData::ratePerMile = ratePerMile;
		_p->ns2__AutoRentalData::renterName = renterName;
		_p->ns2__AutoRentalData::returnCity = returnCity;
		_p->ns2__AutoRentalData::returnCountry = returnCountry;
		_p->ns2__AutoRentalData::returnDate = returnDate;
		_p->ns2__AutoRentalData::returnLocationID = returnLocationID;
		_p->ns2__AutoRentalData::returnState = returnState;
		_p->ns2__AutoRentalData::returnTime = returnTime;
		_p->ns2__AutoRentalData::specialProgramCode = specialProgramCode;
		_p->ns2__AutoRentalData::noShowIndicator = noShowIndicator;
		_p->ns2__AutoRentalData::timePeriod = timePeriod;
		_p->ns2__AutoRentalData::weeklyRentalRate = weeklyRentalRate;
		_p->ns2__AutoRentalData::distanceUnit = distanceUnit;
		_p->ns2__AutoRentalData::rentalLocationID = rentalLocationID;
		_p->ns2__AutoRentalData::vehicleInsuranceIndicator = vehicleInsuranceIndicator;
		_p->ns2__AutoRentalData::programCode = programCode;
		_p->ns2__AutoRentalData::otherCharges = otherCharges;
		_p->ns2__AutoRentalData::taxRate = taxRate;
		_p->ns2__AutoRentalData::taxIndicator = taxIndicator;
		_p->ns2__AutoRentalData::taxStatusIndicator = taxStatusIndicator;
		_p->ns2__AutoRentalData::taxAmount = taxAmount;
		_p->ns2__AutoRentalData::taxType = taxType;
		_p->ns2__AutoRentalData::taxSummary = taxSummary;
		_p->ns2__AutoRentalData::returnLocation = returnLocation;
		_p->ns2__AutoRentalData::odometerReading = odometerReading;
		_p->ns2__AutoRentalData::vehicleIdentificationNumber = vehicleIdentificationNumber;
		_p->ns2__AutoRentalData::commodityCode = commodityCode;
		_p->ns2__AutoRentalData::companyId = companyId;
		_p->ns2__AutoRentalData::regularMileageCost = regularMileageCost;
		_p->ns2__AutoRentalData::towingCharge = towingCharge;
		_p->ns2__AutoRentalData::extraCharge = extraCharge;
		_p->ns2__AutoRentalData::additionalDrivers = additionalDrivers;
		_p->ns2__AutoRentalData::rentalAddress = rentalAddress;
		_p->ns2__AutoRentalData::driverAge = driverAge;
		_p->ns2__AutoRentalData::vehicleMake = vehicleMake;
		_p->ns2__AutoRentalData::vehicleModel = vehicleModel;
		_p->ns2__AutoRentalData::corporateClientCode = corporateClientCode;
		_p->ns2__AutoRentalData::phoneCharge = phoneCharge;
		_p->ns2__AutoRentalData::gpsCharge = gpsCharge;
		_p->ns2__AutoRentalData::pickupLocation = pickupLocation;
		_p->ns2__AutoRentalData::taxAmountSign = taxAmountSign;
	}
	return _p;
}

inline int soap_write_ns2__AutoRentalData(struct soap *soap, ns2__AutoRentalData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AutoRentalData", p->soap_type() == SOAP_TYPE_ns2__AutoRentalData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__AutoRentalData(struct soap *soap, const char *URL, ns2__AutoRentalData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AutoRentalData", p->soap_type() == SOAP_TYPE_ns2__AutoRentalData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__AutoRentalData(struct soap *soap, const char *URL, ns2__AutoRentalData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AutoRentalData", p->soap_type() == SOAP_TYPE_ns2__AutoRentalData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__AutoRentalData(struct soap *soap, const char *URL, ns2__AutoRentalData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AutoRentalData", p->soap_type() == SOAP_TYPE_ns2__AutoRentalData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__AutoRentalData * SOAP_FMAC4 soap_get_ns2__AutoRentalData(struct soap*, ns2__AutoRentalData *, const char*, const char*);

inline int soap_read_ns2__AutoRentalData(struct soap *soap, ns2__AutoRentalData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__AutoRentalData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__AutoRentalData(struct soap *soap, const char *URL, ns2__AutoRentalData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__AutoRentalData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__AutoRentalData(struct soap *soap, ns2__AutoRentalData *p)
{
	if (::soap_read_ns2__AutoRentalData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__HostedDataRetrieveReply_DEFINED
#define SOAP_TYPE_ns2__HostedDataRetrieveReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__HostedDataRetrieveReply(struct soap*, const char*, int, const ns2__HostedDataRetrieveReply *, const char*);
SOAP_FMAC3 ns2__HostedDataRetrieveReply * SOAP_FMAC4 soap_in_ns2__HostedDataRetrieveReply(struct soap*, const char*, ns2__HostedDataRetrieveReply *, const char*);
SOAP_FMAC1 ns2__HostedDataRetrieveReply * SOAP_FMAC2 soap_instantiate_ns2__HostedDataRetrieveReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__HostedDataRetrieveReply * soap_new_ns2__HostedDataRetrieveReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__HostedDataRetrieveReply(soap, n, NULL, NULL, NULL);
}

inline ns2__HostedDataRetrieveReply * soap_new_req_ns2__HostedDataRetrieveReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__HostedDataRetrieveReply *_p = ::soap_new_ns2__HostedDataRetrieveReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__HostedDataRetrieveReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__HostedDataRetrieveReply * soap_new_set_ns2__HostedDataRetrieveReply(
	struct soap *soap,
	std::string *responseMessage,
	const std::string& reasonCode,
	std::string *aggregatorMerchantIdentifier,
	std::string *customerFirstName,
	std::string *customerLastName,
	std::string *customerID,
	std::string *paymentMethod,
	std::string *billToStreet1,
	std::string *billToStreet2,
	std::string *billToEmail,
	std::string *billToState,
	std::string *billToFirstName,
	std::string *billToLastName,
	std::string *billToCity,
	std::string *billToCountry,
	std::string *billToPostalCode,
	std::string *cardAccountNumber,
	std::string *cardType,
	std::string *cardExpirationMonth,
	std::string *cardExpirationYear,
	std::string *cardIssueNumber,
	std::string *cardStartMonth,
	std::string *cardStartYear)
{
	ns2__HostedDataRetrieveReply *_p = ::soap_new_ns2__HostedDataRetrieveReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__HostedDataRetrieveReply::responseMessage = responseMessage;
		_p->ns2__HostedDataRetrieveReply::reasonCode = reasonCode;
		_p->ns2__HostedDataRetrieveReply::aggregatorMerchantIdentifier = aggregatorMerchantIdentifier;
		_p->ns2__HostedDataRetrieveReply::customerFirstName = customerFirstName;
		_p->ns2__HostedDataRetrieveReply::customerLastName = customerLastName;
		_p->ns2__HostedDataRetrieveReply::customerID = customerID;
		_p->ns2__HostedDataRetrieveReply::paymentMethod = paymentMethod;
		_p->ns2__HostedDataRetrieveReply::billToStreet1 = billToStreet1;
		_p->ns2__HostedDataRetrieveReply::billToStreet2 = billToStreet2;
		_p->ns2__HostedDataRetrieveReply::billToEmail = billToEmail;
		_p->ns2__HostedDataRetrieveReply::billToState = billToState;
		_p->ns2__HostedDataRetrieveReply::billToFirstName = billToFirstName;
		_p->ns2__HostedDataRetrieveReply::billToLastName = billToLastName;
		_p->ns2__HostedDataRetrieveReply::billToCity = billToCity;
		_p->ns2__HostedDataRetrieveReply::billToCountry = billToCountry;
		_p->ns2__HostedDataRetrieveReply::billToPostalCode = billToPostalCode;
		_p->ns2__HostedDataRetrieveReply::cardAccountNumber = cardAccountNumber;
		_p->ns2__HostedDataRetrieveReply::cardType = cardType;
		_p->ns2__HostedDataRetrieveReply::cardExpirationMonth = cardExpirationMonth;
		_p->ns2__HostedDataRetrieveReply::cardExpirationYear = cardExpirationYear;
		_p->ns2__HostedDataRetrieveReply::cardIssueNumber = cardIssueNumber;
		_p->ns2__HostedDataRetrieveReply::cardStartMonth = cardStartMonth;
		_p->ns2__HostedDataRetrieveReply::cardStartYear = cardStartYear;
	}
	return _p;
}

inline int soap_write_ns2__HostedDataRetrieveReply(struct soap *soap, ns2__HostedDataRetrieveReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HostedDataRetrieveReply", p->soap_type() == SOAP_TYPE_ns2__HostedDataRetrieveReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__HostedDataRetrieveReply(struct soap *soap, const char *URL, ns2__HostedDataRetrieveReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HostedDataRetrieveReply", p->soap_type() == SOAP_TYPE_ns2__HostedDataRetrieveReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__HostedDataRetrieveReply(struct soap *soap, const char *URL, ns2__HostedDataRetrieveReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HostedDataRetrieveReply", p->soap_type() == SOAP_TYPE_ns2__HostedDataRetrieveReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__HostedDataRetrieveReply(struct soap *soap, const char *URL, ns2__HostedDataRetrieveReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HostedDataRetrieveReply", p->soap_type() == SOAP_TYPE_ns2__HostedDataRetrieveReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__HostedDataRetrieveReply * SOAP_FMAC4 soap_get_ns2__HostedDataRetrieveReply(struct soap*, ns2__HostedDataRetrieveReply *, const char*, const char*);

inline int soap_read_ns2__HostedDataRetrieveReply(struct soap *soap, ns2__HostedDataRetrieveReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__HostedDataRetrieveReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__HostedDataRetrieveReply(struct soap *soap, const char *URL, ns2__HostedDataRetrieveReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__HostedDataRetrieveReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__HostedDataRetrieveReply(struct soap *soap, ns2__HostedDataRetrieveReply *p)
{
	if (::soap_read_ns2__HostedDataRetrieveReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__HostedDataCreateReply_DEFINED
#define SOAP_TYPE_ns2__HostedDataCreateReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__HostedDataCreateReply(struct soap*, const char*, int, const ns2__HostedDataCreateReply *, const char*);
SOAP_FMAC3 ns2__HostedDataCreateReply * SOAP_FMAC4 soap_in_ns2__HostedDataCreateReply(struct soap*, const char*, ns2__HostedDataCreateReply *, const char*);
SOAP_FMAC1 ns2__HostedDataCreateReply * SOAP_FMAC2 soap_instantiate_ns2__HostedDataCreateReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__HostedDataCreateReply * soap_new_ns2__HostedDataCreateReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__HostedDataCreateReply(soap, n, NULL, NULL, NULL);
}

inline ns2__HostedDataCreateReply * soap_new_req_ns2__HostedDataCreateReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__HostedDataCreateReply *_p = ::soap_new_ns2__HostedDataCreateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__HostedDataCreateReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__HostedDataCreateReply * soap_new_set_ns2__HostedDataCreateReply(
	struct soap *soap,
	std::string *responseMessage,
	const std::string& reasonCode,
	std::string *cardAccountNumberToken,
	std::string *customerID)
{
	ns2__HostedDataCreateReply *_p = ::soap_new_ns2__HostedDataCreateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__HostedDataCreateReply::responseMessage = responseMessage;
		_p->ns2__HostedDataCreateReply::reasonCode = reasonCode;
		_p->ns2__HostedDataCreateReply::cardAccountNumberToken = cardAccountNumberToken;
		_p->ns2__HostedDataCreateReply::customerID = customerID;
	}
	return _p;
}

inline int soap_write_ns2__HostedDataCreateReply(struct soap *soap, ns2__HostedDataCreateReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HostedDataCreateReply", p->soap_type() == SOAP_TYPE_ns2__HostedDataCreateReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__HostedDataCreateReply(struct soap *soap, const char *URL, ns2__HostedDataCreateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HostedDataCreateReply", p->soap_type() == SOAP_TYPE_ns2__HostedDataCreateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__HostedDataCreateReply(struct soap *soap, const char *URL, ns2__HostedDataCreateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HostedDataCreateReply", p->soap_type() == SOAP_TYPE_ns2__HostedDataCreateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__HostedDataCreateReply(struct soap *soap, const char *URL, ns2__HostedDataCreateReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HostedDataCreateReply", p->soap_type() == SOAP_TYPE_ns2__HostedDataCreateReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__HostedDataCreateReply * SOAP_FMAC4 soap_get_ns2__HostedDataCreateReply(struct soap*, ns2__HostedDataCreateReply *, const char*, const char*);

inline int soap_read_ns2__HostedDataCreateReply(struct soap *soap, ns2__HostedDataCreateReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__HostedDataCreateReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__HostedDataCreateReply(struct soap *soap, const char *URL, ns2__HostedDataCreateReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__HostedDataCreateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__HostedDataCreateReply(struct soap *soap, ns2__HostedDataCreateReply *p)
{
	if (::soap_read_ns2__HostedDataCreateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__HostedDataRetrieveService_DEFINED
#define SOAP_TYPE_ns2__HostedDataRetrieveService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__HostedDataRetrieveService(struct soap*, const char*, int, const ns2__HostedDataRetrieveService *, const char*);
SOAP_FMAC3 ns2__HostedDataRetrieveService * SOAP_FMAC4 soap_in_ns2__HostedDataRetrieveService(struct soap*, const char*, ns2__HostedDataRetrieveService *, const char*);
SOAP_FMAC1 ns2__HostedDataRetrieveService * SOAP_FMAC2 soap_instantiate_ns2__HostedDataRetrieveService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__HostedDataRetrieveService * soap_new_ns2__HostedDataRetrieveService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__HostedDataRetrieveService(soap, n, NULL, NULL, NULL);
}

inline ns2__HostedDataRetrieveService * soap_new_req_ns2__HostedDataRetrieveService(
	struct soap *soap,
	const std::string& run)
{
	ns2__HostedDataRetrieveService *_p = ::soap_new_ns2__HostedDataRetrieveService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__HostedDataRetrieveService::run = run;
	}
	return _p;
}

inline ns2__HostedDataRetrieveService * soap_new_set_ns2__HostedDataRetrieveService(
	struct soap *soap,
	std::string *profileID,
	std::string *tokenValue,
	const std::string& run)
{
	ns2__HostedDataRetrieveService *_p = ::soap_new_ns2__HostedDataRetrieveService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__HostedDataRetrieveService::profileID = profileID;
		_p->ns2__HostedDataRetrieveService::tokenValue = tokenValue;
		_p->ns2__HostedDataRetrieveService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__HostedDataRetrieveService(struct soap *soap, ns2__HostedDataRetrieveService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HostedDataRetrieveService", p->soap_type() == SOAP_TYPE_ns2__HostedDataRetrieveService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__HostedDataRetrieveService(struct soap *soap, const char *URL, ns2__HostedDataRetrieveService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HostedDataRetrieveService", p->soap_type() == SOAP_TYPE_ns2__HostedDataRetrieveService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__HostedDataRetrieveService(struct soap *soap, const char *URL, ns2__HostedDataRetrieveService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HostedDataRetrieveService", p->soap_type() == SOAP_TYPE_ns2__HostedDataRetrieveService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__HostedDataRetrieveService(struct soap *soap, const char *URL, ns2__HostedDataRetrieveService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HostedDataRetrieveService", p->soap_type() == SOAP_TYPE_ns2__HostedDataRetrieveService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__HostedDataRetrieveService * SOAP_FMAC4 soap_get_ns2__HostedDataRetrieveService(struct soap*, ns2__HostedDataRetrieveService *, const char*, const char*);

inline int soap_read_ns2__HostedDataRetrieveService(struct soap *soap, ns2__HostedDataRetrieveService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__HostedDataRetrieveService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__HostedDataRetrieveService(struct soap *soap, const char *URL, ns2__HostedDataRetrieveService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__HostedDataRetrieveService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__HostedDataRetrieveService(struct soap *soap, ns2__HostedDataRetrieveService *p)
{
	if (::soap_read_ns2__HostedDataRetrieveService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__HostedDataCreateService_DEFINED
#define SOAP_TYPE_ns2__HostedDataCreateService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__HostedDataCreateService(struct soap*, const char*, int, const ns2__HostedDataCreateService *, const char*);
SOAP_FMAC3 ns2__HostedDataCreateService * SOAP_FMAC4 soap_in_ns2__HostedDataCreateService(struct soap*, const char*, ns2__HostedDataCreateService *, const char*);
SOAP_FMAC1 ns2__HostedDataCreateService * SOAP_FMAC2 soap_instantiate_ns2__HostedDataCreateService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__HostedDataCreateService * soap_new_ns2__HostedDataCreateService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__HostedDataCreateService(soap, n, NULL, NULL, NULL);
}

inline ns2__HostedDataCreateService * soap_new_req_ns2__HostedDataCreateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__HostedDataCreateService *_p = ::soap_new_ns2__HostedDataCreateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__HostedDataCreateService::run = run;
	}
	return _p;
}

inline ns2__HostedDataCreateService * soap_new_set_ns2__HostedDataCreateService(
	struct soap *soap,
	std::string *profileID,
	std::string *paymentMethod,
	const std::string& run)
{
	ns2__HostedDataCreateService *_p = ::soap_new_ns2__HostedDataCreateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__HostedDataCreateService::profileID = profileID;
		_p->ns2__HostedDataCreateService::paymentMethod = paymentMethod;
		_p->ns2__HostedDataCreateService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__HostedDataCreateService(struct soap *soap, ns2__HostedDataCreateService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HostedDataCreateService", p->soap_type() == SOAP_TYPE_ns2__HostedDataCreateService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__HostedDataCreateService(struct soap *soap, const char *URL, ns2__HostedDataCreateService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HostedDataCreateService", p->soap_type() == SOAP_TYPE_ns2__HostedDataCreateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__HostedDataCreateService(struct soap *soap, const char *URL, ns2__HostedDataCreateService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HostedDataCreateService", p->soap_type() == SOAP_TYPE_ns2__HostedDataCreateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__HostedDataCreateService(struct soap *soap, const char *URL, ns2__HostedDataCreateService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HostedDataCreateService", p->soap_type() == SOAP_TYPE_ns2__HostedDataCreateService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__HostedDataCreateService * SOAP_FMAC4 soap_get_ns2__HostedDataCreateService(struct soap*, ns2__HostedDataCreateService *, const char*, const char*);

inline int soap_read_ns2__HostedDataCreateService(struct soap *soap, ns2__HostedDataCreateService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__HostedDataCreateService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__HostedDataCreateService(struct soap *soap, const char *URL, ns2__HostedDataCreateService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__HostedDataCreateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__HostedDataCreateService(struct soap *soap, ns2__HostedDataCreateService *p)
{
	if (::soap_read_ns2__HostedDataCreateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__OriginalTransaction_DEFINED
#define SOAP_TYPE_ns2__OriginalTransaction_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OriginalTransaction(struct soap*, const char*, int, const ns2__OriginalTransaction *, const char*);
SOAP_FMAC3 ns2__OriginalTransaction * SOAP_FMAC4 soap_in_ns2__OriginalTransaction(struct soap*, const char*, ns2__OriginalTransaction *, const char*);
SOAP_FMAC1 ns2__OriginalTransaction * SOAP_FMAC2 soap_instantiate_ns2__OriginalTransaction(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OriginalTransaction * soap_new_ns2__OriginalTransaction(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__OriginalTransaction(soap, n, NULL, NULL, NULL);
}

inline ns2__OriginalTransaction * soap_new_req_ns2__OriginalTransaction(
	struct soap *soap)
{
	ns2__OriginalTransaction *_p = ::soap_new_ns2__OriginalTransaction(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__OriginalTransaction * soap_new_set_ns2__OriginalTransaction(
	struct soap *soap,
	std::string *amount,
	std::string *reasonCode)
{
	ns2__OriginalTransaction *_p = ::soap_new_ns2__OriginalTransaction(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__OriginalTransaction::amount = amount;
		_p->ns2__OriginalTransaction::reasonCode = reasonCode;
	}
	return _p;
}

inline int soap_write_ns2__OriginalTransaction(struct soap *soap, ns2__OriginalTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:OriginalTransaction", p->soap_type() == SOAP_TYPE_ns2__OriginalTransaction ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__OriginalTransaction(struct soap *soap, const char *URL, ns2__OriginalTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:OriginalTransaction", p->soap_type() == SOAP_TYPE_ns2__OriginalTransaction ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__OriginalTransaction(struct soap *soap, const char *URL, ns2__OriginalTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:OriginalTransaction", p->soap_type() == SOAP_TYPE_ns2__OriginalTransaction ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__OriginalTransaction(struct soap *soap, const char *URL, ns2__OriginalTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:OriginalTransaction", p->soap_type() == SOAP_TYPE_ns2__OriginalTransaction ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__OriginalTransaction * SOAP_FMAC4 soap_get_ns2__OriginalTransaction(struct soap*, ns2__OriginalTransaction *, const char*, const char*);

inline int soap_read_ns2__OriginalTransaction(struct soap *soap, ns2__OriginalTransaction *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__OriginalTransaction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__OriginalTransaction(struct soap *soap, const char *URL, ns2__OriginalTransaction *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__OriginalTransaction(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__OriginalTransaction(struct soap *soap, ns2__OriginalTransaction *p)
{
	if (::soap_read_ns2__OriginalTransaction(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__EmvReply_DEFINED
#define SOAP_TYPE_ns2__EmvReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EmvReply(struct soap*, const char*, int, const ns2__EmvReply *, const char*);
SOAP_FMAC3 ns2__EmvReply * SOAP_FMAC4 soap_in_ns2__EmvReply(struct soap*, const char*, ns2__EmvReply *, const char*);
SOAP_FMAC1 ns2__EmvReply * SOAP_FMAC2 soap_instantiate_ns2__EmvReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__EmvReply * soap_new_ns2__EmvReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__EmvReply(soap, n, NULL, NULL, NULL);
}

inline ns2__EmvReply * soap_new_req_ns2__EmvReply(
	struct soap *soap)
{
	ns2__EmvReply *_p = ::soap_new_ns2__EmvReply(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__EmvReply * soap_new_set_ns2__EmvReply(
	struct soap *soap,
	std::string *combinedTags,
	std::string *decryptedRequestTags,
	std::string *chipValidationResults,
	std::string *chipValidationType)
{
	ns2__EmvReply *_p = ::soap_new_ns2__EmvReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__EmvReply::combinedTags = combinedTags;
		_p->ns2__EmvReply::decryptedRequestTags = decryptedRequestTags;
		_p->ns2__EmvReply::chipValidationResults = chipValidationResults;
		_p->ns2__EmvReply::chipValidationType = chipValidationType;
	}
	return _p;
}

inline int soap_write_ns2__EmvReply(struct soap *soap, ns2__EmvReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:EmvReply", p->soap_type() == SOAP_TYPE_ns2__EmvReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__EmvReply(struct soap *soap, const char *URL, ns2__EmvReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:EmvReply", p->soap_type() == SOAP_TYPE_ns2__EmvReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__EmvReply(struct soap *soap, const char *URL, ns2__EmvReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:EmvReply", p->soap_type() == SOAP_TYPE_ns2__EmvReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__EmvReply(struct soap *soap, const char *URL, ns2__EmvReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:EmvReply", p->soap_type() == SOAP_TYPE_ns2__EmvReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__EmvReply * SOAP_FMAC4 soap_get_ns2__EmvReply(struct soap*, ns2__EmvReply *, const char*, const char*);

inline int soap_read_ns2__EmvReply(struct soap *soap, ns2__EmvReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__EmvReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__EmvReply(struct soap *soap, const char *URL, ns2__EmvReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__EmvReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__EmvReply(struct soap *soap, ns2__EmvReply *p)
{
	if (::soap_read_ns2__EmvReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__EmvRequest_DEFINED
#define SOAP_TYPE_ns2__EmvRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EmvRequest(struct soap*, const char*, int, const ns2__EmvRequest *, const char*);
SOAP_FMAC3 ns2__EmvRequest * SOAP_FMAC4 soap_in_ns2__EmvRequest(struct soap*, const char*, ns2__EmvRequest *, const char*);
SOAP_FMAC1 ns2__EmvRequest * SOAP_FMAC2 soap_instantiate_ns2__EmvRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns2__EmvRequest * soap_new_ns2__EmvRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__EmvRequest(soap, n, NULL, NULL, NULL);
}

inline ns2__EmvRequest * soap_new_req_ns2__EmvRequest(
	struct soap *soap)
{
	ns2__EmvRequest *_p = ::soap_new_ns2__EmvRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__EmvRequest * soap_new_set_ns2__EmvRequest(
	struct soap *soap,
	std::string *combinedTags,
	std::string *repeat,
	std::string *cardSequenceNumber,
	std::string *aidAndDFname,
	std::string *fallback,
	std::string *fallbackCondition)
{
	ns2__EmvRequest *_p = ::soap_new_ns2__EmvRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__EmvRequest::combinedTags = combinedTags;
		_p->ns2__EmvRequest::repeat = repeat;
		_p->ns2__EmvRequest::cardSequenceNumber = cardSequenceNumber;
		_p->ns2__EmvRequest::aidAndDFname = aidAndDFname;
		_p->ns2__EmvRequest::fallback = fallback;
		_p->ns2__EmvRequest::fallbackCondition = fallbackCondition;
	}
	return _p;
}

inline int soap_write_ns2__EmvRequest(struct soap *soap, ns2__EmvRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:EmvRequest", p->soap_type() == SOAP_TYPE_ns2__EmvRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__EmvRequest(struct soap *soap, const char *URL, ns2__EmvRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:EmvRequest", p->soap_type() == SOAP_TYPE_ns2__EmvRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__EmvRequest(struct soap *soap, const char *URL, ns2__EmvRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:EmvRequest", p->soap_type() == SOAP_TYPE_ns2__EmvRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__EmvRequest(struct soap *soap, const char *URL, ns2__EmvRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:EmvRequest", p->soap_type() == SOAP_TYPE_ns2__EmvRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__EmvRequest * SOAP_FMAC4 soap_get_ns2__EmvRequest(struct soap*, ns2__EmvRequest *, const char*, const char*);

inline int soap_read_ns2__EmvRequest(struct soap *soap, ns2__EmvRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__EmvRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__EmvRequest(struct soap *soap, const char *URL, ns2__EmvRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__EmvRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__EmvRequest(struct soap *soap, ns2__EmvRequest *p)
{
	if (::soap_read_ns2__EmvRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ServiceFee_DEFINED
#define SOAP_TYPE_ns2__ServiceFee_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ServiceFee(struct soap*, const char*, int, const ns2__ServiceFee *, const char*);
SOAP_FMAC3 ns2__ServiceFee * SOAP_FMAC4 soap_in_ns2__ServiceFee(struct soap*, const char*, ns2__ServiceFee *, const char*);
SOAP_FMAC1 ns2__ServiceFee * SOAP_FMAC2 soap_instantiate_ns2__ServiceFee(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ServiceFee * soap_new_ns2__ServiceFee(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ServiceFee(soap, n, NULL, NULL, NULL);
}

inline ns2__ServiceFee * soap_new_req_ns2__ServiceFee(
	struct soap *soap)
{
	ns2__ServiceFee *_p = ::soap_new_ns2__ServiceFee(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__ServiceFee * soap_new_set_ns2__ServiceFee(
	struct soap *soap,
	std::string *merchantDescriptor,
	std::string *merchantDescriptorContact,
	std::string *merchantDescriptorState)
{
	ns2__ServiceFee *_p = ::soap_new_ns2__ServiceFee(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ServiceFee::merchantDescriptor = merchantDescriptor;
		_p->ns2__ServiceFee::merchantDescriptorContact = merchantDescriptorContact;
		_p->ns2__ServiceFee::merchantDescriptorState = merchantDescriptorState;
	}
	return _p;
}

inline int soap_write_ns2__ServiceFee(struct soap *soap, ns2__ServiceFee const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ServiceFee", p->soap_type() == SOAP_TYPE_ns2__ServiceFee ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ServiceFee(struct soap *soap, const char *URL, ns2__ServiceFee const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ServiceFee", p->soap_type() == SOAP_TYPE_ns2__ServiceFee ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ServiceFee(struct soap *soap, const char *URL, ns2__ServiceFee const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ServiceFee", p->soap_type() == SOAP_TYPE_ns2__ServiceFee ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ServiceFee(struct soap *soap, const char *URL, ns2__ServiceFee const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ServiceFee", p->soap_type() == SOAP_TYPE_ns2__ServiceFee ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ServiceFee * SOAP_FMAC4 soap_get_ns2__ServiceFee(struct soap*, ns2__ServiceFee *, const char*, const char*);

inline int soap_read_ns2__ServiceFee(struct soap *soap, ns2__ServiceFee *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ServiceFee(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ServiceFee(struct soap *soap, const char *URL, ns2__ServiceFee *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ServiceFee(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ServiceFee(struct soap *soap, ns2__ServiceFee *p)
{
	if (::soap_read_ns2__ServiceFee(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCDCCUpdateService_DEFINED
#define SOAP_TYPE_ns2__CCDCCUpdateService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCDCCUpdateService(struct soap*, const char*, int, const ns2__CCDCCUpdateService *, const char*);
SOAP_FMAC3 ns2__CCDCCUpdateService * SOAP_FMAC4 soap_in_ns2__CCDCCUpdateService(struct soap*, const char*, ns2__CCDCCUpdateService *, const char*);
SOAP_FMAC1 ns2__CCDCCUpdateService * SOAP_FMAC2 soap_instantiate_ns2__CCDCCUpdateService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCDCCUpdateService * soap_new_ns2__CCDCCUpdateService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCDCCUpdateService(soap, n, NULL, NULL, NULL);
}

inline ns2__CCDCCUpdateService * soap_new_req_ns2__CCDCCUpdateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__CCDCCUpdateService *_p = ::soap_new_ns2__CCDCCUpdateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCDCCUpdateService::run = run;
	}
	return _p;
}

inline ns2__CCDCCUpdateService * soap_new_set_ns2__CCDCCUpdateService(
	struct soap *soap,
	std::string *reason,
	std::string *action,
	std::string *dccRequestID,
	std::string *captureRequestID,
	std::string *creditRequestID,
	const std::string& run)
{
	ns2__CCDCCUpdateService *_p = ::soap_new_ns2__CCDCCUpdateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCDCCUpdateService::reason = reason;
		_p->ns2__CCDCCUpdateService::action = action;
		_p->ns2__CCDCCUpdateService::dccRequestID = dccRequestID;
		_p->ns2__CCDCCUpdateService::captureRequestID = captureRequestID;
		_p->ns2__CCDCCUpdateService::creditRequestID = creditRequestID;
		_p->ns2__CCDCCUpdateService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__CCDCCUpdateService(struct soap *soap, ns2__CCDCCUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCDCCUpdateService", p->soap_type() == SOAP_TYPE_ns2__CCDCCUpdateService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCDCCUpdateService(struct soap *soap, const char *URL, ns2__CCDCCUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCDCCUpdateService", p->soap_type() == SOAP_TYPE_ns2__CCDCCUpdateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCDCCUpdateService(struct soap *soap, const char *URL, ns2__CCDCCUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCDCCUpdateService", p->soap_type() == SOAP_TYPE_ns2__CCDCCUpdateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCDCCUpdateService(struct soap *soap, const char *URL, ns2__CCDCCUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCDCCUpdateService", p->soap_type() == SOAP_TYPE_ns2__CCDCCUpdateService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCDCCUpdateService * SOAP_FMAC4 soap_get_ns2__CCDCCUpdateService(struct soap*, ns2__CCDCCUpdateService *, const char*, const char*);

inline int soap_read_ns2__CCDCCUpdateService(struct soap *soap, ns2__CCDCCUpdateService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCDCCUpdateService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCDCCUpdateService(struct soap *soap, const char *URL, ns2__CCDCCUpdateService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCDCCUpdateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCDCCUpdateService(struct soap *soap, ns2__CCDCCUpdateService *p)
{
	if (::soap_read_ns2__CCDCCUpdateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PaypalTransaction_DEFINED
#define SOAP_TYPE_ns2__PaypalTransaction_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PaypalTransaction(struct soap*, const char*, int, const ns2__PaypalTransaction *, const char*);
SOAP_FMAC3 ns2__PaypalTransaction * SOAP_FMAC4 soap_in_ns2__PaypalTransaction(struct soap*, const char*, ns2__PaypalTransaction *, const char*);
SOAP_FMAC1 ns2__PaypalTransaction * SOAP_FMAC2 soap_instantiate_ns2__PaypalTransaction(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PaypalTransaction * soap_new_ns2__PaypalTransaction(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PaypalTransaction(soap, n, NULL, NULL, NULL);
}

inline ns2__PaypalTransaction * soap_new_req_ns2__PaypalTransaction(
	struct soap *soap)
{
	ns2__PaypalTransaction *_p = ::soap_new_ns2__PaypalTransaction(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__PaypalTransaction * soap_new_set_ns2__PaypalTransaction(
	struct soap *soap,
	std::string *transactionTime,
	std::string *transactionTimeZone,
	std::string *transactionType,
	std::string *paypalPayerOrPayeeEmail,
	std::string *customerDisplayName,
	std::string *transactionID,
	std::string *paypalPaymentStatus,
	std::string *grandTotalAmount,
	std::string *currency,
	std::string *paypalFeeAmount,
	std::string *paypalNetAmount,
	std::string *id)
{
	ns2__PaypalTransaction *_p = ::soap_new_ns2__PaypalTransaction(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaypalTransaction::transactionTime = transactionTime;
		_p->ns2__PaypalTransaction::transactionTimeZone = transactionTimeZone;
		_p->ns2__PaypalTransaction::transactionType = transactionType;
		_p->ns2__PaypalTransaction::paypalPayerOrPayeeEmail = paypalPayerOrPayeeEmail;
		_p->ns2__PaypalTransaction::customerDisplayName = customerDisplayName;
		_p->ns2__PaypalTransaction::transactionID = transactionID;
		_p->ns2__PaypalTransaction::paypalPaymentStatus = paypalPaymentStatus;
		_p->ns2__PaypalTransaction::grandTotalAmount = grandTotalAmount;
		_p->ns2__PaypalTransaction::currency = currency;
		_p->ns2__PaypalTransaction::paypalFeeAmount = paypalFeeAmount;
		_p->ns2__PaypalTransaction::paypalNetAmount = paypalNetAmount;
		_p->ns2__PaypalTransaction::id = id;
	}
	return _p;
}

inline int soap_write_ns2__PaypalTransaction(struct soap *soap, ns2__PaypalTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaypalTransaction", p->soap_type() == SOAP_TYPE_ns2__PaypalTransaction ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PaypalTransaction(struct soap *soap, const char *URL, ns2__PaypalTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaypalTransaction", p->soap_type() == SOAP_TYPE_ns2__PaypalTransaction ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PaypalTransaction(struct soap *soap, const char *URL, ns2__PaypalTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaypalTransaction", p->soap_type() == SOAP_TYPE_ns2__PaypalTransaction ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PaypalTransaction(struct soap *soap, const char *URL, ns2__PaypalTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaypalTransaction", p->soap_type() == SOAP_TYPE_ns2__PaypalTransaction ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PaypalTransaction * SOAP_FMAC4 soap_get_ns2__PaypalTransaction(struct soap*, ns2__PaypalTransaction *, const char*, const char*);

inline int soap_read_ns2__PaypalTransaction(struct soap *soap, ns2__PaypalTransaction *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PaypalTransaction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PaypalTransaction(struct soap *soap, const char *URL, ns2__PaypalTransaction *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PaypalTransaction(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PaypalTransaction(struct soap *soap, ns2__PaypalTransaction *p)
{
	if (::soap_read_ns2__PaypalTransaction(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalTransactionSearchReply_DEFINED
#define SOAP_TYPE_ns2__PayPalTransactionSearchReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalTransactionSearchReply(struct soap*, const char*, int, const ns2__PayPalTransactionSearchReply *, const char*);
SOAP_FMAC3 ns2__PayPalTransactionSearchReply * SOAP_FMAC4 soap_in_ns2__PayPalTransactionSearchReply(struct soap*, const char*, ns2__PayPalTransactionSearchReply *, const char*);
SOAP_FMAC1 ns2__PayPalTransactionSearchReply * SOAP_FMAC2 soap_instantiate_ns2__PayPalTransactionSearchReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalTransactionSearchReply * soap_new_ns2__PayPalTransactionSearchReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalTransactionSearchReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalTransactionSearchReply * soap_new_req_ns2__PayPalTransactionSearchReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayPalTransactionSearchReply *_p = ::soap_new_ns2__PayPalTransactionSearchReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalTransactionSearchReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayPalTransactionSearchReply * soap_new_set_ns2__PayPalTransactionSearchReply(
	struct soap *soap,
	const std::string& reasonCode,
	const std::vector<ns2__PaypalTransaction *> & transaction,
	std::string *errorCode)
{
	ns2__PayPalTransactionSearchReply *_p = ::soap_new_ns2__PayPalTransactionSearchReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalTransactionSearchReply::reasonCode = reasonCode;
		_p->ns2__PayPalTransactionSearchReply::transaction = transaction;
		_p->ns2__PayPalTransactionSearchReply::errorCode = errorCode;
	}
	return _p;
}

inline int soap_write_ns2__PayPalTransactionSearchReply(struct soap *soap, ns2__PayPalTransactionSearchReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalTransactionSearchReply", p->soap_type() == SOAP_TYPE_ns2__PayPalTransactionSearchReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalTransactionSearchReply(struct soap *soap, const char *URL, ns2__PayPalTransactionSearchReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalTransactionSearchReply", p->soap_type() == SOAP_TYPE_ns2__PayPalTransactionSearchReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalTransactionSearchReply(struct soap *soap, const char *URL, ns2__PayPalTransactionSearchReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalTransactionSearchReply", p->soap_type() == SOAP_TYPE_ns2__PayPalTransactionSearchReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalTransactionSearchReply(struct soap *soap, const char *URL, ns2__PayPalTransactionSearchReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalTransactionSearchReply", p->soap_type() == SOAP_TYPE_ns2__PayPalTransactionSearchReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalTransactionSearchReply * SOAP_FMAC4 soap_get_ns2__PayPalTransactionSearchReply(struct soap*, ns2__PayPalTransactionSearchReply *, const char*, const char*);

inline int soap_read_ns2__PayPalTransactionSearchReply(struct soap *soap, ns2__PayPalTransactionSearchReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalTransactionSearchReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalTransactionSearchReply(struct soap *soap, const char *URL, ns2__PayPalTransactionSearchReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalTransactionSearchReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalTransactionSearchReply(struct soap *soap, ns2__PayPalTransactionSearchReply *p)
{
	if (::soap_read_ns2__PayPalTransactionSearchReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalGetTxnDetailsReply_DEFINED
#define SOAP_TYPE_ns2__PayPalGetTxnDetailsReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalGetTxnDetailsReply(struct soap*, const char*, int, const ns2__PayPalGetTxnDetailsReply *, const char*);
SOAP_FMAC3 ns2__PayPalGetTxnDetailsReply * SOAP_FMAC4 soap_in_ns2__PayPalGetTxnDetailsReply(struct soap*, const char*, ns2__PayPalGetTxnDetailsReply *, const char*);
SOAP_FMAC1 ns2__PayPalGetTxnDetailsReply * SOAP_FMAC2 soap_instantiate_ns2__PayPalGetTxnDetailsReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalGetTxnDetailsReply * soap_new_ns2__PayPalGetTxnDetailsReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalGetTxnDetailsReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalGetTxnDetailsReply * soap_new_req_ns2__PayPalGetTxnDetailsReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayPalGetTxnDetailsReply *_p = ::soap_new_ns2__PayPalGetTxnDetailsReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalGetTxnDetailsReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayPalGetTxnDetailsReply * soap_new_set_ns2__PayPalGetTxnDetailsReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *payer,
	std::string *payerId,
	std::string *payerStatus,
	std::string *payerCountry,
	std::string *payerBusiness,
	std::string *payerSalutation,
	std::string *payerFirstname,
	std::string *payerMiddlename,
	std::string *payerLastname,
	std::string *payerSuffix,
	std::string *addressID,
	std::string *addressStatus,
	std::string *shipToName,
	std::string *shipToAddress1,
	std::string *shipToAddress2,
	std::string *shipToCity,
	std::string *shipToState,
	std::string *shipToCountry,
	std::string *shipToZip,
	std::string *payerPhone,
	std::string *transactionId,
	std::string *parentTransactionId,
	std::string *paypalReceiptId,
	std::string *paypalTransactiontype,
	std::string *paypalPaymentType,
	std::string *paypalOrderTime,
	std::string *paypalPaymentGrossAmount,
	std::string *paypalFeeAmount,
	std::string *currency,
	std::string *paypalSettleAmount,
	std::string *paypalTaxAmount,
	std::string *paypalExchangeRate,
	std::string *paypalPaymentStatus,
	std::string *paypalPendingReason,
	std::string *paypalReasonCode,
	std::string *protectionEligibility,
	std::string *protectionEligibilityType,
	std::string *paypalNote,
	std::string *invoiceNumber,
	const std::vector<ns2__Item *> & item,
	std::string *errorCode)
{
	ns2__PayPalGetTxnDetailsReply *_p = ::soap_new_ns2__PayPalGetTxnDetailsReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalGetTxnDetailsReply::reasonCode = reasonCode;
		_p->ns2__PayPalGetTxnDetailsReply::payer = payer;
		_p->ns2__PayPalGetTxnDetailsReply::payerId = payerId;
		_p->ns2__PayPalGetTxnDetailsReply::payerStatus = payerStatus;
		_p->ns2__PayPalGetTxnDetailsReply::payerCountry = payerCountry;
		_p->ns2__PayPalGetTxnDetailsReply::payerBusiness = payerBusiness;
		_p->ns2__PayPalGetTxnDetailsReply::payerSalutation = payerSalutation;
		_p->ns2__PayPalGetTxnDetailsReply::payerFirstname = payerFirstname;
		_p->ns2__PayPalGetTxnDetailsReply::payerMiddlename = payerMiddlename;
		_p->ns2__PayPalGetTxnDetailsReply::payerLastname = payerLastname;
		_p->ns2__PayPalGetTxnDetailsReply::payerSuffix = payerSuffix;
		_p->ns2__PayPalGetTxnDetailsReply::addressID = addressID;
		_p->ns2__PayPalGetTxnDetailsReply::addressStatus = addressStatus;
		_p->ns2__PayPalGetTxnDetailsReply::shipToName = shipToName;
		_p->ns2__PayPalGetTxnDetailsReply::shipToAddress1 = shipToAddress1;
		_p->ns2__PayPalGetTxnDetailsReply::shipToAddress2 = shipToAddress2;
		_p->ns2__PayPalGetTxnDetailsReply::shipToCity = shipToCity;
		_p->ns2__PayPalGetTxnDetailsReply::shipToState = shipToState;
		_p->ns2__PayPalGetTxnDetailsReply::shipToCountry = shipToCountry;
		_p->ns2__PayPalGetTxnDetailsReply::shipToZip = shipToZip;
		_p->ns2__PayPalGetTxnDetailsReply::payerPhone = payerPhone;
		_p->ns2__PayPalGetTxnDetailsReply::transactionId = transactionId;
		_p->ns2__PayPalGetTxnDetailsReply::parentTransactionId = parentTransactionId;
		_p->ns2__PayPalGetTxnDetailsReply::paypalReceiptId = paypalReceiptId;
		_p->ns2__PayPalGetTxnDetailsReply::paypalTransactiontype = paypalTransactiontype;
		_p->ns2__PayPalGetTxnDetailsReply::paypalPaymentType = paypalPaymentType;
		_p->ns2__PayPalGetTxnDetailsReply::paypalOrderTime = paypalOrderTime;
		_p->ns2__PayPalGetTxnDetailsReply::paypalPaymentGrossAmount = paypalPaymentGrossAmount;
		_p->ns2__PayPalGetTxnDetailsReply::paypalFeeAmount = paypalFeeAmount;
		_p->ns2__PayPalGetTxnDetailsReply::currency = currency;
		_p->ns2__PayPalGetTxnDetailsReply::paypalSettleAmount = paypalSettleAmount;
		_p->ns2__PayPalGetTxnDetailsReply::paypalTaxAmount = paypalTaxAmount;
		_p->ns2__PayPalGetTxnDetailsReply::paypalExchangeRate = paypalExchangeRate;
		_p->ns2__PayPalGetTxnDetailsReply::paypalPaymentStatus = paypalPaymentStatus;
		_p->ns2__PayPalGetTxnDetailsReply::paypalPendingReason = paypalPendingReason;
		_p->ns2__PayPalGetTxnDetailsReply::paypalReasonCode = paypalReasonCode;
		_p->ns2__PayPalGetTxnDetailsReply::protectionEligibility = protectionEligibility;
		_p->ns2__PayPalGetTxnDetailsReply::protectionEligibilityType = protectionEligibilityType;
		_p->ns2__PayPalGetTxnDetailsReply::paypalNote = paypalNote;
		_p->ns2__PayPalGetTxnDetailsReply::invoiceNumber = invoiceNumber;
		_p->ns2__PayPalGetTxnDetailsReply::item = item;
		_p->ns2__PayPalGetTxnDetailsReply::errorCode = errorCode;
	}
	return _p;
}

inline int soap_write_ns2__PayPalGetTxnDetailsReply(struct soap *soap, ns2__PayPalGetTxnDetailsReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalGetTxnDetailsReply", p->soap_type() == SOAP_TYPE_ns2__PayPalGetTxnDetailsReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalGetTxnDetailsReply(struct soap *soap, const char *URL, ns2__PayPalGetTxnDetailsReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalGetTxnDetailsReply", p->soap_type() == SOAP_TYPE_ns2__PayPalGetTxnDetailsReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalGetTxnDetailsReply(struct soap *soap, const char *URL, ns2__PayPalGetTxnDetailsReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalGetTxnDetailsReply", p->soap_type() == SOAP_TYPE_ns2__PayPalGetTxnDetailsReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalGetTxnDetailsReply(struct soap *soap, const char *URL, ns2__PayPalGetTxnDetailsReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalGetTxnDetailsReply", p->soap_type() == SOAP_TYPE_ns2__PayPalGetTxnDetailsReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalGetTxnDetailsReply * SOAP_FMAC4 soap_get_ns2__PayPalGetTxnDetailsReply(struct soap*, ns2__PayPalGetTxnDetailsReply *, const char*, const char*);

inline int soap_read_ns2__PayPalGetTxnDetailsReply(struct soap *soap, ns2__PayPalGetTxnDetailsReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalGetTxnDetailsReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalGetTxnDetailsReply(struct soap *soap, const char *URL, ns2__PayPalGetTxnDetailsReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalGetTxnDetailsReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalGetTxnDetailsReply(struct soap *soap, ns2__PayPalGetTxnDetailsReply *p)
{
	if (::soap_read_ns2__PayPalGetTxnDetailsReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__RequestReserved_DEFINED
#define SOAP_TYPE_ns2__RequestReserved_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RequestReserved(struct soap*, const char*, int, const ns2__RequestReserved *, const char*);
SOAP_FMAC3 ns2__RequestReserved * SOAP_FMAC4 soap_in_ns2__RequestReserved(struct soap*, const char*, ns2__RequestReserved *, const char*);
SOAP_FMAC1 ns2__RequestReserved * SOAP_FMAC2 soap_instantiate_ns2__RequestReserved(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RequestReserved * soap_new_ns2__RequestReserved(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__RequestReserved(soap, n, NULL, NULL, NULL);
}

inline ns2__RequestReserved * soap_new_req_ns2__RequestReserved(
	struct soap *soap,
	const std::string& name,
	const std::string& value)
{
	ns2__RequestReserved *_p = ::soap_new_ns2__RequestReserved(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__RequestReserved::name = name;
		_p->ns2__RequestReserved::value = value;
	}
	return _p;
}

inline ns2__RequestReserved * soap_new_set_ns2__RequestReserved(
	struct soap *soap,
	const std::string& name,
	const std::string& value)
{
	ns2__RequestReserved *_p = ::soap_new_ns2__RequestReserved(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__RequestReserved::name = name;
		_p->ns2__RequestReserved::value = value;
	}
	return _p;
}

inline int soap_write_ns2__RequestReserved(struct soap *soap, ns2__RequestReserved const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RequestReserved", p->soap_type() == SOAP_TYPE_ns2__RequestReserved ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__RequestReserved(struct soap *soap, const char *URL, ns2__RequestReserved const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RequestReserved", p->soap_type() == SOAP_TYPE_ns2__RequestReserved ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__RequestReserved(struct soap *soap, const char *URL, ns2__RequestReserved const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RequestReserved", p->soap_type() == SOAP_TYPE_ns2__RequestReserved ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__RequestReserved(struct soap *soap, const char *URL, ns2__RequestReserved const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RequestReserved", p->soap_type() == SOAP_TYPE_ns2__RequestReserved ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__RequestReserved * SOAP_FMAC4 soap_get_ns2__RequestReserved(struct soap*, ns2__RequestReserved *, const char*, const char*);

inline int soap_read_ns2__RequestReserved(struct soap *soap, ns2__RequestReserved *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__RequestReserved(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__RequestReserved(struct soap *soap, const char *URL, ns2__RequestReserved *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__RequestReserved(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__RequestReserved(struct soap *soap, ns2__RequestReserved *p)
{
	if (::soap_read_ns2__RequestReserved(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ReplyReserved_DEFINED
#define SOAP_TYPE_ns2__ReplyReserved_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReplyReserved(struct soap*, const char*, int, const ns2__ReplyReserved *, const char*);
SOAP_FMAC3 ns2__ReplyReserved * SOAP_FMAC4 soap_in_ns2__ReplyReserved(struct soap*, const char*, ns2__ReplyReserved *, const char*);
SOAP_FMAC1 ns2__ReplyReserved * SOAP_FMAC2 soap_instantiate_ns2__ReplyReserved(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ReplyReserved * soap_new_ns2__ReplyReserved(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ReplyReserved(soap, n, NULL, NULL, NULL);
}

inline ns2__ReplyReserved * soap_new_req_ns2__ReplyReserved(
	struct soap *soap)
{
	ns2__ReplyReserved *_p = ::soap_new_ns2__ReplyReserved(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__ReplyReserved * soap_new_set_ns2__ReplyReserved(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	ns2__ReplyReserved *_p = ::soap_new_ns2__ReplyReserved(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ReplyReserved::__any = __any;
	}
	return _p;
}

inline int soap_write_ns2__ReplyReserved(struct soap *soap, ns2__ReplyReserved const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ReplyReserved", p->soap_type() == SOAP_TYPE_ns2__ReplyReserved ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ReplyReserved(struct soap *soap, const char *URL, ns2__ReplyReserved const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ReplyReserved", p->soap_type() == SOAP_TYPE_ns2__ReplyReserved ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ReplyReserved(struct soap *soap, const char *URL, ns2__ReplyReserved const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ReplyReserved", p->soap_type() == SOAP_TYPE_ns2__ReplyReserved ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ReplyReserved(struct soap *soap, const char *URL, ns2__ReplyReserved const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ReplyReserved", p->soap_type() == SOAP_TYPE_ns2__ReplyReserved ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ReplyReserved * SOAP_FMAC4 soap_get_ns2__ReplyReserved(struct soap*, ns2__ReplyReserved *, const char*, const char*);

inline int soap_read_ns2__ReplyReserved(struct soap *soap, ns2__ReplyReserved *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ReplyReserved(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ReplyReserved(struct soap *soap, const char *URL, ns2__ReplyReserved *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ReplyReserved(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ReplyReserved(struct soap *soap, ns2__ReplyReserved *p)
{
	if (::soap_read_ns2__ReplyReserved(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__MerchantSecureData_DEFINED
#define SOAP_TYPE_ns2__MerchantSecureData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MerchantSecureData(struct soap*, const char*, int, const ns2__MerchantSecureData *, const char*);
SOAP_FMAC3 ns2__MerchantSecureData * SOAP_FMAC4 soap_in_ns2__MerchantSecureData(struct soap*, const char*, ns2__MerchantSecureData *, const char*);
SOAP_FMAC1 ns2__MerchantSecureData * SOAP_FMAC2 soap_instantiate_ns2__MerchantSecureData(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MerchantSecureData * soap_new_ns2__MerchantSecureData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__MerchantSecureData(soap, n, NULL, NULL, NULL);
}

inline ns2__MerchantSecureData * soap_new_req_ns2__MerchantSecureData(
	struct soap *soap)
{
	ns2__MerchantSecureData *_p = ::soap_new_ns2__MerchantSecureData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__MerchantSecureData * soap_new_set_ns2__MerchantSecureData(
	struct soap *soap,
	std::string *field1,
	std::string *field2,
	std::string *field3,
	std::string *field4)
{
	ns2__MerchantSecureData *_p = ::soap_new_ns2__MerchantSecureData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__MerchantSecureData::field1 = field1;
		_p->ns2__MerchantSecureData::field2 = field2;
		_p->ns2__MerchantSecureData::field3 = field3;
		_p->ns2__MerchantSecureData::field4 = field4;
	}
	return _p;
}

inline int soap_write_ns2__MerchantSecureData(struct soap *soap, ns2__MerchantSecureData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:MerchantSecureData", p->soap_type() == SOAP_TYPE_ns2__MerchantSecureData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__MerchantSecureData(struct soap *soap, const char *URL, ns2__MerchantSecureData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:MerchantSecureData", p->soap_type() == SOAP_TYPE_ns2__MerchantSecureData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__MerchantSecureData(struct soap *soap, const char *URL, ns2__MerchantSecureData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:MerchantSecureData", p->soap_type() == SOAP_TYPE_ns2__MerchantSecureData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__MerchantSecureData(struct soap *soap, const char *URL, ns2__MerchantSecureData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:MerchantSecureData", p->soap_type() == SOAP_TYPE_ns2__MerchantSecureData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__MerchantSecureData * SOAP_FMAC4 soap_get_ns2__MerchantSecureData(struct soap*, ns2__MerchantSecureData *, const char*, const char*);

inline int soap_read_ns2__MerchantSecureData(struct soap *soap, ns2__MerchantSecureData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__MerchantSecureData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__MerchantSecureData(struct soap *soap, const char *URL, ns2__MerchantSecureData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__MerchantSecureData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__MerchantSecureData(struct soap *soap, ns2__MerchantSecureData *p)
{
	if (::soap_read_ns2__MerchantSecureData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__AuxiliaryData_DEFINED
#define SOAP_TYPE_ns2__AuxiliaryData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AuxiliaryData(struct soap*, const char*, int, const ns2__AuxiliaryData *, const char*);
SOAP_FMAC3 ns2__AuxiliaryData * SOAP_FMAC4 soap_in_ns2__AuxiliaryData(struct soap*, const char*, ns2__AuxiliaryData *, const char*);
SOAP_FMAC1 ns2__AuxiliaryData * SOAP_FMAC2 soap_instantiate_ns2__AuxiliaryData(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AuxiliaryData * soap_new_ns2__AuxiliaryData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__AuxiliaryData(soap, n, NULL, NULL, NULL);
}

inline ns2__AuxiliaryData * soap_new_req_ns2__AuxiliaryData(
	struct soap *soap)
{
	ns2__AuxiliaryData *_p = ::soap_new_ns2__AuxiliaryData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__AuxiliaryData * soap_new_set_ns2__AuxiliaryData(
	struct soap *soap,
	const std::vector<ns2__AuxiliaryField *> & field)
{
	ns2__AuxiliaryData *_p = ::soap_new_ns2__AuxiliaryData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AuxiliaryData::field = field;
	}
	return _p;
}

inline int soap_write_ns2__AuxiliaryData(struct soap *soap, ns2__AuxiliaryData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AuxiliaryData", p->soap_type() == SOAP_TYPE_ns2__AuxiliaryData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__AuxiliaryData(struct soap *soap, const char *URL, ns2__AuxiliaryData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AuxiliaryData", p->soap_type() == SOAP_TYPE_ns2__AuxiliaryData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__AuxiliaryData(struct soap *soap, const char *URL, ns2__AuxiliaryData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AuxiliaryData", p->soap_type() == SOAP_TYPE_ns2__AuxiliaryData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__AuxiliaryData(struct soap *soap, const char *URL, ns2__AuxiliaryData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AuxiliaryData", p->soap_type() == SOAP_TYPE_ns2__AuxiliaryData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__AuxiliaryData * SOAP_FMAC4 soap_get_ns2__AuxiliaryData(struct soap*, ns2__AuxiliaryData *, const char*, const char*);

inline int soap_read_ns2__AuxiliaryData(struct soap *soap, ns2__AuxiliaryData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__AuxiliaryData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__AuxiliaryData(struct soap *soap, const char *URL, ns2__AuxiliaryData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__AuxiliaryData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__AuxiliaryData(struct soap *soap, ns2__AuxiliaryData *p)
{
	if (::soap_read_ns2__AuxiliaryData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__AuxiliaryField_DEFINED
#define SOAP_TYPE_ns2__AuxiliaryField_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AuxiliaryField(struct soap*, const char*, int, const ns2__AuxiliaryField *, const char*);
SOAP_FMAC3 ns2__AuxiliaryField * SOAP_FMAC4 soap_in_ns2__AuxiliaryField(struct soap*, const char*, ns2__AuxiliaryField *, const char*);
SOAP_FMAC1 ns2__AuxiliaryField * SOAP_FMAC2 soap_instantiate_ns2__AuxiliaryField(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AuxiliaryField * soap_new_ns2__AuxiliaryField(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__AuxiliaryField(soap, n, NULL, NULL, NULL);
}

inline ns2__AuxiliaryField * soap_new_req_ns2__AuxiliaryField(
	struct soap *soap,
	const std::string& __item,
	const std::string& id)
{
	ns2__AuxiliaryField *_p = ::soap_new_ns2__AuxiliaryField(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AuxiliaryField::__item = __item;
		_p->ns2__AuxiliaryField::id = id;
	}
	return _p;
}

inline ns2__AuxiliaryField * soap_new_set_ns2__AuxiliaryField(
	struct soap *soap,
	const std::string& __item,
	const std::string& id)
{
	ns2__AuxiliaryField *_p = ::soap_new_ns2__AuxiliaryField(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AuxiliaryField::__item = __item;
		_p->ns2__AuxiliaryField::id = id;
	}
	return _p;
}

inline int soap_write_ns2__AuxiliaryField(struct soap *soap, ns2__AuxiliaryField const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AuxiliaryField", p->soap_type() == SOAP_TYPE_ns2__AuxiliaryField ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__AuxiliaryField(struct soap *soap, const char *URL, ns2__AuxiliaryField const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AuxiliaryField", p->soap_type() == SOAP_TYPE_ns2__AuxiliaryField ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__AuxiliaryField(struct soap *soap, const char *URL, ns2__AuxiliaryField const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AuxiliaryField", p->soap_type() == SOAP_TYPE_ns2__AuxiliaryField ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__AuxiliaryField(struct soap *soap, const char *URL, ns2__AuxiliaryField const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AuxiliaryField", p->soap_type() == SOAP_TYPE_ns2__AuxiliaryField ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__AuxiliaryField * SOAP_FMAC4 soap_get_ns2__AuxiliaryField(struct soap*, ns2__AuxiliaryField *, const char*, const char*);

inline int soap_read_ns2__AuxiliaryField(struct soap *soap, ns2__AuxiliaryField *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__AuxiliaryField(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__AuxiliaryField(struct soap *soap, const char *URL, ns2__AuxiliaryField *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__AuxiliaryField(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__AuxiliaryField(struct soap *soap, ns2__AuxiliaryField *p)
{
	if (::soap_read_ns2__AuxiliaryField(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__MerchantDefinedData_DEFINED
#define SOAP_TYPE_ns2__MerchantDefinedData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MerchantDefinedData(struct soap*, const char*, int, const ns2__MerchantDefinedData *, const char*);
SOAP_FMAC3 ns2__MerchantDefinedData * SOAP_FMAC4 soap_in_ns2__MerchantDefinedData(struct soap*, const char*, ns2__MerchantDefinedData *, const char*);
SOAP_FMAC1 ns2__MerchantDefinedData * SOAP_FMAC2 soap_instantiate_ns2__MerchantDefinedData(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MerchantDefinedData * soap_new_ns2__MerchantDefinedData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__MerchantDefinedData(soap, n, NULL, NULL, NULL);
}

inline ns2__MerchantDefinedData * soap_new_req_ns2__MerchantDefinedData(
	struct soap *soap)
{
	ns2__MerchantDefinedData *_p = ::soap_new_ns2__MerchantDefinedData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__MerchantDefinedData * soap_new_set_ns2__MerchantDefinedData(
	struct soap *soap,
	std::string *field1,
	std::string *field2,
	std::string *field3,
	std::string *field4,
	std::string *field5,
	std::string *field6,
	std::string *field7,
	std::string *field8,
	std::string *field9,
	std::string *field10,
	std::string *field11,
	std::string *field12,
	std::string *field13,
	std::string *field14,
	std::string *field15,
	std::string *field16,
	std::string *field17,
	std::string *field18,
	std::string *field19,
	std::string *field20,
	const std::vector<ns2__MDDField *> & mddField)
{
	ns2__MerchantDefinedData *_p = ::soap_new_ns2__MerchantDefinedData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__MerchantDefinedData::field1 = field1;
		_p->ns2__MerchantDefinedData::field2 = field2;
		_p->ns2__MerchantDefinedData::field3 = field3;
		_p->ns2__MerchantDefinedData::field4 = field4;
		_p->ns2__MerchantDefinedData::field5 = field5;
		_p->ns2__MerchantDefinedData::field6 = field6;
		_p->ns2__MerchantDefinedData::field7 = field7;
		_p->ns2__MerchantDefinedData::field8 = field8;
		_p->ns2__MerchantDefinedData::field9 = field9;
		_p->ns2__MerchantDefinedData::field10 = field10;
		_p->ns2__MerchantDefinedData::field11 = field11;
		_p->ns2__MerchantDefinedData::field12 = field12;
		_p->ns2__MerchantDefinedData::field13 = field13;
		_p->ns2__MerchantDefinedData::field14 = field14;
		_p->ns2__MerchantDefinedData::field15 = field15;
		_p->ns2__MerchantDefinedData::field16 = field16;
		_p->ns2__MerchantDefinedData::field17 = field17;
		_p->ns2__MerchantDefinedData::field18 = field18;
		_p->ns2__MerchantDefinedData::field19 = field19;
		_p->ns2__MerchantDefinedData::field20 = field20;
		_p->ns2__MerchantDefinedData::mddField = mddField;
	}
	return _p;
}

inline int soap_write_ns2__MerchantDefinedData(struct soap *soap, ns2__MerchantDefinedData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:MerchantDefinedData", p->soap_type() == SOAP_TYPE_ns2__MerchantDefinedData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__MerchantDefinedData(struct soap *soap, const char *URL, ns2__MerchantDefinedData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:MerchantDefinedData", p->soap_type() == SOAP_TYPE_ns2__MerchantDefinedData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__MerchantDefinedData(struct soap *soap, const char *URL, ns2__MerchantDefinedData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:MerchantDefinedData", p->soap_type() == SOAP_TYPE_ns2__MerchantDefinedData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__MerchantDefinedData(struct soap *soap, const char *URL, ns2__MerchantDefinedData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:MerchantDefinedData", p->soap_type() == SOAP_TYPE_ns2__MerchantDefinedData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__MerchantDefinedData * SOAP_FMAC4 soap_get_ns2__MerchantDefinedData(struct soap*, ns2__MerchantDefinedData *, const char*, const char*);

inline int soap_read_ns2__MerchantDefinedData(struct soap *soap, ns2__MerchantDefinedData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__MerchantDefinedData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__MerchantDefinedData(struct soap *soap, const char *URL, ns2__MerchantDefinedData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__MerchantDefinedData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__MerchantDefinedData(struct soap *soap, ns2__MerchantDefinedData *p)
{
	if (::soap_read_ns2__MerchantDefinedData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__MDDField_DEFINED
#define SOAP_TYPE_ns2__MDDField_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MDDField(struct soap*, const char*, int, const ns2__MDDField *, const char*);
SOAP_FMAC3 ns2__MDDField * SOAP_FMAC4 soap_in_ns2__MDDField(struct soap*, const char*, ns2__MDDField *, const char*);
SOAP_FMAC1 ns2__MDDField * SOAP_FMAC2 soap_instantiate_ns2__MDDField(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MDDField * soap_new_ns2__MDDField(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__MDDField(soap, n, NULL, NULL, NULL);
}

inline ns2__MDDField * soap_new_req_ns2__MDDField(
	struct soap *soap,
	const std::string& __item,
	const std::string& id)
{
	ns2__MDDField *_p = ::soap_new_ns2__MDDField(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__MDDField::__item = __item;
		_p->ns2__MDDField::id = id;
	}
	return _p;
}

inline ns2__MDDField * soap_new_set_ns2__MDDField(
	struct soap *soap,
	const std::string& __item,
	const std::string& id)
{
	ns2__MDDField *_p = ::soap_new_ns2__MDDField(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__MDDField::__item = __item;
		_p->ns2__MDDField::id = id;
	}
	return _p;
}

inline int soap_write_ns2__MDDField(struct soap *soap, ns2__MDDField const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:MDDField", p->soap_type() == SOAP_TYPE_ns2__MDDField ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__MDDField(struct soap *soap, const char *URL, ns2__MDDField const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:MDDField", p->soap_type() == SOAP_TYPE_ns2__MDDField ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__MDDField(struct soap *soap, const char *URL, ns2__MDDField const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:MDDField", p->soap_type() == SOAP_TYPE_ns2__MDDField ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__MDDField(struct soap *soap, const char *URL, ns2__MDDField const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:MDDField", p->soap_type() == SOAP_TYPE_ns2__MDDField ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__MDDField * SOAP_FMAC4 soap_get_ns2__MDDField(struct soap*, ns2__MDDField *, const char*, const char*);

inline int soap_read_ns2__MDDField(struct soap *soap, ns2__MDDField *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__MDDField(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__MDDField(struct soap *soap, const char *URL, ns2__MDDField *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__MDDField(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__MDDField(struct soap *soap, ns2__MDDField *p)
{
	if (::soap_read_ns2__MDDField(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Installment_DEFINED
#define SOAP_TYPE_ns2__Installment_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Installment(struct soap*, const char*, int, const ns2__Installment *, const char*);
SOAP_FMAC3 ns2__Installment * SOAP_FMAC4 soap_in_ns2__Installment(struct soap*, const char*, ns2__Installment *, const char*);
SOAP_FMAC1 ns2__Installment * SOAP_FMAC2 soap_instantiate_ns2__Installment(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Installment * soap_new_ns2__Installment(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Installment(soap, n, NULL, NULL, NULL);
}

inline ns2__Installment * soap_new_req_ns2__Installment(
	struct soap *soap)
{
	ns2__Installment *_p = ::soap_new_ns2__Installment(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Installment * soap_new_set_ns2__Installment(
	struct soap *soap,
	std::string *sequence,
	std::string *totalCount,
	std::string *totalAmount,
	std::string *frequency,
	std::string *amount,
	std::string *planType,
	std::string *firstInstallmentDate,
	std::string *amountFunded,
	std::string *amountRequestedPercentage,
	std::string *expenses,
	std::string *expensesPercentage,
	std::string *fees,
	std::string *feesPercentage,
	std::string *taxes,
	std::string *taxesPercentage,
	std::string *insurance,
	std::string *insurancePercentage,
	std::string *additionalCosts,
	std::string *additionalCostsPercentage,
	std::string *monthlyInterestRate,
	std::string *annualInterestRate,
	std::string *annualFinancingCost,
	std::string *paymentType,
	std::string *invoiceData,
	std::string *downPayment,
	std::string *firstInstallmentAmount,
	std::string *minimumTotalCount,
	std::string *maximumTotalCount,
	std::string *gracePeriodDuration,
	std::string *gracePeriodDurationType,
	std::string *planID,
	std::string *interestAmount)
{
	ns2__Installment *_p = ::soap_new_ns2__Installment(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Installment::sequence = sequence;
		_p->ns2__Installment::totalCount = totalCount;
		_p->ns2__Installment::totalAmount = totalAmount;
		_p->ns2__Installment::frequency = frequency;
		_p->ns2__Installment::amount = amount;
		_p->ns2__Installment::planType = planType;
		_p->ns2__Installment::firstInstallmentDate = firstInstallmentDate;
		_p->ns2__Installment::amountFunded = amountFunded;
		_p->ns2__Installment::amountRequestedPercentage = amountRequestedPercentage;
		_p->ns2__Installment::expenses = expenses;
		_p->ns2__Installment::expensesPercentage = expensesPercentage;
		_p->ns2__Installment::fees = fees;
		_p->ns2__Installment::feesPercentage = feesPercentage;
		_p->ns2__Installment::taxes = taxes;
		_p->ns2__Installment::taxesPercentage = taxesPercentage;
		_p->ns2__Installment::insurance = insurance;
		_p->ns2__Installment::insurancePercentage = insurancePercentage;
		_p->ns2__Installment::additionalCosts = additionalCosts;
		_p->ns2__Installment::additionalCostsPercentage = additionalCostsPercentage;
		_p->ns2__Installment::monthlyInterestRate = monthlyInterestRate;
		_p->ns2__Installment::annualInterestRate = annualInterestRate;
		_p->ns2__Installment::annualFinancingCost = annualFinancingCost;
		_p->ns2__Installment::paymentType = paymentType;
		_p->ns2__Installment::invoiceData = invoiceData;
		_p->ns2__Installment::downPayment = downPayment;
		_p->ns2__Installment::firstInstallmentAmount = firstInstallmentAmount;
		_p->ns2__Installment::minimumTotalCount = minimumTotalCount;
		_p->ns2__Installment::maximumTotalCount = maximumTotalCount;
		_p->ns2__Installment::gracePeriodDuration = gracePeriodDuration;
		_p->ns2__Installment::gracePeriodDurationType = gracePeriodDurationType;
		_p->ns2__Installment::planID = planID;
		_p->ns2__Installment::interestAmount = interestAmount;
	}
	return _p;
}

inline int soap_write_ns2__Installment(struct soap *soap, ns2__Installment const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Installment", p->soap_type() == SOAP_TYPE_ns2__Installment ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Installment(struct soap *soap, const char *URL, ns2__Installment const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Installment", p->soap_type() == SOAP_TYPE_ns2__Installment ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Installment(struct soap *soap, const char *URL, ns2__Installment const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Installment", p->soap_type() == SOAP_TYPE_ns2__Installment ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Installment(struct soap *soap, const char *URL, ns2__Installment const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Installment", p->soap_type() == SOAP_TYPE_ns2__Installment ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Installment * SOAP_FMAC4 soap_get_ns2__Installment(struct soap*, ns2__Installment *, const char*, const char*);

inline int soap_read_ns2__Installment(struct soap *soap, ns2__Installment *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Installment(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Installment(struct soap *soap, const char *URL, ns2__Installment *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Installment(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Installment(struct soap *soap, ns2__Installment *p)
{
	if (::soap_read_ns2__Installment(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__EncryptedPayment_DEFINED
#define SOAP_TYPE_ns2__EncryptedPayment_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EncryptedPayment(struct soap*, const char*, int, const ns2__EncryptedPayment *, const char*);
SOAP_FMAC3 ns2__EncryptedPayment * SOAP_FMAC4 soap_in_ns2__EncryptedPayment(struct soap*, const char*, ns2__EncryptedPayment *, const char*);
SOAP_FMAC1 ns2__EncryptedPayment * SOAP_FMAC2 soap_instantiate_ns2__EncryptedPayment(struct soap*, int, const char*, const char*, size_t*);

inline ns2__EncryptedPayment * soap_new_ns2__EncryptedPayment(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__EncryptedPayment(soap, n, NULL, NULL, NULL);
}

inline ns2__EncryptedPayment * soap_new_req_ns2__EncryptedPayment(
	struct soap *soap)
{
	ns2__EncryptedPayment *_p = ::soap_new_ns2__EncryptedPayment(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__EncryptedPayment * soap_new_set_ns2__EncryptedPayment(
	struct soap *soap,
	std::string *descriptor,
	std::string *data,
	std::string *encoding,
	std::string *wrappedKey,
	std::string *referenceID,
	std::string *errorCode,
	std::string *keySerialNumber)
{
	ns2__EncryptedPayment *_p = ::soap_new_ns2__EncryptedPayment(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__EncryptedPayment::descriptor = descriptor;
		_p->ns2__EncryptedPayment::data = data;
		_p->ns2__EncryptedPayment::encoding = encoding;
		_p->ns2__EncryptedPayment::wrappedKey = wrappedKey;
		_p->ns2__EncryptedPayment::referenceID = referenceID;
		_p->ns2__EncryptedPayment::errorCode = errorCode;
		_p->ns2__EncryptedPayment::keySerialNumber = keySerialNumber;
	}
	return _p;
}

inline int soap_write_ns2__EncryptedPayment(struct soap *soap, ns2__EncryptedPayment const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:EncryptedPayment", p->soap_type() == SOAP_TYPE_ns2__EncryptedPayment ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__EncryptedPayment(struct soap *soap, const char *URL, ns2__EncryptedPayment const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:EncryptedPayment", p->soap_type() == SOAP_TYPE_ns2__EncryptedPayment ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__EncryptedPayment(struct soap *soap, const char *URL, ns2__EncryptedPayment const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:EncryptedPayment", p->soap_type() == SOAP_TYPE_ns2__EncryptedPayment ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__EncryptedPayment(struct soap *soap, const char *URL, ns2__EncryptedPayment const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:EncryptedPayment", p->soap_type() == SOAP_TYPE_ns2__EncryptedPayment ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__EncryptedPayment * SOAP_FMAC4 soap_get_ns2__EncryptedPayment(struct soap*, ns2__EncryptedPayment *, const char*, const char*);

inline int soap_read_ns2__EncryptedPayment(struct soap *soap, ns2__EncryptedPayment *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__EncryptedPayment(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__EncryptedPayment(struct soap *soap, const char *URL, ns2__EncryptedPayment *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__EncryptedPayment(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__EncryptedPayment(struct soap *soap, ns2__EncryptedPayment *p)
{
	if (::soap_read_ns2__EncryptedPayment(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Pin_DEFINED
#define SOAP_TYPE_ns2__Pin_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Pin(struct soap*, const char*, int, const ns2__Pin *, const char*);
SOAP_FMAC3 ns2__Pin * SOAP_FMAC4 soap_in_ns2__Pin(struct soap*, const char*, ns2__Pin *, const char*);
SOAP_FMAC1 ns2__Pin * SOAP_FMAC2 soap_instantiate_ns2__Pin(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Pin * soap_new_ns2__Pin(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Pin(soap, n, NULL, NULL, NULL);
}

inline ns2__Pin * soap_new_req_ns2__Pin(
	struct soap *soap)
{
	ns2__Pin *_p = ::soap_new_ns2__Pin(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Pin * soap_new_set_ns2__Pin(
	struct soap *soap,
	std::string *entryCapability)
{
	ns2__Pin *_p = ::soap_new_ns2__Pin(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Pin::entryCapability = entryCapability;
	}
	return _p;
}

inline int soap_write_ns2__Pin(struct soap *soap, ns2__Pin const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Pin", p->soap_type() == SOAP_TYPE_ns2__Pin ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Pin(struct soap *soap, const char *URL, ns2__Pin const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Pin", p->soap_type() == SOAP_TYPE_ns2__Pin ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Pin(struct soap *soap, const char *URL, ns2__Pin const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Pin", p->soap_type() == SOAP_TYPE_ns2__Pin ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Pin(struct soap *soap, const char *URL, ns2__Pin const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Pin", p->soap_type() == SOAP_TYPE_ns2__Pin ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Pin * SOAP_FMAC4 soap_get_ns2__Pin(struct soap*, ns2__Pin *, const char*, const char*);

inline int soap_read_ns2__Pin(struct soap *soap, ns2__Pin *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Pin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Pin(struct soap *soap, const char *URL, ns2__Pin *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Pin(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Pin(struct soap *soap, ns2__Pin *p)
{
	if (::soap_read_ns2__Pin(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Pos_DEFINED
#define SOAP_TYPE_ns2__Pos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Pos(struct soap*, const char*, int, const ns2__Pos *, const char*);
SOAP_FMAC3 ns2__Pos * SOAP_FMAC4 soap_in_ns2__Pos(struct soap*, const char*, ns2__Pos *, const char*);
SOAP_FMAC1 ns2__Pos * SOAP_FMAC2 soap_instantiate_ns2__Pos(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Pos * soap_new_ns2__Pos(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Pos(soap, n, NULL, NULL, NULL);
}

inline ns2__Pos * soap_new_req_ns2__Pos(
	struct soap *soap)
{
	ns2__Pos *_p = ::soap_new_ns2__Pos(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Pos * soap_new_set_ns2__Pos(
	struct soap *soap,
	std::string *entryMode,
	std::string *cardPresent,
	std::string *terminalCapability,
	std::string *trackData,
	std::string *terminalID,
	std::string *terminalType,
	std::string *terminalLocation,
	std::string *transactionSecurity,
	std::string *catLevel,
	std::string *conditionCode,
	std::string *environment,
	std::string *paymentData,
	std::string *deviceReaderData,
	std::string *encryptionAlgorithm,
	std::string *encodingMethod,
	std::string *deviceID,
	std::string *serviceCode,
	std::string *terminalIDAlternate,
	std::string *terminalCompliance,
	std::string *terminalCardCaptureCapability,
	std::string *terminalOutputCapability,
	std::string *terminalPINcapability,
	std::string *terminalCVMcapabilities_USCORE0,
	std::string *terminalCVMcapabilities_USCORE1,
	std::string *terminalCVMcapabilities_USCORE2,
	std::string *terminalInputCapabilities_USCORE0,
	std::string *terminalInputCapabilities_USCORE1,
	std::string *terminalInputCapabilities_USCORE2,
	std::string *terminalInputCapabilities_USCORE3,
	std::string *terminalInputCapabilities_USCORE4,
	std::string *terminalInputCapabilities_USCORE5,
	std::string *terminalInputCapabilities_USCORE6,
	std::string *terminalSerialNumber,
	std::string *storeAndForwardIndicator,
	std::string *panEntryMode,
	std::string *endlessAisleTransactionIndicator,
	std::string *terminalModel,
	std::string *terminalMake)
{
	ns2__Pos *_p = ::soap_new_ns2__Pos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Pos::entryMode = entryMode;
		_p->ns2__Pos::cardPresent = cardPresent;
		_p->ns2__Pos::terminalCapability = terminalCapability;
		_p->ns2__Pos::trackData = trackData;
		_p->ns2__Pos::terminalID = terminalID;
		_p->ns2__Pos::terminalType = terminalType;
		_p->ns2__Pos::terminalLocation = terminalLocation;
		_p->ns2__Pos::transactionSecurity = transactionSecurity;
		_p->ns2__Pos::catLevel = catLevel;
		_p->ns2__Pos::conditionCode = conditionCode;
		_p->ns2__Pos::environment = environment;
		_p->ns2__Pos::paymentData = paymentData;
		_p->ns2__Pos::deviceReaderData = deviceReaderData;
		_p->ns2__Pos::encryptionAlgorithm = encryptionAlgorithm;
		_p->ns2__Pos::encodingMethod = encodingMethod;
		_p->ns2__Pos::deviceID = deviceID;
		_p->ns2__Pos::serviceCode = serviceCode;
		_p->ns2__Pos::terminalIDAlternate = terminalIDAlternate;
		_p->ns2__Pos::terminalCompliance = terminalCompliance;
		_p->ns2__Pos::terminalCardCaptureCapability = terminalCardCaptureCapability;
		_p->ns2__Pos::terminalOutputCapability = terminalOutputCapability;
		_p->ns2__Pos::terminalPINcapability = terminalPINcapability;
		_p->ns2__Pos::terminalCVMcapabilities_USCORE0 = terminalCVMcapabilities_USCORE0;
		_p->ns2__Pos::terminalCVMcapabilities_USCORE1 = terminalCVMcapabilities_USCORE1;
		_p->ns2__Pos::terminalCVMcapabilities_USCORE2 = terminalCVMcapabilities_USCORE2;
		_p->ns2__Pos::terminalInputCapabilities_USCORE0 = terminalInputCapabilities_USCORE0;
		_p->ns2__Pos::terminalInputCapabilities_USCORE1 = terminalInputCapabilities_USCORE1;
		_p->ns2__Pos::terminalInputCapabilities_USCORE2 = terminalInputCapabilities_USCORE2;
		_p->ns2__Pos::terminalInputCapabilities_USCORE3 = terminalInputCapabilities_USCORE3;
		_p->ns2__Pos::terminalInputCapabilities_USCORE4 = terminalInputCapabilities_USCORE4;
		_p->ns2__Pos::terminalInputCapabilities_USCORE5 = terminalInputCapabilities_USCORE5;
		_p->ns2__Pos::terminalInputCapabilities_USCORE6 = terminalInputCapabilities_USCORE6;
		_p->ns2__Pos::terminalSerialNumber = terminalSerialNumber;
		_p->ns2__Pos::storeAndForwardIndicator = storeAndForwardIndicator;
		_p->ns2__Pos::panEntryMode = panEntryMode;
		_p->ns2__Pos::endlessAisleTransactionIndicator = endlessAisleTransactionIndicator;
		_p->ns2__Pos::terminalModel = terminalModel;
		_p->ns2__Pos::terminalMake = terminalMake;
	}
	return _p;
}

inline int soap_write_ns2__Pos(struct soap *soap, ns2__Pos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Pos", p->soap_type() == SOAP_TYPE_ns2__Pos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Pos(struct soap *soap, const char *URL, ns2__Pos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Pos", p->soap_type() == SOAP_TYPE_ns2__Pos ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Pos(struct soap *soap, const char *URL, ns2__Pos const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Pos", p->soap_type() == SOAP_TYPE_ns2__Pos ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Pos(struct soap *soap, const char *URL, ns2__Pos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Pos", p->soap_type() == SOAP_TYPE_ns2__Pos ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Pos * SOAP_FMAC4 soap_get_ns2__Pos(struct soap*, ns2__Pos *, const char*, const char*);

inline int soap_read_ns2__Pos(struct soap *soap, ns2__Pos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Pos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Pos(struct soap *soap, const char *URL, ns2__Pos *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Pos(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Pos(struct soap *soap, ns2__Pos *p)
{
	if (::soap_read_ns2__Pos(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__LodgingData_DEFINED
#define SOAP_TYPE_ns2__LodgingData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__LodgingData(struct soap*, const char*, int, const ns2__LodgingData *, const char*);
SOAP_FMAC3 ns2__LodgingData * SOAP_FMAC4 soap_in_ns2__LodgingData(struct soap*, const char*, ns2__LodgingData *, const char*);
SOAP_FMAC1 ns2__LodgingData * SOAP_FMAC2 soap_instantiate_ns2__LodgingData(struct soap*, int, const char*, const char*, size_t*);

inline ns2__LodgingData * soap_new_ns2__LodgingData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__LodgingData(soap, n, NULL, NULL, NULL);
}

inline ns2__LodgingData * soap_new_req_ns2__LodgingData(
	struct soap *soap)
{
	ns2__LodgingData *_p = ::soap_new_ns2__LodgingData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__LodgingData * soap_new_set_ns2__LodgingData(
	struct soap *soap,
	std::string *checkInDate,
	std::string *checkOutDate,
	std::string *dailyRoomRate1,
	std::string *dailyRoomRate2,
	std::string *dailyRoomRate3,
	std::string *roomNights1,
	std::string *roomNights2,
	std::string *roomNights3,
	std::string *guestSmokingPreference,
	std::string *numberOfRoomsBooked,
	std::string *numberOfGuests,
	std::string *roomBedType,
	std::string *roomTaxElements,
	std::string *roomRateType,
	std::string *guestName,
	std::string *customerServicePhoneNumber,
	std::string *corporateClientCode,
	std::string *promotionalCode,
	std::string *additionalCoupon,
	std::string *roomLocation,
	std::string *specialProgramCode,
	std::string *tax,
	std::string *prepaidCost,
	std::string *foodAndBeverageCost,
	std::string *roomTax,
	std::string *adjustmentAmount,
	std::string *phoneCost,
	std::string *restaurantCost,
	std::string *roomServiceCost,
	std::string *miniBarCost,
	std::string *laundryCost,
	std::string *miscellaneousCost,
	std::string *giftShopCost,
	std::string *movieCost,
	std::string *healthClubCost,
	std::string *valetParkingCost,
	std::string *cashDisbursementCost,
	std::string *nonRoomCost,
	std::string *businessCenterCost,
	std::string *loungeBarCost,
	std::string *transportationCost,
	std::string *gratuityCost,
	std::string *conferenceRoomCost,
	std::string *audioVisualCost,
	std::string *banquetCost,
	std::string *internetAccessCost,
	std::string *earlyCheckOutCost,
	std::string *nonRoomTax,
	std::string *travelAgencyCode,
	std::string *travelAgencyName)
{
	ns2__LodgingData *_p = ::soap_new_ns2__LodgingData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__LodgingData::checkInDate = checkInDate;
		_p->ns2__LodgingData::checkOutDate = checkOutDate;
		_p->ns2__LodgingData::dailyRoomRate1 = dailyRoomRate1;
		_p->ns2__LodgingData::dailyRoomRate2 = dailyRoomRate2;
		_p->ns2__LodgingData::dailyRoomRate3 = dailyRoomRate3;
		_p->ns2__LodgingData::roomNights1 = roomNights1;
		_p->ns2__LodgingData::roomNights2 = roomNights2;
		_p->ns2__LodgingData::roomNights3 = roomNights3;
		_p->ns2__LodgingData::guestSmokingPreference = guestSmokingPreference;
		_p->ns2__LodgingData::numberOfRoomsBooked = numberOfRoomsBooked;
		_p->ns2__LodgingData::numberOfGuests = numberOfGuests;
		_p->ns2__LodgingData::roomBedType = roomBedType;
		_p->ns2__LodgingData::roomTaxElements = roomTaxElements;
		_p->ns2__LodgingData::roomRateType = roomRateType;
		_p->ns2__LodgingData::guestName = guestName;
		_p->ns2__LodgingData::customerServicePhoneNumber = customerServicePhoneNumber;
		_p->ns2__LodgingData::corporateClientCode = corporateClientCode;
		_p->ns2__LodgingData::promotionalCode = promotionalCode;
		_p->ns2__LodgingData::additionalCoupon = additionalCoupon;
		_p->ns2__LodgingData::roomLocation = roomLocation;
		_p->ns2__LodgingData::specialProgramCode = specialProgramCode;
		_p->ns2__LodgingData::tax = tax;
		_p->ns2__LodgingData::prepaidCost = prepaidCost;
		_p->ns2__LodgingData::foodAndBeverageCost = foodAndBeverageCost;
		_p->ns2__LodgingData::roomTax = roomTax;
		_p->ns2__LodgingData::adjustmentAmount = adjustmentAmount;
		_p->ns2__LodgingData::phoneCost = phoneCost;
		_p->ns2__LodgingData::restaurantCost = restaurantCost;
		_p->ns2__LodgingData::roomServiceCost = roomServiceCost;
		_p->ns2__LodgingData::miniBarCost = miniBarCost;
		_p->ns2__LodgingData::laundryCost = laundryCost;
		_p->ns2__LodgingData::miscellaneousCost = miscellaneousCost;
		_p->ns2__LodgingData::giftShopCost = giftShopCost;
		_p->ns2__LodgingData::movieCost = movieCost;
		_p->ns2__LodgingData::healthClubCost = healthClubCost;
		_p->ns2__LodgingData::valetParkingCost = valetParkingCost;
		_p->ns2__LodgingData::cashDisbursementCost = cashDisbursementCost;
		_p->ns2__LodgingData::nonRoomCost = nonRoomCost;
		_p->ns2__LodgingData::businessCenterCost = businessCenterCost;
		_p->ns2__LodgingData::loungeBarCost = loungeBarCost;
		_p->ns2__LodgingData::transportationCost = transportationCost;
		_p->ns2__LodgingData::gratuityCost = gratuityCost;
		_p->ns2__LodgingData::conferenceRoomCost = conferenceRoomCost;
		_p->ns2__LodgingData::audioVisualCost = audioVisualCost;
		_p->ns2__LodgingData::banquetCost = banquetCost;
		_p->ns2__LodgingData::internetAccessCost = internetAccessCost;
		_p->ns2__LodgingData::earlyCheckOutCost = earlyCheckOutCost;
		_p->ns2__LodgingData::nonRoomTax = nonRoomTax;
		_p->ns2__LodgingData::travelAgencyCode = travelAgencyCode;
		_p->ns2__LodgingData::travelAgencyName = travelAgencyName;
	}
	return _p;
}

inline int soap_write_ns2__LodgingData(struct soap *soap, ns2__LodgingData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:LodgingData", p->soap_type() == SOAP_TYPE_ns2__LodgingData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__LodgingData(struct soap *soap, const char *URL, ns2__LodgingData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:LodgingData", p->soap_type() == SOAP_TYPE_ns2__LodgingData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__LodgingData(struct soap *soap, const char *URL, ns2__LodgingData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:LodgingData", p->soap_type() == SOAP_TYPE_ns2__LodgingData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__LodgingData(struct soap *soap, const char *URL, ns2__LodgingData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:LodgingData", p->soap_type() == SOAP_TYPE_ns2__LodgingData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__LodgingData * SOAP_FMAC4 soap_get_ns2__LodgingData(struct soap*, ns2__LodgingData *, const char*, const char*);

inline int soap_read_ns2__LodgingData(struct soap *soap, ns2__LodgingData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__LodgingData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__LodgingData(struct soap *soap, const char *URL, ns2__LodgingData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__LodgingData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__LodgingData(struct soap *soap, ns2__LodgingData *p)
{
	if (::soap_read_ns2__LodgingData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Service_DEFINED
#define SOAP_TYPE_ns2__Service_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Service(struct soap*, const char*, int, const ns2__Service *, const char*);
SOAP_FMAC3 ns2__Service * SOAP_FMAC4 soap_in_ns2__Service(struct soap*, const char*, ns2__Service *, const char*);
SOAP_FMAC1 ns2__Service * SOAP_FMAC2 soap_instantiate_ns2__Service(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Service * soap_new_ns2__Service(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Service(soap, n, NULL, NULL, NULL);
}

inline ns2__Service * soap_new_req_ns2__Service(
	struct soap *soap,
	const std::string& id)
{
	ns2__Service *_p = ::soap_new_ns2__Service(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Service::id = id;
	}
	return _p;
}

inline ns2__Service * soap_new_set_ns2__Service(
	struct soap *soap,
	std::string *categoryCode,
	std::string *subcategoryCode,
	const std::string& id)
{
	ns2__Service *_p = ::soap_new_ns2__Service(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Service::categoryCode = categoryCode;
		_p->ns2__Service::subcategoryCode = subcategoryCode;
		_p->ns2__Service::id = id;
	}
	return _p;
}

inline int soap_write_ns2__Service(struct soap *soap, ns2__Service const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Service", p->soap_type() == SOAP_TYPE_ns2__Service ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Service(struct soap *soap, const char *URL, ns2__Service const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Service", p->soap_type() == SOAP_TYPE_ns2__Service ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Service(struct soap *soap, const char *URL, ns2__Service const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Service", p->soap_type() == SOAP_TYPE_ns2__Service ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Service(struct soap *soap, const char *URL, ns2__Service const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Service", p->soap_type() == SOAP_TYPE_ns2__Service ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Service * SOAP_FMAC4 soap_get_ns2__Service(struct soap*, ns2__Service *, const char*, const char*);

inline int soap_read_ns2__Service(struct soap *soap, ns2__Service *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Service(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Service(struct soap *soap, const char *URL, ns2__Service *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Service(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Service(struct soap *soap, ns2__Service *p)
{
	if (::soap_read_ns2__Service(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__AncillaryData_DEFINED
#define SOAP_TYPE_ns2__AncillaryData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AncillaryData(struct soap*, const char*, int, const ns2__AncillaryData *, const char*);
SOAP_FMAC3 ns2__AncillaryData * SOAP_FMAC4 soap_in_ns2__AncillaryData(struct soap*, const char*, ns2__AncillaryData *, const char*);
SOAP_FMAC1 ns2__AncillaryData * SOAP_FMAC2 soap_instantiate_ns2__AncillaryData(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AncillaryData * soap_new_ns2__AncillaryData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__AncillaryData(soap, n, NULL, NULL, NULL);
}

inline ns2__AncillaryData * soap_new_req_ns2__AncillaryData(
	struct soap *soap)
{
	ns2__AncillaryData *_p = ::soap_new_ns2__AncillaryData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__AncillaryData * soap_new_set_ns2__AncillaryData(
	struct soap *soap,
	std::string *ticketNumber,
	std::string *passengerName,
	std::string *connectedTicketNumber,
	std::string *creditReasonIndicator,
	const std::vector<ns2__Service *> & service)
{
	ns2__AncillaryData *_p = ::soap_new_ns2__AncillaryData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AncillaryData::ticketNumber = ticketNumber;
		_p->ns2__AncillaryData::passengerName = passengerName;
		_p->ns2__AncillaryData::connectedTicketNumber = connectedTicketNumber;
		_p->ns2__AncillaryData::creditReasonIndicator = creditReasonIndicator;
		_p->ns2__AncillaryData::service = service;
	}
	return _p;
}

inline int soap_write_ns2__AncillaryData(struct soap *soap, ns2__AncillaryData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AncillaryData", p->soap_type() == SOAP_TYPE_ns2__AncillaryData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__AncillaryData(struct soap *soap, const char *URL, ns2__AncillaryData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AncillaryData", p->soap_type() == SOAP_TYPE_ns2__AncillaryData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__AncillaryData(struct soap *soap, const char *URL, ns2__AncillaryData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AncillaryData", p->soap_type() == SOAP_TYPE_ns2__AncillaryData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__AncillaryData(struct soap *soap, const char *URL, ns2__AncillaryData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AncillaryData", p->soap_type() == SOAP_TYPE_ns2__AncillaryData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__AncillaryData * SOAP_FMAC4 soap_get_ns2__AncillaryData(struct soap*, ns2__AncillaryData *, const char*, const char*);

inline int soap_read_ns2__AncillaryData(struct soap *soap, ns2__AncillaryData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__AncillaryData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__AncillaryData(struct soap *soap, const char *URL, ns2__AncillaryData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__AncillaryData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__AncillaryData(struct soap *soap, ns2__AncillaryData *p)
{
	if (::soap_read_ns2__AncillaryData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Leg_DEFINED
#define SOAP_TYPE_ns2__Leg_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Leg(struct soap*, const char*, int, const ns2__Leg *, const char*);
SOAP_FMAC3 ns2__Leg * SOAP_FMAC4 soap_in_ns2__Leg(struct soap*, const char*, ns2__Leg *, const char*);
SOAP_FMAC1 ns2__Leg * SOAP_FMAC2 soap_instantiate_ns2__Leg(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Leg * soap_new_ns2__Leg(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Leg(soap, n, NULL, NULL, NULL);
}

inline ns2__Leg * soap_new_req_ns2__Leg(
	struct soap *soap,
	const std::string& id)
{
	ns2__Leg *_p = ::soap_new_ns2__Leg(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Leg::id = id;
	}
	return _p;
}

inline ns2__Leg * soap_new_set_ns2__Leg(
	struct soap *soap,
	std::string *carrierCode,
	std::string *flightNumber,
	std::string *originatingAirportCode,
	std::string *class_,
	std::string *stopoverCode,
	std::string *departureDate,
	std::string *destination,
	std::string *fareBasis,
	std::string *departTax,
	std::string *conjunctionTicket,
	std::string *exchangeTicket,
	std::string *couponNumber,
	std::string *departureTime,
	std::string *departureTimeSegment,
	std::string *arrivalTime,
	std::string *arrivalTimeSegment,
	std::string *endorsementsRestrictions,
	std::string *fare,
	std::string *fee,
	std::string *tax,
	const std::string& id)
{
	ns2__Leg *_p = ::soap_new_ns2__Leg(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Leg::carrierCode = carrierCode;
		_p->ns2__Leg::flightNumber = flightNumber;
		_p->ns2__Leg::originatingAirportCode = originatingAirportCode;
		_p->ns2__Leg::class_ = class_;
		_p->ns2__Leg::stopoverCode = stopoverCode;
		_p->ns2__Leg::departureDate = departureDate;
		_p->ns2__Leg::destination = destination;
		_p->ns2__Leg::fareBasis = fareBasis;
		_p->ns2__Leg::departTax = departTax;
		_p->ns2__Leg::conjunctionTicket = conjunctionTicket;
		_p->ns2__Leg::exchangeTicket = exchangeTicket;
		_p->ns2__Leg::couponNumber = couponNumber;
		_p->ns2__Leg::departureTime = departureTime;
		_p->ns2__Leg::departureTimeSegment = departureTimeSegment;
		_p->ns2__Leg::arrivalTime = arrivalTime;
		_p->ns2__Leg::arrivalTimeSegment = arrivalTimeSegment;
		_p->ns2__Leg::endorsementsRestrictions = endorsementsRestrictions;
		_p->ns2__Leg::fare = fare;
		_p->ns2__Leg::fee = fee;
		_p->ns2__Leg::tax = tax;
		_p->ns2__Leg::id = id;
	}
	return _p;
}

inline int soap_write_ns2__Leg(struct soap *soap, ns2__Leg const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Leg", p->soap_type() == SOAP_TYPE_ns2__Leg ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Leg(struct soap *soap, const char *URL, ns2__Leg const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Leg", p->soap_type() == SOAP_TYPE_ns2__Leg ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Leg(struct soap *soap, const char *URL, ns2__Leg const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Leg", p->soap_type() == SOAP_TYPE_ns2__Leg ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Leg(struct soap *soap, const char *URL, ns2__Leg const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Leg", p->soap_type() == SOAP_TYPE_ns2__Leg ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Leg * SOAP_FMAC4 soap_get_ns2__Leg(struct soap*, ns2__Leg *, const char*, const char*);

inline int soap_read_ns2__Leg(struct soap *soap, ns2__Leg *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Leg(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Leg(struct soap *soap, const char *URL, ns2__Leg *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Leg(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Leg(struct soap *soap, ns2__Leg *p)
{
	if (::soap_read_ns2__Leg(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__AirlineData_DEFINED
#define SOAP_TYPE_ns2__AirlineData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AirlineData(struct soap*, const char*, int, const ns2__AirlineData *, const char*);
SOAP_FMAC3 ns2__AirlineData * SOAP_FMAC4 soap_in_ns2__AirlineData(struct soap*, const char*, ns2__AirlineData *, const char*);
SOAP_FMAC1 ns2__AirlineData * SOAP_FMAC2 soap_instantiate_ns2__AirlineData(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AirlineData * soap_new_ns2__AirlineData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__AirlineData(soap, n, NULL, NULL, NULL);
}

inline ns2__AirlineData * soap_new_req_ns2__AirlineData(
	struct soap *soap)
{
	ns2__AirlineData *_p = ::soap_new_ns2__AirlineData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__AirlineData * soap_new_set_ns2__AirlineData(
	struct soap *soap,
	std::string *agentCode,
	std::string *agentName,
	std::string *ticketIssuerCity,
	std::string *ticketIssuerState,
	std::string *ticketIssuerPostalCode,
	std::string *ticketIssuerCountry,
	std::string *ticketIssuerAddress,
	std::string *ticketIssuerCode,
	std::string *ticketIssuerName,
	std::string *ticketNumber,
	std::string *checkDigit,
	std::string *restrictedTicketIndicator,
	std::string *transactionType,
	std::string *extendedPaymentCode,
	std::string *carrierName,
	std::string *passengerName,
	const std::vector<ns2__Passenger *> & passenger,
	std::string *customerCode,
	std::string *documentType,
	std::string *documentNumber,
	std::string *documentNumberOfParts,
	std::string *invoiceNumber,
	std::string *invoiceDate,
	std::string *chargeDetails,
	std::string *bookingReference,
	std::string *totalFee,
	std::string *clearingSequence,
	std::string *clearingCount,
	std::string *totalClearingAmount,
	const std::vector<ns2__Leg *> & leg,
	std::string *numberOfPassengers,
	std::string *reservationSystem,
	std::string *processIdentifier,
	std::string *iataNumericCode,
	std::string *ticketIssueDate,
	std::string *electronicTicket,
	std::string *originalTicketNumber,
	std::string *purchaseType,
	std::string *creditReasonIndicator,
	std::string *ticketUpdateIndicator,
	std::string *planNumber,
	std::string *arrivalDate,
	std::string *ticketRestrictionText,
	std::string *exchangeTicketAmount,
	std::string *exchangeTicketFee,
	std::string *journeyType,
	std::string *boardingFee)
{
	ns2__AirlineData *_p = ::soap_new_ns2__AirlineData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AirlineData::agentCode = agentCode;
		_p->ns2__AirlineData::agentName = agentName;
		_p->ns2__AirlineData::ticketIssuerCity = ticketIssuerCity;
		_p->ns2__AirlineData::ticketIssuerState = ticketIssuerState;
		_p->ns2__AirlineData::ticketIssuerPostalCode = ticketIssuerPostalCode;
		_p->ns2__AirlineData::ticketIssuerCountry = ticketIssuerCountry;
		_p->ns2__AirlineData::ticketIssuerAddress = ticketIssuerAddress;
		_p->ns2__AirlineData::ticketIssuerCode = ticketIssuerCode;
		_p->ns2__AirlineData::ticketIssuerName = ticketIssuerName;
		_p->ns2__AirlineData::ticketNumber = ticketNumber;
		_p->ns2__AirlineData::checkDigit = checkDigit;
		_p->ns2__AirlineData::restrictedTicketIndicator = restrictedTicketIndicator;
		_p->ns2__AirlineData::transactionType = transactionType;
		_p->ns2__AirlineData::extendedPaymentCode = extendedPaymentCode;
		_p->ns2__AirlineData::carrierName = carrierName;
		_p->ns2__AirlineData::passengerName = passengerName;
		_p->ns2__AirlineData::passenger = passenger;
		_p->ns2__AirlineData::customerCode = customerCode;
		_p->ns2__AirlineData::documentType = documentType;
		_p->ns2__AirlineData::documentNumber = documentNumber;
		_p->ns2__AirlineData::documentNumberOfParts = documentNumberOfParts;
		_p->ns2__AirlineData::invoiceNumber = invoiceNumber;
		_p->ns2__AirlineData::invoiceDate = invoiceDate;
		_p->ns2__AirlineData::chargeDetails = chargeDetails;
		_p->ns2__AirlineData::bookingReference = bookingReference;
		_p->ns2__AirlineData::totalFee = totalFee;
		_p->ns2__AirlineData::clearingSequence = clearingSequence;
		_p->ns2__AirlineData::clearingCount = clearingCount;
		_p->ns2__AirlineData::totalClearingAmount = totalClearingAmount;
		_p->ns2__AirlineData::leg = leg;
		_p->ns2__AirlineData::numberOfPassengers = numberOfPassengers;
		_p->ns2__AirlineData::reservationSystem = reservationSystem;
		_p->ns2__AirlineData::processIdentifier = processIdentifier;
		_p->ns2__AirlineData::iataNumericCode = iataNumericCode;
		_p->ns2__AirlineData::ticketIssueDate = ticketIssueDate;
		_p->ns2__AirlineData::electronicTicket = electronicTicket;
		_p->ns2__AirlineData::originalTicketNumber = originalTicketNumber;
		_p->ns2__AirlineData::purchaseType = purchaseType;
		_p->ns2__AirlineData::creditReasonIndicator = creditReasonIndicator;
		_p->ns2__AirlineData::ticketUpdateIndicator = ticketUpdateIndicator;
		_p->ns2__AirlineData::planNumber = planNumber;
		_p->ns2__AirlineData::arrivalDate = arrivalDate;
		_p->ns2__AirlineData::ticketRestrictionText = ticketRestrictionText;
		_p->ns2__AirlineData::exchangeTicketAmount = exchangeTicketAmount;
		_p->ns2__AirlineData::exchangeTicketFee = exchangeTicketFee;
		_p->ns2__AirlineData::journeyType = journeyType;
		_p->ns2__AirlineData::boardingFee = boardingFee;
	}
	return _p;
}

inline int soap_write_ns2__AirlineData(struct soap *soap, ns2__AirlineData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AirlineData", p->soap_type() == SOAP_TYPE_ns2__AirlineData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__AirlineData(struct soap *soap, const char *URL, ns2__AirlineData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AirlineData", p->soap_type() == SOAP_TYPE_ns2__AirlineData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__AirlineData(struct soap *soap, const char *URL, ns2__AirlineData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AirlineData", p->soap_type() == SOAP_TYPE_ns2__AirlineData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__AirlineData(struct soap *soap, const char *URL, ns2__AirlineData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AirlineData", p->soap_type() == SOAP_TYPE_ns2__AirlineData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__AirlineData * SOAP_FMAC4 soap_get_ns2__AirlineData(struct soap*, ns2__AirlineData *, const char*, const char*);

inline int soap_read_ns2__AirlineData(struct soap *soap, ns2__AirlineData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__AirlineData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__AirlineData(struct soap *soap, const char *URL, ns2__AirlineData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__AirlineData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__AirlineData(struct soap *soap, ns2__AirlineData *p)
{
	if (::soap_read_ns2__AirlineData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__FaultDetails_DEFINED
#define SOAP_TYPE_ns2__FaultDetails_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FaultDetails(struct soap*, const char*, int, const ns2__FaultDetails *, const char*);
SOAP_FMAC3 ns2__FaultDetails * SOAP_FMAC4 soap_in_ns2__FaultDetails(struct soap*, const char*, ns2__FaultDetails *, const char*);
SOAP_FMAC1 ns2__FaultDetails * SOAP_FMAC2 soap_instantiate_ns2__FaultDetails(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FaultDetails * soap_new_ns2__FaultDetails(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__FaultDetails(soap, n, NULL, NULL, NULL);
}

inline ns2__FaultDetails * soap_new_req_ns2__FaultDetails(
	struct soap *soap,
	const std::string& requestID)
{
	ns2__FaultDetails *_p = ::soap_new_ns2__FaultDetails(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__FaultDetails::requestID = requestID;
	}
	return _p;
}

inline ns2__FaultDetails * soap_new_set_ns2__FaultDetails(
	struct soap *soap,
	const std::string& requestID)
{
	ns2__FaultDetails *_p = ::soap_new_ns2__FaultDetails(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__FaultDetails::requestID = requestID;
	}
	return _p;
}

inline int soap_write_ns2__FaultDetails(struct soap *soap, ns2__FaultDetails const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FaultDetails", p->soap_type() == SOAP_TYPE_ns2__FaultDetails ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__FaultDetails(struct soap *soap, const char *URL, ns2__FaultDetails const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FaultDetails", p->soap_type() == SOAP_TYPE_ns2__FaultDetails ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__FaultDetails(struct soap *soap, const char *URL, ns2__FaultDetails const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FaultDetails", p->soap_type() == SOAP_TYPE_ns2__FaultDetails ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__FaultDetails(struct soap *soap, const char *URL, ns2__FaultDetails const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FaultDetails", p->soap_type() == SOAP_TYPE_ns2__FaultDetails ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__FaultDetails * SOAP_FMAC4 soap_get_ns2__FaultDetails(struct soap*, ns2__FaultDetails *, const char*, const char*);

inline int soap_read_ns2__FaultDetails(struct soap *soap, ns2__FaultDetails *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__FaultDetails(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__FaultDetails(struct soap *soap, const char *URL, ns2__FaultDetails *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__FaultDetails(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__FaultDetails(struct soap *soap, ns2__FaultDetails *p)
{
	if (::soap_read_ns2__FaultDetails(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ReplyMessage_DEFINED
#define SOAP_TYPE_ns2__ReplyMessage_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReplyMessage(struct soap*, const char*, int, const ns2__ReplyMessage *, const char*);
SOAP_FMAC3 ns2__ReplyMessage * SOAP_FMAC4 soap_in_ns2__ReplyMessage(struct soap*, const char*, ns2__ReplyMessage *, const char*);
SOAP_FMAC1 ns2__ReplyMessage * SOAP_FMAC2 soap_instantiate_ns2__ReplyMessage(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ReplyMessage * soap_new_ns2__ReplyMessage(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ReplyMessage(soap, n, NULL, NULL, NULL);
}

inline ns2__ReplyMessage * soap_new_req_ns2__ReplyMessage(
	struct soap *soap,
	const std::string& requestID,
	const std::string& decision,
	const std::string& reasonCode,
	const std::string& requestToken)
{
	ns2__ReplyMessage *_p = ::soap_new_ns2__ReplyMessage(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ReplyMessage::requestID = requestID;
		_p->ns2__ReplyMessage::decision = decision;
		_p->ns2__ReplyMessage::reasonCode = reasonCode;
		_p->ns2__ReplyMessage::requestToken = requestToken;
	}
	return _p;
}

inline ns2__ReplyMessage * soap_new_set_ns2__ReplyMessage(
	struct soap *soap,
	std::string *merchantReferenceCode,
	const std::string& requestID,
	const std::string& decision,
	const std::string& reasonCode,
	const std::vector<std::string> & missingField,
	const std::vector<std::string> & invalidField,
	const std::string& requestToken,
	ns2__PurchaseTotals *purchaseTotals,
	const std::vector<ns2__DeniedPartiesMatch *> & deniedPartiesMatch,
	ns2__CCAuthReply *ccAuthReply,
	ns2__OCTReply *octReply,
	ns2__VerificationReply *verificationReply,
	ns2__CCSaleReply *ccSaleReply,
	ns2__CCSaleCreditReply *ccSaleCreditReply,
	ns2__CCSaleReversalReply *ccSaleReversalReply,
	ns2__CCIncrementalAuthReply *ccIncrementalAuthReply,
	ns2__ServiceFeeCalculateReply *serviceFeeCalculateReply,
	ns2__CCCaptureReply *ccCaptureReply,
	ns2__CCCreditReply *ccCreditReply,
	ns2__CCAuthReversalReply *ccAuthReversalReply,
	ns2__CCAutoAuthReversalReply *ccAutoAuthReversalReply,
	ns2__CCDCCReply *ccDCCReply,
	ns2__CCDCCUpdateReply *ccDCCUpdateReply,
	ns2__ECDebitReply *ecDebitReply,
	ns2__ECCreditReply *ecCreditReply,
	ns2__ECAuthenticateReply *ecAuthenticateReply,
	ns2__PayerAuthSetupReply *payerAuthSetupReply,
	ns2__PayerAuthEnrollReply *payerAuthEnrollReply,
	ns2__PayerAuthValidateReply *payerAuthValidateReply,
	ns2__TaxReply *taxReply,
	ns2__EncryptedPayment *encryptedPayment,
	ns2__EncryptPaymentDataReply *encryptPaymentDataReply,
	ns2__DMEReply *dmeReply,
	ns2__AFSReply *afsReply,
	ns2__DAVReply *davReply,
	ns2__ExportReply *exportReply,
	ns2__FXRatesReply *fxRatesReply,
	ns2__BankTransferReply *bankTransferReply,
	ns2__BankTransferRefundReply *bankTransferRefundReply,
	ns2__BankTransferRealTimeReply *bankTransferRealTimeReply,
	ns2__DirectDebitMandateReply *directDebitMandateReply,
	ns2__DirectDebitReply *directDebitReply,
	ns2__DirectDebitValidateReply *directDebitValidateReply,
	ns2__DirectDebitRefundReply *directDebitRefundReply,
	ns2__PaySubscriptionCreateReply *paySubscriptionCreateReply,
	ns2__PaySubscriptionUpdateReply *paySubscriptionUpdateReply,
	ns2__PaySubscriptionEventUpdateReply *paySubscriptionEventUpdateReply,
	ns2__PaySubscriptionRetrieveReply *paySubscriptionRetrieveReply,
	ns2__PaySubscriptionDeleteReply *paySubscriptionDeleteReply,
	ns2__PayPalPaymentReply *payPalPaymentReply,
	ns2__PayPalCreditReply *payPalCreditReply,
	ns2__VoidReply *voidReply,
	ns2__PinlessDebitReply *pinlessDebitReply,
	ns2__PinlessDebitValidateReply *pinlessDebitValidateReply,
	ns2__PinlessDebitReversalReply *pinlessDebitReversalReply,
	ns2__PayPalButtonCreateReply *payPalButtonCreateReply,
	ns2__PayPalPreapprovedPaymentReply *payPalPreapprovedPaymentReply,
	ns2__PayPalPreapprovedUpdateReply *payPalPreapprovedUpdateReply,
	ns2__RiskUpdateReply *riskUpdateReply,
	ns2__FraudUpdateReply *fraudUpdateReply,
	ns2__CaseManagementActionReply *caseManagementActionReply,
	ns2__DecisionEarlyReply *decisionEarlyReply,
	ns2__DecisionReply *decisionReply,
	ns2__PayPalRefundReply *payPalRefundReply,
	ns2__PayPalAuthReversalReply *payPalAuthReversalReply,
	ns2__PayPalDoCaptureReply *payPalDoCaptureReply,
	ns2__PayPalEcDoPaymentReply *payPalEcDoPaymentReply,
	ns2__PayPalEcGetDetailsReply *payPalEcGetDetailsReply,
	ns2__PayPalEcSetReply *payPalEcSetReply,
	ns2__PayPalAuthorizationReply *payPalAuthorizationReply,
	ns2__PayPalEcOrderSetupReply *payPalEcOrderSetupReply,
	ns2__PayPalUpdateAgreementReply *payPalUpdateAgreementReply,
	ns2__PayPalCreateAgreementReply *payPalCreateAgreementReply,
	ns2__PayPalDoRefTransactionReply *payPalDoRefTransactionReply,
	ns2__ChinaPaymentReply *chinaPaymentReply,
	ns2__ChinaRefundReply *chinaRefundReply,
	ns2__BoletoPaymentReply *boletoPaymentReply,
	ns2__PinDebitPurchaseReply *pinDebitPurchaseReply,
	ns2__PinDebitCreditReply *pinDebitCreditReply,
	ns2__PinDebitReversalReply *pinDebitReversalReply,
	ns2__APInitiateReply *apInitiateReply,
	ns2__APCheckStatusReply *apCheckStatusReply,
	std::string *receiptNumber,
	std::string *additionalData,
	std::string *solutionProviderTransactionID,
	ns2__APReply *apReply,
	ns2__ShipTo *shipTo,
	ns2__BillTo *billTo,
	ns2__APAuthReply *apAuthReply,
	ns2__APSessionsReply *apSessionsReply,
	ns2__APAuthReversalReply *apAuthReversalReply,
	ns2__APCaptureReply *apCaptureReply,
	ns2__APOptionsReply *apOptionsReply,
	ns2__APRefundReply *apRefundReply,
	ns2__APSaleReply *apSaleReply,
	ns2__APCheckOutDetailsReply *apCheckoutDetailsReply,
	ns2__APTransactionDetailsReply *apTransactionDetailsReply,
	ns2__APConfirmPurchaseReply *apConfirmPurchaseReply,
	ns2__Promotion *promotion,
	const std::vector<ns2__PromotionGroupReply *> & promotionGroup,
	ns2__PayPalGetTxnDetailsReply *payPalGetTxnDetailsReply,
	ns2__PayPalTransactionSearchReply *payPalTransactionSearchReply,
	ns2__EmvReply *emvReply,
	ns2__OriginalTransaction *originalTransaction,
	ns2__HostedDataCreateReply *hostedDataCreateReply,
	ns2__HostedDataRetrieveReply *hostedDataRetrieveReply,
	std::string *salesSlipNumber,
	std::string *additionalProcessorResponse,
	ns2__JPO *jpo,
	ns2__Card *card,
	ns2__PaymentNetworkToken *paymentNetworkToken,
	ns2__VCReply *vcReply,
	ns2__DecryptVisaCheckoutDataReply *decryptVisaCheckoutDataReply,
	ns2__GetVisaCheckoutDataReply *getVisaCheckoutDataReply,
	ns2__BinLookupReply *binLookupReply,
	std::string *issuerMessage,
	ns2__Token *token,
	ns2__issuer *issuer,
	ns2__Recipient *recipient,
	std::string *feeProgramIndicator,
	ns2__Installment *installment,
	std::string *paymentAccountReference,
	std::string *paymentSolution,
	std::string *authIndicator,
	ns2__UCAF *ucaf,
	const std::vector<ns2__Network *> & network,
	ns2__InvoiceHeader *invoiceHeader,
	ns2__APOrderReply *apOrderReply,
	ns2__APCancelReply *apCancelReply,
	ns2__APBillingAgreementReply *apBillingAgreementReply,
	std::string *customerVerificationStatus,
	ns2__PersonalID *personalID,
	std::string *acquirerMerchantNumber,
	ns2__Pos *pos,
	const std::vector<ns2__BalanceInfo *> & balanceInfo,
	std::string *issuerMessageAction,
	std::string *customerID,
	ns2__Routing *routing,
	std::string *transactionLocalDateTime,
	ns2__APCreateMandateReply *apCreateMandateReply,
	ns2__APMandateStatusReply *apMandateStatusReply,
	ns2__APUpdateMandateReply *apUpdateMandateReply,
	ns2__APImportMandateReply *apImportMandateReply,
	ns2__APRevokeMandateReply *apRevokeMandateReply,
	ns2__GetMasterpassDataReply *getMasterpassDataReply,
	std::string *paymentNetworkMerchantID,
	ns2__Wallet *wallet,
	std::string *cashbackAmount,
	ns2__GiftCard *giftCard,
	ns2__GiftCardActivationReply *giftCardActivationReply,
	ns2__GiftCardBalanceInquiryReply *giftCardBalanceInquiryReply,
	ns2__GiftCardRedemptionReply *giftCardRedemptionReply,
	ns2__GiftCardVoidReply *giftCardVoidReply,
	ns2__GiftCardReversalReply *giftCardReversalReply,
	ns2__GiftCardReloadReply *giftCardReloadReply,
	ns2__GiftCardRefundReply *giftCardRefundReply,
	ns2__CCCheckStatusReply *ccCheckStatusReply,
	ns2__ECAVSReply *ecAVSReply,
	ns2__AbortReply *abortReply,
	ns2__payByPoints *payByPoints,
	ns2__ReplyReserved *reserved)
{
	ns2__ReplyMessage *_p = ::soap_new_ns2__ReplyMessage(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ReplyMessage::merchantReferenceCode = merchantReferenceCode;
		_p->ns2__ReplyMessage::requestID = requestID;
		_p->ns2__ReplyMessage::decision = decision;
		_p->ns2__ReplyMessage::reasonCode = reasonCode;
		_p->ns2__ReplyMessage::missingField = missingField;
		_p->ns2__ReplyMessage::invalidField = invalidField;
		_p->ns2__ReplyMessage::requestToken = requestToken;
		_p->ns2__ReplyMessage::purchaseTotals = purchaseTotals;
		_p->ns2__ReplyMessage::deniedPartiesMatch = deniedPartiesMatch;
		_p->ns2__ReplyMessage::ccAuthReply = ccAuthReply;
		_p->ns2__ReplyMessage::octReply = octReply;
		_p->ns2__ReplyMessage::verificationReply = verificationReply;
		_p->ns2__ReplyMessage::ccSaleReply = ccSaleReply;
		_p->ns2__ReplyMessage::ccSaleCreditReply = ccSaleCreditReply;
		_p->ns2__ReplyMessage::ccSaleReversalReply = ccSaleReversalReply;
		_p->ns2__ReplyMessage::ccIncrementalAuthReply = ccIncrementalAuthReply;
		_p->ns2__ReplyMessage::serviceFeeCalculateReply = serviceFeeCalculateReply;
		_p->ns2__ReplyMessage::ccCaptureReply = ccCaptureReply;
		_p->ns2__ReplyMessage::ccCreditReply = ccCreditReply;
		_p->ns2__ReplyMessage::ccAuthReversalReply = ccAuthReversalReply;
		_p->ns2__ReplyMessage::ccAutoAuthReversalReply = ccAutoAuthReversalReply;
		_p->ns2__ReplyMessage::ccDCCReply = ccDCCReply;
		_p->ns2__ReplyMessage::ccDCCUpdateReply = ccDCCUpdateReply;
		_p->ns2__ReplyMessage::ecDebitReply = ecDebitReply;
		_p->ns2__ReplyMessage::ecCreditReply = ecCreditReply;
		_p->ns2__ReplyMessage::ecAuthenticateReply = ecAuthenticateReply;
		_p->ns2__ReplyMessage::payerAuthSetupReply = payerAuthSetupReply;
		_p->ns2__ReplyMessage::payerAuthEnrollReply = payerAuthEnrollReply;
		_p->ns2__ReplyMessage::payerAuthValidateReply = payerAuthValidateReply;
		_p->ns2__ReplyMessage::taxReply = taxReply;
		_p->ns2__ReplyMessage::encryptedPayment = encryptedPayment;
		_p->ns2__ReplyMessage::encryptPaymentDataReply = encryptPaymentDataReply;
		_p->ns2__ReplyMessage::dmeReply = dmeReply;
		_p->ns2__ReplyMessage::afsReply = afsReply;
		_p->ns2__ReplyMessage::davReply = davReply;
		_p->ns2__ReplyMessage::exportReply = exportReply;
		_p->ns2__ReplyMessage::fxRatesReply = fxRatesReply;
		_p->ns2__ReplyMessage::bankTransferReply = bankTransferReply;
		_p->ns2__ReplyMessage::bankTransferRefundReply = bankTransferRefundReply;
		_p->ns2__ReplyMessage::bankTransferRealTimeReply = bankTransferRealTimeReply;
		_p->ns2__ReplyMessage::directDebitMandateReply = directDebitMandateReply;
		_p->ns2__ReplyMessage::directDebitReply = directDebitReply;
		_p->ns2__ReplyMessage::directDebitValidateReply = directDebitValidateReply;
		_p->ns2__ReplyMessage::directDebitRefundReply = directDebitRefundReply;
		_p->ns2__ReplyMessage::paySubscriptionCreateReply = paySubscriptionCreateReply;
		_p->ns2__ReplyMessage::paySubscriptionUpdateReply = paySubscriptionUpdateReply;
		_p->ns2__ReplyMessage::paySubscriptionEventUpdateReply = paySubscriptionEventUpdateReply;
		_p->ns2__ReplyMessage::paySubscriptionRetrieveReply = paySubscriptionRetrieveReply;
		_p->ns2__ReplyMessage::paySubscriptionDeleteReply = paySubscriptionDeleteReply;
		_p->ns2__ReplyMessage::payPalPaymentReply = payPalPaymentReply;
		_p->ns2__ReplyMessage::payPalCreditReply = payPalCreditReply;
		_p->ns2__ReplyMessage::voidReply = voidReply;
		_p->ns2__ReplyMessage::pinlessDebitReply = pinlessDebitReply;
		_p->ns2__ReplyMessage::pinlessDebitValidateReply = pinlessDebitValidateReply;
		_p->ns2__ReplyMessage::pinlessDebitReversalReply = pinlessDebitReversalReply;
		_p->ns2__ReplyMessage::payPalButtonCreateReply = payPalButtonCreateReply;
		_p->ns2__ReplyMessage::payPalPreapprovedPaymentReply = payPalPreapprovedPaymentReply;
		_p->ns2__ReplyMessage::payPalPreapprovedUpdateReply = payPalPreapprovedUpdateReply;
		_p->ns2__ReplyMessage::riskUpdateReply = riskUpdateReply;
		_p->ns2__ReplyMessage::fraudUpdateReply = fraudUpdateReply;
		_p->ns2__ReplyMessage::caseManagementActionReply = caseManagementActionReply;
		_p->ns2__ReplyMessage::decisionEarlyReply = decisionEarlyReply;
		_p->ns2__ReplyMessage::decisionReply = decisionReply;
		_p->ns2__ReplyMessage::payPalRefundReply = payPalRefundReply;
		_p->ns2__ReplyMessage::payPalAuthReversalReply = payPalAuthReversalReply;
		_p->ns2__ReplyMessage::payPalDoCaptureReply = payPalDoCaptureReply;
		_p->ns2__ReplyMessage::payPalEcDoPaymentReply = payPalEcDoPaymentReply;
		_p->ns2__ReplyMessage::payPalEcGetDetailsReply = payPalEcGetDetailsReply;
		_p->ns2__ReplyMessage::payPalEcSetReply = payPalEcSetReply;
		_p->ns2__ReplyMessage::payPalAuthorizationReply = payPalAuthorizationReply;
		_p->ns2__ReplyMessage::payPalEcOrderSetupReply = payPalEcOrderSetupReply;
		_p->ns2__ReplyMessage::payPalUpdateAgreementReply = payPalUpdateAgreementReply;
		_p->ns2__ReplyMessage::payPalCreateAgreementReply = payPalCreateAgreementReply;
		_p->ns2__ReplyMessage::payPalDoRefTransactionReply = payPalDoRefTransactionReply;
		_p->ns2__ReplyMessage::chinaPaymentReply = chinaPaymentReply;
		_p->ns2__ReplyMessage::chinaRefundReply = chinaRefundReply;
		_p->ns2__ReplyMessage::boletoPaymentReply = boletoPaymentReply;
		_p->ns2__ReplyMessage::pinDebitPurchaseReply = pinDebitPurchaseReply;
		_p->ns2__ReplyMessage::pinDebitCreditReply = pinDebitCreditReply;
		_p->ns2__ReplyMessage::pinDebitReversalReply = pinDebitReversalReply;
		_p->ns2__ReplyMessage::apInitiateReply = apInitiateReply;
		_p->ns2__ReplyMessage::apCheckStatusReply = apCheckStatusReply;
		_p->ns2__ReplyMessage::receiptNumber = receiptNumber;
		_p->ns2__ReplyMessage::additionalData = additionalData;
		_p->ns2__ReplyMessage::solutionProviderTransactionID = solutionProviderTransactionID;
		_p->ns2__ReplyMessage::apReply = apReply;
		_p->ns2__ReplyMessage::shipTo = shipTo;
		_p->ns2__ReplyMessage::billTo = billTo;
		_p->ns2__ReplyMessage::apAuthReply = apAuthReply;
		_p->ns2__ReplyMessage::apSessionsReply = apSessionsReply;
		_p->ns2__ReplyMessage::apAuthReversalReply = apAuthReversalReply;
		_p->ns2__ReplyMessage::apCaptureReply = apCaptureReply;
		_p->ns2__ReplyMessage::apOptionsReply = apOptionsReply;
		_p->ns2__ReplyMessage::apRefundReply = apRefundReply;
		_p->ns2__ReplyMessage::apSaleReply = apSaleReply;
		_p->ns2__ReplyMessage::apCheckoutDetailsReply = apCheckoutDetailsReply;
		_p->ns2__ReplyMessage::apTransactionDetailsReply = apTransactionDetailsReply;
		_p->ns2__ReplyMessage::apConfirmPurchaseReply = apConfirmPurchaseReply;
		_p->ns2__ReplyMessage::promotion = promotion;
		_p->ns2__ReplyMessage::promotionGroup = promotionGroup;
		_p->ns2__ReplyMessage::payPalGetTxnDetailsReply = payPalGetTxnDetailsReply;
		_p->ns2__ReplyMessage::payPalTransactionSearchReply = payPalTransactionSearchReply;
		_p->ns2__ReplyMessage::emvReply = emvReply;
		_p->ns2__ReplyMessage::originalTransaction = originalTransaction;
		_p->ns2__ReplyMessage::hostedDataCreateReply = hostedDataCreateReply;
		_p->ns2__ReplyMessage::hostedDataRetrieveReply = hostedDataRetrieveReply;
		_p->ns2__ReplyMessage::salesSlipNumber = salesSlipNumber;
		_p->ns2__ReplyMessage::additionalProcessorResponse = additionalProcessorResponse;
		_p->ns2__ReplyMessage::jpo = jpo;
		_p->ns2__ReplyMessage::card = card;
		_p->ns2__ReplyMessage::paymentNetworkToken = paymentNetworkToken;
		_p->ns2__ReplyMessage::vcReply = vcReply;
		_p->ns2__ReplyMessage::decryptVisaCheckoutDataReply = decryptVisaCheckoutDataReply;
		_p->ns2__ReplyMessage::getVisaCheckoutDataReply = getVisaCheckoutDataReply;
		_p->ns2__ReplyMessage::binLookupReply = binLookupReply;
		_p->ns2__ReplyMessage::issuerMessage = issuerMessage;
		_p->ns2__ReplyMessage::token = token;
		_p->ns2__ReplyMessage::issuer = issuer;
		_p->ns2__ReplyMessage::recipient = recipient;
		_p->ns2__ReplyMessage::feeProgramIndicator = feeProgramIndicator;
		_p->ns2__ReplyMessage::installment = installment;
		_p->ns2__ReplyMessage::paymentAccountReference = paymentAccountReference;
		_p->ns2__ReplyMessage::paymentSolution = paymentSolution;
		_p->ns2__ReplyMessage::authIndicator = authIndicator;
		_p->ns2__ReplyMessage::ucaf = ucaf;
		_p->ns2__ReplyMessage::network = network;
		_p->ns2__ReplyMessage::invoiceHeader = invoiceHeader;
		_p->ns2__ReplyMessage::apOrderReply = apOrderReply;
		_p->ns2__ReplyMessage::apCancelReply = apCancelReply;
		_p->ns2__ReplyMessage::apBillingAgreementReply = apBillingAgreementReply;
		_p->ns2__ReplyMessage::customerVerificationStatus = customerVerificationStatus;
		_p->ns2__ReplyMessage::personalID = personalID;
		_p->ns2__ReplyMessage::acquirerMerchantNumber = acquirerMerchantNumber;
		_p->ns2__ReplyMessage::pos = pos;
		_p->ns2__ReplyMessage::balanceInfo = balanceInfo;
		_p->ns2__ReplyMessage::issuerMessageAction = issuerMessageAction;
		_p->ns2__ReplyMessage::customerID = customerID;
		_p->ns2__ReplyMessage::routing = routing;
		_p->ns2__ReplyMessage::transactionLocalDateTime = transactionLocalDateTime;
		_p->ns2__ReplyMessage::apCreateMandateReply = apCreateMandateReply;
		_p->ns2__ReplyMessage::apMandateStatusReply = apMandateStatusReply;
		_p->ns2__ReplyMessage::apUpdateMandateReply = apUpdateMandateReply;
		_p->ns2__ReplyMessage::apImportMandateReply = apImportMandateReply;
		_p->ns2__ReplyMessage::apRevokeMandateReply = apRevokeMandateReply;
		_p->ns2__ReplyMessage::getMasterpassDataReply = getMasterpassDataReply;
		_p->ns2__ReplyMessage::paymentNetworkMerchantID = paymentNetworkMerchantID;
		_p->ns2__ReplyMessage::wallet = wallet;
		_p->ns2__ReplyMessage::cashbackAmount = cashbackAmount;
		_p->ns2__ReplyMessage::giftCard = giftCard;
		_p->ns2__ReplyMessage::giftCardActivationReply = giftCardActivationReply;
		_p->ns2__ReplyMessage::giftCardBalanceInquiryReply = giftCardBalanceInquiryReply;
		_p->ns2__ReplyMessage::giftCardRedemptionReply = giftCardRedemptionReply;
		_p->ns2__ReplyMessage::giftCardVoidReply = giftCardVoidReply;
		_p->ns2__ReplyMessage::giftCardReversalReply = giftCardReversalReply;
		_p->ns2__ReplyMessage::giftCardReloadReply = giftCardReloadReply;
		_p->ns2__ReplyMessage::giftCardRefundReply = giftCardRefundReply;
		_p->ns2__ReplyMessage::ccCheckStatusReply = ccCheckStatusReply;
		_p->ns2__ReplyMessage::ecAVSReply = ecAVSReply;
		_p->ns2__ReplyMessage::abortReply = abortReply;
		_p->ns2__ReplyMessage::payByPoints = payByPoints;
		_p->ns2__ReplyMessage::reserved = reserved;
	}
	return _p;
}

inline int soap_write_ns2__ReplyMessage(struct soap *soap, ns2__ReplyMessage const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ReplyMessage", p->soap_type() == SOAP_TYPE_ns2__ReplyMessage ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ReplyMessage(struct soap *soap, const char *URL, ns2__ReplyMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ReplyMessage", p->soap_type() == SOAP_TYPE_ns2__ReplyMessage ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ReplyMessage(struct soap *soap, const char *URL, ns2__ReplyMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ReplyMessage", p->soap_type() == SOAP_TYPE_ns2__ReplyMessage ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ReplyMessage(struct soap *soap, const char *URL, ns2__ReplyMessage const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ReplyMessage", p->soap_type() == SOAP_TYPE_ns2__ReplyMessage ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ReplyMessage * SOAP_FMAC4 soap_get_ns2__ReplyMessage(struct soap*, ns2__ReplyMessage *, const char*, const char*);

inline int soap_read_ns2__ReplyMessage(struct soap *soap, ns2__ReplyMessage *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ReplyMessage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ReplyMessage(struct soap *soap, const char *URL, ns2__ReplyMessage *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ReplyMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ReplyMessage(struct soap *soap, ns2__ReplyMessage *p)
{
	if (::soap_read_ns2__ReplyMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCCheckStatusReply_DEFINED
#define SOAP_TYPE_ns2__CCCheckStatusReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCCheckStatusReply(struct soap*, const char*, int, const ns2__CCCheckStatusReply *, const char*);
SOAP_FMAC3 ns2__CCCheckStatusReply * SOAP_FMAC4 soap_in_ns2__CCCheckStatusReply(struct soap*, const char*, ns2__CCCheckStatusReply *, const char*);
SOAP_FMAC1 ns2__CCCheckStatusReply * SOAP_FMAC2 soap_instantiate_ns2__CCCheckStatusReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCCheckStatusReply * soap_new_ns2__CCCheckStatusReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCCheckStatusReply(soap, n, NULL, NULL, NULL);
}

inline ns2__CCCheckStatusReply * soap_new_req_ns2__CCCheckStatusReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__CCCheckStatusReply *_p = ::soap_new_ns2__CCCheckStatusReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCCheckStatusReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__CCCheckStatusReply * soap_new_set_ns2__CCCheckStatusReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *paymentStatus,
	std::string *authorizationCode)
{
	ns2__CCCheckStatusReply *_p = ::soap_new_ns2__CCCheckStatusReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCCheckStatusReply::reasonCode = reasonCode;
		_p->ns2__CCCheckStatusReply::paymentStatus = paymentStatus;
		_p->ns2__CCCheckStatusReply::authorizationCode = authorizationCode;
	}
	return _p;
}

inline int soap_write_ns2__CCCheckStatusReply(struct soap *soap, ns2__CCCheckStatusReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCheckStatusReply", p->soap_type() == SOAP_TYPE_ns2__CCCheckStatusReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCCheckStatusReply(struct soap *soap, const char *URL, ns2__CCCheckStatusReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCheckStatusReply", p->soap_type() == SOAP_TYPE_ns2__CCCheckStatusReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCCheckStatusReply(struct soap *soap, const char *URL, ns2__CCCheckStatusReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCheckStatusReply", p->soap_type() == SOAP_TYPE_ns2__CCCheckStatusReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCCheckStatusReply(struct soap *soap, const char *URL, ns2__CCCheckStatusReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCheckStatusReply", p->soap_type() == SOAP_TYPE_ns2__CCCheckStatusReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCCheckStatusReply * SOAP_FMAC4 soap_get_ns2__CCCheckStatusReply(struct soap*, ns2__CCCheckStatusReply *, const char*, const char*);

inline int soap_read_ns2__CCCheckStatusReply(struct soap *soap, ns2__CCCheckStatusReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCCheckStatusReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCCheckStatusReply(struct soap *soap, const char *URL, ns2__CCCheckStatusReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCCheckStatusReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCCheckStatusReply(struct soap *soap, ns2__CCCheckStatusReply *p)
{
	if (::soap_read_ns2__CCCheckStatusReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APSessionsReply_DEFINED
#define SOAP_TYPE_ns2__APSessionsReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APSessionsReply(struct soap*, const char*, int, const ns2__APSessionsReply *, const char*);
SOAP_FMAC3 ns2__APSessionsReply * SOAP_FMAC4 soap_in_ns2__APSessionsReply(struct soap*, const char*, ns2__APSessionsReply *, const char*);
SOAP_FMAC1 ns2__APSessionsReply * SOAP_FMAC2 soap_instantiate_ns2__APSessionsReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APSessionsReply * soap_new_ns2__APSessionsReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APSessionsReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APSessionsReply * soap_new_req_ns2__APSessionsReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__APSessionsReply *_p = ::soap_new_ns2__APSessionsReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APSessionsReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__APSessionsReply * soap_new_set_ns2__APSessionsReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *responseCode,
	std::string *merchantURL,
	std::string *processorToken,
	std::string *processorTransactionID,
	std::string *amount,
	std::string *reconciliationID,
	std::string *status,
	std::string *dateTime)
{
	ns2__APSessionsReply *_p = ::soap_new_ns2__APSessionsReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APSessionsReply::reasonCode = reasonCode;
		_p->ns2__APSessionsReply::responseCode = responseCode;
		_p->ns2__APSessionsReply::merchantURL = merchantURL;
		_p->ns2__APSessionsReply::processorToken = processorToken;
		_p->ns2__APSessionsReply::processorTransactionID = processorTransactionID;
		_p->ns2__APSessionsReply::amount = amount;
		_p->ns2__APSessionsReply::reconciliationID = reconciliationID;
		_p->ns2__APSessionsReply::status = status;
		_p->ns2__APSessionsReply::dateTime = dateTime;
	}
	return _p;
}

inline int soap_write_ns2__APSessionsReply(struct soap *soap, ns2__APSessionsReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APSessionsReply", p->soap_type() == SOAP_TYPE_ns2__APSessionsReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APSessionsReply(struct soap *soap, const char *URL, ns2__APSessionsReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APSessionsReply", p->soap_type() == SOAP_TYPE_ns2__APSessionsReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APSessionsReply(struct soap *soap, const char *URL, ns2__APSessionsReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APSessionsReply", p->soap_type() == SOAP_TYPE_ns2__APSessionsReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APSessionsReply(struct soap *soap, const char *URL, ns2__APSessionsReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APSessionsReply", p->soap_type() == SOAP_TYPE_ns2__APSessionsReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APSessionsReply * SOAP_FMAC4 soap_get_ns2__APSessionsReply(struct soap*, ns2__APSessionsReply *, const char*, const char*);

inline int soap_read_ns2__APSessionsReply(struct soap *soap, ns2__APSessionsReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APSessionsReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APSessionsReply(struct soap *soap, const char *URL, ns2__APSessionsReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APSessionsReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APSessionsReply(struct soap *soap, ns2__APSessionsReply *p)
{
	if (::soap_read_ns2__APSessionsReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APConfirmPurchaseReply_DEFINED
#define SOAP_TYPE_ns2__APConfirmPurchaseReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APConfirmPurchaseReply(struct soap*, const char*, int, const ns2__APConfirmPurchaseReply *, const char*);
SOAP_FMAC3 ns2__APConfirmPurchaseReply * SOAP_FMAC4 soap_in_ns2__APConfirmPurchaseReply(struct soap*, const char*, ns2__APConfirmPurchaseReply *, const char*);
SOAP_FMAC1 ns2__APConfirmPurchaseReply * SOAP_FMAC2 soap_instantiate_ns2__APConfirmPurchaseReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APConfirmPurchaseReply * soap_new_ns2__APConfirmPurchaseReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APConfirmPurchaseReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APConfirmPurchaseReply * soap_new_req_ns2__APConfirmPurchaseReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__APConfirmPurchaseReply *_p = ::soap_new_ns2__APConfirmPurchaseReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APConfirmPurchaseReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__APConfirmPurchaseReply * soap_new_set_ns2__APConfirmPurchaseReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *status,
	std::string *processorResponse,
	std::string *amount,
	std::string *dateTime,
	std::string *providerResponse)
{
	ns2__APConfirmPurchaseReply *_p = ::soap_new_ns2__APConfirmPurchaseReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APConfirmPurchaseReply::reasonCode = reasonCode;
		_p->ns2__APConfirmPurchaseReply::status = status;
		_p->ns2__APConfirmPurchaseReply::processorResponse = processorResponse;
		_p->ns2__APConfirmPurchaseReply::amount = amount;
		_p->ns2__APConfirmPurchaseReply::dateTime = dateTime;
		_p->ns2__APConfirmPurchaseReply::providerResponse = providerResponse;
	}
	return _p;
}

inline int soap_write_ns2__APConfirmPurchaseReply(struct soap *soap, ns2__APConfirmPurchaseReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APConfirmPurchaseReply", p->soap_type() == SOAP_TYPE_ns2__APConfirmPurchaseReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APConfirmPurchaseReply(struct soap *soap, const char *URL, ns2__APConfirmPurchaseReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APConfirmPurchaseReply", p->soap_type() == SOAP_TYPE_ns2__APConfirmPurchaseReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APConfirmPurchaseReply(struct soap *soap, const char *URL, ns2__APConfirmPurchaseReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APConfirmPurchaseReply", p->soap_type() == SOAP_TYPE_ns2__APConfirmPurchaseReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APConfirmPurchaseReply(struct soap *soap, const char *URL, ns2__APConfirmPurchaseReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APConfirmPurchaseReply", p->soap_type() == SOAP_TYPE_ns2__APConfirmPurchaseReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APConfirmPurchaseReply * SOAP_FMAC4 soap_get_ns2__APConfirmPurchaseReply(struct soap*, ns2__APConfirmPurchaseReply *, const char*, const char*);

inline int soap_read_ns2__APConfirmPurchaseReply(struct soap *soap, ns2__APConfirmPurchaseReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APConfirmPurchaseReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APConfirmPurchaseReply(struct soap *soap, const char *URL, ns2__APConfirmPurchaseReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APConfirmPurchaseReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APConfirmPurchaseReply(struct soap *soap, ns2__APConfirmPurchaseReply *p)
{
	if (::soap_read_ns2__APConfirmPurchaseReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APTransactionDetailsReply_DEFINED
#define SOAP_TYPE_ns2__APTransactionDetailsReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APTransactionDetailsReply(struct soap*, const char*, int, const ns2__APTransactionDetailsReply *, const char*);
SOAP_FMAC3 ns2__APTransactionDetailsReply * SOAP_FMAC4 soap_in_ns2__APTransactionDetailsReply(struct soap*, const char*, ns2__APTransactionDetailsReply *, const char*);
SOAP_FMAC1 ns2__APTransactionDetailsReply * SOAP_FMAC2 soap_instantiate_ns2__APTransactionDetailsReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APTransactionDetailsReply * soap_new_ns2__APTransactionDetailsReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APTransactionDetailsReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APTransactionDetailsReply * soap_new_req_ns2__APTransactionDetailsReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__APTransactionDetailsReply *_p = ::soap_new_ns2__APTransactionDetailsReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APTransactionDetailsReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__APTransactionDetailsReply * soap_new_set_ns2__APTransactionDetailsReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *transactionID,
	std::string *status,
	std::string *processorResponse,
	std::string *dateTime,
	std::string *reconciliationID,
	std::string *providerResponse)
{
	ns2__APTransactionDetailsReply *_p = ::soap_new_ns2__APTransactionDetailsReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APTransactionDetailsReply::reasonCode = reasonCode;
		_p->ns2__APTransactionDetailsReply::transactionID = transactionID;
		_p->ns2__APTransactionDetailsReply::status = status;
		_p->ns2__APTransactionDetailsReply::processorResponse = processorResponse;
		_p->ns2__APTransactionDetailsReply::dateTime = dateTime;
		_p->ns2__APTransactionDetailsReply::reconciliationID = reconciliationID;
		_p->ns2__APTransactionDetailsReply::providerResponse = providerResponse;
	}
	return _p;
}

inline int soap_write_ns2__APTransactionDetailsReply(struct soap *soap, ns2__APTransactionDetailsReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APTransactionDetailsReply", p->soap_type() == SOAP_TYPE_ns2__APTransactionDetailsReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APTransactionDetailsReply(struct soap *soap, const char *URL, ns2__APTransactionDetailsReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APTransactionDetailsReply", p->soap_type() == SOAP_TYPE_ns2__APTransactionDetailsReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APTransactionDetailsReply(struct soap *soap, const char *URL, ns2__APTransactionDetailsReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APTransactionDetailsReply", p->soap_type() == SOAP_TYPE_ns2__APTransactionDetailsReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APTransactionDetailsReply(struct soap *soap, const char *URL, ns2__APTransactionDetailsReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APTransactionDetailsReply", p->soap_type() == SOAP_TYPE_ns2__APTransactionDetailsReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APTransactionDetailsReply * SOAP_FMAC4 soap_get_ns2__APTransactionDetailsReply(struct soap*, ns2__APTransactionDetailsReply *, const char*, const char*);

inline int soap_read_ns2__APTransactionDetailsReply(struct soap *soap, ns2__APTransactionDetailsReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APTransactionDetailsReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APTransactionDetailsReply(struct soap *soap, const char *URL, ns2__APTransactionDetailsReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APTransactionDetailsReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APTransactionDetailsReply(struct soap *soap, ns2__APTransactionDetailsReply *p)
{
	if (::soap_read_ns2__APTransactionDetailsReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APCheckOutDetailsReply_DEFINED
#define SOAP_TYPE_ns2__APCheckOutDetailsReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APCheckOutDetailsReply(struct soap*, const char*, int, const ns2__APCheckOutDetailsReply *, const char*);
SOAP_FMAC3 ns2__APCheckOutDetailsReply * SOAP_FMAC4 soap_in_ns2__APCheckOutDetailsReply(struct soap*, const char*, ns2__APCheckOutDetailsReply *, const char*);
SOAP_FMAC1 ns2__APCheckOutDetailsReply * SOAP_FMAC2 soap_instantiate_ns2__APCheckOutDetailsReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APCheckOutDetailsReply * soap_new_ns2__APCheckOutDetailsReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APCheckOutDetailsReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APCheckOutDetailsReply * soap_new_req_ns2__APCheckOutDetailsReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__APCheckOutDetailsReply *_p = ::soap_new_ns2__APCheckOutDetailsReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APCheckOutDetailsReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__APCheckOutDetailsReply * soap_new_set_ns2__APCheckOutDetailsReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *status,
	std::string *processorResponse,
	std::string *dateTime,
	std::string *providerResponse)
{
	ns2__APCheckOutDetailsReply *_p = ::soap_new_ns2__APCheckOutDetailsReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APCheckOutDetailsReply::reasonCode = reasonCode;
		_p->ns2__APCheckOutDetailsReply::status = status;
		_p->ns2__APCheckOutDetailsReply::processorResponse = processorResponse;
		_p->ns2__APCheckOutDetailsReply::dateTime = dateTime;
		_p->ns2__APCheckOutDetailsReply::providerResponse = providerResponse;
	}
	return _p;
}

inline int soap_write_ns2__APCheckOutDetailsReply(struct soap *soap, ns2__APCheckOutDetailsReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCheckOutDetailsReply", p->soap_type() == SOAP_TYPE_ns2__APCheckOutDetailsReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APCheckOutDetailsReply(struct soap *soap, const char *URL, ns2__APCheckOutDetailsReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCheckOutDetailsReply", p->soap_type() == SOAP_TYPE_ns2__APCheckOutDetailsReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APCheckOutDetailsReply(struct soap *soap, const char *URL, ns2__APCheckOutDetailsReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCheckOutDetailsReply", p->soap_type() == SOAP_TYPE_ns2__APCheckOutDetailsReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APCheckOutDetailsReply(struct soap *soap, const char *URL, ns2__APCheckOutDetailsReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCheckOutDetailsReply", p->soap_type() == SOAP_TYPE_ns2__APCheckOutDetailsReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APCheckOutDetailsReply * SOAP_FMAC4 soap_get_ns2__APCheckOutDetailsReply(struct soap*, ns2__APCheckOutDetailsReply *, const char*, const char*);

inline int soap_read_ns2__APCheckOutDetailsReply(struct soap *soap, ns2__APCheckOutDetailsReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APCheckOutDetailsReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APCheckOutDetailsReply(struct soap *soap, const char *URL, ns2__APCheckOutDetailsReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APCheckOutDetailsReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APCheckOutDetailsReply(struct soap *soap, ns2__APCheckOutDetailsReply *p)
{
	if (::soap_read_ns2__APCheckOutDetailsReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APSaleReply_DEFINED
#define SOAP_TYPE_ns2__APSaleReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APSaleReply(struct soap*, const char*, int, const ns2__APSaleReply *, const char*);
SOAP_FMAC3 ns2__APSaleReply * SOAP_FMAC4 soap_in_ns2__APSaleReply(struct soap*, const char*, ns2__APSaleReply *, const char*);
SOAP_FMAC1 ns2__APSaleReply * SOAP_FMAC2 soap_instantiate_ns2__APSaleReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APSaleReply * soap_new_ns2__APSaleReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APSaleReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APSaleReply * soap_new_req_ns2__APSaleReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__APSaleReply *_p = ::soap_new_ns2__APSaleReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APSaleReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__APSaleReply * soap_new_set_ns2__APSaleReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *paymentStatus,
	std::string *responseCode,
	std::string *merchantURL,
	std::string *processorTransactionID,
	std::string *reconciliationID,
	std::string *processorTransactionFee,
	std::string *amount,
	std::string *processorResponse,
	std::string *exchangeRate,
	std::string *foreignCurrency,
	std::string *foreignAmount,
	std::string *discountAmount,
	std::string *dateTime)
{
	ns2__APSaleReply *_p = ::soap_new_ns2__APSaleReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APSaleReply::reasonCode = reasonCode;
		_p->ns2__APSaleReply::paymentStatus = paymentStatus;
		_p->ns2__APSaleReply::responseCode = responseCode;
		_p->ns2__APSaleReply::merchantURL = merchantURL;
		_p->ns2__APSaleReply::processorTransactionID = processorTransactionID;
		_p->ns2__APSaleReply::reconciliationID = reconciliationID;
		_p->ns2__APSaleReply::processorTransactionFee = processorTransactionFee;
		_p->ns2__APSaleReply::amount = amount;
		_p->ns2__APSaleReply::processorResponse = processorResponse;
		_p->ns2__APSaleReply::exchangeRate = exchangeRate;
		_p->ns2__APSaleReply::foreignCurrency = foreignCurrency;
		_p->ns2__APSaleReply::foreignAmount = foreignAmount;
		_p->ns2__APSaleReply::discountAmount = discountAmount;
		_p->ns2__APSaleReply::dateTime = dateTime;
	}
	return _p;
}

inline int soap_write_ns2__APSaleReply(struct soap *soap, ns2__APSaleReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APSaleReply", p->soap_type() == SOAP_TYPE_ns2__APSaleReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APSaleReply(struct soap *soap, const char *URL, ns2__APSaleReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APSaleReply", p->soap_type() == SOAP_TYPE_ns2__APSaleReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APSaleReply(struct soap *soap, const char *URL, ns2__APSaleReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APSaleReply", p->soap_type() == SOAP_TYPE_ns2__APSaleReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APSaleReply(struct soap *soap, const char *URL, ns2__APSaleReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APSaleReply", p->soap_type() == SOAP_TYPE_ns2__APSaleReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APSaleReply * SOAP_FMAC4 soap_get_ns2__APSaleReply(struct soap*, ns2__APSaleReply *, const char*, const char*);

inline int soap_read_ns2__APSaleReply(struct soap *soap, ns2__APSaleReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APSaleReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APSaleReply(struct soap *soap, const char *URL, ns2__APSaleReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APSaleReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APSaleReply(struct soap *soap, ns2__APSaleReply *p)
{
	if (::soap_read_ns2__APSaleReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APRefundReply_DEFINED
#define SOAP_TYPE_ns2__APRefundReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APRefundReply(struct soap*, const char*, int, const ns2__APRefundReply *, const char*);
SOAP_FMAC3 ns2__APRefundReply * SOAP_FMAC4 soap_in_ns2__APRefundReply(struct soap*, const char*, ns2__APRefundReply *, const char*);
SOAP_FMAC1 ns2__APRefundReply * SOAP_FMAC2 soap_instantiate_ns2__APRefundReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APRefundReply * soap_new_ns2__APRefundReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APRefundReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APRefundReply * soap_new_req_ns2__APRefundReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__APRefundReply *_p = ::soap_new_ns2__APRefundReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APRefundReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__APRefundReply * soap_new_set_ns2__APRefundReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *transactionID,
	std::string *status,
	std::string *processorResponse,
	std::string *amount,
	std::string *dateTime,
	std::string *reconciliationID,
	std::string *returnRef,
	std::string *providerResponse,
	std::string *processorTransactionID,
	std::string *paymentStatus,
	std::string *responseCode)
{
	ns2__APRefundReply *_p = ::soap_new_ns2__APRefundReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APRefundReply::reasonCode = reasonCode;
		_p->ns2__APRefundReply::transactionID = transactionID;
		_p->ns2__APRefundReply::status = status;
		_p->ns2__APRefundReply::processorResponse = processorResponse;
		_p->ns2__APRefundReply::amount = amount;
		_p->ns2__APRefundReply::dateTime = dateTime;
		_p->ns2__APRefundReply::reconciliationID = reconciliationID;
		_p->ns2__APRefundReply::returnRef = returnRef;
		_p->ns2__APRefundReply::providerResponse = providerResponse;
		_p->ns2__APRefundReply::processorTransactionID = processorTransactionID;
		_p->ns2__APRefundReply::paymentStatus = paymentStatus;
		_p->ns2__APRefundReply::responseCode = responseCode;
	}
	return _p;
}

inline int soap_write_ns2__APRefundReply(struct soap *soap, ns2__APRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APRefundReply", p->soap_type() == SOAP_TYPE_ns2__APRefundReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APRefundReply(struct soap *soap, const char *URL, ns2__APRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APRefundReply", p->soap_type() == SOAP_TYPE_ns2__APRefundReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APRefundReply(struct soap *soap, const char *URL, ns2__APRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APRefundReply", p->soap_type() == SOAP_TYPE_ns2__APRefundReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APRefundReply(struct soap *soap, const char *URL, ns2__APRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APRefundReply", p->soap_type() == SOAP_TYPE_ns2__APRefundReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APRefundReply * SOAP_FMAC4 soap_get_ns2__APRefundReply(struct soap*, ns2__APRefundReply *, const char*, const char*);

inline int soap_read_ns2__APRefundReply(struct soap *soap, ns2__APRefundReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APRefundReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APRefundReply(struct soap *soap, const char *URL, ns2__APRefundReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APRefundReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APRefundReply(struct soap *soap, ns2__APRefundReply *p)
{
	if (::soap_read_ns2__APRefundReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APOptionsOption_DEFINED
#define SOAP_TYPE_ns2__APOptionsOption_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APOptionsOption(struct soap*, const char*, int, const ns2__APOptionsOption *, const char*);
SOAP_FMAC3 ns2__APOptionsOption * SOAP_FMAC4 soap_in_ns2__APOptionsOption(struct soap*, const char*, ns2__APOptionsOption *, const char*);
SOAP_FMAC1 ns2__APOptionsOption * SOAP_FMAC2 soap_instantiate_ns2__APOptionsOption(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APOptionsOption * soap_new_ns2__APOptionsOption(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APOptionsOption(soap, n, NULL, NULL, NULL);
}

inline ns2__APOptionsOption * soap_new_req_ns2__APOptionsOption(
	struct soap *soap)
{
	ns2__APOptionsOption *_p = ::soap_new_ns2__APOptionsOption(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__APOptionsOption * soap_new_set_ns2__APOptionsOption(
	struct soap *soap,
	std::string *id,
	std::string *name,
	std::string *data)
{
	ns2__APOptionsOption *_p = ::soap_new_ns2__APOptionsOption(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APOptionsOption::id = id;
		_p->ns2__APOptionsOption::name = name;
		_p->ns2__APOptionsOption::data = data;
	}
	return _p;
}

inline int soap_write_ns2__APOptionsOption(struct soap *soap, ns2__APOptionsOption const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APOptionsOption", p->soap_type() == SOAP_TYPE_ns2__APOptionsOption ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APOptionsOption(struct soap *soap, const char *URL, ns2__APOptionsOption const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APOptionsOption", p->soap_type() == SOAP_TYPE_ns2__APOptionsOption ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APOptionsOption(struct soap *soap, const char *URL, ns2__APOptionsOption const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APOptionsOption", p->soap_type() == SOAP_TYPE_ns2__APOptionsOption ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APOptionsOption(struct soap *soap, const char *URL, ns2__APOptionsOption const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APOptionsOption", p->soap_type() == SOAP_TYPE_ns2__APOptionsOption ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APOptionsOption * SOAP_FMAC4 soap_get_ns2__APOptionsOption(struct soap*, ns2__APOptionsOption *, const char*, const char*);

inline int soap_read_ns2__APOptionsOption(struct soap *soap, ns2__APOptionsOption *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APOptionsOption(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APOptionsOption(struct soap *soap, const char *URL, ns2__APOptionsOption *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APOptionsOption(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APOptionsOption(struct soap *soap, ns2__APOptionsOption *p)
{
	if (::soap_read_ns2__APOptionsOption(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APOptionsReply_DEFINED
#define SOAP_TYPE_ns2__APOptionsReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APOptionsReply(struct soap*, const char*, int, const ns2__APOptionsReply *, const char*);
SOAP_FMAC3 ns2__APOptionsReply * SOAP_FMAC4 soap_in_ns2__APOptionsReply(struct soap*, const char*, ns2__APOptionsReply *, const char*);
SOAP_FMAC1 ns2__APOptionsReply * SOAP_FMAC2 soap_instantiate_ns2__APOptionsReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APOptionsReply * soap_new_ns2__APOptionsReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APOptionsReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APOptionsReply * soap_new_req_ns2__APOptionsReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__APOptionsReply *_p = ::soap_new_ns2__APOptionsReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APOptionsReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__APOptionsReply * soap_new_set_ns2__APOptionsReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *responseCode,
	std::string *offset,
	std::string *count,
	std::string *totalCount,
	const std::vector<ns2__APOptionsOption *> & option)
{
	ns2__APOptionsReply *_p = ::soap_new_ns2__APOptionsReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APOptionsReply::reasonCode = reasonCode;
		_p->ns2__APOptionsReply::responseCode = responseCode;
		_p->ns2__APOptionsReply::offset = offset;
		_p->ns2__APOptionsReply::count = count;
		_p->ns2__APOptionsReply::totalCount = totalCount;
		_p->ns2__APOptionsReply::option = option;
	}
	return _p;
}

inline int soap_write_ns2__APOptionsReply(struct soap *soap, ns2__APOptionsReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APOptionsReply", p->soap_type() == SOAP_TYPE_ns2__APOptionsReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APOptionsReply(struct soap *soap, const char *URL, ns2__APOptionsReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APOptionsReply", p->soap_type() == SOAP_TYPE_ns2__APOptionsReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APOptionsReply(struct soap *soap, const char *URL, ns2__APOptionsReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APOptionsReply", p->soap_type() == SOAP_TYPE_ns2__APOptionsReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APOptionsReply(struct soap *soap, const char *URL, ns2__APOptionsReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APOptionsReply", p->soap_type() == SOAP_TYPE_ns2__APOptionsReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APOptionsReply * SOAP_FMAC4 soap_get_ns2__APOptionsReply(struct soap*, ns2__APOptionsReply *, const char*, const char*);

inline int soap_read_ns2__APOptionsReply(struct soap *soap, ns2__APOptionsReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APOptionsReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APOptionsReply(struct soap *soap, const char *URL, ns2__APOptionsReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APOptionsReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APOptionsReply(struct soap *soap, ns2__APOptionsReply *p)
{
	if (::soap_read_ns2__APOptionsReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APCaptureReply_DEFINED
#define SOAP_TYPE_ns2__APCaptureReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APCaptureReply(struct soap*, const char*, int, const ns2__APCaptureReply *, const char*);
SOAP_FMAC3 ns2__APCaptureReply * SOAP_FMAC4 soap_in_ns2__APCaptureReply(struct soap*, const char*, ns2__APCaptureReply *, const char*);
SOAP_FMAC1 ns2__APCaptureReply * SOAP_FMAC2 soap_instantiate_ns2__APCaptureReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APCaptureReply * soap_new_ns2__APCaptureReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APCaptureReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APCaptureReply * soap_new_req_ns2__APCaptureReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__APCaptureReply *_p = ::soap_new_ns2__APCaptureReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APCaptureReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__APCaptureReply * soap_new_set_ns2__APCaptureReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *processorTransactionID,
	std::string *status,
	std::string *processorResponse,
	std::string *amount,
	std::string *dateTime,
	std::string *reconciliationID,
	std::string *providerResponse,
	std::string *paymentStatus,
	std::string *responseCode,
	std::string *processorTransactionFee)
{
	ns2__APCaptureReply *_p = ::soap_new_ns2__APCaptureReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APCaptureReply::reasonCode = reasonCode;
		_p->ns2__APCaptureReply::processorTransactionID = processorTransactionID;
		_p->ns2__APCaptureReply::status = status;
		_p->ns2__APCaptureReply::processorResponse = processorResponse;
		_p->ns2__APCaptureReply::amount = amount;
		_p->ns2__APCaptureReply::dateTime = dateTime;
		_p->ns2__APCaptureReply::reconciliationID = reconciliationID;
		_p->ns2__APCaptureReply::providerResponse = providerResponse;
		_p->ns2__APCaptureReply::paymentStatus = paymentStatus;
		_p->ns2__APCaptureReply::responseCode = responseCode;
		_p->ns2__APCaptureReply::processorTransactionFee = processorTransactionFee;
	}
	return _p;
}

inline int soap_write_ns2__APCaptureReply(struct soap *soap, ns2__APCaptureReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCaptureReply", p->soap_type() == SOAP_TYPE_ns2__APCaptureReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APCaptureReply(struct soap *soap, const char *URL, ns2__APCaptureReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCaptureReply", p->soap_type() == SOAP_TYPE_ns2__APCaptureReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APCaptureReply(struct soap *soap, const char *URL, ns2__APCaptureReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCaptureReply", p->soap_type() == SOAP_TYPE_ns2__APCaptureReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APCaptureReply(struct soap *soap, const char *URL, ns2__APCaptureReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCaptureReply", p->soap_type() == SOAP_TYPE_ns2__APCaptureReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APCaptureReply * SOAP_FMAC4 soap_get_ns2__APCaptureReply(struct soap*, ns2__APCaptureReply *, const char*, const char*);

inline int soap_read_ns2__APCaptureReply(struct soap *soap, ns2__APCaptureReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APCaptureReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APCaptureReply(struct soap *soap, const char *URL, ns2__APCaptureReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APCaptureReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APCaptureReply(struct soap *soap, ns2__APCaptureReply *p)
{
	if (::soap_read_ns2__APCaptureReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APAuthReversalReply_DEFINED
#define SOAP_TYPE_ns2__APAuthReversalReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APAuthReversalReply(struct soap*, const char*, int, const ns2__APAuthReversalReply *, const char*);
SOAP_FMAC3 ns2__APAuthReversalReply * SOAP_FMAC4 soap_in_ns2__APAuthReversalReply(struct soap*, const char*, ns2__APAuthReversalReply *, const char*);
SOAP_FMAC1 ns2__APAuthReversalReply * SOAP_FMAC2 soap_instantiate_ns2__APAuthReversalReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APAuthReversalReply * soap_new_ns2__APAuthReversalReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APAuthReversalReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APAuthReversalReply * soap_new_req_ns2__APAuthReversalReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__APAuthReversalReply *_p = ::soap_new_ns2__APAuthReversalReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APAuthReversalReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__APAuthReversalReply * soap_new_set_ns2__APAuthReversalReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *transactionID,
	std::string *status,
	std::string *processorResponse,
	std::string *amount,
	std::string *dateTime,
	std::string *providerResponse,
	std::string *paymentStatus,
	std::string *responseCode,
	std::string *reconciliationID,
	std::string *processorTransactionID)
{
	ns2__APAuthReversalReply *_p = ::soap_new_ns2__APAuthReversalReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APAuthReversalReply::reasonCode = reasonCode;
		_p->ns2__APAuthReversalReply::transactionID = transactionID;
		_p->ns2__APAuthReversalReply::status = status;
		_p->ns2__APAuthReversalReply::processorResponse = processorResponse;
		_p->ns2__APAuthReversalReply::amount = amount;
		_p->ns2__APAuthReversalReply::dateTime = dateTime;
		_p->ns2__APAuthReversalReply::providerResponse = providerResponse;
		_p->ns2__APAuthReversalReply::paymentStatus = paymentStatus;
		_p->ns2__APAuthReversalReply::responseCode = responseCode;
		_p->ns2__APAuthReversalReply::reconciliationID = reconciliationID;
		_p->ns2__APAuthReversalReply::processorTransactionID = processorTransactionID;
	}
	return _p;
}

inline int soap_write_ns2__APAuthReversalReply(struct soap *soap, ns2__APAuthReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APAuthReversalReply", p->soap_type() == SOAP_TYPE_ns2__APAuthReversalReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APAuthReversalReply(struct soap *soap, const char *URL, ns2__APAuthReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APAuthReversalReply", p->soap_type() == SOAP_TYPE_ns2__APAuthReversalReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APAuthReversalReply(struct soap *soap, const char *URL, ns2__APAuthReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APAuthReversalReply", p->soap_type() == SOAP_TYPE_ns2__APAuthReversalReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APAuthReversalReply(struct soap *soap, const char *URL, ns2__APAuthReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APAuthReversalReply", p->soap_type() == SOAP_TYPE_ns2__APAuthReversalReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APAuthReversalReply * SOAP_FMAC4 soap_get_ns2__APAuthReversalReply(struct soap*, ns2__APAuthReversalReply *, const char*, const char*);

inline int soap_read_ns2__APAuthReversalReply(struct soap *soap, ns2__APAuthReversalReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APAuthReversalReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APAuthReversalReply(struct soap *soap, const char *URL, ns2__APAuthReversalReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APAuthReversalReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APAuthReversalReply(struct soap *soap, ns2__APAuthReversalReply *p)
{
	if (::soap_read_ns2__APAuthReversalReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APAuthReply_DEFINED
#define SOAP_TYPE_ns2__APAuthReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APAuthReply(struct soap*, const char*, int, const ns2__APAuthReply *, const char*);
SOAP_FMAC3 ns2__APAuthReply * SOAP_FMAC4 soap_in_ns2__APAuthReply(struct soap*, const char*, ns2__APAuthReply *, const char*);
SOAP_FMAC1 ns2__APAuthReply * SOAP_FMAC2 soap_instantiate_ns2__APAuthReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APAuthReply * soap_new_ns2__APAuthReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APAuthReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APAuthReply * soap_new_req_ns2__APAuthReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__APAuthReply *_p = ::soap_new_ns2__APAuthReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APAuthReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__APAuthReply * soap_new_set_ns2__APAuthReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *transactionID,
	std::string *status,
	std::string *processorResponse,
	std::string *amount,
	std::string *dateTime,
	std::string *providerResponse,
	std::string *paymentStatus,
	std::string *responseCode,
	std::string *authorizationCode,
	std::string *merchantURL,
	std::string *reconciliationID,
	std::string *processorTransactionID)
{
	ns2__APAuthReply *_p = ::soap_new_ns2__APAuthReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APAuthReply::reasonCode = reasonCode;
		_p->ns2__APAuthReply::transactionID = transactionID;
		_p->ns2__APAuthReply::status = status;
		_p->ns2__APAuthReply::processorResponse = processorResponse;
		_p->ns2__APAuthReply::amount = amount;
		_p->ns2__APAuthReply::dateTime = dateTime;
		_p->ns2__APAuthReply::providerResponse = providerResponse;
		_p->ns2__APAuthReply::paymentStatus = paymentStatus;
		_p->ns2__APAuthReply::responseCode = responseCode;
		_p->ns2__APAuthReply::authorizationCode = authorizationCode;
		_p->ns2__APAuthReply::merchantURL = merchantURL;
		_p->ns2__APAuthReply::reconciliationID = reconciliationID;
		_p->ns2__APAuthReply::processorTransactionID = processorTransactionID;
	}
	return _p;
}

inline int soap_write_ns2__APAuthReply(struct soap *soap, ns2__APAuthReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APAuthReply", p->soap_type() == SOAP_TYPE_ns2__APAuthReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APAuthReply(struct soap *soap, const char *URL, ns2__APAuthReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APAuthReply", p->soap_type() == SOAP_TYPE_ns2__APAuthReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APAuthReply(struct soap *soap, const char *URL, ns2__APAuthReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APAuthReply", p->soap_type() == SOAP_TYPE_ns2__APAuthReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APAuthReply(struct soap *soap, const char *URL, ns2__APAuthReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APAuthReply", p->soap_type() == SOAP_TYPE_ns2__APAuthReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APAuthReply * SOAP_FMAC4 soap_get_ns2__APAuthReply(struct soap*, ns2__APAuthReply *, const char*, const char*);

inline int soap_read_ns2__APAuthReply(struct soap *soap, ns2__APAuthReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APAuthReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APAuthReply(struct soap *soap, const char *URL, ns2__APAuthReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APAuthReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APAuthReply(struct soap *soap, ns2__APAuthReply *p)
{
	if (::soap_read_ns2__APAuthReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APReply_DEFINED
#define SOAP_TYPE_ns2__APReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APReply(struct soap*, const char*, int, const ns2__APReply *, const char*);
SOAP_FMAC3 ns2__APReply * SOAP_FMAC4 soap_in_ns2__APReply(struct soap*, const char*, ns2__APReply *, const char*);
SOAP_FMAC1 ns2__APReply * SOAP_FMAC2 soap_instantiate_ns2__APReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APReply * soap_new_ns2__APReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APReply * soap_new_req_ns2__APReply(
	struct soap *soap)
{
	ns2__APReply *_p = ::soap_new_ns2__APReply(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__APReply * soap_new_set_ns2__APReply(
	struct soap *soap,
	std::string *orderID,
	std::string *cardGroup,
	std::string *cardType,
	std::string *cardNumberSuffix,
	std::string *cardExpirationMonth,
	std::string *cardExpirationYear,
	std::string *avsCodeRaw,
	std::string *purchaseID,
	std::string *productID,
	std::string *productDescription,
	std::string *shippingAmount,
	std::string *handlingAmount,
	std::string *shippingHandlingAmount,
	std::string *additionalAmount,
	std::string *taxAmount,
	std::string *subtotalAmount,
	std::string *totalPurchaseAmount,
	std::string *giftWrapAmount,
	std::string *discountAmount,
	std::string *cardNumberPrefix,
	std::string *riskIndicator,
	std::string *merchantUUID,
	std::string *merchantSiteID,
	std::string *transactionExpirationDate,
	ns2__SellerProtection *sellerProtection,
	std::string *processorFraudDecision,
	std::string *processorFraudDecisionReason,
	std::string *customerID,
	std::string *billingAgreementID,
	std::string *payerID,
	std::string *fundingSource)
{
	ns2__APReply *_p = ::soap_new_ns2__APReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APReply::orderID = orderID;
		_p->ns2__APReply::cardGroup = cardGroup;
		_p->ns2__APReply::cardType = cardType;
		_p->ns2__APReply::cardNumberSuffix = cardNumberSuffix;
		_p->ns2__APReply::cardExpirationMonth = cardExpirationMonth;
		_p->ns2__APReply::cardExpirationYear = cardExpirationYear;
		_p->ns2__APReply::avsCodeRaw = avsCodeRaw;
		_p->ns2__APReply::purchaseID = purchaseID;
		_p->ns2__APReply::productID = productID;
		_p->ns2__APReply::productDescription = productDescription;
		_p->ns2__APReply::shippingAmount = shippingAmount;
		_p->ns2__APReply::handlingAmount = handlingAmount;
		_p->ns2__APReply::shippingHandlingAmount = shippingHandlingAmount;
		_p->ns2__APReply::additionalAmount = additionalAmount;
		_p->ns2__APReply::taxAmount = taxAmount;
		_p->ns2__APReply::subtotalAmount = subtotalAmount;
		_p->ns2__APReply::totalPurchaseAmount = totalPurchaseAmount;
		_p->ns2__APReply::giftWrapAmount = giftWrapAmount;
		_p->ns2__APReply::discountAmount = discountAmount;
		_p->ns2__APReply::cardNumberPrefix = cardNumberPrefix;
		_p->ns2__APReply::riskIndicator = riskIndicator;
		_p->ns2__APReply::merchantUUID = merchantUUID;
		_p->ns2__APReply::merchantSiteID = merchantSiteID;
		_p->ns2__APReply::transactionExpirationDate = transactionExpirationDate;
		_p->ns2__APReply::sellerProtection = sellerProtection;
		_p->ns2__APReply::processorFraudDecision = processorFraudDecision;
		_p->ns2__APReply::processorFraudDecisionReason = processorFraudDecisionReason;
		_p->ns2__APReply::customerID = customerID;
		_p->ns2__APReply::billingAgreementID = billingAgreementID;
		_p->ns2__APReply::payerID = payerID;
		_p->ns2__APReply::fundingSource = fundingSource;
	}
	return _p;
}

inline int soap_write_ns2__APReply(struct soap *soap, ns2__APReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APReply", p->soap_type() == SOAP_TYPE_ns2__APReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APReply(struct soap *soap, const char *URL, ns2__APReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APReply", p->soap_type() == SOAP_TYPE_ns2__APReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APReply(struct soap *soap, const char *URL, ns2__APReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APReply", p->soap_type() == SOAP_TYPE_ns2__APReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APReply(struct soap *soap, const char *URL, ns2__APReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APReply", p->soap_type() == SOAP_TYPE_ns2__APReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APReply * SOAP_FMAC4 soap_get_ns2__APReply(struct soap*, ns2__APReply *, const char*, const char*);

inline int soap_read_ns2__APReply(struct soap *soap, ns2__APReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APReply(struct soap *soap, const char *URL, ns2__APReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APReply(struct soap *soap, ns2__APReply *p)
{
	if (::soap_read_ns2__APReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__SellerProtection_DEFINED
#define SOAP_TYPE_ns2__SellerProtection_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SellerProtection(struct soap*, const char*, int, const ns2__SellerProtection *, const char*);
SOAP_FMAC3 ns2__SellerProtection * SOAP_FMAC4 soap_in_ns2__SellerProtection(struct soap*, const char*, ns2__SellerProtection *, const char*);
SOAP_FMAC1 ns2__SellerProtection * SOAP_FMAC2 soap_instantiate_ns2__SellerProtection(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SellerProtection * soap_new_ns2__SellerProtection(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__SellerProtection(soap, n, NULL, NULL, NULL);
}

inline ns2__SellerProtection * soap_new_req_ns2__SellerProtection(
	struct soap *soap)
{
	ns2__SellerProtection *_p = ::soap_new_ns2__SellerProtection(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__SellerProtection * soap_new_set_ns2__SellerProtection(
	struct soap *soap,
	std::string *eligibility,
	std::string *type)
{
	ns2__SellerProtection *_p = ::soap_new_ns2__SellerProtection(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__SellerProtection::eligibility = eligibility;
		_p->ns2__SellerProtection::type = type;
	}
	return _p;
}

inline int soap_write_ns2__SellerProtection(struct soap *soap, ns2__SellerProtection const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SellerProtection", p->soap_type() == SOAP_TYPE_ns2__SellerProtection ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__SellerProtection(struct soap *soap, const char *URL, ns2__SellerProtection const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SellerProtection", p->soap_type() == SOAP_TYPE_ns2__SellerProtection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__SellerProtection(struct soap *soap, const char *URL, ns2__SellerProtection const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SellerProtection", p->soap_type() == SOAP_TYPE_ns2__SellerProtection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__SellerProtection(struct soap *soap, const char *URL, ns2__SellerProtection const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SellerProtection", p->soap_type() == SOAP_TYPE_ns2__SellerProtection ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__SellerProtection * SOAP_FMAC4 soap_get_ns2__SellerProtection(struct soap*, ns2__SellerProtection *, const char*, const char*);

inline int soap_read_ns2__SellerProtection(struct soap *soap, ns2__SellerProtection *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__SellerProtection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__SellerProtection(struct soap *soap, const char *URL, ns2__SellerProtection *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__SellerProtection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__SellerProtection(struct soap *soap, ns2__SellerProtection *p)
{
	if (::soap_read_ns2__SellerProtection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APCheckStatusReply_DEFINED
#define SOAP_TYPE_ns2__APCheckStatusReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APCheckStatusReply(struct soap*, const char*, int, const ns2__APCheckStatusReply *, const char*);
SOAP_FMAC3 ns2__APCheckStatusReply * SOAP_FMAC4 soap_in_ns2__APCheckStatusReply(struct soap*, const char*, ns2__APCheckStatusReply *, const char*);
SOAP_FMAC1 ns2__APCheckStatusReply * SOAP_FMAC2 soap_instantiate_ns2__APCheckStatusReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APCheckStatusReply * soap_new_ns2__APCheckStatusReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APCheckStatusReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APCheckStatusReply * soap_new_req_ns2__APCheckStatusReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__APCheckStatusReply *_p = ::soap_new_ns2__APCheckStatusReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APCheckStatusReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__APCheckStatusReply * soap_new_set_ns2__APCheckStatusReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *reconciliationID,
	std::string *paymentStatus,
	std::string *processorTradeNo,
	std::string *processorTransactionID,
	std::string *ibanSuffix,
	std::string *processorResponse,
	std::string *processorToken,
	std::string *dateTime)
{
	ns2__APCheckStatusReply *_p = ::soap_new_ns2__APCheckStatusReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APCheckStatusReply::reasonCode = reasonCode;
		_p->ns2__APCheckStatusReply::reconciliationID = reconciliationID;
		_p->ns2__APCheckStatusReply::paymentStatus = paymentStatus;
		_p->ns2__APCheckStatusReply::processorTradeNo = processorTradeNo;
		_p->ns2__APCheckStatusReply::processorTransactionID = processorTransactionID;
		_p->ns2__APCheckStatusReply::ibanSuffix = ibanSuffix;
		_p->ns2__APCheckStatusReply::processorResponse = processorResponse;
		_p->ns2__APCheckStatusReply::processorToken = processorToken;
		_p->ns2__APCheckStatusReply::dateTime = dateTime;
	}
	return _p;
}

inline int soap_write_ns2__APCheckStatusReply(struct soap *soap, ns2__APCheckStatusReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCheckStatusReply", p->soap_type() == SOAP_TYPE_ns2__APCheckStatusReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APCheckStatusReply(struct soap *soap, const char *URL, ns2__APCheckStatusReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCheckStatusReply", p->soap_type() == SOAP_TYPE_ns2__APCheckStatusReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APCheckStatusReply(struct soap *soap, const char *URL, ns2__APCheckStatusReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCheckStatusReply", p->soap_type() == SOAP_TYPE_ns2__APCheckStatusReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APCheckStatusReply(struct soap *soap, const char *URL, ns2__APCheckStatusReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCheckStatusReply", p->soap_type() == SOAP_TYPE_ns2__APCheckStatusReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APCheckStatusReply * SOAP_FMAC4 soap_get_ns2__APCheckStatusReply(struct soap*, ns2__APCheckStatusReply *, const char*, const char*);

inline int soap_read_ns2__APCheckStatusReply(struct soap *soap, ns2__APCheckStatusReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APCheckStatusReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APCheckStatusReply(struct soap *soap, const char *URL, ns2__APCheckStatusReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APCheckStatusReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APCheckStatusReply(struct soap *soap, ns2__APCheckStatusReply *p)
{
	if (::soap_read_ns2__APCheckStatusReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APInitiateReply_DEFINED
#define SOAP_TYPE_ns2__APInitiateReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APInitiateReply(struct soap*, const char*, int, const ns2__APInitiateReply *, const char*);
SOAP_FMAC3 ns2__APInitiateReply * SOAP_FMAC4 soap_in_ns2__APInitiateReply(struct soap*, const char*, ns2__APInitiateReply *, const char*);
SOAP_FMAC1 ns2__APInitiateReply * SOAP_FMAC2 soap_instantiate_ns2__APInitiateReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APInitiateReply * soap_new_ns2__APInitiateReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APInitiateReply(soap, n, NULL, NULL, NULL);
}

inline ns2__APInitiateReply * soap_new_req_ns2__APInitiateReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__APInitiateReply *_p = ::soap_new_ns2__APInitiateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APInitiateReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__APInitiateReply * soap_new_set_ns2__APInitiateReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *merchantURL,
	std::string *reconciliationID,
	std::string *amount,
	std::string *dateTime,
	std::string *signature,
	std::string *publicKey,
	std::string *paymentStatus,
	std::string *responseCode)
{
	ns2__APInitiateReply *_p = ::soap_new_ns2__APInitiateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APInitiateReply::reasonCode = reasonCode;
		_p->ns2__APInitiateReply::merchantURL = merchantURL;
		_p->ns2__APInitiateReply::reconciliationID = reconciliationID;
		_p->ns2__APInitiateReply::amount = amount;
		_p->ns2__APInitiateReply::dateTime = dateTime;
		_p->ns2__APInitiateReply::signature = signature;
		_p->ns2__APInitiateReply::publicKey = publicKey;
		_p->ns2__APInitiateReply::paymentStatus = paymentStatus;
		_p->ns2__APInitiateReply::responseCode = responseCode;
	}
	return _p;
}

inline int soap_write_ns2__APInitiateReply(struct soap *soap, ns2__APInitiateReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APInitiateReply", p->soap_type() == SOAP_TYPE_ns2__APInitiateReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APInitiateReply(struct soap *soap, const char *URL, ns2__APInitiateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APInitiateReply", p->soap_type() == SOAP_TYPE_ns2__APInitiateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APInitiateReply(struct soap *soap, const char *URL, ns2__APInitiateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APInitiateReply", p->soap_type() == SOAP_TYPE_ns2__APInitiateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APInitiateReply(struct soap *soap, const char *URL, ns2__APInitiateReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APInitiateReply", p->soap_type() == SOAP_TYPE_ns2__APInitiateReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APInitiateReply * SOAP_FMAC4 soap_get_ns2__APInitiateReply(struct soap*, ns2__APInitiateReply *, const char*, const char*);

inline int soap_read_ns2__APInitiateReply(struct soap *soap, ns2__APInitiateReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APInitiateReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APInitiateReply(struct soap *soap, const char *URL, ns2__APInitiateReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APInitiateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APInitiateReply(struct soap *soap, ns2__APInitiateReply *p)
{
	if (::soap_read_ns2__APInitiateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__BoletoPaymentReply_DEFINED
#define SOAP_TYPE_ns2__BoletoPaymentReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BoletoPaymentReply(struct soap*, const char*, int, const ns2__BoletoPaymentReply *, const char*);
SOAP_FMAC3 ns2__BoletoPaymentReply * SOAP_FMAC4 soap_in_ns2__BoletoPaymentReply(struct soap*, const char*, ns2__BoletoPaymentReply *, const char*);
SOAP_FMAC1 ns2__BoletoPaymentReply * SOAP_FMAC2 soap_instantiate_ns2__BoletoPaymentReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BoletoPaymentReply * soap_new_ns2__BoletoPaymentReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__BoletoPaymentReply(soap, n, NULL, NULL, NULL);
}

inline ns2__BoletoPaymentReply * soap_new_req_ns2__BoletoPaymentReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__BoletoPaymentReply *_p = ::soap_new_ns2__BoletoPaymentReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BoletoPaymentReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__BoletoPaymentReply * soap_new_set_ns2__BoletoPaymentReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *requestDateTime,
	std::string *amount,
	std::string *reconciliationID,
	std::string *boletoNumber,
	std::string *expirationDate,
	std::string *url,
	std::string *avsCode,
	std::string *avsCodeRaw,
	std::string *barCodeNumber,
	std::string *assignor)
{
	ns2__BoletoPaymentReply *_p = ::soap_new_ns2__BoletoPaymentReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BoletoPaymentReply::reasonCode = reasonCode;
		_p->ns2__BoletoPaymentReply::requestDateTime = requestDateTime;
		_p->ns2__BoletoPaymentReply::amount = amount;
		_p->ns2__BoletoPaymentReply::reconciliationID = reconciliationID;
		_p->ns2__BoletoPaymentReply::boletoNumber = boletoNumber;
		_p->ns2__BoletoPaymentReply::expirationDate = expirationDate;
		_p->ns2__BoletoPaymentReply::url = url;
		_p->ns2__BoletoPaymentReply::avsCode = avsCode;
		_p->ns2__BoletoPaymentReply::avsCodeRaw = avsCodeRaw;
		_p->ns2__BoletoPaymentReply::barCodeNumber = barCodeNumber;
		_p->ns2__BoletoPaymentReply::assignor = assignor;
	}
	return _p;
}

inline int soap_write_ns2__BoletoPaymentReply(struct soap *soap, ns2__BoletoPaymentReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BoletoPaymentReply", p->soap_type() == SOAP_TYPE_ns2__BoletoPaymentReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__BoletoPaymentReply(struct soap *soap, const char *URL, ns2__BoletoPaymentReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BoletoPaymentReply", p->soap_type() == SOAP_TYPE_ns2__BoletoPaymentReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__BoletoPaymentReply(struct soap *soap, const char *URL, ns2__BoletoPaymentReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BoletoPaymentReply", p->soap_type() == SOAP_TYPE_ns2__BoletoPaymentReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__BoletoPaymentReply(struct soap *soap, const char *URL, ns2__BoletoPaymentReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BoletoPaymentReply", p->soap_type() == SOAP_TYPE_ns2__BoletoPaymentReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__BoletoPaymentReply * SOAP_FMAC4 soap_get_ns2__BoletoPaymentReply(struct soap*, ns2__BoletoPaymentReply *, const char*, const char*);

inline int soap_read_ns2__BoletoPaymentReply(struct soap *soap, ns2__BoletoPaymentReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__BoletoPaymentReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__BoletoPaymentReply(struct soap *soap, const char *URL, ns2__BoletoPaymentReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__BoletoPaymentReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__BoletoPaymentReply(struct soap *soap, ns2__BoletoPaymentReply *p)
{
	if (::soap_read_ns2__BoletoPaymentReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ChinaRefundReply_DEFINED
#define SOAP_TYPE_ns2__ChinaRefundReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ChinaRefundReply(struct soap*, const char*, int, const ns2__ChinaRefundReply *, const char*);
SOAP_FMAC3 ns2__ChinaRefundReply * SOAP_FMAC4 soap_in_ns2__ChinaRefundReply(struct soap*, const char*, ns2__ChinaRefundReply *, const char*);
SOAP_FMAC1 ns2__ChinaRefundReply * SOAP_FMAC2 soap_instantiate_ns2__ChinaRefundReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ChinaRefundReply * soap_new_ns2__ChinaRefundReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ChinaRefundReply(soap, n, NULL, NULL, NULL);
}

inline ns2__ChinaRefundReply * soap_new_req_ns2__ChinaRefundReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__ChinaRefundReply *_p = ::soap_new_ns2__ChinaRefundReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ChinaRefundReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__ChinaRefundReply * soap_new_set_ns2__ChinaRefundReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *requestDateTime,
	std::string *amount,
	std::string *currency)
{
	ns2__ChinaRefundReply *_p = ::soap_new_ns2__ChinaRefundReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ChinaRefundReply::reasonCode = reasonCode;
		_p->ns2__ChinaRefundReply::requestDateTime = requestDateTime;
		_p->ns2__ChinaRefundReply::amount = amount;
		_p->ns2__ChinaRefundReply::currency = currency;
	}
	return _p;
}

inline int soap_write_ns2__ChinaRefundReply(struct soap *soap, ns2__ChinaRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ChinaRefundReply", p->soap_type() == SOAP_TYPE_ns2__ChinaRefundReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ChinaRefundReply(struct soap *soap, const char *URL, ns2__ChinaRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ChinaRefundReply", p->soap_type() == SOAP_TYPE_ns2__ChinaRefundReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ChinaRefundReply(struct soap *soap, const char *URL, ns2__ChinaRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ChinaRefundReply", p->soap_type() == SOAP_TYPE_ns2__ChinaRefundReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ChinaRefundReply(struct soap *soap, const char *URL, ns2__ChinaRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ChinaRefundReply", p->soap_type() == SOAP_TYPE_ns2__ChinaRefundReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ChinaRefundReply * SOAP_FMAC4 soap_get_ns2__ChinaRefundReply(struct soap*, ns2__ChinaRefundReply *, const char*, const char*);

inline int soap_read_ns2__ChinaRefundReply(struct soap *soap, ns2__ChinaRefundReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ChinaRefundReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ChinaRefundReply(struct soap *soap, const char *URL, ns2__ChinaRefundReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ChinaRefundReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ChinaRefundReply(struct soap *soap, ns2__ChinaRefundReply *p)
{
	if (::soap_read_ns2__ChinaRefundReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ChinaPaymentReply_DEFINED
#define SOAP_TYPE_ns2__ChinaPaymentReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ChinaPaymentReply(struct soap*, const char*, int, const ns2__ChinaPaymentReply *, const char*);
SOAP_FMAC3 ns2__ChinaPaymentReply * SOAP_FMAC4 soap_in_ns2__ChinaPaymentReply(struct soap*, const char*, ns2__ChinaPaymentReply *, const char*);
SOAP_FMAC1 ns2__ChinaPaymentReply * SOAP_FMAC2 soap_instantiate_ns2__ChinaPaymentReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ChinaPaymentReply * soap_new_ns2__ChinaPaymentReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ChinaPaymentReply(soap, n, NULL, NULL, NULL);
}

inline ns2__ChinaPaymentReply * soap_new_req_ns2__ChinaPaymentReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__ChinaPaymentReply *_p = ::soap_new_ns2__ChinaPaymentReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ChinaPaymentReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__ChinaPaymentReply * soap_new_set_ns2__ChinaPaymentReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *requestDateTime,
	std::string *amount,
	std::string *currency,
	std::string *reconciliationID,
	std::string *formData,
	std::string *verifyFailure,
	std::string *verifyInProcess,
	std::string *verifySuccess)
{
	ns2__ChinaPaymentReply *_p = ::soap_new_ns2__ChinaPaymentReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ChinaPaymentReply::reasonCode = reasonCode;
		_p->ns2__ChinaPaymentReply::requestDateTime = requestDateTime;
		_p->ns2__ChinaPaymentReply::amount = amount;
		_p->ns2__ChinaPaymentReply::currency = currency;
		_p->ns2__ChinaPaymentReply::reconciliationID = reconciliationID;
		_p->ns2__ChinaPaymentReply::formData = formData;
		_p->ns2__ChinaPaymentReply::verifyFailure = verifyFailure;
		_p->ns2__ChinaPaymentReply::verifyInProcess = verifyInProcess;
		_p->ns2__ChinaPaymentReply::verifySuccess = verifySuccess;
	}
	return _p;
}

inline int soap_write_ns2__ChinaPaymentReply(struct soap *soap, ns2__ChinaPaymentReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ChinaPaymentReply", p->soap_type() == SOAP_TYPE_ns2__ChinaPaymentReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ChinaPaymentReply(struct soap *soap, const char *URL, ns2__ChinaPaymentReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ChinaPaymentReply", p->soap_type() == SOAP_TYPE_ns2__ChinaPaymentReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ChinaPaymentReply(struct soap *soap, const char *URL, ns2__ChinaPaymentReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ChinaPaymentReply", p->soap_type() == SOAP_TYPE_ns2__ChinaPaymentReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ChinaPaymentReply(struct soap *soap, const char *URL, ns2__ChinaPaymentReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ChinaPaymentReply", p->soap_type() == SOAP_TYPE_ns2__ChinaPaymentReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ChinaPaymentReply * SOAP_FMAC4 soap_get_ns2__ChinaPaymentReply(struct soap*, ns2__ChinaPaymentReply *, const char*, const char*);

inline int soap_read_ns2__ChinaPaymentReply(struct soap *soap, ns2__ChinaPaymentReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ChinaPaymentReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ChinaPaymentReply(struct soap *soap, const char *URL, ns2__ChinaPaymentReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ChinaPaymentReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ChinaPaymentReply(struct soap *soap, ns2__ChinaPaymentReply *p)
{
	if (::soap_read_ns2__ChinaPaymentReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCDCCUpdateReply_DEFINED
#define SOAP_TYPE_ns2__CCDCCUpdateReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCDCCUpdateReply(struct soap*, const char*, int, const ns2__CCDCCUpdateReply *, const char*);
SOAP_FMAC3 ns2__CCDCCUpdateReply * SOAP_FMAC4 soap_in_ns2__CCDCCUpdateReply(struct soap*, const char*, ns2__CCDCCUpdateReply *, const char*);
SOAP_FMAC1 ns2__CCDCCUpdateReply * SOAP_FMAC2 soap_instantiate_ns2__CCDCCUpdateReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCDCCUpdateReply * soap_new_ns2__CCDCCUpdateReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCDCCUpdateReply(soap, n, NULL, NULL, NULL);
}

inline ns2__CCDCCUpdateReply * soap_new_req_ns2__CCDCCUpdateReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__CCDCCUpdateReply *_p = ::soap_new_ns2__CCDCCUpdateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCDCCUpdateReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__CCDCCUpdateReply * soap_new_set_ns2__CCDCCUpdateReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__CCDCCUpdateReply *_p = ::soap_new_ns2__CCDCCUpdateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCDCCUpdateReply::reasonCode = reasonCode;
	}
	return _p;
}

inline int soap_write_ns2__CCDCCUpdateReply(struct soap *soap, ns2__CCDCCUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCDCCUpdateReply", p->soap_type() == SOAP_TYPE_ns2__CCDCCUpdateReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCDCCUpdateReply(struct soap *soap, const char *URL, ns2__CCDCCUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCDCCUpdateReply", p->soap_type() == SOAP_TYPE_ns2__CCDCCUpdateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCDCCUpdateReply(struct soap *soap, const char *URL, ns2__CCDCCUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCDCCUpdateReply", p->soap_type() == SOAP_TYPE_ns2__CCDCCUpdateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCDCCUpdateReply(struct soap *soap, const char *URL, ns2__CCDCCUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCDCCUpdateReply", p->soap_type() == SOAP_TYPE_ns2__CCDCCUpdateReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCDCCUpdateReply * SOAP_FMAC4 soap_get_ns2__CCDCCUpdateReply(struct soap*, ns2__CCDCCUpdateReply *, const char*, const char*);

inline int soap_read_ns2__CCDCCUpdateReply(struct soap *soap, ns2__CCDCCUpdateReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCDCCUpdateReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCDCCUpdateReply(struct soap *soap, const char *URL, ns2__CCDCCUpdateReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCDCCUpdateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCDCCUpdateReply(struct soap *soap, ns2__CCDCCUpdateReply *p)
{
	if (::soap_read_ns2__CCDCCUpdateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__paymentCurrencyOffer_DEFINED
#define SOAP_TYPE_ns2__paymentCurrencyOffer_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__paymentCurrencyOffer(struct soap*, const char*, int, const ns2__paymentCurrencyOffer *, const char*);
SOAP_FMAC3 ns2__paymentCurrencyOffer * SOAP_FMAC4 soap_in_ns2__paymentCurrencyOffer(struct soap*, const char*, ns2__paymentCurrencyOffer *, const char*);
SOAP_FMAC1 ns2__paymentCurrencyOffer * SOAP_FMAC2 soap_instantiate_ns2__paymentCurrencyOffer(struct soap*, int, const char*, const char*, size_t*);

inline ns2__paymentCurrencyOffer * soap_new_ns2__paymentCurrencyOffer(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__paymentCurrencyOffer(soap, n, NULL, NULL, NULL);
}

inline ns2__paymentCurrencyOffer * soap_new_req_ns2__paymentCurrencyOffer(
	struct soap *soap,
	const std::string& id)
{
	ns2__paymentCurrencyOffer *_p = ::soap_new_ns2__paymentCurrencyOffer(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__paymentCurrencyOffer::id = id;
	}
	return _p;
}

inline ns2__paymentCurrencyOffer * soap_new_set_ns2__paymentCurrencyOffer(
	struct soap *soap,
	std::string *amount,
	std::string *currency,
	std::string *exchangeRate,
	std::string *marginRatePercentage,
	const std::string& id)
{
	ns2__paymentCurrencyOffer *_p = ::soap_new_ns2__paymentCurrencyOffer(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__paymentCurrencyOffer::amount = amount;
		_p->ns2__paymentCurrencyOffer::currency = currency;
		_p->ns2__paymentCurrencyOffer::exchangeRate = exchangeRate;
		_p->ns2__paymentCurrencyOffer::marginRatePercentage = marginRatePercentage;
		_p->ns2__paymentCurrencyOffer::id = id;
	}
	return _p;
}

inline int soap_write_ns2__paymentCurrencyOffer(struct soap *soap, ns2__paymentCurrencyOffer const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:paymentCurrencyOffer", p->soap_type() == SOAP_TYPE_ns2__paymentCurrencyOffer ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__paymentCurrencyOffer(struct soap *soap, const char *URL, ns2__paymentCurrencyOffer const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:paymentCurrencyOffer", p->soap_type() == SOAP_TYPE_ns2__paymentCurrencyOffer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__paymentCurrencyOffer(struct soap *soap, const char *URL, ns2__paymentCurrencyOffer const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:paymentCurrencyOffer", p->soap_type() == SOAP_TYPE_ns2__paymentCurrencyOffer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__paymentCurrencyOffer(struct soap *soap, const char *URL, ns2__paymentCurrencyOffer const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:paymentCurrencyOffer", p->soap_type() == SOAP_TYPE_ns2__paymentCurrencyOffer ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__paymentCurrencyOffer * SOAP_FMAC4 soap_get_ns2__paymentCurrencyOffer(struct soap*, ns2__paymentCurrencyOffer *, const char*, const char*);

inline int soap_read_ns2__paymentCurrencyOffer(struct soap *soap, ns2__paymentCurrencyOffer *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__paymentCurrencyOffer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__paymentCurrencyOffer(struct soap *soap, const char *URL, ns2__paymentCurrencyOffer *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__paymentCurrencyOffer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__paymentCurrencyOffer(struct soap *soap, ns2__paymentCurrencyOffer *p)
{
	if (::soap_read_ns2__paymentCurrencyOffer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCDCCReply_DEFINED
#define SOAP_TYPE_ns2__CCDCCReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCDCCReply(struct soap*, const char*, int, const ns2__CCDCCReply *, const char*);
SOAP_FMAC3 ns2__CCDCCReply * SOAP_FMAC4 soap_in_ns2__CCDCCReply(struct soap*, const char*, ns2__CCDCCReply *, const char*);
SOAP_FMAC1 ns2__CCDCCReply * SOAP_FMAC2 soap_instantiate_ns2__CCDCCReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCDCCReply * soap_new_ns2__CCDCCReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCDCCReply(soap, n, NULL, NULL, NULL);
}

inline ns2__CCDCCReply * soap_new_req_ns2__CCDCCReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__CCDCCReply *_p = ::soap_new_ns2__CCDCCReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCDCCReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__CCDCCReply * soap_new_set_ns2__CCDCCReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *dccSupported,
	std::string *validHours,
	std::string *marginRatePercentage,
	std::string *reconciliationID,
	const std::vector<ns2__paymentCurrencyOffer *> & paymentCurrencyOffer)
{
	ns2__CCDCCReply *_p = ::soap_new_ns2__CCDCCReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCDCCReply::reasonCode = reasonCode;
		_p->ns2__CCDCCReply::dccSupported = dccSupported;
		_p->ns2__CCDCCReply::validHours = validHours;
		_p->ns2__CCDCCReply::marginRatePercentage = marginRatePercentage;
		_p->ns2__CCDCCReply::reconciliationID = reconciliationID;
		_p->ns2__CCDCCReply::paymentCurrencyOffer = paymentCurrencyOffer;
	}
	return _p;
}

inline int soap_write_ns2__CCDCCReply(struct soap *soap, ns2__CCDCCReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCDCCReply", p->soap_type() == SOAP_TYPE_ns2__CCDCCReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCDCCReply(struct soap *soap, const char *URL, ns2__CCDCCReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCDCCReply", p->soap_type() == SOAP_TYPE_ns2__CCDCCReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCDCCReply(struct soap *soap, const char *URL, ns2__CCDCCReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCDCCReply", p->soap_type() == SOAP_TYPE_ns2__CCDCCReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCDCCReply(struct soap *soap, const char *URL, ns2__CCDCCReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCDCCReply", p->soap_type() == SOAP_TYPE_ns2__CCDCCReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCDCCReply * SOAP_FMAC4 soap_get_ns2__CCDCCReply(struct soap*, ns2__CCDCCReply *, const char*, const char*);

inline int soap_read_ns2__CCDCCReply(struct soap *soap, ns2__CCDCCReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCDCCReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCDCCReply(struct soap *soap, const char *URL, ns2__CCDCCReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCDCCReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCDCCReply(struct soap *soap, ns2__CCDCCReply *p)
{
	if (::soap_read_ns2__CCDCCReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ProfileReply_DEFINED
#define SOAP_TYPE_ns2__ProfileReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ProfileReply(struct soap*, const char*, int, const ns2__ProfileReply *, const char*);
SOAP_FMAC3 ns2__ProfileReply * SOAP_FMAC4 soap_in_ns2__ProfileReply(struct soap*, const char*, ns2__ProfileReply *, const char*);
SOAP_FMAC1 ns2__ProfileReply * SOAP_FMAC2 soap_instantiate_ns2__ProfileReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ProfileReply * soap_new_ns2__ProfileReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ProfileReply(soap, n, NULL, NULL, NULL);
}

inline ns2__ProfileReply * soap_new_req_ns2__ProfileReply(
	struct soap *soap)
{
	ns2__ProfileReply *_p = ::soap_new_ns2__ProfileReply(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__ProfileReply * soap_new_set_ns2__ProfileReply(
	struct soap *soap,
	std::string *selectedBy,
	std::string *name,
	std::string *destinationQueue,
	std::string *profileScore,
	ns2__RuleResultItems *rulesTriggered)
{
	ns2__ProfileReply *_p = ::soap_new_ns2__ProfileReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ProfileReply::selectedBy = selectedBy;
		_p->ns2__ProfileReply::name = name;
		_p->ns2__ProfileReply::destinationQueue = destinationQueue;
		_p->ns2__ProfileReply::profileScore = profileScore;
		_p->ns2__ProfileReply::rulesTriggered = rulesTriggered;
	}
	return _p;
}

inline int soap_write_ns2__ProfileReply(struct soap *soap, ns2__ProfileReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ProfileReply", p->soap_type() == SOAP_TYPE_ns2__ProfileReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ProfileReply(struct soap *soap, const char *URL, ns2__ProfileReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ProfileReply", p->soap_type() == SOAP_TYPE_ns2__ProfileReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ProfileReply(struct soap *soap, const char *URL, ns2__ProfileReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ProfileReply", p->soap_type() == SOAP_TYPE_ns2__ProfileReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ProfileReply(struct soap *soap, const char *URL, ns2__ProfileReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ProfileReply", p->soap_type() == SOAP_TYPE_ns2__ProfileReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ProfileReply * SOAP_FMAC4 soap_get_ns2__ProfileReply(struct soap*, ns2__ProfileReply *, const char*, const char*);

inline int soap_read_ns2__ProfileReply(struct soap *soap, ns2__ProfileReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ProfileReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ProfileReply(struct soap *soap, const char *URL, ns2__ProfileReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ProfileReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ProfileReply(struct soap *soap, ns2__ProfileReply *p)
{
	if (::soap_read_ns2__ProfileReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DMEReply_DEFINED
#define SOAP_TYPE_ns2__DMEReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DMEReply(struct soap*, const char*, int, const ns2__DMEReply *, const char*);
SOAP_FMAC3 ns2__DMEReply * SOAP_FMAC4 soap_in_ns2__DMEReply(struct soap*, const char*, ns2__DMEReply *, const char*);
SOAP_FMAC1 ns2__DMEReply * SOAP_FMAC2 soap_instantiate_ns2__DMEReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DMEReply * soap_new_ns2__DMEReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DMEReply(soap, n, NULL, NULL, NULL);
}

inline ns2__DMEReply * soap_new_req_ns2__DMEReply(
	struct soap *soap)
{
	ns2__DMEReply *_p = ::soap_new_ns2__DMEReply(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__DMEReply * soap_new_set_ns2__DMEReply(
	struct soap *soap,
	std::string *eventType,
	std::string *eventInfo,
	std::string *eventDeviceBehaviorInfo,
	std::string *eventHotlistInfo,
	std::string *eventPolicy,
	std::string *eventVelocityInfoCode,
	ns2__AdditionalFields *additionalFields,
	ns2__MorphingElement *morphingElement,
	std::string *cardBin,
	std::string *binCountry,
	std::string *cardAccountType,
	std::string *cardScheme,
	std::string *cardIssuer,
	ns2__ProviderFields *providerFields)
{
	ns2__DMEReply *_p = ::soap_new_ns2__DMEReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DMEReply::eventType = eventType;
		_p->ns2__DMEReply::eventInfo = eventInfo;
		_p->ns2__DMEReply::eventDeviceBehaviorInfo = eventDeviceBehaviorInfo;
		_p->ns2__DMEReply::eventHotlistInfo = eventHotlistInfo;
		_p->ns2__DMEReply::eventPolicy = eventPolicy;
		_p->ns2__DMEReply::eventVelocityInfoCode = eventVelocityInfoCode;
		_p->ns2__DMEReply::additionalFields = additionalFields;
		_p->ns2__DMEReply::morphingElement = morphingElement;
		_p->ns2__DMEReply::cardBin = cardBin;
		_p->ns2__DMEReply::binCountry = binCountry;
		_p->ns2__DMEReply::cardAccountType = cardAccountType;
		_p->ns2__DMEReply::cardScheme = cardScheme;
		_p->ns2__DMEReply::cardIssuer = cardIssuer;
		_p->ns2__DMEReply::providerFields = providerFields;
	}
	return _p;
}

inline int soap_write_ns2__DMEReply(struct soap *soap, ns2__DMEReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DMEReply", p->soap_type() == SOAP_TYPE_ns2__DMEReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DMEReply(struct soap *soap, const char *URL, ns2__DMEReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DMEReply", p->soap_type() == SOAP_TYPE_ns2__DMEReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DMEReply(struct soap *soap, const char *URL, ns2__DMEReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DMEReply", p->soap_type() == SOAP_TYPE_ns2__DMEReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DMEReply(struct soap *soap, const char *URL, ns2__DMEReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DMEReply", p->soap_type() == SOAP_TYPE_ns2__DMEReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DMEReply * SOAP_FMAC4 soap_get_ns2__DMEReply(struct soap*, ns2__DMEReply *, const char*, const char*);

inline int soap_read_ns2__DMEReply(struct soap *soap, ns2__DMEReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DMEReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DMEReply(struct soap *soap, const char *URL, ns2__DMEReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DMEReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DMEReply(struct soap *soap, ns2__DMEReply *p)
{
	if (::soap_read_ns2__DMEReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Travel_DEFINED
#define SOAP_TYPE_ns2__Travel_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Travel(struct soap*, const char*, int, const ns2__Travel *, const char*);
SOAP_FMAC3 ns2__Travel * SOAP_FMAC4 soap_in_ns2__Travel(struct soap*, const char*, ns2__Travel *, const char*);
SOAP_FMAC1 ns2__Travel * SOAP_FMAC2 soap_instantiate_ns2__Travel(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Travel * soap_new_ns2__Travel(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Travel(soap, n, NULL, NULL, NULL);
}

inline ns2__Travel * soap_new_req_ns2__Travel(
	struct soap *soap)
{
	ns2__Travel *_p = ::soap_new_ns2__Travel(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Travel * soap_new_set_ns2__Travel(
	struct soap *soap,
	std::string *actualFinalDestinationCountry,
	std::string *actualFinalDestinationCity,
	std::string *actualFinalDestinationLatitude,
	std::string *actualFinalDestinationLongitude,
	std::string *firstDepartureCountry,
	std::string *firstDepartureCity,
	std::string *firstDepartureLatitude,
	std::string *firstDepartureLongitude,
	std::string *firstDestinationCountry,
	std::string *firstDestinationCity,
	std::string *firstDestinationLatitude,
	std::string *firstDestinationLongitude,
	std::string *lastDestinationCountry,
	std::string *lastDestinationCity,
	std::string *lastDestinationLatitude,
	std::string *lastDestinationLongitude)
{
	ns2__Travel *_p = ::soap_new_ns2__Travel(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Travel::actualFinalDestinationCountry = actualFinalDestinationCountry;
		_p->ns2__Travel::actualFinalDestinationCity = actualFinalDestinationCity;
		_p->ns2__Travel::actualFinalDestinationLatitude = actualFinalDestinationLatitude;
		_p->ns2__Travel::actualFinalDestinationLongitude = actualFinalDestinationLongitude;
		_p->ns2__Travel::firstDepartureCountry = firstDepartureCountry;
		_p->ns2__Travel::firstDepartureCity = firstDepartureCity;
		_p->ns2__Travel::firstDepartureLatitude = firstDepartureLatitude;
		_p->ns2__Travel::firstDepartureLongitude = firstDepartureLongitude;
		_p->ns2__Travel::firstDestinationCountry = firstDestinationCountry;
		_p->ns2__Travel::firstDestinationCity = firstDestinationCity;
		_p->ns2__Travel::firstDestinationLatitude = firstDestinationLatitude;
		_p->ns2__Travel::firstDestinationLongitude = firstDestinationLongitude;
		_p->ns2__Travel::lastDestinationCountry = lastDestinationCountry;
		_p->ns2__Travel::lastDestinationCity = lastDestinationCity;
		_p->ns2__Travel::lastDestinationLatitude = lastDestinationLatitude;
		_p->ns2__Travel::lastDestinationLongitude = lastDestinationLongitude;
	}
	return _p;
}

inline int soap_write_ns2__Travel(struct soap *soap, ns2__Travel const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Travel", p->soap_type() == SOAP_TYPE_ns2__Travel ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Travel(struct soap *soap, const char *URL, ns2__Travel const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Travel", p->soap_type() == SOAP_TYPE_ns2__Travel ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Travel(struct soap *soap, const char *URL, ns2__Travel const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Travel", p->soap_type() == SOAP_TYPE_ns2__Travel ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Travel(struct soap *soap, const char *URL, ns2__Travel const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Travel", p->soap_type() == SOAP_TYPE_ns2__Travel ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Travel * SOAP_FMAC4 soap_get_ns2__Travel(struct soap*, ns2__Travel *, const char*, const char*);

inline int soap_read_ns2__Travel(struct soap *soap, ns2__Travel *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Travel(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Travel(struct soap *soap, const char *URL, ns2__Travel *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Travel(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Travel(struct soap *soap, ns2__Travel *p)
{
	if (::soap_read_ns2__Travel(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Element_DEFINED
#define SOAP_TYPE_ns2__Element_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Element(struct soap*, const char*, int, const ns2__Element *, const char*);
SOAP_FMAC3 ns2__Element * SOAP_FMAC4 soap_in_ns2__Element(struct soap*, const char*, ns2__Element *, const char*);
SOAP_FMAC1 ns2__Element * SOAP_FMAC2 soap_instantiate_ns2__Element(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Element * soap_new_ns2__Element(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Element(soap, n, NULL, NULL, NULL);
}

inline ns2__Element * soap_new_req_ns2__Element(
	struct soap *soap,
	const std::string& infoCode,
	const std::string& fieldName,
	const std::string& count)
{
	ns2__Element *_p = ::soap_new_ns2__Element(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Element::infoCode = infoCode;
		_p->ns2__Element::fieldName = fieldName;
		_p->ns2__Element::count = count;
	}
	return _p;
}

inline ns2__Element * soap_new_set_ns2__Element(
	struct soap *soap,
	const std::string& infoCode,
	const std::string& fieldName,
	const std::string& count)
{
	ns2__Element *_p = ::soap_new_ns2__Element(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Element::infoCode = infoCode;
		_p->ns2__Element::fieldName = fieldName;
		_p->ns2__Element::count = count;
	}
	return _p;
}

inline int soap_write_ns2__Element(struct soap *soap, ns2__Element const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Element", p->soap_type() == SOAP_TYPE_ns2__Element ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Element(struct soap *soap, const char *URL, ns2__Element const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Element", p->soap_type() == SOAP_TYPE_ns2__Element ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Element(struct soap *soap, const char *URL, ns2__Element const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Element", p->soap_type() == SOAP_TYPE_ns2__Element ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Element(struct soap *soap, const char *URL, ns2__Element const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Element", p->soap_type() == SOAP_TYPE_ns2__Element ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Element * SOAP_FMAC4 soap_get_ns2__Element(struct soap*, ns2__Element *, const char*, const char*);

inline int soap_read_ns2__Element(struct soap *soap, ns2__Element *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Element(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Element(struct soap *soap, const char *URL, ns2__Element *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Element(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Element(struct soap *soap, ns2__Element *p)
{
	if (::soap_read_ns2__Element(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__MorphingElement_DEFINED
#define SOAP_TYPE_ns2__MorphingElement_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MorphingElement(struct soap*, const char*, int, const ns2__MorphingElement *, const char*);
SOAP_FMAC3 ns2__MorphingElement * SOAP_FMAC4 soap_in_ns2__MorphingElement(struct soap*, const char*, ns2__MorphingElement *, const char*);
SOAP_FMAC1 ns2__MorphingElement * SOAP_FMAC2 soap_instantiate_ns2__MorphingElement(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MorphingElement * soap_new_ns2__MorphingElement(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__MorphingElement(soap, n, NULL, NULL, NULL);
}

inline ns2__MorphingElement * soap_new_req_ns2__MorphingElement(
	struct soap *soap)
{
	ns2__MorphingElement *_p = ::soap_new_ns2__MorphingElement(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__MorphingElement * soap_new_set_ns2__MorphingElement(
	struct soap *soap,
	const std::vector<ns2__Element *> & element)
{
	ns2__MorphingElement *_p = ::soap_new_ns2__MorphingElement(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__MorphingElement::element = element;
	}
	return _p;
}

inline int soap_write_ns2__MorphingElement(struct soap *soap, ns2__MorphingElement const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:MorphingElement", p->soap_type() == SOAP_TYPE_ns2__MorphingElement ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__MorphingElement(struct soap *soap, const char *URL, ns2__MorphingElement const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:MorphingElement", p->soap_type() == SOAP_TYPE_ns2__MorphingElement ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__MorphingElement(struct soap *soap, const char *URL, ns2__MorphingElement const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:MorphingElement", p->soap_type() == SOAP_TYPE_ns2__MorphingElement ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__MorphingElement(struct soap *soap, const char *URL, ns2__MorphingElement const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:MorphingElement", p->soap_type() == SOAP_TYPE_ns2__MorphingElement ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__MorphingElement * SOAP_FMAC4 soap_get_ns2__MorphingElement(struct soap*, ns2__MorphingElement *, const char*, const char*);

inline int soap_read_ns2__MorphingElement(struct soap *soap, ns2__MorphingElement *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__MorphingElement(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__MorphingElement(struct soap *soap, const char *URL, ns2__MorphingElement *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__MorphingElement(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__MorphingElement(struct soap *soap, ns2__MorphingElement *p)
{
	if (::soap_read_ns2__MorphingElement(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Field_DEFINED
#define SOAP_TYPE_ns2__Field_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Field(struct soap*, const char*, int, const ns2__Field *, const char*);
SOAP_FMAC3 ns2__Field * SOAP_FMAC4 soap_in_ns2__Field(struct soap*, const char*, ns2__Field *, const char*);
SOAP_FMAC1 ns2__Field * SOAP_FMAC2 soap_instantiate_ns2__Field(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Field * soap_new_ns2__Field(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Field(soap, n, NULL, NULL, NULL);
}

inline ns2__Field * soap_new_req_ns2__Field(
	struct soap *soap,
	const std::string& provider,
	const std::string& name,
	const std::string& value)
{
	ns2__Field *_p = ::soap_new_ns2__Field(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Field::provider = provider;
		_p->ns2__Field::name = name;
		_p->ns2__Field::value = value;
	}
	return _p;
}

inline ns2__Field * soap_new_set_ns2__Field(
	struct soap *soap,
	const std::string& provider,
	const std::string& name,
	const std::string& value)
{
	ns2__Field *_p = ::soap_new_ns2__Field(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Field::provider = provider;
		_p->ns2__Field::name = name;
		_p->ns2__Field::value = value;
	}
	return _p;
}

inline int soap_write_ns2__Field(struct soap *soap, ns2__Field const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Field", p->soap_type() == SOAP_TYPE_ns2__Field ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Field(struct soap *soap, const char *URL, ns2__Field const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Field", p->soap_type() == SOAP_TYPE_ns2__Field ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Field(struct soap *soap, const char *URL, ns2__Field const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Field", p->soap_type() == SOAP_TYPE_ns2__Field ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Field(struct soap *soap, const char *URL, ns2__Field const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Field", p->soap_type() == SOAP_TYPE_ns2__Field ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Field * SOAP_FMAC4 soap_get_ns2__Field(struct soap*, ns2__Field *, const char*, const char*);

inline int soap_read_ns2__Field(struct soap *soap, ns2__Field *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Field(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Field(struct soap *soap, const char *URL, ns2__Field *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Field(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Field(struct soap *soap, ns2__Field *p)
{
	if (::soap_read_ns2__Field(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__AdditionalFields_DEFINED
#define SOAP_TYPE_ns2__AdditionalFields_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AdditionalFields(struct soap*, const char*, int, const ns2__AdditionalFields *, const char*);
SOAP_FMAC3 ns2__AdditionalFields * SOAP_FMAC4 soap_in_ns2__AdditionalFields(struct soap*, const char*, ns2__AdditionalFields *, const char*);
SOAP_FMAC1 ns2__AdditionalFields * SOAP_FMAC2 soap_instantiate_ns2__AdditionalFields(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AdditionalFields * soap_new_ns2__AdditionalFields(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__AdditionalFields(soap, n, NULL, NULL, NULL);
}

inline ns2__AdditionalFields * soap_new_req_ns2__AdditionalFields(
	struct soap *soap)
{
	ns2__AdditionalFields *_p = ::soap_new_ns2__AdditionalFields(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__AdditionalFields * soap_new_set_ns2__AdditionalFields(
	struct soap *soap,
	const std::vector<ns2__Field *> & field)
{
	ns2__AdditionalFields *_p = ::soap_new_ns2__AdditionalFields(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AdditionalFields::field = field;
	}
	return _p;
}

inline int soap_write_ns2__AdditionalFields(struct soap *soap, ns2__AdditionalFields const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AdditionalFields", p->soap_type() == SOAP_TYPE_ns2__AdditionalFields ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__AdditionalFields(struct soap *soap, const char *URL, ns2__AdditionalFields const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AdditionalFields", p->soap_type() == SOAP_TYPE_ns2__AdditionalFields ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__AdditionalFields(struct soap *soap, const char *URL, ns2__AdditionalFields const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AdditionalFields", p->soap_type() == SOAP_TYPE_ns2__AdditionalFields ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__AdditionalFields(struct soap *soap, const char *URL, ns2__AdditionalFields const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AdditionalFields", p->soap_type() == SOAP_TYPE_ns2__AdditionalFields ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__AdditionalFields * SOAP_FMAC4 soap_get_ns2__AdditionalFields(struct soap*, ns2__AdditionalFields *, const char*, const char*);

inline int soap_read_ns2__AdditionalFields(struct soap *soap, ns2__AdditionalFields *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__AdditionalFields(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__AdditionalFields(struct soap *soap, const char *URL, ns2__AdditionalFields *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__AdditionalFields(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__AdditionalFields(struct soap *soap, ns2__AdditionalFields *p)
{
	if (::soap_read_ns2__AdditionalFields(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ProviderField_DEFINED
#define SOAP_TYPE_ns2__ProviderField_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ProviderField(struct soap*, const char*, int, const ns2__ProviderField *, const char*);
SOAP_FMAC3 ns2__ProviderField * SOAP_FMAC4 soap_in_ns2__ProviderField(struct soap*, const char*, ns2__ProviderField *, const char*);
SOAP_FMAC1 ns2__ProviderField * SOAP_FMAC2 soap_instantiate_ns2__ProviderField(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ProviderField * soap_new_ns2__ProviderField(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ProviderField(soap, n, NULL, NULL, NULL);
}

inline ns2__ProviderField * soap_new_req_ns2__ProviderField(
	struct soap *soap,
	const std::string& name,
	const std::string& value)
{
	ns2__ProviderField *_p = ::soap_new_ns2__ProviderField(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ProviderField::name = name;
		_p->ns2__ProviderField::value = value;
	}
	return _p;
}

inline ns2__ProviderField * soap_new_set_ns2__ProviderField(
	struct soap *soap,
	const std::string& name,
	const std::string& value)
{
	ns2__ProviderField *_p = ::soap_new_ns2__ProviderField(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ProviderField::name = name;
		_p->ns2__ProviderField::value = value;
	}
	return _p;
}

inline int soap_write_ns2__ProviderField(struct soap *soap, ns2__ProviderField const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ProviderField", p->soap_type() == SOAP_TYPE_ns2__ProviderField ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ProviderField(struct soap *soap, const char *URL, ns2__ProviderField const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ProviderField", p->soap_type() == SOAP_TYPE_ns2__ProviderField ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ProviderField(struct soap *soap, const char *URL, ns2__ProviderField const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ProviderField", p->soap_type() == SOAP_TYPE_ns2__ProviderField ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ProviderField(struct soap *soap, const char *URL, ns2__ProviderField const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ProviderField", p->soap_type() == SOAP_TYPE_ns2__ProviderField ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ProviderField * SOAP_FMAC4 soap_get_ns2__ProviderField(struct soap*, ns2__ProviderField *, const char*, const char*);

inline int soap_read_ns2__ProviderField(struct soap *soap, ns2__ProviderField *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ProviderField(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ProviderField(struct soap *soap, const char *URL, ns2__ProviderField *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ProviderField(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ProviderField(struct soap *soap, ns2__ProviderField *p)
{
	if (::soap_read_ns2__ProviderField(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Provider_DEFINED
#define SOAP_TYPE_ns2__Provider_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Provider(struct soap*, const char*, int, const ns2__Provider *, const char*);
SOAP_FMAC3 ns2__Provider * SOAP_FMAC4 soap_in_ns2__Provider(struct soap*, const char*, ns2__Provider *, const char*);
SOAP_FMAC1 ns2__Provider * SOAP_FMAC2 soap_instantiate_ns2__Provider(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Provider * soap_new_ns2__Provider(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Provider(soap, n, NULL, NULL, NULL);
}

inline ns2__Provider * soap_new_req_ns2__Provider(
	struct soap *soap,
	const std::string& name)
{
	ns2__Provider *_p = ::soap_new_ns2__Provider(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Provider::name = name;
	}
	return _p;
}

inline ns2__Provider * soap_new_set_ns2__Provider(
	struct soap *soap,
	const std::string& name,
	const std::vector<ns2__ProviderField *> & field)
{
	ns2__Provider *_p = ::soap_new_ns2__Provider(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Provider::name = name;
		_p->ns2__Provider::field = field;
	}
	return _p;
}

inline int soap_write_ns2__Provider(struct soap *soap, ns2__Provider const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Provider", p->soap_type() == SOAP_TYPE_ns2__Provider ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Provider(struct soap *soap, const char *URL, ns2__Provider const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Provider", p->soap_type() == SOAP_TYPE_ns2__Provider ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Provider(struct soap *soap, const char *URL, ns2__Provider const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Provider", p->soap_type() == SOAP_TYPE_ns2__Provider ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Provider(struct soap *soap, const char *URL, ns2__Provider const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Provider", p->soap_type() == SOAP_TYPE_ns2__Provider ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Provider * SOAP_FMAC4 soap_get_ns2__Provider(struct soap*, ns2__Provider *, const char*, const char*);

inline int soap_read_ns2__Provider(struct soap *soap, ns2__Provider *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Provider(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Provider(struct soap *soap, const char *URL, ns2__Provider *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Provider(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Provider(struct soap *soap, ns2__Provider *p)
{
	if (::soap_read_ns2__Provider(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ProviderFields_DEFINED
#define SOAP_TYPE_ns2__ProviderFields_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ProviderFields(struct soap*, const char*, int, const ns2__ProviderFields *, const char*);
SOAP_FMAC3 ns2__ProviderFields * SOAP_FMAC4 soap_in_ns2__ProviderFields(struct soap*, const char*, ns2__ProviderFields *, const char*);
SOAP_FMAC1 ns2__ProviderFields * SOAP_FMAC2 soap_instantiate_ns2__ProviderFields(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ProviderFields * soap_new_ns2__ProviderFields(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ProviderFields(soap, n, NULL, NULL, NULL);
}

inline ns2__ProviderFields * soap_new_req_ns2__ProviderFields(
	struct soap *soap)
{
	ns2__ProviderFields *_p = ::soap_new_ns2__ProviderFields(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__ProviderFields * soap_new_set_ns2__ProviderFields(
	struct soap *soap,
	const std::vector<ns2__Provider *> & provider)
{
	ns2__ProviderFields *_p = ::soap_new_ns2__ProviderFields(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ProviderFields::provider = provider;
	}
	return _p;
}

inline int soap_write_ns2__ProviderFields(struct soap *soap, ns2__ProviderFields const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ProviderFields", p->soap_type() == SOAP_TYPE_ns2__ProviderFields ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ProviderFields(struct soap *soap, const char *URL, ns2__ProviderFields const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ProviderFields", p->soap_type() == SOAP_TYPE_ns2__ProviderFields ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ProviderFields(struct soap *soap, const char *URL, ns2__ProviderFields const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ProviderFields", p->soap_type() == SOAP_TYPE_ns2__ProviderFields ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ProviderFields(struct soap *soap, const char *URL, ns2__ProviderFields const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ProviderFields", p->soap_type() == SOAP_TYPE_ns2__ProviderFields ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ProviderFields * SOAP_FMAC4 soap_get_ns2__ProviderFields(struct soap*, ns2__ProviderFields *, const char*, const char*);

inline int soap_read_ns2__ProviderFields(struct soap *soap, ns2__ProviderFields *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ProviderFields(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ProviderFields(struct soap *soap, const char *URL, ns2__ProviderFields *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ProviderFields(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ProviderFields(struct soap *soap, ns2__ProviderFields *p)
{
	if (::soap_read_ns2__ProviderFields(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DecisionReply_DEFINED
#define SOAP_TYPE_ns2__DecisionReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DecisionReply(struct soap*, const char*, int, const ns2__DecisionReply *, const char*);
SOAP_FMAC3 ns2__DecisionReply * SOAP_FMAC4 soap_in_ns2__DecisionReply(struct soap*, const char*, ns2__DecisionReply *, const char*);
SOAP_FMAC1 ns2__DecisionReply * SOAP_FMAC2 soap_instantiate_ns2__DecisionReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DecisionReply * soap_new_ns2__DecisionReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DecisionReply(soap, n, NULL, NULL, NULL);
}

inline ns2__DecisionReply * soap_new_req_ns2__DecisionReply(
	struct soap *soap)
{
	ns2__DecisionReply *_p = ::soap_new_ns2__DecisionReply(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__DecisionReply * soap_new_set_ns2__DecisionReply(
	struct soap *soap,
	std::string *casePriority,
	ns2__ProfileReply *activeProfileReply,
	std::string *velocityInfoCode,
	ns2__AdditionalFields *additionalFields,
	ns2__MorphingElement *morphingElement,
	ns2__ProviderFields *providerFields,
	ns2__Travel *travel,
	std::string *unavailableInfoCode)
{
	ns2__DecisionReply *_p = ::soap_new_ns2__DecisionReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DecisionReply::casePriority = casePriority;
		_p->ns2__DecisionReply::activeProfileReply = activeProfileReply;
		_p->ns2__DecisionReply::velocityInfoCode = velocityInfoCode;
		_p->ns2__DecisionReply::additionalFields = additionalFields;
		_p->ns2__DecisionReply::morphingElement = morphingElement;
		_p->ns2__DecisionReply::providerFields = providerFields;
		_p->ns2__DecisionReply::travel = travel;
		_p->ns2__DecisionReply::unavailableInfoCode = unavailableInfoCode;
	}
	return _p;
}

inline int soap_write_ns2__DecisionReply(struct soap *soap, ns2__DecisionReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecisionReply", p->soap_type() == SOAP_TYPE_ns2__DecisionReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DecisionReply(struct soap *soap, const char *URL, ns2__DecisionReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecisionReply", p->soap_type() == SOAP_TYPE_ns2__DecisionReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DecisionReply(struct soap *soap, const char *URL, ns2__DecisionReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecisionReply", p->soap_type() == SOAP_TYPE_ns2__DecisionReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DecisionReply(struct soap *soap, const char *URL, ns2__DecisionReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecisionReply", p->soap_type() == SOAP_TYPE_ns2__DecisionReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DecisionReply * SOAP_FMAC4 soap_get_ns2__DecisionReply(struct soap*, ns2__DecisionReply *, const char*, const char*);

inline int soap_read_ns2__DecisionReply(struct soap *soap, ns2__DecisionReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DecisionReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DecisionReply(struct soap *soap, const char *URL, ns2__DecisionReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DecisionReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DecisionReply(struct soap *soap, ns2__DecisionReply *p)
{
	if (::soap_read_ns2__DecisionReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__RuleResultItems_DEFINED
#define SOAP_TYPE_ns2__RuleResultItems_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RuleResultItems(struct soap*, const char*, int, const ns2__RuleResultItems *, const char*);
SOAP_FMAC3 ns2__RuleResultItems * SOAP_FMAC4 soap_in_ns2__RuleResultItems(struct soap*, const char*, ns2__RuleResultItems *, const char*);
SOAP_FMAC1 ns2__RuleResultItems * SOAP_FMAC2 soap_instantiate_ns2__RuleResultItems(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RuleResultItems * soap_new_ns2__RuleResultItems(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__RuleResultItems(soap, n, NULL, NULL, NULL);
}

inline ns2__RuleResultItems * soap_new_req_ns2__RuleResultItems(
	struct soap *soap)
{
	ns2__RuleResultItems *_p = ::soap_new_ns2__RuleResultItems(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__RuleResultItems * soap_new_set_ns2__RuleResultItems(
	struct soap *soap,
	const std::vector<ns2__RuleResultItem *> & ruleResultItem)
{
	ns2__RuleResultItems *_p = ::soap_new_ns2__RuleResultItems(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__RuleResultItems::ruleResultItem = ruleResultItem;
	}
	return _p;
}

inline int soap_write_ns2__RuleResultItems(struct soap *soap, ns2__RuleResultItems const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RuleResultItems", p->soap_type() == SOAP_TYPE_ns2__RuleResultItems ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__RuleResultItems(struct soap *soap, const char *URL, ns2__RuleResultItems const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RuleResultItems", p->soap_type() == SOAP_TYPE_ns2__RuleResultItems ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__RuleResultItems(struct soap *soap, const char *URL, ns2__RuleResultItems const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RuleResultItems", p->soap_type() == SOAP_TYPE_ns2__RuleResultItems ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__RuleResultItems(struct soap *soap, const char *URL, ns2__RuleResultItems const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RuleResultItems", p->soap_type() == SOAP_TYPE_ns2__RuleResultItems ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__RuleResultItems * SOAP_FMAC4 soap_get_ns2__RuleResultItems(struct soap*, ns2__RuleResultItems *, const char*, const char*);

inline int soap_read_ns2__RuleResultItems(struct soap *soap, ns2__RuleResultItems *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__RuleResultItems(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__RuleResultItems(struct soap *soap, const char *URL, ns2__RuleResultItems *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__RuleResultItems(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__RuleResultItems(struct soap *soap, ns2__RuleResultItems *p)
{
	if (::soap_read_ns2__RuleResultItems(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__RuleResultItem_DEFINED
#define SOAP_TYPE_ns2__RuleResultItem_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RuleResultItem(struct soap*, const char*, int, const ns2__RuleResultItem *, const char*);
SOAP_FMAC3 ns2__RuleResultItem * SOAP_FMAC4 soap_in_ns2__RuleResultItem(struct soap*, const char*, ns2__RuleResultItem *, const char*);
SOAP_FMAC1 ns2__RuleResultItem * SOAP_FMAC2 soap_instantiate_ns2__RuleResultItem(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RuleResultItem * soap_new_ns2__RuleResultItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__RuleResultItem(soap, n, NULL, NULL, NULL);
}

inline ns2__RuleResultItem * soap_new_req_ns2__RuleResultItem(
	struct soap *soap)
{
	ns2__RuleResultItem *_p = ::soap_new_ns2__RuleResultItem(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__RuleResultItem * soap_new_set_ns2__RuleResultItem(
	struct soap *soap,
	std::string *name,
	std::string *decision,
	std::string *evaluation,
	std::string *ruleID)
{
	ns2__RuleResultItem *_p = ::soap_new_ns2__RuleResultItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__RuleResultItem::name = name;
		_p->ns2__RuleResultItem::decision = decision;
		_p->ns2__RuleResultItem::evaluation = evaluation;
		_p->ns2__RuleResultItem::ruleID = ruleID;
	}
	return _p;
}

inline int soap_write_ns2__RuleResultItem(struct soap *soap, ns2__RuleResultItem const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RuleResultItem", p->soap_type() == SOAP_TYPE_ns2__RuleResultItem ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__RuleResultItem(struct soap *soap, const char *URL, ns2__RuleResultItem const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RuleResultItem", p->soap_type() == SOAP_TYPE_ns2__RuleResultItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__RuleResultItem(struct soap *soap, const char *URL, ns2__RuleResultItem const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RuleResultItem", p->soap_type() == SOAP_TYPE_ns2__RuleResultItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__RuleResultItem(struct soap *soap, const char *URL, ns2__RuleResultItem const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RuleResultItem", p->soap_type() == SOAP_TYPE_ns2__RuleResultItem ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__RuleResultItem * SOAP_FMAC4 soap_get_ns2__RuleResultItem(struct soap*, ns2__RuleResultItem *, const char*, const char*);

inline int soap_read_ns2__RuleResultItem(struct soap *soap, ns2__RuleResultItem *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__RuleResultItem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__RuleResultItem(struct soap *soap, const char *URL, ns2__RuleResultItem *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__RuleResultItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__RuleResultItem(struct soap *soap, ns2__RuleResultItem *p)
{
	if (::soap_read_ns2__RuleResultItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CaseManagementActionReply_DEFINED
#define SOAP_TYPE_ns2__CaseManagementActionReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CaseManagementActionReply(struct soap*, const char*, int, const ns2__CaseManagementActionReply *, const char*);
SOAP_FMAC3 ns2__CaseManagementActionReply * SOAP_FMAC4 soap_in_ns2__CaseManagementActionReply(struct soap*, const char*, ns2__CaseManagementActionReply *, const char*);
SOAP_FMAC1 ns2__CaseManagementActionReply * SOAP_FMAC2 soap_instantiate_ns2__CaseManagementActionReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CaseManagementActionReply * soap_new_ns2__CaseManagementActionReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CaseManagementActionReply(soap, n, NULL, NULL, NULL);
}

inline ns2__CaseManagementActionReply * soap_new_req_ns2__CaseManagementActionReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__CaseManagementActionReply *_p = ::soap_new_ns2__CaseManagementActionReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CaseManagementActionReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__CaseManagementActionReply * soap_new_set_ns2__CaseManagementActionReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__CaseManagementActionReply *_p = ::soap_new_ns2__CaseManagementActionReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CaseManagementActionReply::reasonCode = reasonCode;
	}
	return _p;
}

inline int soap_write_ns2__CaseManagementActionReply(struct soap *soap, ns2__CaseManagementActionReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CaseManagementActionReply", p->soap_type() == SOAP_TYPE_ns2__CaseManagementActionReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CaseManagementActionReply(struct soap *soap, const char *URL, ns2__CaseManagementActionReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CaseManagementActionReply", p->soap_type() == SOAP_TYPE_ns2__CaseManagementActionReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CaseManagementActionReply(struct soap *soap, const char *URL, ns2__CaseManagementActionReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CaseManagementActionReply", p->soap_type() == SOAP_TYPE_ns2__CaseManagementActionReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CaseManagementActionReply(struct soap *soap, const char *URL, ns2__CaseManagementActionReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CaseManagementActionReply", p->soap_type() == SOAP_TYPE_ns2__CaseManagementActionReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CaseManagementActionReply * SOAP_FMAC4 soap_get_ns2__CaseManagementActionReply(struct soap*, ns2__CaseManagementActionReply *, const char*, const char*);

inline int soap_read_ns2__CaseManagementActionReply(struct soap *soap, ns2__CaseManagementActionReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CaseManagementActionReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CaseManagementActionReply(struct soap *soap, const char *URL, ns2__CaseManagementActionReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CaseManagementActionReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CaseManagementActionReply(struct soap *soap, ns2__CaseManagementActionReply *p)
{
	if (::soap_read_ns2__CaseManagementActionReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__FraudUpdateReply_DEFINED
#define SOAP_TYPE_ns2__FraudUpdateReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FraudUpdateReply(struct soap*, const char*, int, const ns2__FraudUpdateReply *, const char*);
SOAP_FMAC3 ns2__FraudUpdateReply * SOAP_FMAC4 soap_in_ns2__FraudUpdateReply(struct soap*, const char*, ns2__FraudUpdateReply *, const char*);
SOAP_FMAC1 ns2__FraudUpdateReply * SOAP_FMAC2 soap_instantiate_ns2__FraudUpdateReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FraudUpdateReply * soap_new_ns2__FraudUpdateReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__FraudUpdateReply(soap, n, NULL, NULL, NULL);
}

inline ns2__FraudUpdateReply * soap_new_req_ns2__FraudUpdateReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__FraudUpdateReply *_p = ::soap_new_ns2__FraudUpdateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__FraudUpdateReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__FraudUpdateReply * soap_new_set_ns2__FraudUpdateReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__FraudUpdateReply *_p = ::soap_new_ns2__FraudUpdateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__FraudUpdateReply::reasonCode = reasonCode;
	}
	return _p;
}

inline int soap_write_ns2__FraudUpdateReply(struct soap *soap, ns2__FraudUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FraudUpdateReply", p->soap_type() == SOAP_TYPE_ns2__FraudUpdateReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__FraudUpdateReply(struct soap *soap, const char *URL, ns2__FraudUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FraudUpdateReply", p->soap_type() == SOAP_TYPE_ns2__FraudUpdateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__FraudUpdateReply(struct soap *soap, const char *URL, ns2__FraudUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FraudUpdateReply", p->soap_type() == SOAP_TYPE_ns2__FraudUpdateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__FraudUpdateReply(struct soap *soap, const char *URL, ns2__FraudUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FraudUpdateReply", p->soap_type() == SOAP_TYPE_ns2__FraudUpdateReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__FraudUpdateReply * SOAP_FMAC4 soap_get_ns2__FraudUpdateReply(struct soap*, ns2__FraudUpdateReply *, const char*, const char*);

inline int soap_read_ns2__FraudUpdateReply(struct soap *soap, ns2__FraudUpdateReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__FraudUpdateReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__FraudUpdateReply(struct soap *soap, const char *URL, ns2__FraudUpdateReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__FraudUpdateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__FraudUpdateReply(struct soap *soap, ns2__FraudUpdateReply *p)
{
	if (::soap_read_ns2__FraudUpdateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__RiskUpdateReply_DEFINED
#define SOAP_TYPE_ns2__RiskUpdateReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RiskUpdateReply(struct soap*, const char*, int, const ns2__RiskUpdateReply *, const char*);
SOAP_FMAC3 ns2__RiskUpdateReply * SOAP_FMAC4 soap_in_ns2__RiskUpdateReply(struct soap*, const char*, ns2__RiskUpdateReply *, const char*);
SOAP_FMAC1 ns2__RiskUpdateReply * SOAP_FMAC2 soap_instantiate_ns2__RiskUpdateReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RiskUpdateReply * soap_new_ns2__RiskUpdateReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__RiskUpdateReply(soap, n, NULL, NULL, NULL);
}

inline ns2__RiskUpdateReply * soap_new_req_ns2__RiskUpdateReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__RiskUpdateReply *_p = ::soap_new_ns2__RiskUpdateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__RiskUpdateReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__RiskUpdateReply * soap_new_set_ns2__RiskUpdateReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__RiskUpdateReply *_p = ::soap_new_ns2__RiskUpdateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__RiskUpdateReply::reasonCode = reasonCode;
	}
	return _p;
}

inline int soap_write_ns2__RiskUpdateReply(struct soap *soap, ns2__RiskUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RiskUpdateReply", p->soap_type() == SOAP_TYPE_ns2__RiskUpdateReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__RiskUpdateReply(struct soap *soap, const char *URL, ns2__RiskUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RiskUpdateReply", p->soap_type() == SOAP_TYPE_ns2__RiskUpdateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__RiskUpdateReply(struct soap *soap, const char *URL, ns2__RiskUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RiskUpdateReply", p->soap_type() == SOAP_TYPE_ns2__RiskUpdateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__RiskUpdateReply(struct soap *soap, const char *URL, ns2__RiskUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RiskUpdateReply", p->soap_type() == SOAP_TYPE_ns2__RiskUpdateReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__RiskUpdateReply * SOAP_FMAC4 soap_get_ns2__RiskUpdateReply(struct soap*, ns2__RiskUpdateReply *, const char*, const char*);

inline int soap_read_ns2__RiskUpdateReply(struct soap *soap, ns2__RiskUpdateReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__RiskUpdateReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__RiskUpdateReply(struct soap *soap, const char *URL, ns2__RiskUpdateReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__RiskUpdateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__RiskUpdateReply(struct soap *soap, ns2__RiskUpdateReply *p)
{
	if (::soap_read_ns2__RiskUpdateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalDoRefTransactionReply_DEFINED
#define SOAP_TYPE_ns2__PayPalDoRefTransactionReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalDoRefTransactionReply(struct soap*, const char*, int, const ns2__PayPalDoRefTransactionReply *, const char*);
SOAP_FMAC3 ns2__PayPalDoRefTransactionReply * SOAP_FMAC4 soap_in_ns2__PayPalDoRefTransactionReply(struct soap*, const char*, ns2__PayPalDoRefTransactionReply *, const char*);
SOAP_FMAC1 ns2__PayPalDoRefTransactionReply * SOAP_FMAC2 soap_instantiate_ns2__PayPalDoRefTransactionReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalDoRefTransactionReply * soap_new_ns2__PayPalDoRefTransactionReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalDoRefTransactionReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalDoRefTransactionReply * soap_new_req_ns2__PayPalDoRefTransactionReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayPalDoRefTransactionReply *_p = ::soap_new_ns2__PayPalDoRefTransactionReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalDoRefTransactionReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayPalDoRefTransactionReply * soap_new_set_ns2__PayPalDoRefTransactionReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *paypalBillingAgreementId,
	std::string *transactionId,
	std::string *paypalTransactionType,
	std::string *paypalPaymentType,
	std::string *paypalOrderTime,
	std::string *paypalAmount,
	std::string *currency,
	std::string *paypalTaxAmount,
	std::string *paypalExchangeRate,
	std::string *paypalPaymentStatus,
	std::string *paypalPendingReason,
	std::string *paypalReasonCode,
	std::string *errorCode,
	std::string *correlationID)
{
	ns2__PayPalDoRefTransactionReply *_p = ::soap_new_ns2__PayPalDoRefTransactionReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalDoRefTransactionReply::reasonCode = reasonCode;
		_p->ns2__PayPalDoRefTransactionReply::paypalBillingAgreementId = paypalBillingAgreementId;
		_p->ns2__PayPalDoRefTransactionReply::transactionId = transactionId;
		_p->ns2__PayPalDoRefTransactionReply::paypalTransactionType = paypalTransactionType;
		_p->ns2__PayPalDoRefTransactionReply::paypalPaymentType = paypalPaymentType;
		_p->ns2__PayPalDoRefTransactionReply::paypalOrderTime = paypalOrderTime;
		_p->ns2__PayPalDoRefTransactionReply::paypalAmount = paypalAmount;
		_p->ns2__PayPalDoRefTransactionReply::currency = currency;
		_p->ns2__PayPalDoRefTransactionReply::paypalTaxAmount = paypalTaxAmount;
		_p->ns2__PayPalDoRefTransactionReply::paypalExchangeRate = paypalExchangeRate;
		_p->ns2__PayPalDoRefTransactionReply::paypalPaymentStatus = paypalPaymentStatus;
		_p->ns2__PayPalDoRefTransactionReply::paypalPendingReason = paypalPendingReason;
		_p->ns2__PayPalDoRefTransactionReply::paypalReasonCode = paypalReasonCode;
		_p->ns2__PayPalDoRefTransactionReply::errorCode = errorCode;
		_p->ns2__PayPalDoRefTransactionReply::correlationID = correlationID;
	}
	return _p;
}

inline int soap_write_ns2__PayPalDoRefTransactionReply(struct soap *soap, ns2__PayPalDoRefTransactionReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalDoRefTransactionReply", p->soap_type() == SOAP_TYPE_ns2__PayPalDoRefTransactionReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalDoRefTransactionReply(struct soap *soap, const char *URL, ns2__PayPalDoRefTransactionReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalDoRefTransactionReply", p->soap_type() == SOAP_TYPE_ns2__PayPalDoRefTransactionReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalDoRefTransactionReply(struct soap *soap, const char *URL, ns2__PayPalDoRefTransactionReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalDoRefTransactionReply", p->soap_type() == SOAP_TYPE_ns2__PayPalDoRefTransactionReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalDoRefTransactionReply(struct soap *soap, const char *URL, ns2__PayPalDoRefTransactionReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalDoRefTransactionReply", p->soap_type() == SOAP_TYPE_ns2__PayPalDoRefTransactionReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalDoRefTransactionReply * SOAP_FMAC4 soap_get_ns2__PayPalDoRefTransactionReply(struct soap*, ns2__PayPalDoRefTransactionReply *, const char*, const char*);

inline int soap_read_ns2__PayPalDoRefTransactionReply(struct soap *soap, ns2__PayPalDoRefTransactionReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalDoRefTransactionReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalDoRefTransactionReply(struct soap *soap, const char *URL, ns2__PayPalDoRefTransactionReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalDoRefTransactionReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalDoRefTransactionReply(struct soap *soap, ns2__PayPalDoRefTransactionReply *p)
{
	if (::soap_read_ns2__PayPalDoRefTransactionReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalCreateAgreementReply_DEFINED
#define SOAP_TYPE_ns2__PayPalCreateAgreementReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalCreateAgreementReply(struct soap*, const char*, int, const ns2__PayPalCreateAgreementReply *, const char*);
SOAP_FMAC3 ns2__PayPalCreateAgreementReply * SOAP_FMAC4 soap_in_ns2__PayPalCreateAgreementReply(struct soap*, const char*, ns2__PayPalCreateAgreementReply *, const char*);
SOAP_FMAC1 ns2__PayPalCreateAgreementReply * SOAP_FMAC2 soap_instantiate_ns2__PayPalCreateAgreementReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalCreateAgreementReply * soap_new_ns2__PayPalCreateAgreementReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalCreateAgreementReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalCreateAgreementReply * soap_new_req_ns2__PayPalCreateAgreementReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayPalCreateAgreementReply *_p = ::soap_new_ns2__PayPalCreateAgreementReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalCreateAgreementReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayPalCreateAgreementReply * soap_new_set_ns2__PayPalCreateAgreementReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *paypalBillingAgreementId,
	std::string *errorCode,
	std::string *correlationID)
{
	ns2__PayPalCreateAgreementReply *_p = ::soap_new_ns2__PayPalCreateAgreementReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalCreateAgreementReply::reasonCode = reasonCode;
		_p->ns2__PayPalCreateAgreementReply::paypalBillingAgreementId = paypalBillingAgreementId;
		_p->ns2__PayPalCreateAgreementReply::errorCode = errorCode;
		_p->ns2__PayPalCreateAgreementReply::correlationID = correlationID;
	}
	return _p;
}

inline int soap_write_ns2__PayPalCreateAgreementReply(struct soap *soap, ns2__PayPalCreateAgreementReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalCreateAgreementReply", p->soap_type() == SOAP_TYPE_ns2__PayPalCreateAgreementReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalCreateAgreementReply(struct soap *soap, const char *URL, ns2__PayPalCreateAgreementReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalCreateAgreementReply", p->soap_type() == SOAP_TYPE_ns2__PayPalCreateAgreementReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalCreateAgreementReply(struct soap *soap, const char *URL, ns2__PayPalCreateAgreementReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalCreateAgreementReply", p->soap_type() == SOAP_TYPE_ns2__PayPalCreateAgreementReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalCreateAgreementReply(struct soap *soap, const char *URL, ns2__PayPalCreateAgreementReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalCreateAgreementReply", p->soap_type() == SOAP_TYPE_ns2__PayPalCreateAgreementReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalCreateAgreementReply * SOAP_FMAC4 soap_get_ns2__PayPalCreateAgreementReply(struct soap*, ns2__PayPalCreateAgreementReply *, const char*, const char*);

inline int soap_read_ns2__PayPalCreateAgreementReply(struct soap *soap, ns2__PayPalCreateAgreementReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalCreateAgreementReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalCreateAgreementReply(struct soap *soap, const char *URL, ns2__PayPalCreateAgreementReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalCreateAgreementReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalCreateAgreementReply(struct soap *soap, ns2__PayPalCreateAgreementReply *p)
{
	if (::soap_read_ns2__PayPalCreateAgreementReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalUpdateAgreementReply_DEFINED
#define SOAP_TYPE_ns2__PayPalUpdateAgreementReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalUpdateAgreementReply(struct soap*, const char*, int, const ns2__PayPalUpdateAgreementReply *, const char*);
SOAP_FMAC3 ns2__PayPalUpdateAgreementReply * SOAP_FMAC4 soap_in_ns2__PayPalUpdateAgreementReply(struct soap*, const char*, ns2__PayPalUpdateAgreementReply *, const char*);
SOAP_FMAC1 ns2__PayPalUpdateAgreementReply * SOAP_FMAC2 soap_instantiate_ns2__PayPalUpdateAgreementReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalUpdateAgreementReply * soap_new_ns2__PayPalUpdateAgreementReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalUpdateAgreementReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalUpdateAgreementReply * soap_new_req_ns2__PayPalUpdateAgreementReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayPalUpdateAgreementReply *_p = ::soap_new_ns2__PayPalUpdateAgreementReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalUpdateAgreementReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayPalUpdateAgreementReply * soap_new_set_ns2__PayPalUpdateAgreementReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *paypalBillingAgreementId,
	std::string *paypalBillingAgreementDesc,
	std::string *paypalBillingAgreementCustom,
	std::string *paypalBillingAgreementStatus,
	std::string *payer,
	std::string *payerId,
	std::string *payerStatus,
	std::string *payerCountry,
	std::string *payerBusiness,
	std::string *payerSalutation,
	std::string *payerFirstname,
	std::string *payerMiddlename,
	std::string *payerLastname,
	std::string *payerSuffix,
	std::string *addressStatus,
	std::string *errorCode,
	std::string *correlationID)
{
	ns2__PayPalUpdateAgreementReply *_p = ::soap_new_ns2__PayPalUpdateAgreementReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalUpdateAgreementReply::reasonCode = reasonCode;
		_p->ns2__PayPalUpdateAgreementReply::paypalBillingAgreementId = paypalBillingAgreementId;
		_p->ns2__PayPalUpdateAgreementReply::paypalBillingAgreementDesc = paypalBillingAgreementDesc;
		_p->ns2__PayPalUpdateAgreementReply::paypalBillingAgreementCustom = paypalBillingAgreementCustom;
		_p->ns2__PayPalUpdateAgreementReply::paypalBillingAgreementStatus = paypalBillingAgreementStatus;
		_p->ns2__PayPalUpdateAgreementReply::payer = payer;
		_p->ns2__PayPalUpdateAgreementReply::payerId = payerId;
		_p->ns2__PayPalUpdateAgreementReply::payerStatus = payerStatus;
		_p->ns2__PayPalUpdateAgreementReply::payerCountry = payerCountry;
		_p->ns2__PayPalUpdateAgreementReply::payerBusiness = payerBusiness;
		_p->ns2__PayPalUpdateAgreementReply::payerSalutation = payerSalutation;
		_p->ns2__PayPalUpdateAgreementReply::payerFirstname = payerFirstname;
		_p->ns2__PayPalUpdateAgreementReply::payerMiddlename = payerMiddlename;
		_p->ns2__PayPalUpdateAgreementReply::payerLastname = payerLastname;
		_p->ns2__PayPalUpdateAgreementReply::payerSuffix = payerSuffix;
		_p->ns2__PayPalUpdateAgreementReply::addressStatus = addressStatus;
		_p->ns2__PayPalUpdateAgreementReply::errorCode = errorCode;
		_p->ns2__PayPalUpdateAgreementReply::correlationID = correlationID;
	}
	return _p;
}

inline int soap_write_ns2__PayPalUpdateAgreementReply(struct soap *soap, ns2__PayPalUpdateAgreementReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalUpdateAgreementReply", p->soap_type() == SOAP_TYPE_ns2__PayPalUpdateAgreementReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalUpdateAgreementReply(struct soap *soap, const char *URL, ns2__PayPalUpdateAgreementReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalUpdateAgreementReply", p->soap_type() == SOAP_TYPE_ns2__PayPalUpdateAgreementReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalUpdateAgreementReply(struct soap *soap, const char *URL, ns2__PayPalUpdateAgreementReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalUpdateAgreementReply", p->soap_type() == SOAP_TYPE_ns2__PayPalUpdateAgreementReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalUpdateAgreementReply(struct soap *soap, const char *URL, ns2__PayPalUpdateAgreementReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalUpdateAgreementReply", p->soap_type() == SOAP_TYPE_ns2__PayPalUpdateAgreementReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalUpdateAgreementReply * SOAP_FMAC4 soap_get_ns2__PayPalUpdateAgreementReply(struct soap*, ns2__PayPalUpdateAgreementReply *, const char*, const char*);

inline int soap_read_ns2__PayPalUpdateAgreementReply(struct soap *soap, ns2__PayPalUpdateAgreementReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalUpdateAgreementReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalUpdateAgreementReply(struct soap *soap, const char *URL, ns2__PayPalUpdateAgreementReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalUpdateAgreementReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalUpdateAgreementReply(struct soap *soap, ns2__PayPalUpdateAgreementReply *p)
{
	if (::soap_read_ns2__PayPalUpdateAgreementReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalAuthorizationReply_DEFINED
#define SOAP_TYPE_ns2__PayPalAuthorizationReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalAuthorizationReply(struct soap*, const char*, int, const ns2__PayPalAuthorizationReply *, const char*);
SOAP_FMAC3 ns2__PayPalAuthorizationReply * SOAP_FMAC4 soap_in_ns2__PayPalAuthorizationReply(struct soap*, const char*, ns2__PayPalAuthorizationReply *, const char*);
SOAP_FMAC1 ns2__PayPalAuthorizationReply * SOAP_FMAC2 soap_instantiate_ns2__PayPalAuthorizationReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalAuthorizationReply * soap_new_ns2__PayPalAuthorizationReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalAuthorizationReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalAuthorizationReply * soap_new_req_ns2__PayPalAuthorizationReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayPalAuthorizationReply *_p = ::soap_new_ns2__PayPalAuthorizationReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalAuthorizationReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayPalAuthorizationReply * soap_new_set_ns2__PayPalAuthorizationReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *transactionId,
	std::string *paypalAmount,
	std::string *amount,
	std::string *currency,
	std::string *correlationID,
	std::string *errorCode,
	std::string *protectionEligibility,
	std::string *protectionEligibilityType)
{
	ns2__PayPalAuthorizationReply *_p = ::soap_new_ns2__PayPalAuthorizationReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalAuthorizationReply::reasonCode = reasonCode;
		_p->ns2__PayPalAuthorizationReply::transactionId = transactionId;
		_p->ns2__PayPalAuthorizationReply::paypalAmount = paypalAmount;
		_p->ns2__PayPalAuthorizationReply::amount = amount;
		_p->ns2__PayPalAuthorizationReply::currency = currency;
		_p->ns2__PayPalAuthorizationReply::correlationID = correlationID;
		_p->ns2__PayPalAuthorizationReply::errorCode = errorCode;
		_p->ns2__PayPalAuthorizationReply::protectionEligibility = protectionEligibility;
		_p->ns2__PayPalAuthorizationReply::protectionEligibilityType = protectionEligibilityType;
	}
	return _p;
}

inline int soap_write_ns2__PayPalAuthorizationReply(struct soap *soap, ns2__PayPalAuthorizationReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalAuthorizationReply", p->soap_type() == SOAP_TYPE_ns2__PayPalAuthorizationReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalAuthorizationReply(struct soap *soap, const char *URL, ns2__PayPalAuthorizationReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalAuthorizationReply", p->soap_type() == SOAP_TYPE_ns2__PayPalAuthorizationReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalAuthorizationReply(struct soap *soap, const char *URL, ns2__PayPalAuthorizationReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalAuthorizationReply", p->soap_type() == SOAP_TYPE_ns2__PayPalAuthorizationReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalAuthorizationReply(struct soap *soap, const char *URL, ns2__PayPalAuthorizationReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalAuthorizationReply", p->soap_type() == SOAP_TYPE_ns2__PayPalAuthorizationReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalAuthorizationReply * SOAP_FMAC4 soap_get_ns2__PayPalAuthorizationReply(struct soap*, ns2__PayPalAuthorizationReply *, const char*, const char*);

inline int soap_read_ns2__PayPalAuthorizationReply(struct soap *soap, ns2__PayPalAuthorizationReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalAuthorizationReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalAuthorizationReply(struct soap *soap, const char *URL, ns2__PayPalAuthorizationReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalAuthorizationReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalAuthorizationReply(struct soap *soap, ns2__PayPalAuthorizationReply *p)
{
	if (::soap_read_ns2__PayPalAuthorizationReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalEcOrderSetupReply_DEFINED
#define SOAP_TYPE_ns2__PayPalEcOrderSetupReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalEcOrderSetupReply(struct soap*, const char*, int, const ns2__PayPalEcOrderSetupReply *, const char*);
SOAP_FMAC3 ns2__PayPalEcOrderSetupReply * SOAP_FMAC4 soap_in_ns2__PayPalEcOrderSetupReply(struct soap*, const char*, ns2__PayPalEcOrderSetupReply *, const char*);
SOAP_FMAC1 ns2__PayPalEcOrderSetupReply * SOAP_FMAC2 soap_instantiate_ns2__PayPalEcOrderSetupReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalEcOrderSetupReply * soap_new_ns2__PayPalEcOrderSetupReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalEcOrderSetupReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalEcOrderSetupReply * soap_new_req_ns2__PayPalEcOrderSetupReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayPalEcOrderSetupReply *_p = ::soap_new_ns2__PayPalEcOrderSetupReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalEcOrderSetupReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayPalEcOrderSetupReply * soap_new_set_ns2__PayPalEcOrderSetupReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *paypalToken,
	std::string *transactionId,
	std::string *paypalTransactiontype,
	std::string *paymentType,
	std::string *paypalOrderTime,
	std::string *paypalAmount,
	std::string *paypalFeeAmount,
	std::string *paypalTaxAmount,
	std::string *paypalExchangeRate,
	std::string *paypalPaymentStatus,
	std::string *paypalPendingReason,
	std::string *paypalReasonCode,
	std::string *amount,
	std::string *currency,
	std::string *correlationID,
	std::string *errorCode)
{
	ns2__PayPalEcOrderSetupReply *_p = ::soap_new_ns2__PayPalEcOrderSetupReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalEcOrderSetupReply::reasonCode = reasonCode;
		_p->ns2__PayPalEcOrderSetupReply::paypalToken = paypalToken;
		_p->ns2__PayPalEcOrderSetupReply::transactionId = transactionId;
		_p->ns2__PayPalEcOrderSetupReply::paypalTransactiontype = paypalTransactiontype;
		_p->ns2__PayPalEcOrderSetupReply::paymentType = paymentType;
		_p->ns2__PayPalEcOrderSetupReply::paypalOrderTime = paypalOrderTime;
		_p->ns2__PayPalEcOrderSetupReply::paypalAmount = paypalAmount;
		_p->ns2__PayPalEcOrderSetupReply::paypalFeeAmount = paypalFeeAmount;
		_p->ns2__PayPalEcOrderSetupReply::paypalTaxAmount = paypalTaxAmount;
		_p->ns2__PayPalEcOrderSetupReply::paypalExchangeRate = paypalExchangeRate;
		_p->ns2__PayPalEcOrderSetupReply::paypalPaymentStatus = paypalPaymentStatus;
		_p->ns2__PayPalEcOrderSetupReply::paypalPendingReason = paypalPendingReason;
		_p->ns2__PayPalEcOrderSetupReply::paypalReasonCode = paypalReasonCode;
		_p->ns2__PayPalEcOrderSetupReply::amount = amount;
		_p->ns2__PayPalEcOrderSetupReply::currency = currency;
		_p->ns2__PayPalEcOrderSetupReply::correlationID = correlationID;
		_p->ns2__PayPalEcOrderSetupReply::errorCode = errorCode;
	}
	return _p;
}

inline int soap_write_ns2__PayPalEcOrderSetupReply(struct soap *soap, ns2__PayPalEcOrderSetupReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcOrderSetupReply", p->soap_type() == SOAP_TYPE_ns2__PayPalEcOrderSetupReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalEcOrderSetupReply(struct soap *soap, const char *URL, ns2__PayPalEcOrderSetupReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcOrderSetupReply", p->soap_type() == SOAP_TYPE_ns2__PayPalEcOrderSetupReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalEcOrderSetupReply(struct soap *soap, const char *URL, ns2__PayPalEcOrderSetupReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcOrderSetupReply", p->soap_type() == SOAP_TYPE_ns2__PayPalEcOrderSetupReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalEcOrderSetupReply(struct soap *soap, const char *URL, ns2__PayPalEcOrderSetupReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcOrderSetupReply", p->soap_type() == SOAP_TYPE_ns2__PayPalEcOrderSetupReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalEcOrderSetupReply * SOAP_FMAC4 soap_get_ns2__PayPalEcOrderSetupReply(struct soap*, ns2__PayPalEcOrderSetupReply *, const char*, const char*);

inline int soap_read_ns2__PayPalEcOrderSetupReply(struct soap *soap, ns2__PayPalEcOrderSetupReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalEcOrderSetupReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalEcOrderSetupReply(struct soap *soap, const char *URL, ns2__PayPalEcOrderSetupReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalEcOrderSetupReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalEcOrderSetupReply(struct soap *soap, ns2__PayPalEcOrderSetupReply *p)
{
	if (::soap_read_ns2__PayPalEcOrderSetupReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalRefundReply_DEFINED
#define SOAP_TYPE_ns2__PayPalRefundReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalRefundReply(struct soap*, const char*, int, const ns2__PayPalRefundReply *, const char*);
SOAP_FMAC3 ns2__PayPalRefundReply * SOAP_FMAC4 soap_in_ns2__PayPalRefundReply(struct soap*, const char*, ns2__PayPalRefundReply *, const char*);
SOAP_FMAC1 ns2__PayPalRefundReply * SOAP_FMAC2 soap_instantiate_ns2__PayPalRefundReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalRefundReply * soap_new_ns2__PayPalRefundReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalRefundReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalRefundReply * soap_new_req_ns2__PayPalRefundReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayPalRefundReply *_p = ::soap_new_ns2__PayPalRefundReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalRefundReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayPalRefundReply * soap_new_set_ns2__PayPalRefundReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *transactionId,
	std::string *paypalNetRefundAmount,
	std::string *paypalFeeRefundAmount,
	std::string *paypalGrossRefundAmount,
	std::string *correlationID,
	std::string *errorCode)
{
	ns2__PayPalRefundReply *_p = ::soap_new_ns2__PayPalRefundReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalRefundReply::reasonCode = reasonCode;
		_p->ns2__PayPalRefundReply::transactionId = transactionId;
		_p->ns2__PayPalRefundReply::paypalNetRefundAmount = paypalNetRefundAmount;
		_p->ns2__PayPalRefundReply::paypalFeeRefundAmount = paypalFeeRefundAmount;
		_p->ns2__PayPalRefundReply::paypalGrossRefundAmount = paypalGrossRefundAmount;
		_p->ns2__PayPalRefundReply::correlationID = correlationID;
		_p->ns2__PayPalRefundReply::errorCode = errorCode;
	}
	return _p;
}

inline int soap_write_ns2__PayPalRefundReply(struct soap *soap, ns2__PayPalRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalRefundReply", p->soap_type() == SOAP_TYPE_ns2__PayPalRefundReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalRefundReply(struct soap *soap, const char *URL, ns2__PayPalRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalRefundReply", p->soap_type() == SOAP_TYPE_ns2__PayPalRefundReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalRefundReply(struct soap *soap, const char *URL, ns2__PayPalRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalRefundReply", p->soap_type() == SOAP_TYPE_ns2__PayPalRefundReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalRefundReply(struct soap *soap, const char *URL, ns2__PayPalRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalRefundReply", p->soap_type() == SOAP_TYPE_ns2__PayPalRefundReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalRefundReply * SOAP_FMAC4 soap_get_ns2__PayPalRefundReply(struct soap*, ns2__PayPalRefundReply *, const char*, const char*);

inline int soap_read_ns2__PayPalRefundReply(struct soap *soap, ns2__PayPalRefundReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalRefundReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalRefundReply(struct soap *soap, const char *URL, ns2__PayPalRefundReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalRefundReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalRefundReply(struct soap *soap, ns2__PayPalRefundReply *p)
{
	if (::soap_read_ns2__PayPalRefundReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalAuthReversalReply_DEFINED
#define SOAP_TYPE_ns2__PayPalAuthReversalReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalAuthReversalReply(struct soap*, const char*, int, const ns2__PayPalAuthReversalReply *, const char*);
SOAP_FMAC3 ns2__PayPalAuthReversalReply * SOAP_FMAC4 soap_in_ns2__PayPalAuthReversalReply(struct soap*, const char*, ns2__PayPalAuthReversalReply *, const char*);
SOAP_FMAC1 ns2__PayPalAuthReversalReply * SOAP_FMAC2 soap_instantiate_ns2__PayPalAuthReversalReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalAuthReversalReply * soap_new_ns2__PayPalAuthReversalReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalAuthReversalReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalAuthReversalReply * soap_new_req_ns2__PayPalAuthReversalReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayPalAuthReversalReply *_p = ::soap_new_ns2__PayPalAuthReversalReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalAuthReversalReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayPalAuthReversalReply * soap_new_set_ns2__PayPalAuthReversalReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *authorizationId,
	std::string *correlationID,
	std::string *errorCode)
{
	ns2__PayPalAuthReversalReply *_p = ::soap_new_ns2__PayPalAuthReversalReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalAuthReversalReply::reasonCode = reasonCode;
		_p->ns2__PayPalAuthReversalReply::authorizationId = authorizationId;
		_p->ns2__PayPalAuthReversalReply::correlationID = correlationID;
		_p->ns2__PayPalAuthReversalReply::errorCode = errorCode;
	}
	return _p;
}

inline int soap_write_ns2__PayPalAuthReversalReply(struct soap *soap, ns2__PayPalAuthReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalAuthReversalReply", p->soap_type() == SOAP_TYPE_ns2__PayPalAuthReversalReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalAuthReversalReply(struct soap *soap, const char *URL, ns2__PayPalAuthReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalAuthReversalReply", p->soap_type() == SOAP_TYPE_ns2__PayPalAuthReversalReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalAuthReversalReply(struct soap *soap, const char *URL, ns2__PayPalAuthReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalAuthReversalReply", p->soap_type() == SOAP_TYPE_ns2__PayPalAuthReversalReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalAuthReversalReply(struct soap *soap, const char *URL, ns2__PayPalAuthReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalAuthReversalReply", p->soap_type() == SOAP_TYPE_ns2__PayPalAuthReversalReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalAuthReversalReply * SOAP_FMAC4 soap_get_ns2__PayPalAuthReversalReply(struct soap*, ns2__PayPalAuthReversalReply *, const char*, const char*);

inline int soap_read_ns2__PayPalAuthReversalReply(struct soap *soap, ns2__PayPalAuthReversalReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalAuthReversalReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalAuthReversalReply(struct soap *soap, const char *URL, ns2__PayPalAuthReversalReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalAuthReversalReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalAuthReversalReply(struct soap *soap, ns2__PayPalAuthReversalReply *p)
{
	if (::soap_read_ns2__PayPalAuthReversalReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalDoCaptureReply_DEFINED
#define SOAP_TYPE_ns2__PayPalDoCaptureReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalDoCaptureReply(struct soap*, const char*, int, const ns2__PayPalDoCaptureReply *, const char*);
SOAP_FMAC3 ns2__PayPalDoCaptureReply * SOAP_FMAC4 soap_in_ns2__PayPalDoCaptureReply(struct soap*, const char*, ns2__PayPalDoCaptureReply *, const char*);
SOAP_FMAC1 ns2__PayPalDoCaptureReply * SOAP_FMAC2 soap_instantiate_ns2__PayPalDoCaptureReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalDoCaptureReply * soap_new_ns2__PayPalDoCaptureReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalDoCaptureReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalDoCaptureReply * soap_new_req_ns2__PayPalDoCaptureReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayPalDoCaptureReply *_p = ::soap_new_ns2__PayPalDoCaptureReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalDoCaptureReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayPalDoCaptureReply * soap_new_set_ns2__PayPalDoCaptureReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *authorizationId,
	std::string *transactionId,
	std::string *parentTransactionId,
	std::string *paypalReceiptId,
	std::string *paypalTransactiontype,
	std::string *paypalPaymentType,
	std::string *paypalOrderTime,
	std::string *paypalPaymentGrossAmount,
	std::string *paypalFeeAmount,
	std::string *paypalTaxAmount,
	std::string *paypalExchangeRate,
	std::string *paypalPaymentStatus,
	std::string *amount,
	std::string *currency,
	std::string *correlationID,
	std::string *errorCode,
	std::string *paypalPendingReason)
{
	ns2__PayPalDoCaptureReply *_p = ::soap_new_ns2__PayPalDoCaptureReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalDoCaptureReply::reasonCode = reasonCode;
		_p->ns2__PayPalDoCaptureReply::authorizationId = authorizationId;
		_p->ns2__PayPalDoCaptureReply::transactionId = transactionId;
		_p->ns2__PayPalDoCaptureReply::parentTransactionId = parentTransactionId;
		_p->ns2__PayPalDoCaptureReply::paypalReceiptId = paypalReceiptId;
		_p->ns2__PayPalDoCaptureReply::paypalTransactiontype = paypalTransactiontype;
		_p->ns2__PayPalDoCaptureReply::paypalPaymentType = paypalPaymentType;
		_p->ns2__PayPalDoCaptureReply::paypalOrderTime = paypalOrderTime;
		_p->ns2__PayPalDoCaptureReply::paypalPaymentGrossAmount = paypalPaymentGrossAmount;
		_p->ns2__PayPalDoCaptureReply::paypalFeeAmount = paypalFeeAmount;
		_p->ns2__PayPalDoCaptureReply::paypalTaxAmount = paypalTaxAmount;
		_p->ns2__PayPalDoCaptureReply::paypalExchangeRate = paypalExchangeRate;
		_p->ns2__PayPalDoCaptureReply::paypalPaymentStatus = paypalPaymentStatus;
		_p->ns2__PayPalDoCaptureReply::amount = amount;
		_p->ns2__PayPalDoCaptureReply::currency = currency;
		_p->ns2__PayPalDoCaptureReply::correlationID = correlationID;
		_p->ns2__PayPalDoCaptureReply::errorCode = errorCode;
		_p->ns2__PayPalDoCaptureReply::paypalPendingReason = paypalPendingReason;
	}
	return _p;
}

inline int soap_write_ns2__PayPalDoCaptureReply(struct soap *soap, ns2__PayPalDoCaptureReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalDoCaptureReply", p->soap_type() == SOAP_TYPE_ns2__PayPalDoCaptureReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalDoCaptureReply(struct soap *soap, const char *URL, ns2__PayPalDoCaptureReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalDoCaptureReply", p->soap_type() == SOAP_TYPE_ns2__PayPalDoCaptureReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalDoCaptureReply(struct soap *soap, const char *URL, ns2__PayPalDoCaptureReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalDoCaptureReply", p->soap_type() == SOAP_TYPE_ns2__PayPalDoCaptureReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalDoCaptureReply(struct soap *soap, const char *URL, ns2__PayPalDoCaptureReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalDoCaptureReply", p->soap_type() == SOAP_TYPE_ns2__PayPalDoCaptureReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalDoCaptureReply * SOAP_FMAC4 soap_get_ns2__PayPalDoCaptureReply(struct soap*, ns2__PayPalDoCaptureReply *, const char*, const char*);

inline int soap_read_ns2__PayPalDoCaptureReply(struct soap *soap, ns2__PayPalDoCaptureReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalDoCaptureReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalDoCaptureReply(struct soap *soap, const char *URL, ns2__PayPalDoCaptureReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalDoCaptureReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalDoCaptureReply(struct soap *soap, ns2__PayPalDoCaptureReply *p)
{
	if (::soap_read_ns2__PayPalDoCaptureReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalEcDoPaymentReply_DEFINED
#define SOAP_TYPE_ns2__PayPalEcDoPaymentReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalEcDoPaymentReply(struct soap*, const char*, int, const ns2__PayPalEcDoPaymentReply *, const char*);
SOAP_FMAC3 ns2__PayPalEcDoPaymentReply * SOAP_FMAC4 soap_in_ns2__PayPalEcDoPaymentReply(struct soap*, const char*, ns2__PayPalEcDoPaymentReply *, const char*);
SOAP_FMAC1 ns2__PayPalEcDoPaymentReply * SOAP_FMAC2 soap_instantiate_ns2__PayPalEcDoPaymentReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalEcDoPaymentReply * soap_new_ns2__PayPalEcDoPaymentReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalEcDoPaymentReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalEcDoPaymentReply * soap_new_req_ns2__PayPalEcDoPaymentReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayPalEcDoPaymentReply *_p = ::soap_new_ns2__PayPalEcDoPaymentReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalEcDoPaymentReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayPalEcDoPaymentReply * soap_new_set_ns2__PayPalEcDoPaymentReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *paypalToken,
	std::string *transactionId,
	std::string *paypalTransactiontype,
	std::string *paymentType,
	std::string *paypalOrderTime,
	std::string *paypalAmount,
	std::string *paypalFeeAmount,
	std::string *paypalTaxAmount,
	std::string *paypalExchangeRate,
	std::string *paypalPaymentStatus,
	std::string *paypalPendingReason,
	std::string *orderId,
	std::string *paypalReasonCode,
	std::string *amount,
	std::string *currency,
	std::string *correlationID,
	std::string *errorCode,
	std::string *paypalBillingAgreementId)
{
	ns2__PayPalEcDoPaymentReply *_p = ::soap_new_ns2__PayPalEcDoPaymentReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalEcDoPaymentReply::reasonCode = reasonCode;
		_p->ns2__PayPalEcDoPaymentReply::paypalToken = paypalToken;
		_p->ns2__PayPalEcDoPaymentReply::transactionId = transactionId;
		_p->ns2__PayPalEcDoPaymentReply::paypalTransactiontype = paypalTransactiontype;
		_p->ns2__PayPalEcDoPaymentReply::paymentType = paymentType;
		_p->ns2__PayPalEcDoPaymentReply::paypalOrderTime = paypalOrderTime;
		_p->ns2__PayPalEcDoPaymentReply::paypalAmount = paypalAmount;
		_p->ns2__PayPalEcDoPaymentReply::paypalFeeAmount = paypalFeeAmount;
		_p->ns2__PayPalEcDoPaymentReply::paypalTaxAmount = paypalTaxAmount;
		_p->ns2__PayPalEcDoPaymentReply::paypalExchangeRate = paypalExchangeRate;
		_p->ns2__PayPalEcDoPaymentReply::paypalPaymentStatus = paypalPaymentStatus;
		_p->ns2__PayPalEcDoPaymentReply::paypalPendingReason = paypalPendingReason;
		_p->ns2__PayPalEcDoPaymentReply::orderId = orderId;
		_p->ns2__PayPalEcDoPaymentReply::paypalReasonCode = paypalReasonCode;
		_p->ns2__PayPalEcDoPaymentReply::amount = amount;
		_p->ns2__PayPalEcDoPaymentReply::currency = currency;
		_p->ns2__PayPalEcDoPaymentReply::correlationID = correlationID;
		_p->ns2__PayPalEcDoPaymentReply::errorCode = errorCode;
		_p->ns2__PayPalEcDoPaymentReply::paypalBillingAgreementId = paypalBillingAgreementId;
	}
	return _p;
}

inline int soap_write_ns2__PayPalEcDoPaymentReply(struct soap *soap, ns2__PayPalEcDoPaymentReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcDoPaymentReply", p->soap_type() == SOAP_TYPE_ns2__PayPalEcDoPaymentReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalEcDoPaymentReply(struct soap *soap, const char *URL, ns2__PayPalEcDoPaymentReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcDoPaymentReply", p->soap_type() == SOAP_TYPE_ns2__PayPalEcDoPaymentReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalEcDoPaymentReply(struct soap *soap, const char *URL, ns2__PayPalEcDoPaymentReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcDoPaymentReply", p->soap_type() == SOAP_TYPE_ns2__PayPalEcDoPaymentReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalEcDoPaymentReply(struct soap *soap, const char *URL, ns2__PayPalEcDoPaymentReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcDoPaymentReply", p->soap_type() == SOAP_TYPE_ns2__PayPalEcDoPaymentReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalEcDoPaymentReply * SOAP_FMAC4 soap_get_ns2__PayPalEcDoPaymentReply(struct soap*, ns2__PayPalEcDoPaymentReply *, const char*, const char*);

inline int soap_read_ns2__PayPalEcDoPaymentReply(struct soap *soap, ns2__PayPalEcDoPaymentReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalEcDoPaymentReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalEcDoPaymentReply(struct soap *soap, const char *URL, ns2__PayPalEcDoPaymentReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalEcDoPaymentReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalEcDoPaymentReply(struct soap *soap, ns2__PayPalEcDoPaymentReply *p)
{
	if (::soap_read_ns2__PayPalEcDoPaymentReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalEcGetDetailsReply_DEFINED
#define SOAP_TYPE_ns2__PayPalEcGetDetailsReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalEcGetDetailsReply(struct soap*, const char*, int, const ns2__PayPalEcGetDetailsReply *, const char*);
SOAP_FMAC3 ns2__PayPalEcGetDetailsReply * SOAP_FMAC4 soap_in_ns2__PayPalEcGetDetailsReply(struct soap*, const char*, ns2__PayPalEcGetDetailsReply *, const char*);
SOAP_FMAC1 ns2__PayPalEcGetDetailsReply * SOAP_FMAC2 soap_instantiate_ns2__PayPalEcGetDetailsReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalEcGetDetailsReply * soap_new_ns2__PayPalEcGetDetailsReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalEcGetDetailsReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalEcGetDetailsReply * soap_new_req_ns2__PayPalEcGetDetailsReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayPalEcGetDetailsReply *_p = ::soap_new_ns2__PayPalEcGetDetailsReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalEcGetDetailsReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayPalEcGetDetailsReply * soap_new_set_ns2__PayPalEcGetDetailsReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *paypalToken,
	std::string *payer,
	std::string *payerId,
	std::string *payerStatus,
	std::string *payerSalutation,
	std::string *payerFirstname,
	std::string *payerMiddlename,
	std::string *payerLastname,
	std::string *payerSuffix,
	std::string *payerCountry,
	std::string *payerBusiness,
	std::string *shipToName,
	std::string *shipToAddress1,
	std::string *shipToAddress2,
	std::string *shipToCity,
	std::string *shipToState,
	std::string *shipToCountry,
	std::string *shipToZip,
	std::string *addressStatus,
	std::string *payerPhone,
	std::string *avsCode,
	std::string *street1,
	std::string *street2,
	std::string *city,
	std::string *state,
	std::string *postalCode,
	std::string *countryCode,
	std::string *countryName,
	std::string *addressID,
	std::string *errorCode,
	std::string *correlationID,
	std::string *paypalBillingAgreementAcceptedStatus,
	std::string *paypalTaxAmount,
	const std::vector<ns2__Item *> & item)
{
	ns2__PayPalEcGetDetailsReply *_p = ::soap_new_ns2__PayPalEcGetDetailsReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalEcGetDetailsReply::reasonCode = reasonCode;
		_p->ns2__PayPalEcGetDetailsReply::paypalToken = paypalToken;
		_p->ns2__PayPalEcGetDetailsReply::payer = payer;
		_p->ns2__PayPalEcGetDetailsReply::payerId = payerId;
		_p->ns2__PayPalEcGetDetailsReply::payerStatus = payerStatus;
		_p->ns2__PayPalEcGetDetailsReply::payerSalutation = payerSalutation;
		_p->ns2__PayPalEcGetDetailsReply::payerFirstname = payerFirstname;
		_p->ns2__PayPalEcGetDetailsReply::payerMiddlename = payerMiddlename;
		_p->ns2__PayPalEcGetDetailsReply::payerLastname = payerLastname;
		_p->ns2__PayPalEcGetDetailsReply::payerSuffix = payerSuffix;
		_p->ns2__PayPalEcGetDetailsReply::payerCountry = payerCountry;
		_p->ns2__PayPalEcGetDetailsReply::payerBusiness = payerBusiness;
		_p->ns2__PayPalEcGetDetailsReply::shipToName = shipToName;
		_p->ns2__PayPalEcGetDetailsReply::shipToAddress1 = shipToAddress1;
		_p->ns2__PayPalEcGetDetailsReply::shipToAddress2 = shipToAddress2;
		_p->ns2__PayPalEcGetDetailsReply::shipToCity = shipToCity;
		_p->ns2__PayPalEcGetDetailsReply::shipToState = shipToState;
		_p->ns2__PayPalEcGetDetailsReply::shipToCountry = shipToCountry;
		_p->ns2__PayPalEcGetDetailsReply::shipToZip = shipToZip;
		_p->ns2__PayPalEcGetDetailsReply::addressStatus = addressStatus;
		_p->ns2__PayPalEcGetDetailsReply::payerPhone = payerPhone;
		_p->ns2__PayPalEcGetDetailsReply::avsCode = avsCode;
		_p->ns2__PayPalEcGetDetailsReply::street1 = street1;
		_p->ns2__PayPalEcGetDetailsReply::street2 = street2;
		_p->ns2__PayPalEcGetDetailsReply::city = city;
		_p->ns2__PayPalEcGetDetailsReply::state = state;
		_p->ns2__PayPalEcGetDetailsReply::postalCode = postalCode;
		_p->ns2__PayPalEcGetDetailsReply::countryCode = countryCode;
		_p->ns2__PayPalEcGetDetailsReply::countryName = countryName;
		_p->ns2__PayPalEcGetDetailsReply::addressID = addressID;
		_p->ns2__PayPalEcGetDetailsReply::errorCode = errorCode;
		_p->ns2__PayPalEcGetDetailsReply::correlationID = correlationID;
		_p->ns2__PayPalEcGetDetailsReply::paypalBillingAgreementAcceptedStatus = paypalBillingAgreementAcceptedStatus;
		_p->ns2__PayPalEcGetDetailsReply::paypalTaxAmount = paypalTaxAmount;
		_p->ns2__PayPalEcGetDetailsReply::item = item;
	}
	return _p;
}

inline int soap_write_ns2__PayPalEcGetDetailsReply(struct soap *soap, ns2__PayPalEcGetDetailsReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcGetDetailsReply", p->soap_type() == SOAP_TYPE_ns2__PayPalEcGetDetailsReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalEcGetDetailsReply(struct soap *soap, const char *URL, ns2__PayPalEcGetDetailsReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcGetDetailsReply", p->soap_type() == SOAP_TYPE_ns2__PayPalEcGetDetailsReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalEcGetDetailsReply(struct soap *soap, const char *URL, ns2__PayPalEcGetDetailsReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcGetDetailsReply", p->soap_type() == SOAP_TYPE_ns2__PayPalEcGetDetailsReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalEcGetDetailsReply(struct soap *soap, const char *URL, ns2__PayPalEcGetDetailsReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcGetDetailsReply", p->soap_type() == SOAP_TYPE_ns2__PayPalEcGetDetailsReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalEcGetDetailsReply * SOAP_FMAC4 soap_get_ns2__PayPalEcGetDetailsReply(struct soap*, ns2__PayPalEcGetDetailsReply *, const char*, const char*);

inline int soap_read_ns2__PayPalEcGetDetailsReply(struct soap *soap, ns2__PayPalEcGetDetailsReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalEcGetDetailsReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalEcGetDetailsReply(struct soap *soap, const char *URL, ns2__PayPalEcGetDetailsReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalEcGetDetailsReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalEcGetDetailsReply(struct soap *soap, ns2__PayPalEcGetDetailsReply *p)
{
	if (::soap_read_ns2__PayPalEcGetDetailsReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalEcSetReply_DEFINED
#define SOAP_TYPE_ns2__PayPalEcSetReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalEcSetReply(struct soap*, const char*, int, const ns2__PayPalEcSetReply *, const char*);
SOAP_FMAC3 ns2__PayPalEcSetReply * SOAP_FMAC4 soap_in_ns2__PayPalEcSetReply(struct soap*, const char*, ns2__PayPalEcSetReply *, const char*);
SOAP_FMAC1 ns2__PayPalEcSetReply * SOAP_FMAC2 soap_instantiate_ns2__PayPalEcSetReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalEcSetReply * soap_new_ns2__PayPalEcSetReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalEcSetReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalEcSetReply * soap_new_req_ns2__PayPalEcSetReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayPalEcSetReply *_p = ::soap_new_ns2__PayPalEcSetReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalEcSetReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayPalEcSetReply * soap_new_set_ns2__PayPalEcSetReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *paypalToken,
	std::string *amount,
	std::string *currency,
	std::string *correlationID,
	std::string *errorCode)
{
	ns2__PayPalEcSetReply *_p = ::soap_new_ns2__PayPalEcSetReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalEcSetReply::reasonCode = reasonCode;
		_p->ns2__PayPalEcSetReply::paypalToken = paypalToken;
		_p->ns2__PayPalEcSetReply::amount = amount;
		_p->ns2__PayPalEcSetReply::currency = currency;
		_p->ns2__PayPalEcSetReply::correlationID = correlationID;
		_p->ns2__PayPalEcSetReply::errorCode = errorCode;
	}
	return _p;
}

inline int soap_write_ns2__PayPalEcSetReply(struct soap *soap, ns2__PayPalEcSetReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcSetReply", p->soap_type() == SOAP_TYPE_ns2__PayPalEcSetReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalEcSetReply(struct soap *soap, const char *URL, ns2__PayPalEcSetReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcSetReply", p->soap_type() == SOAP_TYPE_ns2__PayPalEcSetReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalEcSetReply(struct soap *soap, const char *URL, ns2__PayPalEcSetReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcSetReply", p->soap_type() == SOAP_TYPE_ns2__PayPalEcSetReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalEcSetReply(struct soap *soap, const char *URL, ns2__PayPalEcSetReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcSetReply", p->soap_type() == SOAP_TYPE_ns2__PayPalEcSetReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalEcSetReply * SOAP_FMAC4 soap_get_ns2__PayPalEcSetReply(struct soap*, ns2__PayPalEcSetReply *, const char*, const char*);

inline int soap_read_ns2__PayPalEcSetReply(struct soap *soap, ns2__PayPalEcSetReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalEcSetReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalEcSetReply(struct soap *soap, const char *URL, ns2__PayPalEcSetReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalEcSetReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalEcSetReply(struct soap *soap, ns2__PayPalEcSetReply *p)
{
	if (::soap_read_ns2__PayPalEcSetReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalPreapprovedUpdateReply_DEFINED
#define SOAP_TYPE_ns2__PayPalPreapprovedUpdateReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalPreapprovedUpdateReply(struct soap*, const char*, int, const ns2__PayPalPreapprovedUpdateReply *, const char*);
SOAP_FMAC3 ns2__PayPalPreapprovedUpdateReply * SOAP_FMAC4 soap_in_ns2__PayPalPreapprovedUpdateReply(struct soap*, const char*, ns2__PayPalPreapprovedUpdateReply *, const char*);
SOAP_FMAC1 ns2__PayPalPreapprovedUpdateReply * SOAP_FMAC2 soap_instantiate_ns2__PayPalPreapprovedUpdateReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalPreapprovedUpdateReply * soap_new_ns2__PayPalPreapprovedUpdateReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalPreapprovedUpdateReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalPreapprovedUpdateReply * soap_new_req_ns2__PayPalPreapprovedUpdateReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayPalPreapprovedUpdateReply *_p = ::soap_new_ns2__PayPalPreapprovedUpdateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalPreapprovedUpdateReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayPalPreapprovedUpdateReply * soap_new_set_ns2__PayPalPreapprovedUpdateReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *requestDateTime,
	std::string *reconciliationID,
	std::string *payerStatus,
	std::string *payerName,
	std::string *payerCountry,
	std::string *mpStatus,
	std::string *payer,
	std::string *payerID,
	std::string *payerBusiness,
	std::string *desc,
	std::string *mpMax,
	std::string *paymentSourceID)
{
	ns2__PayPalPreapprovedUpdateReply *_p = ::soap_new_ns2__PayPalPreapprovedUpdateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalPreapprovedUpdateReply::reasonCode = reasonCode;
		_p->ns2__PayPalPreapprovedUpdateReply::requestDateTime = requestDateTime;
		_p->ns2__PayPalPreapprovedUpdateReply::reconciliationID = reconciliationID;
		_p->ns2__PayPalPreapprovedUpdateReply::payerStatus = payerStatus;
		_p->ns2__PayPalPreapprovedUpdateReply::payerName = payerName;
		_p->ns2__PayPalPreapprovedUpdateReply::payerCountry = payerCountry;
		_p->ns2__PayPalPreapprovedUpdateReply::mpStatus = mpStatus;
		_p->ns2__PayPalPreapprovedUpdateReply::payer = payer;
		_p->ns2__PayPalPreapprovedUpdateReply::payerID = payerID;
		_p->ns2__PayPalPreapprovedUpdateReply::payerBusiness = payerBusiness;
		_p->ns2__PayPalPreapprovedUpdateReply::desc = desc;
		_p->ns2__PayPalPreapprovedUpdateReply::mpMax = mpMax;
		_p->ns2__PayPalPreapprovedUpdateReply::paymentSourceID = paymentSourceID;
	}
	return _p;
}

inline int soap_write_ns2__PayPalPreapprovedUpdateReply(struct soap *soap, ns2__PayPalPreapprovedUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPreapprovedUpdateReply", p->soap_type() == SOAP_TYPE_ns2__PayPalPreapprovedUpdateReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalPreapprovedUpdateReply(struct soap *soap, const char *URL, ns2__PayPalPreapprovedUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPreapprovedUpdateReply", p->soap_type() == SOAP_TYPE_ns2__PayPalPreapprovedUpdateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalPreapprovedUpdateReply(struct soap *soap, const char *URL, ns2__PayPalPreapprovedUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPreapprovedUpdateReply", p->soap_type() == SOAP_TYPE_ns2__PayPalPreapprovedUpdateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalPreapprovedUpdateReply(struct soap *soap, const char *URL, ns2__PayPalPreapprovedUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPreapprovedUpdateReply", p->soap_type() == SOAP_TYPE_ns2__PayPalPreapprovedUpdateReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalPreapprovedUpdateReply * SOAP_FMAC4 soap_get_ns2__PayPalPreapprovedUpdateReply(struct soap*, ns2__PayPalPreapprovedUpdateReply *, const char*, const char*);

inline int soap_read_ns2__PayPalPreapprovedUpdateReply(struct soap *soap, ns2__PayPalPreapprovedUpdateReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalPreapprovedUpdateReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalPreapprovedUpdateReply(struct soap *soap, const char *URL, ns2__PayPalPreapprovedUpdateReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalPreapprovedUpdateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalPreapprovedUpdateReply(struct soap *soap, ns2__PayPalPreapprovedUpdateReply *p)
{
	if (::soap_read_ns2__PayPalPreapprovedUpdateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalPreapprovedPaymentReply_DEFINED
#define SOAP_TYPE_ns2__PayPalPreapprovedPaymentReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalPreapprovedPaymentReply(struct soap*, const char*, int, const ns2__PayPalPreapprovedPaymentReply *, const char*);
SOAP_FMAC3 ns2__PayPalPreapprovedPaymentReply * SOAP_FMAC4 soap_in_ns2__PayPalPreapprovedPaymentReply(struct soap*, const char*, ns2__PayPalPreapprovedPaymentReply *, const char*);
SOAP_FMAC1 ns2__PayPalPreapprovedPaymentReply * SOAP_FMAC2 soap_instantiate_ns2__PayPalPreapprovedPaymentReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalPreapprovedPaymentReply * soap_new_ns2__PayPalPreapprovedPaymentReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalPreapprovedPaymentReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalPreapprovedPaymentReply * soap_new_req_ns2__PayPalPreapprovedPaymentReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayPalPreapprovedPaymentReply *_p = ::soap_new_ns2__PayPalPreapprovedPaymentReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalPreapprovedPaymentReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayPalPreapprovedPaymentReply * soap_new_set_ns2__PayPalPreapprovedPaymentReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *requestDateTime,
	std::string *reconciliationID,
	std::string *payerStatus,
	std::string *payerName,
	std::string *transactionType,
	std::string *feeAmount,
	std::string *payerCountry,
	std::string *pendingReason,
	std::string *paymentStatus,
	std::string *mpStatus,
	std::string *payer,
	std::string *payerID,
	std::string *payerBusiness,
	std::string *transactionID,
	std::string *desc,
	std::string *mpMax,
	std::string *paymentType,
	std::string *paymentDate,
	std::string *paymentGrossAmount,
	std::string *settleAmount,
	std::string *taxAmount,
	std::string *exchangeRate,
	std::string *paymentSourceID)
{
	ns2__PayPalPreapprovedPaymentReply *_p = ::soap_new_ns2__PayPalPreapprovedPaymentReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalPreapprovedPaymentReply::reasonCode = reasonCode;
		_p->ns2__PayPalPreapprovedPaymentReply::requestDateTime = requestDateTime;
		_p->ns2__PayPalPreapprovedPaymentReply::reconciliationID = reconciliationID;
		_p->ns2__PayPalPreapprovedPaymentReply::payerStatus = payerStatus;
		_p->ns2__PayPalPreapprovedPaymentReply::payerName = payerName;
		_p->ns2__PayPalPreapprovedPaymentReply::transactionType = transactionType;
		_p->ns2__PayPalPreapprovedPaymentReply::feeAmount = feeAmount;
		_p->ns2__PayPalPreapprovedPaymentReply::payerCountry = payerCountry;
		_p->ns2__PayPalPreapprovedPaymentReply::pendingReason = pendingReason;
		_p->ns2__PayPalPreapprovedPaymentReply::paymentStatus = paymentStatus;
		_p->ns2__PayPalPreapprovedPaymentReply::mpStatus = mpStatus;
		_p->ns2__PayPalPreapprovedPaymentReply::payer = payer;
		_p->ns2__PayPalPreapprovedPaymentReply::payerID = payerID;
		_p->ns2__PayPalPreapprovedPaymentReply::payerBusiness = payerBusiness;
		_p->ns2__PayPalPreapprovedPaymentReply::transactionID = transactionID;
		_p->ns2__PayPalPreapprovedPaymentReply::desc = desc;
		_p->ns2__PayPalPreapprovedPaymentReply::mpMax = mpMax;
		_p->ns2__PayPalPreapprovedPaymentReply::paymentType = paymentType;
		_p->ns2__PayPalPreapprovedPaymentReply::paymentDate = paymentDate;
		_p->ns2__PayPalPreapprovedPaymentReply::paymentGrossAmount = paymentGrossAmount;
		_p->ns2__PayPalPreapprovedPaymentReply::settleAmount = settleAmount;
		_p->ns2__PayPalPreapprovedPaymentReply::taxAmount = taxAmount;
		_p->ns2__PayPalPreapprovedPaymentReply::exchangeRate = exchangeRate;
		_p->ns2__PayPalPreapprovedPaymentReply::paymentSourceID = paymentSourceID;
	}
	return _p;
}

inline int soap_write_ns2__PayPalPreapprovedPaymentReply(struct soap *soap, ns2__PayPalPreapprovedPaymentReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPreapprovedPaymentReply", p->soap_type() == SOAP_TYPE_ns2__PayPalPreapprovedPaymentReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalPreapprovedPaymentReply(struct soap *soap, const char *URL, ns2__PayPalPreapprovedPaymentReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPreapprovedPaymentReply", p->soap_type() == SOAP_TYPE_ns2__PayPalPreapprovedPaymentReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalPreapprovedPaymentReply(struct soap *soap, const char *URL, ns2__PayPalPreapprovedPaymentReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPreapprovedPaymentReply", p->soap_type() == SOAP_TYPE_ns2__PayPalPreapprovedPaymentReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalPreapprovedPaymentReply(struct soap *soap, const char *URL, ns2__PayPalPreapprovedPaymentReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPreapprovedPaymentReply", p->soap_type() == SOAP_TYPE_ns2__PayPalPreapprovedPaymentReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalPreapprovedPaymentReply * SOAP_FMAC4 soap_get_ns2__PayPalPreapprovedPaymentReply(struct soap*, ns2__PayPalPreapprovedPaymentReply *, const char*, const char*);

inline int soap_read_ns2__PayPalPreapprovedPaymentReply(struct soap *soap, ns2__PayPalPreapprovedPaymentReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalPreapprovedPaymentReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalPreapprovedPaymentReply(struct soap *soap, const char *URL, ns2__PayPalPreapprovedPaymentReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalPreapprovedPaymentReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalPreapprovedPaymentReply(struct soap *soap, ns2__PayPalPreapprovedPaymentReply *p)
{
	if (::soap_read_ns2__PayPalPreapprovedPaymentReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalButtonCreateReply_DEFINED
#define SOAP_TYPE_ns2__PayPalButtonCreateReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalButtonCreateReply(struct soap*, const char*, int, const ns2__PayPalButtonCreateReply *, const char*);
SOAP_FMAC3 ns2__PayPalButtonCreateReply * SOAP_FMAC4 soap_in_ns2__PayPalButtonCreateReply(struct soap*, const char*, ns2__PayPalButtonCreateReply *, const char*);
SOAP_FMAC1 ns2__PayPalButtonCreateReply * SOAP_FMAC2 soap_instantiate_ns2__PayPalButtonCreateReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalButtonCreateReply * soap_new_ns2__PayPalButtonCreateReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalButtonCreateReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalButtonCreateReply * soap_new_req_ns2__PayPalButtonCreateReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayPalButtonCreateReply *_p = ::soap_new_ns2__PayPalButtonCreateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalButtonCreateReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayPalButtonCreateReply * soap_new_set_ns2__PayPalButtonCreateReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *encryptedFormData,
	std::string *unencryptedFormData,
	std::string *requestDateTime,
	std::string *reconciliationID,
	std::string *buttonType)
{
	ns2__PayPalButtonCreateReply *_p = ::soap_new_ns2__PayPalButtonCreateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalButtonCreateReply::reasonCode = reasonCode;
		_p->ns2__PayPalButtonCreateReply::encryptedFormData = encryptedFormData;
		_p->ns2__PayPalButtonCreateReply::unencryptedFormData = unencryptedFormData;
		_p->ns2__PayPalButtonCreateReply::requestDateTime = requestDateTime;
		_p->ns2__PayPalButtonCreateReply::reconciliationID = reconciliationID;
		_p->ns2__PayPalButtonCreateReply::buttonType = buttonType;
	}
	return _p;
}

inline int soap_write_ns2__PayPalButtonCreateReply(struct soap *soap, ns2__PayPalButtonCreateReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalButtonCreateReply", p->soap_type() == SOAP_TYPE_ns2__PayPalButtonCreateReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalButtonCreateReply(struct soap *soap, const char *URL, ns2__PayPalButtonCreateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalButtonCreateReply", p->soap_type() == SOAP_TYPE_ns2__PayPalButtonCreateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalButtonCreateReply(struct soap *soap, const char *URL, ns2__PayPalButtonCreateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalButtonCreateReply", p->soap_type() == SOAP_TYPE_ns2__PayPalButtonCreateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalButtonCreateReply(struct soap *soap, const char *URL, ns2__PayPalButtonCreateReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalButtonCreateReply", p->soap_type() == SOAP_TYPE_ns2__PayPalButtonCreateReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalButtonCreateReply * SOAP_FMAC4 soap_get_ns2__PayPalButtonCreateReply(struct soap*, ns2__PayPalButtonCreateReply *, const char*, const char*);

inline int soap_read_ns2__PayPalButtonCreateReply(struct soap *soap, ns2__PayPalButtonCreateReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalButtonCreateReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalButtonCreateReply(struct soap *soap, const char *URL, ns2__PayPalButtonCreateReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalButtonCreateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalButtonCreateReply(struct soap *soap, ns2__PayPalButtonCreateReply *p)
{
	if (::soap_read_ns2__PayPalButtonCreateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PinlessDebitReversalReply_DEFINED
#define SOAP_TYPE_ns2__PinlessDebitReversalReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PinlessDebitReversalReply(struct soap*, const char*, int, const ns2__PinlessDebitReversalReply *, const char*);
SOAP_FMAC3 ns2__PinlessDebitReversalReply * SOAP_FMAC4 soap_in_ns2__PinlessDebitReversalReply(struct soap*, const char*, ns2__PinlessDebitReversalReply *, const char*);
SOAP_FMAC1 ns2__PinlessDebitReversalReply * SOAP_FMAC2 soap_instantiate_ns2__PinlessDebitReversalReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PinlessDebitReversalReply * soap_new_ns2__PinlessDebitReversalReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PinlessDebitReversalReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PinlessDebitReversalReply * soap_new_req_ns2__PinlessDebitReversalReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PinlessDebitReversalReply *_p = ::soap_new_ns2__PinlessDebitReversalReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinlessDebitReversalReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PinlessDebitReversalReply * soap_new_set_ns2__PinlessDebitReversalReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *amount,
	std::string *requestDateTime,
	std::string *processorResponse,
	std::string *reconciliationID)
{
	ns2__PinlessDebitReversalReply *_p = ::soap_new_ns2__PinlessDebitReversalReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinlessDebitReversalReply::reasonCode = reasonCode;
		_p->ns2__PinlessDebitReversalReply::amount = amount;
		_p->ns2__PinlessDebitReversalReply::requestDateTime = requestDateTime;
		_p->ns2__PinlessDebitReversalReply::processorResponse = processorResponse;
		_p->ns2__PinlessDebitReversalReply::reconciliationID = reconciliationID;
	}
	return _p;
}

inline int soap_write_ns2__PinlessDebitReversalReply(struct soap *soap, ns2__PinlessDebitReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitReversalReply", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitReversalReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PinlessDebitReversalReply(struct soap *soap, const char *URL, ns2__PinlessDebitReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitReversalReply", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitReversalReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PinlessDebitReversalReply(struct soap *soap, const char *URL, ns2__PinlessDebitReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitReversalReply", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitReversalReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PinlessDebitReversalReply(struct soap *soap, const char *URL, ns2__PinlessDebitReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitReversalReply", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitReversalReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PinlessDebitReversalReply * SOAP_FMAC4 soap_get_ns2__PinlessDebitReversalReply(struct soap*, ns2__PinlessDebitReversalReply *, const char*, const char*);

inline int soap_read_ns2__PinlessDebitReversalReply(struct soap *soap, ns2__PinlessDebitReversalReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PinlessDebitReversalReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PinlessDebitReversalReply(struct soap *soap, const char *URL, ns2__PinlessDebitReversalReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PinlessDebitReversalReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PinlessDebitReversalReply(struct soap *soap, ns2__PinlessDebitReversalReply *p)
{
	if (::soap_read_ns2__PinlessDebitReversalReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PinlessDebitValidateReply_DEFINED
#define SOAP_TYPE_ns2__PinlessDebitValidateReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PinlessDebitValidateReply(struct soap*, const char*, int, const ns2__PinlessDebitValidateReply *, const char*);
SOAP_FMAC3 ns2__PinlessDebitValidateReply * SOAP_FMAC4 soap_in_ns2__PinlessDebitValidateReply(struct soap*, const char*, ns2__PinlessDebitValidateReply *, const char*);
SOAP_FMAC1 ns2__PinlessDebitValidateReply * SOAP_FMAC2 soap_instantiate_ns2__PinlessDebitValidateReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PinlessDebitValidateReply * soap_new_ns2__PinlessDebitValidateReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PinlessDebitValidateReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PinlessDebitValidateReply * soap_new_req_ns2__PinlessDebitValidateReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PinlessDebitValidateReply *_p = ::soap_new_ns2__PinlessDebitValidateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinlessDebitValidateReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PinlessDebitValidateReply * soap_new_set_ns2__PinlessDebitValidateReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *status,
	std::string *requestDateTime)
{
	ns2__PinlessDebitValidateReply *_p = ::soap_new_ns2__PinlessDebitValidateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinlessDebitValidateReply::reasonCode = reasonCode;
		_p->ns2__PinlessDebitValidateReply::status = status;
		_p->ns2__PinlessDebitValidateReply::requestDateTime = requestDateTime;
	}
	return _p;
}

inline int soap_write_ns2__PinlessDebitValidateReply(struct soap *soap, ns2__PinlessDebitValidateReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitValidateReply", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitValidateReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PinlessDebitValidateReply(struct soap *soap, const char *URL, ns2__PinlessDebitValidateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitValidateReply", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitValidateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PinlessDebitValidateReply(struct soap *soap, const char *URL, ns2__PinlessDebitValidateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitValidateReply", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitValidateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PinlessDebitValidateReply(struct soap *soap, const char *URL, ns2__PinlessDebitValidateReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitValidateReply", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitValidateReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PinlessDebitValidateReply * SOAP_FMAC4 soap_get_ns2__PinlessDebitValidateReply(struct soap*, ns2__PinlessDebitValidateReply *, const char*, const char*);

inline int soap_read_ns2__PinlessDebitValidateReply(struct soap *soap, ns2__PinlessDebitValidateReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PinlessDebitValidateReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PinlessDebitValidateReply(struct soap *soap, const char *URL, ns2__PinlessDebitValidateReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PinlessDebitValidateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PinlessDebitValidateReply(struct soap *soap, ns2__PinlessDebitValidateReply *p)
{
	if (::soap_read_ns2__PinlessDebitValidateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PinlessDebitReply_DEFINED
#define SOAP_TYPE_ns2__PinlessDebitReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PinlessDebitReply(struct soap*, const char*, int, const ns2__PinlessDebitReply *, const char*);
SOAP_FMAC3 ns2__PinlessDebitReply * SOAP_FMAC4 soap_in_ns2__PinlessDebitReply(struct soap*, const char*, ns2__PinlessDebitReply *, const char*);
SOAP_FMAC1 ns2__PinlessDebitReply * SOAP_FMAC2 soap_instantiate_ns2__PinlessDebitReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PinlessDebitReply * soap_new_ns2__PinlessDebitReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PinlessDebitReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PinlessDebitReply * soap_new_req_ns2__PinlessDebitReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PinlessDebitReply *_p = ::soap_new_ns2__PinlessDebitReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinlessDebitReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PinlessDebitReply * soap_new_set_ns2__PinlessDebitReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *amount,
	std::string *authorizationCode,
	std::string *requestDateTime,
	std::string *processorResponse,
	std::string *receiptNumber,
	std::string *reconciliationID,
	std::string *ownerMerchantID)
{
	ns2__PinlessDebitReply *_p = ::soap_new_ns2__PinlessDebitReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinlessDebitReply::reasonCode = reasonCode;
		_p->ns2__PinlessDebitReply::amount = amount;
		_p->ns2__PinlessDebitReply::authorizationCode = authorizationCode;
		_p->ns2__PinlessDebitReply::requestDateTime = requestDateTime;
		_p->ns2__PinlessDebitReply::processorResponse = processorResponse;
		_p->ns2__PinlessDebitReply::receiptNumber = receiptNumber;
		_p->ns2__PinlessDebitReply::reconciliationID = reconciliationID;
		_p->ns2__PinlessDebitReply::ownerMerchantID = ownerMerchantID;
	}
	return _p;
}

inline int soap_write_ns2__PinlessDebitReply(struct soap *soap, ns2__PinlessDebitReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitReply", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PinlessDebitReply(struct soap *soap, const char *URL, ns2__PinlessDebitReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitReply", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PinlessDebitReply(struct soap *soap, const char *URL, ns2__PinlessDebitReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitReply", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PinlessDebitReply(struct soap *soap, const char *URL, ns2__PinlessDebitReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitReply", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PinlessDebitReply * SOAP_FMAC4 soap_get_ns2__PinlessDebitReply(struct soap*, ns2__PinlessDebitReply *, const char*, const char*);

inline int soap_read_ns2__PinlessDebitReply(struct soap *soap, ns2__PinlessDebitReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PinlessDebitReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PinlessDebitReply(struct soap *soap, const char *URL, ns2__PinlessDebitReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PinlessDebitReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PinlessDebitReply(struct soap *soap, ns2__PinlessDebitReply *p)
{
	if (::soap_read_ns2__PinlessDebitReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__VoidReply_DEFINED
#define SOAP_TYPE_ns2__VoidReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VoidReply(struct soap*, const char*, int, const ns2__VoidReply *, const char*);
SOAP_FMAC3 ns2__VoidReply * SOAP_FMAC4 soap_in_ns2__VoidReply(struct soap*, const char*, ns2__VoidReply *, const char*);
SOAP_FMAC1 ns2__VoidReply * SOAP_FMAC2 soap_instantiate_ns2__VoidReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VoidReply * soap_new_ns2__VoidReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__VoidReply(soap, n, NULL, NULL, NULL);
}

inline ns2__VoidReply * soap_new_req_ns2__VoidReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__VoidReply *_p = ::soap_new_ns2__VoidReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__VoidReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__VoidReply * soap_new_set_ns2__VoidReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *requestDateTime,
	std::string *amount,
	std::string *currency,
	std::string *reversalSubmitted)
{
	ns2__VoidReply *_p = ::soap_new_ns2__VoidReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__VoidReply::reasonCode = reasonCode;
		_p->ns2__VoidReply::requestDateTime = requestDateTime;
		_p->ns2__VoidReply::amount = amount;
		_p->ns2__VoidReply::currency = currency;
		_p->ns2__VoidReply::reversalSubmitted = reversalSubmitted;
	}
	return _p;
}

inline int soap_write_ns2__VoidReply(struct soap *soap, ns2__VoidReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VoidReply", p->soap_type() == SOAP_TYPE_ns2__VoidReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__VoidReply(struct soap *soap, const char *URL, ns2__VoidReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VoidReply", p->soap_type() == SOAP_TYPE_ns2__VoidReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__VoidReply(struct soap *soap, const char *URL, ns2__VoidReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VoidReply", p->soap_type() == SOAP_TYPE_ns2__VoidReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__VoidReply(struct soap *soap, const char *URL, ns2__VoidReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VoidReply", p->soap_type() == SOAP_TYPE_ns2__VoidReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__VoidReply * SOAP_FMAC4 soap_get_ns2__VoidReply(struct soap*, ns2__VoidReply *, const char*, const char*);

inline int soap_read_ns2__VoidReply(struct soap *soap, ns2__VoidReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__VoidReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__VoidReply(struct soap *soap, const char *URL, ns2__VoidReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__VoidReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__VoidReply(struct soap *soap, ns2__VoidReply *p)
{
	if (::soap_read_ns2__VoidReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalCreditReply_DEFINED
#define SOAP_TYPE_ns2__PayPalCreditReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalCreditReply(struct soap*, const char*, int, const ns2__PayPalCreditReply *, const char*);
SOAP_FMAC3 ns2__PayPalCreditReply * SOAP_FMAC4 soap_in_ns2__PayPalCreditReply(struct soap*, const char*, ns2__PayPalCreditReply *, const char*);
SOAP_FMAC1 ns2__PayPalCreditReply * SOAP_FMAC2 soap_instantiate_ns2__PayPalCreditReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalCreditReply * soap_new_ns2__PayPalCreditReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalCreditReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalCreditReply * soap_new_req_ns2__PayPalCreditReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayPalCreditReply *_p = ::soap_new_ns2__PayPalCreditReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalCreditReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayPalCreditReply * soap_new_set_ns2__PayPalCreditReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *amount,
	std::string *requestDateTime,
	std::string *reconciliationID,
	std::string *processorResponse)
{
	ns2__PayPalCreditReply *_p = ::soap_new_ns2__PayPalCreditReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalCreditReply::reasonCode = reasonCode;
		_p->ns2__PayPalCreditReply::amount = amount;
		_p->ns2__PayPalCreditReply::requestDateTime = requestDateTime;
		_p->ns2__PayPalCreditReply::reconciliationID = reconciliationID;
		_p->ns2__PayPalCreditReply::processorResponse = processorResponse;
	}
	return _p;
}

inline int soap_write_ns2__PayPalCreditReply(struct soap *soap, ns2__PayPalCreditReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalCreditReply", p->soap_type() == SOAP_TYPE_ns2__PayPalCreditReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalCreditReply(struct soap *soap, const char *URL, ns2__PayPalCreditReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalCreditReply", p->soap_type() == SOAP_TYPE_ns2__PayPalCreditReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalCreditReply(struct soap *soap, const char *URL, ns2__PayPalCreditReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalCreditReply", p->soap_type() == SOAP_TYPE_ns2__PayPalCreditReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalCreditReply(struct soap *soap, const char *URL, ns2__PayPalCreditReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalCreditReply", p->soap_type() == SOAP_TYPE_ns2__PayPalCreditReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalCreditReply * SOAP_FMAC4 soap_get_ns2__PayPalCreditReply(struct soap*, ns2__PayPalCreditReply *, const char*, const char*);

inline int soap_read_ns2__PayPalCreditReply(struct soap *soap, ns2__PayPalCreditReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalCreditReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalCreditReply(struct soap *soap, const char *URL, ns2__PayPalCreditReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalCreditReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalCreditReply(struct soap *soap, ns2__PayPalCreditReply *p)
{
	if (::soap_read_ns2__PayPalCreditReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalPaymentReply_DEFINED
#define SOAP_TYPE_ns2__PayPalPaymentReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalPaymentReply(struct soap*, const char*, int, const ns2__PayPalPaymentReply *, const char*);
SOAP_FMAC3 ns2__PayPalPaymentReply * SOAP_FMAC4 soap_in_ns2__PayPalPaymentReply(struct soap*, const char*, ns2__PayPalPaymentReply *, const char*);
SOAP_FMAC1 ns2__PayPalPaymentReply * SOAP_FMAC2 soap_instantiate_ns2__PayPalPaymentReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalPaymentReply * soap_new_ns2__PayPalPaymentReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalPaymentReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalPaymentReply * soap_new_req_ns2__PayPalPaymentReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayPalPaymentReply *_p = ::soap_new_ns2__PayPalPaymentReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalPaymentReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayPalPaymentReply * soap_new_set_ns2__PayPalPaymentReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *secureData,
	std::string *amount,
	std::string *requestDateTime,
	std::string *reconciliationID)
{
	ns2__PayPalPaymentReply *_p = ::soap_new_ns2__PayPalPaymentReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalPaymentReply::reasonCode = reasonCode;
		_p->ns2__PayPalPaymentReply::secureData = secureData;
		_p->ns2__PayPalPaymentReply::amount = amount;
		_p->ns2__PayPalPaymentReply::requestDateTime = requestDateTime;
		_p->ns2__PayPalPaymentReply::reconciliationID = reconciliationID;
	}
	return _p;
}

inline int soap_write_ns2__PayPalPaymentReply(struct soap *soap, ns2__PayPalPaymentReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPaymentReply", p->soap_type() == SOAP_TYPE_ns2__PayPalPaymentReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalPaymentReply(struct soap *soap, const char *URL, ns2__PayPalPaymentReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPaymentReply", p->soap_type() == SOAP_TYPE_ns2__PayPalPaymentReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalPaymentReply(struct soap *soap, const char *URL, ns2__PayPalPaymentReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPaymentReply", p->soap_type() == SOAP_TYPE_ns2__PayPalPaymentReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalPaymentReply(struct soap *soap, const char *URL, ns2__PayPalPaymentReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPaymentReply", p->soap_type() == SOAP_TYPE_ns2__PayPalPaymentReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalPaymentReply * SOAP_FMAC4 soap_get_ns2__PayPalPaymentReply(struct soap*, ns2__PayPalPaymentReply *, const char*, const char*);

inline int soap_read_ns2__PayPalPaymentReply(struct soap *soap, ns2__PayPalPaymentReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalPaymentReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalPaymentReply(struct soap *soap, const char *URL, ns2__PayPalPaymentReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalPaymentReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalPaymentReply(struct soap *soap, ns2__PayPalPaymentReply *p)
{
	if (::soap_read_ns2__PayPalPaymentReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PaySubscriptionDeleteReply_DEFINED
#define SOAP_TYPE_ns2__PaySubscriptionDeleteReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PaySubscriptionDeleteReply(struct soap*, const char*, int, const ns2__PaySubscriptionDeleteReply *, const char*);
SOAP_FMAC3 ns2__PaySubscriptionDeleteReply * SOAP_FMAC4 soap_in_ns2__PaySubscriptionDeleteReply(struct soap*, const char*, ns2__PaySubscriptionDeleteReply *, const char*);
SOAP_FMAC1 ns2__PaySubscriptionDeleteReply * SOAP_FMAC2 soap_instantiate_ns2__PaySubscriptionDeleteReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PaySubscriptionDeleteReply * soap_new_ns2__PaySubscriptionDeleteReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PaySubscriptionDeleteReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PaySubscriptionDeleteReply * soap_new_req_ns2__PaySubscriptionDeleteReply(
	struct soap *soap,
	const std::string& reasonCode,
	const std::string& subscriptionID)
{
	ns2__PaySubscriptionDeleteReply *_p = ::soap_new_ns2__PaySubscriptionDeleteReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionDeleteReply::reasonCode = reasonCode;
		_p->ns2__PaySubscriptionDeleteReply::subscriptionID = subscriptionID;
	}
	return _p;
}

inline ns2__PaySubscriptionDeleteReply * soap_new_set_ns2__PaySubscriptionDeleteReply(
	struct soap *soap,
	const std::string& reasonCode,
	const std::string& subscriptionID,
	std::string *instrumentIdentifierID)
{
	ns2__PaySubscriptionDeleteReply *_p = ::soap_new_ns2__PaySubscriptionDeleteReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionDeleteReply::reasonCode = reasonCode;
		_p->ns2__PaySubscriptionDeleteReply::subscriptionID = subscriptionID;
		_p->ns2__PaySubscriptionDeleteReply::instrumentIdentifierID = instrumentIdentifierID;
	}
	return _p;
}

inline int soap_write_ns2__PaySubscriptionDeleteReply(struct soap *soap, ns2__PaySubscriptionDeleteReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionDeleteReply", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionDeleteReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PaySubscriptionDeleteReply(struct soap *soap, const char *URL, ns2__PaySubscriptionDeleteReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionDeleteReply", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionDeleteReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PaySubscriptionDeleteReply(struct soap *soap, const char *URL, ns2__PaySubscriptionDeleteReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionDeleteReply", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionDeleteReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PaySubscriptionDeleteReply(struct soap *soap, const char *URL, ns2__PaySubscriptionDeleteReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionDeleteReply", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionDeleteReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PaySubscriptionDeleteReply * SOAP_FMAC4 soap_get_ns2__PaySubscriptionDeleteReply(struct soap*, ns2__PaySubscriptionDeleteReply *, const char*, const char*);

inline int soap_read_ns2__PaySubscriptionDeleteReply(struct soap *soap, ns2__PaySubscriptionDeleteReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PaySubscriptionDeleteReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PaySubscriptionDeleteReply(struct soap *soap, const char *URL, ns2__PaySubscriptionDeleteReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PaySubscriptionDeleteReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PaySubscriptionDeleteReply(struct soap *soap, ns2__PaySubscriptionDeleteReply *p)
{
	if (::soap_read_ns2__PaySubscriptionDeleteReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PaySubscriptionRetrieveReply_DEFINED
#define SOAP_TYPE_ns2__PaySubscriptionRetrieveReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PaySubscriptionRetrieveReply(struct soap*, const char*, int, const ns2__PaySubscriptionRetrieveReply *, const char*);
SOAP_FMAC3 ns2__PaySubscriptionRetrieveReply * SOAP_FMAC4 soap_in_ns2__PaySubscriptionRetrieveReply(struct soap*, const char*, ns2__PaySubscriptionRetrieveReply *, const char*);
SOAP_FMAC1 ns2__PaySubscriptionRetrieveReply * SOAP_FMAC2 soap_instantiate_ns2__PaySubscriptionRetrieveReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PaySubscriptionRetrieveReply * soap_new_ns2__PaySubscriptionRetrieveReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PaySubscriptionRetrieveReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PaySubscriptionRetrieveReply * soap_new_req_ns2__PaySubscriptionRetrieveReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PaySubscriptionRetrieveReply *_p = ::soap_new_ns2__PaySubscriptionRetrieveReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionRetrieveReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PaySubscriptionRetrieveReply * soap_new_set_ns2__PaySubscriptionRetrieveReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *approvalRequired,
	std::string *automaticRenew,
	std::string *cardAccountNumber,
	std::string *cardExpirationMonth,
	std::string *cardExpirationYear,
	std::string *cardIssueNumber,
	std::string *cardStartMonth,
	std::string *cardStartYear,
	std::string *cardType,
	std::string *checkAccountNumber,
	std::string *checkAccountType,
	std::string *checkBankTransitNumber,
	std::string *checkSecCode,
	std::string *checkAuthenticateID,
	std::string *city,
	std::string *comments,
	std::string *companyName,
	std::string *country,
	std::string *currency,
	std::string *customerAccountID,
	std::string *email,
	std::string *endDate,
	std::string *firstName,
	std::string *frequency,
	std::string *lastName,
	std::string *merchantReferenceCode,
	std::string *paymentMethod,
	std::string *paymentsRemaining,
	std::string *phoneNumber,
	std::string *postalCode,
	std::string *recurringAmount,
	std::string *setupAmount,
	std::string *startDate,
	std::string *state,
	std::string *status,
	std::string *street1,
	std::string *street2,
	std::string *subscriptionID,
	std::string *subscriptionIDNew,
	std::string *title,
	std::string *totalPayments,
	std::string *shipToFirstName,
	std::string *shipToLastName,
	std::string *shipToStreet1,
	std::string *shipToStreet2,
	std::string *shipToCity,
	std::string *shipToState,
	std::string *shipToPostalCode,
	std::string *shipToCompany,
	std::string *shipToCountry,
	std::string *billPayment,
	std::string *merchantDefinedDataField1,
	std::string *merchantDefinedDataField2,
	std::string *merchantDefinedDataField3,
	std::string *merchantDefinedDataField4,
	std::string *merchantSecureDataField1,
	std::string *merchantSecureDataField2,
	std::string *merchantSecureDataField3,
	std::string *merchantSecureDataField4,
	std::string *ownerMerchantID,
	std::string *companyTaxID,
	std::string *driversLicenseNumber,
	std::string *driversLicenseState,
	std::string *dateOfBirth,
	std::string *instrumentIdentifierID,
	std::string *instrumentIdentifierStatus,
	std::string *instrumentIdentifierSuccessorID,
	std::string *subsequentAuthTransactionID,
	std::string *latestCardSuffix,
	std::string *latestCardExpirationMonth,
	std::string *latestCardExpirationYear)
{
	ns2__PaySubscriptionRetrieveReply *_p = ::soap_new_ns2__PaySubscriptionRetrieveReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionRetrieveReply::reasonCode = reasonCode;
		_p->ns2__PaySubscriptionRetrieveReply::approvalRequired = approvalRequired;
		_p->ns2__PaySubscriptionRetrieveReply::automaticRenew = automaticRenew;
		_p->ns2__PaySubscriptionRetrieveReply::cardAccountNumber = cardAccountNumber;
		_p->ns2__PaySubscriptionRetrieveReply::cardExpirationMonth = cardExpirationMonth;
		_p->ns2__PaySubscriptionRetrieveReply::cardExpirationYear = cardExpirationYear;
		_p->ns2__PaySubscriptionRetrieveReply::cardIssueNumber = cardIssueNumber;
		_p->ns2__PaySubscriptionRetrieveReply::cardStartMonth = cardStartMonth;
		_p->ns2__PaySubscriptionRetrieveReply::cardStartYear = cardStartYear;
		_p->ns2__PaySubscriptionRetrieveReply::cardType = cardType;
		_p->ns2__PaySubscriptionRetrieveReply::checkAccountNumber = checkAccountNumber;
		_p->ns2__PaySubscriptionRetrieveReply::checkAccountType = checkAccountType;
		_p->ns2__PaySubscriptionRetrieveReply::checkBankTransitNumber = checkBankTransitNumber;
		_p->ns2__PaySubscriptionRetrieveReply::checkSecCode = checkSecCode;
		_p->ns2__PaySubscriptionRetrieveReply::checkAuthenticateID = checkAuthenticateID;
		_p->ns2__PaySubscriptionRetrieveReply::city = city;
		_p->ns2__PaySubscriptionRetrieveReply::comments = comments;
		_p->ns2__PaySubscriptionRetrieveReply::companyName = companyName;
		_p->ns2__PaySubscriptionRetrieveReply::country = country;
		_p->ns2__PaySubscriptionRetrieveReply::currency = currency;
		_p->ns2__PaySubscriptionRetrieveReply::customerAccountID = customerAccountID;
		_p->ns2__PaySubscriptionRetrieveReply::email = email;
		_p->ns2__PaySubscriptionRetrieveReply::endDate = endDate;
		_p->ns2__PaySubscriptionRetrieveReply::firstName = firstName;
		_p->ns2__PaySubscriptionRetrieveReply::frequency = frequency;
		_p->ns2__PaySubscriptionRetrieveReply::lastName = lastName;
		_p->ns2__PaySubscriptionRetrieveReply::merchantReferenceCode = merchantReferenceCode;
		_p->ns2__PaySubscriptionRetrieveReply::paymentMethod = paymentMethod;
		_p->ns2__PaySubscriptionRetrieveReply::paymentsRemaining = paymentsRemaining;
		_p->ns2__PaySubscriptionRetrieveReply::phoneNumber = phoneNumber;
		_p->ns2__PaySubscriptionRetrieveReply::postalCode = postalCode;
		_p->ns2__PaySubscriptionRetrieveReply::recurringAmount = recurringAmount;
		_p->ns2__PaySubscriptionRetrieveReply::setupAmount = setupAmount;
		_p->ns2__PaySubscriptionRetrieveReply::startDate = startDate;
		_p->ns2__PaySubscriptionRetrieveReply::state = state;
		_p->ns2__PaySubscriptionRetrieveReply::status = status;
		_p->ns2__PaySubscriptionRetrieveReply::street1 = street1;
		_p->ns2__PaySubscriptionRetrieveReply::street2 = street2;
		_p->ns2__PaySubscriptionRetrieveReply::subscriptionID = subscriptionID;
		_p->ns2__PaySubscriptionRetrieveReply::subscriptionIDNew = subscriptionIDNew;
		_p->ns2__PaySubscriptionRetrieveReply::title = title;
		_p->ns2__PaySubscriptionRetrieveReply::totalPayments = totalPayments;
		_p->ns2__PaySubscriptionRetrieveReply::shipToFirstName = shipToFirstName;
		_p->ns2__PaySubscriptionRetrieveReply::shipToLastName = shipToLastName;
		_p->ns2__PaySubscriptionRetrieveReply::shipToStreet1 = shipToStreet1;
		_p->ns2__PaySubscriptionRetrieveReply::shipToStreet2 = shipToStreet2;
		_p->ns2__PaySubscriptionRetrieveReply::shipToCity = shipToCity;
		_p->ns2__PaySubscriptionRetrieveReply::shipToState = shipToState;
		_p->ns2__PaySubscriptionRetrieveReply::shipToPostalCode = shipToPostalCode;
		_p->ns2__PaySubscriptionRetrieveReply::shipToCompany = shipToCompany;
		_p->ns2__PaySubscriptionRetrieveReply::shipToCountry = shipToCountry;
		_p->ns2__PaySubscriptionRetrieveReply::billPayment = billPayment;
		_p->ns2__PaySubscriptionRetrieveReply::merchantDefinedDataField1 = merchantDefinedDataField1;
		_p->ns2__PaySubscriptionRetrieveReply::merchantDefinedDataField2 = merchantDefinedDataField2;
		_p->ns2__PaySubscriptionRetrieveReply::merchantDefinedDataField3 = merchantDefinedDataField3;
		_p->ns2__PaySubscriptionRetrieveReply::merchantDefinedDataField4 = merchantDefinedDataField4;
		_p->ns2__PaySubscriptionRetrieveReply::merchantSecureDataField1 = merchantSecureDataField1;
		_p->ns2__PaySubscriptionRetrieveReply::merchantSecureDataField2 = merchantSecureDataField2;
		_p->ns2__PaySubscriptionRetrieveReply::merchantSecureDataField3 = merchantSecureDataField3;
		_p->ns2__PaySubscriptionRetrieveReply::merchantSecureDataField4 = merchantSecureDataField4;
		_p->ns2__PaySubscriptionRetrieveReply::ownerMerchantID = ownerMerchantID;
		_p->ns2__PaySubscriptionRetrieveReply::companyTaxID = companyTaxID;
		_p->ns2__PaySubscriptionRetrieveReply::driversLicenseNumber = driversLicenseNumber;
		_p->ns2__PaySubscriptionRetrieveReply::driversLicenseState = driversLicenseState;
		_p->ns2__PaySubscriptionRetrieveReply::dateOfBirth = dateOfBirth;
		_p->ns2__PaySubscriptionRetrieveReply::instrumentIdentifierID = instrumentIdentifierID;
		_p->ns2__PaySubscriptionRetrieveReply::instrumentIdentifierStatus = instrumentIdentifierStatus;
		_p->ns2__PaySubscriptionRetrieveReply::instrumentIdentifierSuccessorID = instrumentIdentifierSuccessorID;
		_p->ns2__PaySubscriptionRetrieveReply::subsequentAuthTransactionID = subsequentAuthTransactionID;
		_p->ns2__PaySubscriptionRetrieveReply::latestCardSuffix = latestCardSuffix;
		_p->ns2__PaySubscriptionRetrieveReply::latestCardExpirationMonth = latestCardExpirationMonth;
		_p->ns2__PaySubscriptionRetrieveReply::latestCardExpirationYear = latestCardExpirationYear;
	}
	return _p;
}

inline int soap_write_ns2__PaySubscriptionRetrieveReply(struct soap *soap, ns2__PaySubscriptionRetrieveReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionRetrieveReply", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionRetrieveReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PaySubscriptionRetrieveReply(struct soap *soap, const char *URL, ns2__PaySubscriptionRetrieveReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionRetrieveReply", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionRetrieveReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PaySubscriptionRetrieveReply(struct soap *soap, const char *URL, ns2__PaySubscriptionRetrieveReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionRetrieveReply", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionRetrieveReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PaySubscriptionRetrieveReply(struct soap *soap, const char *URL, ns2__PaySubscriptionRetrieveReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionRetrieveReply", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionRetrieveReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PaySubscriptionRetrieveReply * SOAP_FMAC4 soap_get_ns2__PaySubscriptionRetrieveReply(struct soap*, ns2__PaySubscriptionRetrieveReply *, const char*, const char*);

inline int soap_read_ns2__PaySubscriptionRetrieveReply(struct soap *soap, ns2__PaySubscriptionRetrieveReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PaySubscriptionRetrieveReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PaySubscriptionRetrieveReply(struct soap *soap, const char *URL, ns2__PaySubscriptionRetrieveReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PaySubscriptionRetrieveReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PaySubscriptionRetrieveReply(struct soap *soap, ns2__PaySubscriptionRetrieveReply *p)
{
	if (::soap_read_ns2__PaySubscriptionRetrieveReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PaySubscriptionEventUpdateReply_DEFINED
#define SOAP_TYPE_ns2__PaySubscriptionEventUpdateReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PaySubscriptionEventUpdateReply(struct soap*, const char*, int, const ns2__PaySubscriptionEventUpdateReply *, const char*);
SOAP_FMAC3 ns2__PaySubscriptionEventUpdateReply * SOAP_FMAC4 soap_in_ns2__PaySubscriptionEventUpdateReply(struct soap*, const char*, ns2__PaySubscriptionEventUpdateReply *, const char*);
SOAP_FMAC1 ns2__PaySubscriptionEventUpdateReply * SOAP_FMAC2 soap_instantiate_ns2__PaySubscriptionEventUpdateReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PaySubscriptionEventUpdateReply * soap_new_ns2__PaySubscriptionEventUpdateReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PaySubscriptionEventUpdateReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PaySubscriptionEventUpdateReply * soap_new_req_ns2__PaySubscriptionEventUpdateReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PaySubscriptionEventUpdateReply *_p = ::soap_new_ns2__PaySubscriptionEventUpdateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionEventUpdateReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PaySubscriptionEventUpdateReply * soap_new_set_ns2__PaySubscriptionEventUpdateReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *ownerMerchantID)
{
	ns2__PaySubscriptionEventUpdateReply *_p = ::soap_new_ns2__PaySubscriptionEventUpdateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionEventUpdateReply::reasonCode = reasonCode;
		_p->ns2__PaySubscriptionEventUpdateReply::ownerMerchantID = ownerMerchantID;
	}
	return _p;
}

inline int soap_write_ns2__PaySubscriptionEventUpdateReply(struct soap *soap, ns2__PaySubscriptionEventUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionEventUpdateReply", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionEventUpdateReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PaySubscriptionEventUpdateReply(struct soap *soap, const char *URL, ns2__PaySubscriptionEventUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionEventUpdateReply", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionEventUpdateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PaySubscriptionEventUpdateReply(struct soap *soap, const char *URL, ns2__PaySubscriptionEventUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionEventUpdateReply", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionEventUpdateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PaySubscriptionEventUpdateReply(struct soap *soap, const char *URL, ns2__PaySubscriptionEventUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionEventUpdateReply", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionEventUpdateReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PaySubscriptionEventUpdateReply * SOAP_FMAC4 soap_get_ns2__PaySubscriptionEventUpdateReply(struct soap*, ns2__PaySubscriptionEventUpdateReply *, const char*, const char*);

inline int soap_read_ns2__PaySubscriptionEventUpdateReply(struct soap *soap, ns2__PaySubscriptionEventUpdateReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PaySubscriptionEventUpdateReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PaySubscriptionEventUpdateReply(struct soap *soap, const char *URL, ns2__PaySubscriptionEventUpdateReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PaySubscriptionEventUpdateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PaySubscriptionEventUpdateReply(struct soap *soap, ns2__PaySubscriptionEventUpdateReply *p)
{
	if (::soap_read_ns2__PaySubscriptionEventUpdateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PaySubscriptionUpdateReply_DEFINED
#define SOAP_TYPE_ns2__PaySubscriptionUpdateReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PaySubscriptionUpdateReply(struct soap*, const char*, int, const ns2__PaySubscriptionUpdateReply *, const char*);
SOAP_FMAC3 ns2__PaySubscriptionUpdateReply * SOAP_FMAC4 soap_in_ns2__PaySubscriptionUpdateReply(struct soap*, const char*, ns2__PaySubscriptionUpdateReply *, const char*);
SOAP_FMAC1 ns2__PaySubscriptionUpdateReply * SOAP_FMAC2 soap_instantiate_ns2__PaySubscriptionUpdateReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PaySubscriptionUpdateReply * soap_new_ns2__PaySubscriptionUpdateReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PaySubscriptionUpdateReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PaySubscriptionUpdateReply * soap_new_req_ns2__PaySubscriptionUpdateReply(
	struct soap *soap,
	const std::string& reasonCode,
	const std::string& subscriptionID)
{
	ns2__PaySubscriptionUpdateReply *_p = ::soap_new_ns2__PaySubscriptionUpdateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionUpdateReply::reasonCode = reasonCode;
		_p->ns2__PaySubscriptionUpdateReply::subscriptionID = subscriptionID;
	}
	return _p;
}

inline ns2__PaySubscriptionUpdateReply * soap_new_set_ns2__PaySubscriptionUpdateReply(
	struct soap *soap,
	const std::string& reasonCode,
	const std::string& subscriptionID,
	std::string *subscriptionIDNew,
	std::string *ownerMerchantID,
	std::string *instrumentIdentifierID,
	std::string *instrumentIdentifierStatus,
	std::string *instrumentIdentifierNew,
	std::string *instrumentIdentifierSuccessorID)
{
	ns2__PaySubscriptionUpdateReply *_p = ::soap_new_ns2__PaySubscriptionUpdateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionUpdateReply::reasonCode = reasonCode;
		_p->ns2__PaySubscriptionUpdateReply::subscriptionID = subscriptionID;
		_p->ns2__PaySubscriptionUpdateReply::subscriptionIDNew = subscriptionIDNew;
		_p->ns2__PaySubscriptionUpdateReply::ownerMerchantID = ownerMerchantID;
		_p->ns2__PaySubscriptionUpdateReply::instrumentIdentifierID = instrumentIdentifierID;
		_p->ns2__PaySubscriptionUpdateReply::instrumentIdentifierStatus = instrumentIdentifierStatus;
		_p->ns2__PaySubscriptionUpdateReply::instrumentIdentifierNew = instrumentIdentifierNew;
		_p->ns2__PaySubscriptionUpdateReply::instrumentIdentifierSuccessorID = instrumentIdentifierSuccessorID;
	}
	return _p;
}

inline int soap_write_ns2__PaySubscriptionUpdateReply(struct soap *soap, ns2__PaySubscriptionUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionUpdateReply", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionUpdateReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PaySubscriptionUpdateReply(struct soap *soap, const char *URL, ns2__PaySubscriptionUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionUpdateReply", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionUpdateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PaySubscriptionUpdateReply(struct soap *soap, const char *URL, ns2__PaySubscriptionUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionUpdateReply", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionUpdateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PaySubscriptionUpdateReply(struct soap *soap, const char *URL, ns2__PaySubscriptionUpdateReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionUpdateReply", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionUpdateReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PaySubscriptionUpdateReply * SOAP_FMAC4 soap_get_ns2__PaySubscriptionUpdateReply(struct soap*, ns2__PaySubscriptionUpdateReply *, const char*, const char*);

inline int soap_read_ns2__PaySubscriptionUpdateReply(struct soap *soap, ns2__PaySubscriptionUpdateReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PaySubscriptionUpdateReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PaySubscriptionUpdateReply(struct soap *soap, const char *URL, ns2__PaySubscriptionUpdateReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PaySubscriptionUpdateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PaySubscriptionUpdateReply(struct soap *soap, ns2__PaySubscriptionUpdateReply *p)
{
	if (::soap_read_ns2__PaySubscriptionUpdateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PaySubscriptionCreateReply_DEFINED
#define SOAP_TYPE_ns2__PaySubscriptionCreateReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PaySubscriptionCreateReply(struct soap*, const char*, int, const ns2__PaySubscriptionCreateReply *, const char*);
SOAP_FMAC3 ns2__PaySubscriptionCreateReply * SOAP_FMAC4 soap_in_ns2__PaySubscriptionCreateReply(struct soap*, const char*, ns2__PaySubscriptionCreateReply *, const char*);
SOAP_FMAC1 ns2__PaySubscriptionCreateReply * SOAP_FMAC2 soap_instantiate_ns2__PaySubscriptionCreateReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PaySubscriptionCreateReply * soap_new_ns2__PaySubscriptionCreateReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PaySubscriptionCreateReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PaySubscriptionCreateReply * soap_new_req_ns2__PaySubscriptionCreateReply(
	struct soap *soap,
	const std::string& reasonCode,
	const std::string& subscriptionID)
{
	ns2__PaySubscriptionCreateReply *_p = ::soap_new_ns2__PaySubscriptionCreateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionCreateReply::reasonCode = reasonCode;
		_p->ns2__PaySubscriptionCreateReply::subscriptionID = subscriptionID;
	}
	return _p;
}

inline ns2__PaySubscriptionCreateReply * soap_new_set_ns2__PaySubscriptionCreateReply(
	struct soap *soap,
	const std::string& reasonCode,
	const std::string& subscriptionID,
	std::string *instrumentIdentifierID,
	std::string *instrumentIdentifierStatus,
	std::string *instrumentIdentifierNew,
	std::string *instrumentIdentifierSuccessorID)
{
	ns2__PaySubscriptionCreateReply *_p = ::soap_new_ns2__PaySubscriptionCreateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionCreateReply::reasonCode = reasonCode;
		_p->ns2__PaySubscriptionCreateReply::subscriptionID = subscriptionID;
		_p->ns2__PaySubscriptionCreateReply::instrumentIdentifierID = instrumentIdentifierID;
		_p->ns2__PaySubscriptionCreateReply::instrumentIdentifierStatus = instrumentIdentifierStatus;
		_p->ns2__PaySubscriptionCreateReply::instrumentIdentifierNew = instrumentIdentifierNew;
		_p->ns2__PaySubscriptionCreateReply::instrumentIdentifierSuccessorID = instrumentIdentifierSuccessorID;
	}
	return _p;
}

inline int soap_write_ns2__PaySubscriptionCreateReply(struct soap *soap, ns2__PaySubscriptionCreateReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionCreateReply", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionCreateReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PaySubscriptionCreateReply(struct soap *soap, const char *URL, ns2__PaySubscriptionCreateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionCreateReply", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionCreateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PaySubscriptionCreateReply(struct soap *soap, const char *URL, ns2__PaySubscriptionCreateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionCreateReply", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionCreateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PaySubscriptionCreateReply(struct soap *soap, const char *URL, ns2__PaySubscriptionCreateReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionCreateReply", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionCreateReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PaySubscriptionCreateReply * SOAP_FMAC4 soap_get_ns2__PaySubscriptionCreateReply(struct soap*, ns2__PaySubscriptionCreateReply *, const char*, const char*);

inline int soap_read_ns2__PaySubscriptionCreateReply(struct soap *soap, ns2__PaySubscriptionCreateReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PaySubscriptionCreateReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PaySubscriptionCreateReply(struct soap *soap, const char *URL, ns2__PaySubscriptionCreateReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PaySubscriptionCreateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PaySubscriptionCreateReply(struct soap *soap, ns2__PaySubscriptionCreateReply *p)
{
	if (::soap_read_ns2__PaySubscriptionCreateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DirectDebitRefundReply_DEFINED
#define SOAP_TYPE_ns2__DirectDebitRefundReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DirectDebitRefundReply(struct soap*, const char*, int, const ns2__DirectDebitRefundReply *, const char*);
SOAP_FMAC3 ns2__DirectDebitRefundReply * SOAP_FMAC4 soap_in_ns2__DirectDebitRefundReply(struct soap*, const char*, ns2__DirectDebitRefundReply *, const char*);
SOAP_FMAC1 ns2__DirectDebitRefundReply * SOAP_FMAC2 soap_instantiate_ns2__DirectDebitRefundReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DirectDebitRefundReply * soap_new_ns2__DirectDebitRefundReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DirectDebitRefundReply(soap, n, NULL, NULL, NULL);
}

inline ns2__DirectDebitRefundReply * soap_new_req_ns2__DirectDebitRefundReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__DirectDebitRefundReply *_p = ::soap_new_ns2__DirectDebitRefundReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DirectDebitRefundReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__DirectDebitRefundReply * soap_new_set_ns2__DirectDebitRefundReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *amount,
	std::string *requestDateTime,
	std::string *reconciliationID,
	std::string *processorResponse,
	std::string *processorTransactionID,
	std::string *iban,
	std::string *reconciliationReferenceNumber)
{
	ns2__DirectDebitRefundReply *_p = ::soap_new_ns2__DirectDebitRefundReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DirectDebitRefundReply::reasonCode = reasonCode;
		_p->ns2__DirectDebitRefundReply::amount = amount;
		_p->ns2__DirectDebitRefundReply::requestDateTime = requestDateTime;
		_p->ns2__DirectDebitRefundReply::reconciliationID = reconciliationID;
		_p->ns2__DirectDebitRefundReply::processorResponse = processorResponse;
		_p->ns2__DirectDebitRefundReply::processorTransactionID = processorTransactionID;
		_p->ns2__DirectDebitRefundReply::iban = iban;
		_p->ns2__DirectDebitRefundReply::reconciliationReferenceNumber = reconciliationReferenceNumber;
	}
	return _p;
}

inline int soap_write_ns2__DirectDebitRefundReply(struct soap *soap, ns2__DirectDebitRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitRefundReply", p->soap_type() == SOAP_TYPE_ns2__DirectDebitRefundReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DirectDebitRefundReply(struct soap *soap, const char *URL, ns2__DirectDebitRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitRefundReply", p->soap_type() == SOAP_TYPE_ns2__DirectDebitRefundReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DirectDebitRefundReply(struct soap *soap, const char *URL, ns2__DirectDebitRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitRefundReply", p->soap_type() == SOAP_TYPE_ns2__DirectDebitRefundReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DirectDebitRefundReply(struct soap *soap, const char *URL, ns2__DirectDebitRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitRefundReply", p->soap_type() == SOAP_TYPE_ns2__DirectDebitRefundReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DirectDebitRefundReply * SOAP_FMAC4 soap_get_ns2__DirectDebitRefundReply(struct soap*, ns2__DirectDebitRefundReply *, const char*, const char*);

inline int soap_read_ns2__DirectDebitRefundReply(struct soap *soap, ns2__DirectDebitRefundReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DirectDebitRefundReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DirectDebitRefundReply(struct soap *soap, const char *URL, ns2__DirectDebitRefundReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DirectDebitRefundReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DirectDebitRefundReply(struct soap *soap, ns2__DirectDebitRefundReply *p)
{
	if (::soap_read_ns2__DirectDebitRefundReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DirectDebitValidateReply_DEFINED
#define SOAP_TYPE_ns2__DirectDebitValidateReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DirectDebitValidateReply(struct soap*, const char*, int, const ns2__DirectDebitValidateReply *, const char*);
SOAP_FMAC3 ns2__DirectDebitValidateReply * SOAP_FMAC4 soap_in_ns2__DirectDebitValidateReply(struct soap*, const char*, ns2__DirectDebitValidateReply *, const char*);
SOAP_FMAC1 ns2__DirectDebitValidateReply * SOAP_FMAC2 soap_instantiate_ns2__DirectDebitValidateReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DirectDebitValidateReply * soap_new_ns2__DirectDebitValidateReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DirectDebitValidateReply(soap, n, NULL, NULL, NULL);
}

inline ns2__DirectDebitValidateReply * soap_new_req_ns2__DirectDebitValidateReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__DirectDebitValidateReply *_p = ::soap_new_ns2__DirectDebitValidateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DirectDebitValidateReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__DirectDebitValidateReply * soap_new_set_ns2__DirectDebitValidateReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *amount,
	std::string *requestDateTime,
	std::string *reconciliationID,
	std::string *processorResponse,
	std::string *iban,
	std::string *bankSwiftCode)
{
	ns2__DirectDebitValidateReply *_p = ::soap_new_ns2__DirectDebitValidateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DirectDebitValidateReply::reasonCode = reasonCode;
		_p->ns2__DirectDebitValidateReply::amount = amount;
		_p->ns2__DirectDebitValidateReply::requestDateTime = requestDateTime;
		_p->ns2__DirectDebitValidateReply::reconciliationID = reconciliationID;
		_p->ns2__DirectDebitValidateReply::processorResponse = processorResponse;
		_p->ns2__DirectDebitValidateReply::iban = iban;
		_p->ns2__DirectDebitValidateReply::bankSwiftCode = bankSwiftCode;
	}
	return _p;
}

inline int soap_write_ns2__DirectDebitValidateReply(struct soap *soap, ns2__DirectDebitValidateReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitValidateReply", p->soap_type() == SOAP_TYPE_ns2__DirectDebitValidateReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DirectDebitValidateReply(struct soap *soap, const char *URL, ns2__DirectDebitValidateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitValidateReply", p->soap_type() == SOAP_TYPE_ns2__DirectDebitValidateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DirectDebitValidateReply(struct soap *soap, const char *URL, ns2__DirectDebitValidateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitValidateReply", p->soap_type() == SOAP_TYPE_ns2__DirectDebitValidateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DirectDebitValidateReply(struct soap *soap, const char *URL, ns2__DirectDebitValidateReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitValidateReply", p->soap_type() == SOAP_TYPE_ns2__DirectDebitValidateReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DirectDebitValidateReply * SOAP_FMAC4 soap_get_ns2__DirectDebitValidateReply(struct soap*, ns2__DirectDebitValidateReply *, const char*, const char*);

inline int soap_read_ns2__DirectDebitValidateReply(struct soap *soap, ns2__DirectDebitValidateReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DirectDebitValidateReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DirectDebitValidateReply(struct soap *soap, const char *URL, ns2__DirectDebitValidateReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DirectDebitValidateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DirectDebitValidateReply(struct soap *soap, ns2__DirectDebitValidateReply *p)
{
	if (::soap_read_ns2__DirectDebitValidateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DirectDebitReply_DEFINED
#define SOAP_TYPE_ns2__DirectDebitReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DirectDebitReply(struct soap*, const char*, int, const ns2__DirectDebitReply *, const char*);
SOAP_FMAC3 ns2__DirectDebitReply * SOAP_FMAC4 soap_in_ns2__DirectDebitReply(struct soap*, const char*, ns2__DirectDebitReply *, const char*);
SOAP_FMAC1 ns2__DirectDebitReply * SOAP_FMAC2 soap_instantiate_ns2__DirectDebitReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DirectDebitReply * soap_new_ns2__DirectDebitReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DirectDebitReply(soap, n, NULL, NULL, NULL);
}

inline ns2__DirectDebitReply * soap_new_req_ns2__DirectDebitReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__DirectDebitReply *_p = ::soap_new_ns2__DirectDebitReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DirectDebitReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__DirectDebitReply * soap_new_set_ns2__DirectDebitReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *amount,
	std::string *requestDateTime,
	std::string *reconciliationID,
	std::string *processorResponse,
	std::string *processorTransactionID,
	std::string *mandateAuthenticationDate,
	std::string *mandateID,
	std::string *iban,
	std::string *reconciliationReferenceNumber)
{
	ns2__DirectDebitReply *_p = ::soap_new_ns2__DirectDebitReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DirectDebitReply::reasonCode = reasonCode;
		_p->ns2__DirectDebitReply::amount = amount;
		_p->ns2__DirectDebitReply::requestDateTime = requestDateTime;
		_p->ns2__DirectDebitReply::reconciliationID = reconciliationID;
		_p->ns2__DirectDebitReply::processorResponse = processorResponse;
		_p->ns2__DirectDebitReply::processorTransactionID = processorTransactionID;
		_p->ns2__DirectDebitReply::mandateAuthenticationDate = mandateAuthenticationDate;
		_p->ns2__DirectDebitReply::mandateID = mandateID;
		_p->ns2__DirectDebitReply::iban = iban;
		_p->ns2__DirectDebitReply::reconciliationReferenceNumber = reconciliationReferenceNumber;
	}
	return _p;
}

inline int soap_write_ns2__DirectDebitReply(struct soap *soap, ns2__DirectDebitReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitReply", p->soap_type() == SOAP_TYPE_ns2__DirectDebitReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DirectDebitReply(struct soap *soap, const char *URL, ns2__DirectDebitReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitReply", p->soap_type() == SOAP_TYPE_ns2__DirectDebitReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DirectDebitReply(struct soap *soap, const char *URL, ns2__DirectDebitReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitReply", p->soap_type() == SOAP_TYPE_ns2__DirectDebitReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DirectDebitReply(struct soap *soap, const char *URL, ns2__DirectDebitReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitReply", p->soap_type() == SOAP_TYPE_ns2__DirectDebitReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DirectDebitReply * SOAP_FMAC4 soap_get_ns2__DirectDebitReply(struct soap*, ns2__DirectDebitReply *, const char*, const char*);

inline int soap_read_ns2__DirectDebitReply(struct soap *soap, ns2__DirectDebitReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DirectDebitReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DirectDebitReply(struct soap *soap, const char *URL, ns2__DirectDebitReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DirectDebitReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DirectDebitReply(struct soap *soap, ns2__DirectDebitReply *p)
{
	if (::soap_read_ns2__DirectDebitReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__BankTransferRefundReply_DEFINED
#define SOAP_TYPE_ns2__BankTransferRefundReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BankTransferRefundReply(struct soap*, const char*, int, const ns2__BankTransferRefundReply *, const char*);
SOAP_FMAC3 ns2__BankTransferRefundReply * SOAP_FMAC4 soap_in_ns2__BankTransferRefundReply(struct soap*, const char*, ns2__BankTransferRefundReply *, const char*);
SOAP_FMAC1 ns2__BankTransferRefundReply * SOAP_FMAC2 soap_instantiate_ns2__BankTransferRefundReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BankTransferRefundReply * soap_new_ns2__BankTransferRefundReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__BankTransferRefundReply(soap, n, NULL, NULL, NULL);
}

inline ns2__BankTransferRefundReply * soap_new_req_ns2__BankTransferRefundReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__BankTransferRefundReply *_p = ::soap_new_ns2__BankTransferRefundReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BankTransferRefundReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__BankTransferRefundReply * soap_new_set_ns2__BankTransferRefundReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *amount,
	std::string *requestDateTime,
	std::string *reconciliationID,
	std::string *processorResponse,
	std::string *iban,
	std::string *reconciliationReferenceNumber)
{
	ns2__BankTransferRefundReply *_p = ::soap_new_ns2__BankTransferRefundReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BankTransferRefundReply::reasonCode = reasonCode;
		_p->ns2__BankTransferRefundReply::amount = amount;
		_p->ns2__BankTransferRefundReply::requestDateTime = requestDateTime;
		_p->ns2__BankTransferRefundReply::reconciliationID = reconciliationID;
		_p->ns2__BankTransferRefundReply::processorResponse = processorResponse;
		_p->ns2__BankTransferRefundReply::iban = iban;
		_p->ns2__BankTransferRefundReply::reconciliationReferenceNumber = reconciliationReferenceNumber;
	}
	return _p;
}

inline int soap_write_ns2__BankTransferRefundReply(struct soap *soap, ns2__BankTransferRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferRefundReply", p->soap_type() == SOAP_TYPE_ns2__BankTransferRefundReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__BankTransferRefundReply(struct soap *soap, const char *URL, ns2__BankTransferRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferRefundReply", p->soap_type() == SOAP_TYPE_ns2__BankTransferRefundReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__BankTransferRefundReply(struct soap *soap, const char *URL, ns2__BankTransferRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferRefundReply", p->soap_type() == SOAP_TYPE_ns2__BankTransferRefundReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__BankTransferRefundReply(struct soap *soap, const char *URL, ns2__BankTransferRefundReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferRefundReply", p->soap_type() == SOAP_TYPE_ns2__BankTransferRefundReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__BankTransferRefundReply * SOAP_FMAC4 soap_get_ns2__BankTransferRefundReply(struct soap*, ns2__BankTransferRefundReply *, const char*, const char*);

inline int soap_read_ns2__BankTransferRefundReply(struct soap *soap, ns2__BankTransferRefundReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__BankTransferRefundReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__BankTransferRefundReply(struct soap *soap, const char *URL, ns2__BankTransferRefundReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__BankTransferRefundReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__BankTransferRefundReply(struct soap *soap, ns2__BankTransferRefundReply *p)
{
	if (::soap_read_ns2__BankTransferRefundReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DirectDebitMandateReply_DEFINED
#define SOAP_TYPE_ns2__DirectDebitMandateReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DirectDebitMandateReply(struct soap*, const char*, int, const ns2__DirectDebitMandateReply *, const char*);
SOAP_FMAC3 ns2__DirectDebitMandateReply * SOAP_FMAC4 soap_in_ns2__DirectDebitMandateReply(struct soap*, const char*, ns2__DirectDebitMandateReply *, const char*);
SOAP_FMAC1 ns2__DirectDebitMandateReply * SOAP_FMAC2 soap_instantiate_ns2__DirectDebitMandateReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DirectDebitMandateReply * soap_new_ns2__DirectDebitMandateReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DirectDebitMandateReply(soap, n, NULL, NULL, NULL);
}

inline ns2__DirectDebitMandateReply * soap_new_req_ns2__DirectDebitMandateReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__DirectDebitMandateReply *_p = ::soap_new_ns2__DirectDebitMandateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DirectDebitMandateReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__DirectDebitMandateReply * soap_new_set_ns2__DirectDebitMandateReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *mandateID,
	std::string *mandateMaturationDate,
	std::string *requestDateTime,
	std::string *reconciliationID,
	std::string *processorResponse)
{
	ns2__DirectDebitMandateReply *_p = ::soap_new_ns2__DirectDebitMandateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DirectDebitMandateReply::reasonCode = reasonCode;
		_p->ns2__DirectDebitMandateReply::mandateID = mandateID;
		_p->ns2__DirectDebitMandateReply::mandateMaturationDate = mandateMaturationDate;
		_p->ns2__DirectDebitMandateReply::requestDateTime = requestDateTime;
		_p->ns2__DirectDebitMandateReply::reconciliationID = reconciliationID;
		_p->ns2__DirectDebitMandateReply::processorResponse = processorResponse;
	}
	return _p;
}

inline int soap_write_ns2__DirectDebitMandateReply(struct soap *soap, ns2__DirectDebitMandateReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitMandateReply", p->soap_type() == SOAP_TYPE_ns2__DirectDebitMandateReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DirectDebitMandateReply(struct soap *soap, const char *URL, ns2__DirectDebitMandateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitMandateReply", p->soap_type() == SOAP_TYPE_ns2__DirectDebitMandateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DirectDebitMandateReply(struct soap *soap, const char *URL, ns2__DirectDebitMandateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitMandateReply", p->soap_type() == SOAP_TYPE_ns2__DirectDebitMandateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DirectDebitMandateReply(struct soap *soap, const char *URL, ns2__DirectDebitMandateReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitMandateReply", p->soap_type() == SOAP_TYPE_ns2__DirectDebitMandateReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DirectDebitMandateReply * SOAP_FMAC4 soap_get_ns2__DirectDebitMandateReply(struct soap*, ns2__DirectDebitMandateReply *, const char*, const char*);

inline int soap_read_ns2__DirectDebitMandateReply(struct soap *soap, ns2__DirectDebitMandateReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DirectDebitMandateReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DirectDebitMandateReply(struct soap *soap, const char *URL, ns2__DirectDebitMandateReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DirectDebitMandateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DirectDebitMandateReply(struct soap *soap, ns2__DirectDebitMandateReply *p)
{
	if (::soap_read_ns2__DirectDebitMandateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__BankTransferRealTimeReply_DEFINED
#define SOAP_TYPE_ns2__BankTransferRealTimeReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BankTransferRealTimeReply(struct soap*, const char*, int, const ns2__BankTransferRealTimeReply *, const char*);
SOAP_FMAC3 ns2__BankTransferRealTimeReply * SOAP_FMAC4 soap_in_ns2__BankTransferRealTimeReply(struct soap*, const char*, ns2__BankTransferRealTimeReply *, const char*);
SOAP_FMAC1 ns2__BankTransferRealTimeReply * SOAP_FMAC2 soap_instantiate_ns2__BankTransferRealTimeReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BankTransferRealTimeReply * soap_new_ns2__BankTransferRealTimeReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__BankTransferRealTimeReply(soap, n, NULL, NULL, NULL);
}

inline ns2__BankTransferRealTimeReply * soap_new_req_ns2__BankTransferRealTimeReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__BankTransferRealTimeReply *_p = ::soap_new_ns2__BankTransferRealTimeReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BankTransferRealTimeReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__BankTransferRealTimeReply * soap_new_set_ns2__BankTransferRealTimeReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *formMethod,
	std::string *formAction,
	std::string *requestDateTime,
	std::string *reconciliationID,
	std::string *paymentReference,
	std::string *amount,
	std::string *reconciliationReferenceNumber)
{
	ns2__BankTransferRealTimeReply *_p = ::soap_new_ns2__BankTransferRealTimeReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BankTransferRealTimeReply::reasonCode = reasonCode;
		_p->ns2__BankTransferRealTimeReply::formMethod = formMethod;
		_p->ns2__BankTransferRealTimeReply::formAction = formAction;
		_p->ns2__BankTransferRealTimeReply::requestDateTime = requestDateTime;
		_p->ns2__BankTransferRealTimeReply::reconciliationID = reconciliationID;
		_p->ns2__BankTransferRealTimeReply::paymentReference = paymentReference;
		_p->ns2__BankTransferRealTimeReply::amount = amount;
		_p->ns2__BankTransferRealTimeReply::reconciliationReferenceNumber = reconciliationReferenceNumber;
	}
	return _p;
}

inline int soap_write_ns2__BankTransferRealTimeReply(struct soap *soap, ns2__BankTransferRealTimeReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferRealTimeReply", p->soap_type() == SOAP_TYPE_ns2__BankTransferRealTimeReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__BankTransferRealTimeReply(struct soap *soap, const char *URL, ns2__BankTransferRealTimeReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferRealTimeReply", p->soap_type() == SOAP_TYPE_ns2__BankTransferRealTimeReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__BankTransferRealTimeReply(struct soap *soap, const char *URL, ns2__BankTransferRealTimeReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferRealTimeReply", p->soap_type() == SOAP_TYPE_ns2__BankTransferRealTimeReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__BankTransferRealTimeReply(struct soap *soap, const char *URL, ns2__BankTransferRealTimeReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferRealTimeReply", p->soap_type() == SOAP_TYPE_ns2__BankTransferRealTimeReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__BankTransferRealTimeReply * SOAP_FMAC4 soap_get_ns2__BankTransferRealTimeReply(struct soap*, ns2__BankTransferRealTimeReply *, const char*, const char*);

inline int soap_read_ns2__BankTransferRealTimeReply(struct soap *soap, ns2__BankTransferRealTimeReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__BankTransferRealTimeReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__BankTransferRealTimeReply(struct soap *soap, const char *URL, ns2__BankTransferRealTimeReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__BankTransferRealTimeReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__BankTransferRealTimeReply(struct soap *soap, ns2__BankTransferRealTimeReply *p)
{
	if (::soap_read_ns2__BankTransferRealTimeReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__BankTransferReply_DEFINED
#define SOAP_TYPE_ns2__BankTransferReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BankTransferReply(struct soap*, const char*, int, const ns2__BankTransferReply *, const char*);
SOAP_FMAC3 ns2__BankTransferReply * SOAP_FMAC4 soap_in_ns2__BankTransferReply(struct soap*, const char*, ns2__BankTransferReply *, const char*);
SOAP_FMAC1 ns2__BankTransferReply * SOAP_FMAC2 soap_instantiate_ns2__BankTransferReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BankTransferReply * soap_new_ns2__BankTransferReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__BankTransferReply(soap, n, NULL, NULL, NULL);
}

inline ns2__BankTransferReply * soap_new_req_ns2__BankTransferReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__BankTransferReply *_p = ::soap_new_ns2__BankTransferReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BankTransferReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__BankTransferReply * soap_new_set_ns2__BankTransferReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *accountHolder,
	std::string *accountNumber,
	std::string *amount,
	std::string *bankName,
	std::string *bankCity,
	std::string *bankCountry,
	std::string *paymentReference,
	std::string *processorResponse,
	std::string *bankSwiftCode,
	std::string *bankSpecialID,
	std::string *requestDateTime,
	std::string *reconciliationID,
	std::string *iban,
	std::string *bankCode,
	std::string *branchCode,
	std::string *reconciliationReferenceNumber)
{
	ns2__BankTransferReply *_p = ::soap_new_ns2__BankTransferReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BankTransferReply::reasonCode = reasonCode;
		_p->ns2__BankTransferReply::accountHolder = accountHolder;
		_p->ns2__BankTransferReply::accountNumber = accountNumber;
		_p->ns2__BankTransferReply::amount = amount;
		_p->ns2__BankTransferReply::bankName = bankName;
		_p->ns2__BankTransferReply::bankCity = bankCity;
		_p->ns2__BankTransferReply::bankCountry = bankCountry;
		_p->ns2__BankTransferReply::paymentReference = paymentReference;
		_p->ns2__BankTransferReply::processorResponse = processorResponse;
		_p->ns2__BankTransferReply::bankSwiftCode = bankSwiftCode;
		_p->ns2__BankTransferReply::bankSpecialID = bankSpecialID;
		_p->ns2__BankTransferReply::requestDateTime = requestDateTime;
		_p->ns2__BankTransferReply::reconciliationID = reconciliationID;
		_p->ns2__BankTransferReply::iban = iban;
		_p->ns2__BankTransferReply::bankCode = bankCode;
		_p->ns2__BankTransferReply::branchCode = branchCode;
		_p->ns2__BankTransferReply::reconciliationReferenceNumber = reconciliationReferenceNumber;
	}
	return _p;
}

inline int soap_write_ns2__BankTransferReply(struct soap *soap, ns2__BankTransferReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferReply", p->soap_type() == SOAP_TYPE_ns2__BankTransferReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__BankTransferReply(struct soap *soap, const char *URL, ns2__BankTransferReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferReply", p->soap_type() == SOAP_TYPE_ns2__BankTransferReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__BankTransferReply(struct soap *soap, const char *URL, ns2__BankTransferReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferReply", p->soap_type() == SOAP_TYPE_ns2__BankTransferReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__BankTransferReply(struct soap *soap, const char *URL, ns2__BankTransferReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferReply", p->soap_type() == SOAP_TYPE_ns2__BankTransferReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__BankTransferReply * SOAP_FMAC4 soap_get_ns2__BankTransferReply(struct soap*, ns2__BankTransferReply *, const char*, const char*);

inline int soap_read_ns2__BankTransferReply(struct soap *soap, ns2__BankTransferReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__BankTransferReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__BankTransferReply(struct soap *soap, const char *URL, ns2__BankTransferReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__BankTransferReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__BankTransferReply(struct soap *soap, ns2__BankTransferReply *p)
{
	if (::soap_read_ns2__BankTransferReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__FXRatesReply_DEFINED
#define SOAP_TYPE_ns2__FXRatesReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FXRatesReply(struct soap*, const char*, int, const ns2__FXRatesReply *, const char*);
SOAP_FMAC3 ns2__FXRatesReply * SOAP_FMAC4 soap_in_ns2__FXRatesReply(struct soap*, const char*, ns2__FXRatesReply *, const char*);
SOAP_FMAC1 ns2__FXRatesReply * SOAP_FMAC2 soap_instantiate_ns2__FXRatesReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FXRatesReply * soap_new_ns2__FXRatesReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__FXRatesReply(soap, n, NULL, NULL, NULL);
}

inline ns2__FXRatesReply * soap_new_req_ns2__FXRatesReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__FXRatesReply *_p = ::soap_new_ns2__FXRatesReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__FXRatesReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__FXRatesReply * soap_new_set_ns2__FXRatesReply(
	struct soap *soap,
	const std::string& reasonCode,
	const std::vector<ns2__FXQuote *> & quote)
{
	ns2__FXRatesReply *_p = ::soap_new_ns2__FXRatesReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__FXRatesReply::reasonCode = reasonCode;
		_p->ns2__FXRatesReply::quote = quote;
	}
	return _p;
}

inline int soap_write_ns2__FXRatesReply(struct soap *soap, ns2__FXRatesReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FXRatesReply", p->soap_type() == SOAP_TYPE_ns2__FXRatesReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__FXRatesReply(struct soap *soap, const char *URL, ns2__FXRatesReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FXRatesReply", p->soap_type() == SOAP_TYPE_ns2__FXRatesReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__FXRatesReply(struct soap *soap, const char *URL, ns2__FXRatesReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FXRatesReply", p->soap_type() == SOAP_TYPE_ns2__FXRatesReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__FXRatesReply(struct soap *soap, const char *URL, ns2__FXRatesReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FXRatesReply", p->soap_type() == SOAP_TYPE_ns2__FXRatesReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__FXRatesReply * SOAP_FMAC4 soap_get_ns2__FXRatesReply(struct soap*, ns2__FXRatesReply *, const char*, const char*);

inline int soap_read_ns2__FXRatesReply(struct soap *soap, ns2__FXRatesReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__FXRatesReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__FXRatesReply(struct soap *soap, const char *URL, ns2__FXRatesReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__FXRatesReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__FXRatesReply(struct soap *soap, ns2__FXRatesReply *p)
{
	if (::soap_read_ns2__FXRatesReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__FXQuote_DEFINED
#define SOAP_TYPE_ns2__FXQuote_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FXQuote(struct soap*, const char*, int, const ns2__FXQuote *, const char*);
SOAP_FMAC3 ns2__FXQuote * SOAP_FMAC4 soap_in_ns2__FXQuote(struct soap*, const char*, ns2__FXQuote *, const char*);
SOAP_FMAC1 ns2__FXQuote * SOAP_FMAC2 soap_instantiate_ns2__FXQuote(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FXQuote * soap_new_ns2__FXQuote(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__FXQuote(soap, n, NULL, NULL, NULL);
}

inline ns2__FXQuote * soap_new_req_ns2__FXQuote(
	struct soap *soap)
{
	ns2__FXQuote *_p = ::soap_new_ns2__FXQuote(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__FXQuote * soap_new_set_ns2__FXQuote(
	struct soap *soap,
	std::string *id,
	std::string *rate,
	std::string *type,
	std::string *expirationDateTime,
	std::string *currency,
	std::string *fundingCurrency,
	std::string *receivedDateTime)
{
	ns2__FXQuote *_p = ::soap_new_ns2__FXQuote(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__FXQuote::id = id;
		_p->ns2__FXQuote::rate = rate;
		_p->ns2__FXQuote::type = type;
		_p->ns2__FXQuote::expirationDateTime = expirationDateTime;
		_p->ns2__FXQuote::currency = currency;
		_p->ns2__FXQuote::fundingCurrency = fundingCurrency;
		_p->ns2__FXQuote::receivedDateTime = receivedDateTime;
	}
	return _p;
}

inline int soap_write_ns2__FXQuote(struct soap *soap, ns2__FXQuote const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FXQuote", p->soap_type() == SOAP_TYPE_ns2__FXQuote ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__FXQuote(struct soap *soap, const char *URL, ns2__FXQuote const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FXQuote", p->soap_type() == SOAP_TYPE_ns2__FXQuote ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__FXQuote(struct soap *soap, const char *URL, ns2__FXQuote const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FXQuote", p->soap_type() == SOAP_TYPE_ns2__FXQuote ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__FXQuote(struct soap *soap, const char *URL, ns2__FXQuote const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FXQuote", p->soap_type() == SOAP_TYPE_ns2__FXQuote ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__FXQuote * SOAP_FMAC4 soap_get_ns2__FXQuote(struct soap*, ns2__FXQuote *, const char*, const char*);

inline int soap_read_ns2__FXQuote(struct soap *soap, ns2__FXQuote *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__FXQuote(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__FXQuote(struct soap *soap, const char *URL, ns2__FXQuote *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__FXQuote(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__FXQuote(struct soap *soap, ns2__FXQuote *p)
{
	if (::soap_read_ns2__FXQuote(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ExportReply_DEFINED
#define SOAP_TYPE_ns2__ExportReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ExportReply(struct soap*, const char*, int, const ns2__ExportReply *, const char*);
SOAP_FMAC3 ns2__ExportReply * SOAP_FMAC4 soap_in_ns2__ExportReply(struct soap*, const char*, ns2__ExportReply *, const char*);
SOAP_FMAC1 ns2__ExportReply * SOAP_FMAC2 soap_instantiate_ns2__ExportReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ExportReply * soap_new_ns2__ExportReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ExportReply(soap, n, NULL, NULL, NULL);
}

inline ns2__ExportReply * soap_new_req_ns2__ExportReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__ExportReply *_p = ::soap_new_ns2__ExportReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ExportReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__ExportReply * soap_new_set_ns2__ExportReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *ipCountryConfidence,
	std::string *infoCode)
{
	ns2__ExportReply *_p = ::soap_new_ns2__ExportReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ExportReply::reasonCode = reasonCode;
		_p->ns2__ExportReply::ipCountryConfidence = ipCountryConfidence;
		_p->ns2__ExportReply::infoCode = infoCode;
	}
	return _p;
}

inline int soap_write_ns2__ExportReply(struct soap *soap, ns2__ExportReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ExportReply", p->soap_type() == SOAP_TYPE_ns2__ExportReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ExportReply(struct soap *soap, const char *URL, ns2__ExportReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ExportReply", p->soap_type() == SOAP_TYPE_ns2__ExportReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ExportReply(struct soap *soap, const char *URL, ns2__ExportReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ExportReply", p->soap_type() == SOAP_TYPE_ns2__ExportReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ExportReply(struct soap *soap, const char *URL, ns2__ExportReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ExportReply", p->soap_type() == SOAP_TYPE_ns2__ExportReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ExportReply * SOAP_FMAC4 soap_get_ns2__ExportReply(struct soap*, ns2__ExportReply *, const char*, const char*);

inline int soap_read_ns2__ExportReply(struct soap *soap, ns2__ExportReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ExportReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ExportReply(struct soap *soap, const char *URL, ns2__ExportReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ExportReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ExportReply(struct soap *soap, ns2__ExportReply *p)
{
	if (::soap_read_ns2__ExportReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DeniedPartiesMatch_DEFINED
#define SOAP_TYPE_ns2__DeniedPartiesMatch_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DeniedPartiesMatch(struct soap*, const char*, int, const ns2__DeniedPartiesMatch *, const char*);
SOAP_FMAC3 ns2__DeniedPartiesMatch * SOAP_FMAC4 soap_in_ns2__DeniedPartiesMatch(struct soap*, const char*, ns2__DeniedPartiesMatch *, const char*);
SOAP_FMAC1 ns2__DeniedPartiesMatch * SOAP_FMAC2 soap_instantiate_ns2__DeniedPartiesMatch(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DeniedPartiesMatch * soap_new_ns2__DeniedPartiesMatch(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DeniedPartiesMatch(soap, n, NULL, NULL, NULL);
}

inline ns2__DeniedPartiesMatch * soap_new_req_ns2__DeniedPartiesMatch(
	struct soap *soap)
{
	ns2__DeniedPartiesMatch *_p = ::soap_new_ns2__DeniedPartiesMatch(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__DeniedPartiesMatch * soap_new_set_ns2__DeniedPartiesMatch(
	struct soap *soap,
	std::string *list,
	const std::vector<std::string> & name,
	const std::vector<std::string> & address,
	const std::vector<std::string> & program)
{
	ns2__DeniedPartiesMatch *_p = ::soap_new_ns2__DeniedPartiesMatch(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DeniedPartiesMatch::list = list;
		_p->ns2__DeniedPartiesMatch::name = name;
		_p->ns2__DeniedPartiesMatch::address = address;
		_p->ns2__DeniedPartiesMatch::program = program;
	}
	return _p;
}

inline int soap_write_ns2__DeniedPartiesMatch(struct soap *soap, ns2__DeniedPartiesMatch const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DeniedPartiesMatch", p->soap_type() == SOAP_TYPE_ns2__DeniedPartiesMatch ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DeniedPartiesMatch(struct soap *soap, const char *URL, ns2__DeniedPartiesMatch const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DeniedPartiesMatch", p->soap_type() == SOAP_TYPE_ns2__DeniedPartiesMatch ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DeniedPartiesMatch(struct soap *soap, const char *URL, ns2__DeniedPartiesMatch const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DeniedPartiesMatch", p->soap_type() == SOAP_TYPE_ns2__DeniedPartiesMatch ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DeniedPartiesMatch(struct soap *soap, const char *URL, ns2__DeniedPartiesMatch const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DeniedPartiesMatch", p->soap_type() == SOAP_TYPE_ns2__DeniedPartiesMatch ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DeniedPartiesMatch * SOAP_FMAC4 soap_get_ns2__DeniedPartiesMatch(struct soap*, ns2__DeniedPartiesMatch *, const char*, const char*);

inline int soap_read_ns2__DeniedPartiesMatch(struct soap *soap, ns2__DeniedPartiesMatch *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DeniedPartiesMatch(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DeniedPartiesMatch(struct soap *soap, const char *URL, ns2__DeniedPartiesMatch *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DeniedPartiesMatch(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DeniedPartiesMatch(struct soap *soap, ns2__DeniedPartiesMatch *p)
{
	if (::soap_read_ns2__DeniedPartiesMatch(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DAVReply_DEFINED
#define SOAP_TYPE_ns2__DAVReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DAVReply(struct soap*, const char*, int, const ns2__DAVReply *, const char*);
SOAP_FMAC3 ns2__DAVReply * SOAP_FMAC4 soap_in_ns2__DAVReply(struct soap*, const char*, ns2__DAVReply *, const char*);
SOAP_FMAC1 ns2__DAVReply * SOAP_FMAC2 soap_instantiate_ns2__DAVReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DAVReply * soap_new_ns2__DAVReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DAVReply(soap, n, NULL, NULL, NULL);
}

inline ns2__DAVReply * soap_new_req_ns2__DAVReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__DAVReply *_p = ::soap_new_ns2__DAVReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DAVReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__DAVReply * soap_new_set_ns2__DAVReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *addressType,
	std::string *apartmentInfo,
	std::string *barCode,
	std::string *barCodeCheckDigit,
	std::string *careOf,
	std::string *cityInfo,
	std::string *countryInfo,
	std::string *directionalInfo,
	std::string *lvrInfo,
	std::string *matchScore,
	std::string *standardizedAddress1,
	std::string *standardizedAddress2,
	std::string *standardizedAddress3,
	std::string *standardizedAddress4,
	std::string *standardizedAddressNoApt,
	std::string *standardizedCity,
	std::string *standardizedCounty,
	std::string *standardizedCSP,
	std::string *standardizedState,
	std::string *standardizedPostalCode,
	std::string *standardizedCountry,
	std::string *standardizedISOCountry,
	std::string *stateInfo,
	std::string *streetInfo,
	std::string *suffixInfo,
	std::string *postalCodeInfo,
	std::string *overallInfo,
	std::string *usInfo,
	std::string *caInfo,
	std::string *intlInfo,
	std::string *usErrorInfo,
	std::string *caErrorInfo,
	std::string *intlErrorInfo)
{
	ns2__DAVReply *_p = ::soap_new_ns2__DAVReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DAVReply::reasonCode = reasonCode;
		_p->ns2__DAVReply::addressType = addressType;
		_p->ns2__DAVReply::apartmentInfo = apartmentInfo;
		_p->ns2__DAVReply::barCode = barCode;
		_p->ns2__DAVReply::barCodeCheckDigit = barCodeCheckDigit;
		_p->ns2__DAVReply::careOf = careOf;
		_p->ns2__DAVReply::cityInfo = cityInfo;
		_p->ns2__DAVReply::countryInfo = countryInfo;
		_p->ns2__DAVReply::directionalInfo = directionalInfo;
		_p->ns2__DAVReply::lvrInfo = lvrInfo;
		_p->ns2__DAVReply::matchScore = matchScore;
		_p->ns2__DAVReply::standardizedAddress1 = standardizedAddress1;
		_p->ns2__DAVReply::standardizedAddress2 = standardizedAddress2;
		_p->ns2__DAVReply::standardizedAddress3 = standardizedAddress3;
		_p->ns2__DAVReply::standardizedAddress4 = standardizedAddress4;
		_p->ns2__DAVReply::standardizedAddressNoApt = standardizedAddressNoApt;
		_p->ns2__DAVReply::standardizedCity = standardizedCity;
		_p->ns2__DAVReply::standardizedCounty = standardizedCounty;
		_p->ns2__DAVReply::standardizedCSP = standardizedCSP;
		_p->ns2__DAVReply::standardizedState = standardizedState;
		_p->ns2__DAVReply::standardizedPostalCode = standardizedPostalCode;
		_p->ns2__DAVReply::standardizedCountry = standardizedCountry;
		_p->ns2__DAVReply::standardizedISOCountry = standardizedISOCountry;
		_p->ns2__DAVReply::stateInfo = stateInfo;
		_p->ns2__DAVReply::streetInfo = streetInfo;
		_p->ns2__DAVReply::suffixInfo = suffixInfo;
		_p->ns2__DAVReply::postalCodeInfo = postalCodeInfo;
		_p->ns2__DAVReply::overallInfo = overallInfo;
		_p->ns2__DAVReply::usInfo = usInfo;
		_p->ns2__DAVReply::caInfo = caInfo;
		_p->ns2__DAVReply::intlInfo = intlInfo;
		_p->ns2__DAVReply::usErrorInfo = usErrorInfo;
		_p->ns2__DAVReply::caErrorInfo = caErrorInfo;
		_p->ns2__DAVReply::intlErrorInfo = intlErrorInfo;
	}
	return _p;
}

inline int soap_write_ns2__DAVReply(struct soap *soap, ns2__DAVReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DAVReply", p->soap_type() == SOAP_TYPE_ns2__DAVReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DAVReply(struct soap *soap, const char *URL, ns2__DAVReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DAVReply", p->soap_type() == SOAP_TYPE_ns2__DAVReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DAVReply(struct soap *soap, const char *URL, ns2__DAVReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DAVReply", p->soap_type() == SOAP_TYPE_ns2__DAVReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DAVReply(struct soap *soap, const char *URL, ns2__DAVReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DAVReply", p->soap_type() == SOAP_TYPE_ns2__DAVReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DAVReply * SOAP_FMAC4 soap_get_ns2__DAVReply(struct soap*, ns2__DAVReply *, const char*, const char*);

inline int soap_read_ns2__DAVReply(struct soap *soap, ns2__DAVReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DAVReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DAVReply(struct soap *soap, const char *URL, ns2__DAVReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DAVReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DAVReply(struct soap *soap, ns2__DAVReply *p)
{
	if (::soap_read_ns2__DAVReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__AFSReply_DEFINED
#define SOAP_TYPE_ns2__AFSReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AFSReply(struct soap*, const char*, int, const ns2__AFSReply *, const char*);
SOAP_FMAC3 ns2__AFSReply * SOAP_FMAC4 soap_in_ns2__AFSReply(struct soap*, const char*, ns2__AFSReply *, const char*);
SOAP_FMAC1 ns2__AFSReply * SOAP_FMAC2 soap_instantiate_ns2__AFSReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AFSReply * soap_new_ns2__AFSReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__AFSReply(soap, n, NULL, NULL, NULL);
}

inline ns2__AFSReply * soap_new_req_ns2__AFSReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__AFSReply *_p = ::soap_new_ns2__AFSReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AFSReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__AFSReply * soap_new_set_ns2__AFSReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *afsResult,
	std::string *hostSeverity,
	std::string *consumerLocalTime,
	std::string *afsFactorCode,
	std::string *addressInfoCode,
	std::string *hotlistInfoCode,
	std::string *internetInfoCode,
	std::string *phoneInfoCode,
	std::string *suspiciousInfoCode,
	std::string *deviceBehaviorInfoCode,
	std::string *velocityInfoCode,
	std::string *identityInfoCode,
	std::string *ipCountry,
	std::string *ipState,
	std::string *ipCity,
	std::string *ipRoutingMethod,
	std::string *ipAnonymizerStatus,
	std::string *ipCarrier,
	std::string *ipOrganization,
	std::string *scoreModelUsed,
	std::string *cardBin,
	std::string *binCountry,
	std::string *cardAccountType,
	std::string *cardScheme,
	std::string *cardIssuer,
	ns2__DeviceFingerprint *deviceFingerprint)
{
	ns2__AFSReply *_p = ::soap_new_ns2__AFSReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AFSReply::reasonCode = reasonCode;
		_p->ns2__AFSReply::afsResult = afsResult;
		_p->ns2__AFSReply::hostSeverity = hostSeverity;
		_p->ns2__AFSReply::consumerLocalTime = consumerLocalTime;
		_p->ns2__AFSReply::afsFactorCode = afsFactorCode;
		_p->ns2__AFSReply::addressInfoCode = addressInfoCode;
		_p->ns2__AFSReply::hotlistInfoCode = hotlistInfoCode;
		_p->ns2__AFSReply::internetInfoCode = internetInfoCode;
		_p->ns2__AFSReply::phoneInfoCode = phoneInfoCode;
		_p->ns2__AFSReply::suspiciousInfoCode = suspiciousInfoCode;
		_p->ns2__AFSReply::deviceBehaviorInfoCode = deviceBehaviorInfoCode;
		_p->ns2__AFSReply::velocityInfoCode = velocityInfoCode;
		_p->ns2__AFSReply::identityInfoCode = identityInfoCode;
		_p->ns2__AFSReply::ipCountry = ipCountry;
		_p->ns2__AFSReply::ipState = ipState;
		_p->ns2__AFSReply::ipCity = ipCity;
		_p->ns2__AFSReply::ipRoutingMethod = ipRoutingMethod;
		_p->ns2__AFSReply::ipAnonymizerStatus = ipAnonymizerStatus;
		_p->ns2__AFSReply::ipCarrier = ipCarrier;
		_p->ns2__AFSReply::ipOrganization = ipOrganization;
		_p->ns2__AFSReply::scoreModelUsed = scoreModelUsed;
		_p->ns2__AFSReply::cardBin = cardBin;
		_p->ns2__AFSReply::binCountry = binCountry;
		_p->ns2__AFSReply::cardAccountType = cardAccountType;
		_p->ns2__AFSReply::cardScheme = cardScheme;
		_p->ns2__AFSReply::cardIssuer = cardIssuer;
		_p->ns2__AFSReply::deviceFingerprint = deviceFingerprint;
	}
	return _p;
}

inline int soap_write_ns2__AFSReply(struct soap *soap, ns2__AFSReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AFSReply", p->soap_type() == SOAP_TYPE_ns2__AFSReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__AFSReply(struct soap *soap, const char *URL, ns2__AFSReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AFSReply", p->soap_type() == SOAP_TYPE_ns2__AFSReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__AFSReply(struct soap *soap, const char *URL, ns2__AFSReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AFSReply", p->soap_type() == SOAP_TYPE_ns2__AFSReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__AFSReply(struct soap *soap, const char *URL, ns2__AFSReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AFSReply", p->soap_type() == SOAP_TYPE_ns2__AFSReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__AFSReply * SOAP_FMAC4 soap_get_ns2__AFSReply(struct soap*, ns2__AFSReply *, const char*, const char*);

inline int soap_read_ns2__AFSReply(struct soap *soap, ns2__AFSReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__AFSReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__AFSReply(struct soap *soap, const char *URL, ns2__AFSReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__AFSReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__AFSReply(struct soap *soap, ns2__AFSReply *p)
{
	if (::soap_read_ns2__AFSReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DeviceFingerprint_DEFINED
#define SOAP_TYPE_ns2__DeviceFingerprint_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DeviceFingerprint(struct soap*, const char*, int, const ns2__DeviceFingerprint *, const char*);
SOAP_FMAC3 ns2__DeviceFingerprint * SOAP_FMAC4 soap_in_ns2__DeviceFingerprint(struct soap*, const char*, ns2__DeviceFingerprint *, const char*);
SOAP_FMAC1 ns2__DeviceFingerprint * SOAP_FMAC2 soap_instantiate_ns2__DeviceFingerprint(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DeviceFingerprint * soap_new_ns2__DeviceFingerprint(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DeviceFingerprint(soap, n, NULL, NULL, NULL);
}

inline ns2__DeviceFingerprint * soap_new_req_ns2__DeviceFingerprint(
	struct soap *soap)
{
	ns2__DeviceFingerprint *_p = ::soap_new_ns2__DeviceFingerprint(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__DeviceFingerprint * soap_new_set_ns2__DeviceFingerprint(
	struct soap *soap,
	std::string *cookiesEnabled,
	std::string *flashEnabled,
	std::string *hash,
	std::string *imagesEnabled,
	std::string *javascriptEnabled,
	std::string *proxyIPAddress,
	std::string *proxyIPAddressActivities,
	std::string *proxyIPAddressAttributes,
	std::string *proxyServerType,
	std::string *trueIPAddress,
	std::string *trueIPAddressActivities,
	std::string *trueIPAddressAttributes,
	std::string *trueIPAddressCity,
	std::string *trueIPAddressState,
	std::string *trueIPAddressCountry,
	std::string *smartID,
	std::string *smartIDConfidenceLevel,
	std::string *screenResolution,
	std::string *browserLanguage,
	std::string *agentType,
	std::string *dateTime,
	std::string *profileDuration,
	std::string *profiledURL,
	std::string *timeOnPage,
	std::string *deviceMatch,
	std::string *firstEncounter,
	std::string *flashOS,
	std::string *flashVersion,
	std::string *deviceLatitude,
	std::string *deviceLongitude,
	std::string *gpsAccuracy,
	std::string *jbRoot,
	std::string *jbRootReason)
{
	ns2__DeviceFingerprint *_p = ::soap_new_ns2__DeviceFingerprint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DeviceFingerprint::cookiesEnabled = cookiesEnabled;
		_p->ns2__DeviceFingerprint::flashEnabled = flashEnabled;
		_p->ns2__DeviceFingerprint::hash = hash;
		_p->ns2__DeviceFingerprint::imagesEnabled = imagesEnabled;
		_p->ns2__DeviceFingerprint::javascriptEnabled = javascriptEnabled;
		_p->ns2__DeviceFingerprint::proxyIPAddress = proxyIPAddress;
		_p->ns2__DeviceFingerprint::proxyIPAddressActivities = proxyIPAddressActivities;
		_p->ns2__DeviceFingerprint::proxyIPAddressAttributes = proxyIPAddressAttributes;
		_p->ns2__DeviceFingerprint::proxyServerType = proxyServerType;
		_p->ns2__DeviceFingerprint::trueIPAddress = trueIPAddress;
		_p->ns2__DeviceFingerprint::trueIPAddressActivities = trueIPAddressActivities;
		_p->ns2__DeviceFingerprint::trueIPAddressAttributes = trueIPAddressAttributes;
		_p->ns2__DeviceFingerprint::trueIPAddressCity = trueIPAddressCity;
		_p->ns2__DeviceFingerprint::trueIPAddressState = trueIPAddressState;
		_p->ns2__DeviceFingerprint::trueIPAddressCountry = trueIPAddressCountry;
		_p->ns2__DeviceFingerprint::smartID = smartID;
		_p->ns2__DeviceFingerprint::smartIDConfidenceLevel = smartIDConfidenceLevel;
		_p->ns2__DeviceFingerprint::screenResolution = screenResolution;
		_p->ns2__DeviceFingerprint::browserLanguage = browserLanguage;
		_p->ns2__DeviceFingerprint::agentType = agentType;
		_p->ns2__DeviceFingerprint::dateTime = dateTime;
		_p->ns2__DeviceFingerprint::profileDuration = profileDuration;
		_p->ns2__DeviceFingerprint::profiledURL = profiledURL;
		_p->ns2__DeviceFingerprint::timeOnPage = timeOnPage;
		_p->ns2__DeviceFingerprint::deviceMatch = deviceMatch;
		_p->ns2__DeviceFingerprint::firstEncounter = firstEncounter;
		_p->ns2__DeviceFingerprint::flashOS = flashOS;
		_p->ns2__DeviceFingerprint::flashVersion = flashVersion;
		_p->ns2__DeviceFingerprint::deviceLatitude = deviceLatitude;
		_p->ns2__DeviceFingerprint::deviceLongitude = deviceLongitude;
		_p->ns2__DeviceFingerprint::gpsAccuracy = gpsAccuracy;
		_p->ns2__DeviceFingerprint::jbRoot = jbRoot;
		_p->ns2__DeviceFingerprint::jbRootReason = jbRootReason;
	}
	return _p;
}

inline int soap_write_ns2__DeviceFingerprint(struct soap *soap, ns2__DeviceFingerprint const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DeviceFingerprint", p->soap_type() == SOAP_TYPE_ns2__DeviceFingerprint ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DeviceFingerprint(struct soap *soap, const char *URL, ns2__DeviceFingerprint const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DeviceFingerprint", p->soap_type() == SOAP_TYPE_ns2__DeviceFingerprint ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DeviceFingerprint(struct soap *soap, const char *URL, ns2__DeviceFingerprint const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DeviceFingerprint", p->soap_type() == SOAP_TYPE_ns2__DeviceFingerprint ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DeviceFingerprint(struct soap *soap, const char *URL, ns2__DeviceFingerprint const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DeviceFingerprint", p->soap_type() == SOAP_TYPE_ns2__DeviceFingerprint ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DeviceFingerprint * SOAP_FMAC4 soap_get_ns2__DeviceFingerprint(struct soap*, ns2__DeviceFingerprint *, const char*, const char*);

inline int soap_read_ns2__DeviceFingerprint(struct soap *soap, ns2__DeviceFingerprint *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DeviceFingerprint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DeviceFingerprint(struct soap *soap, const char *URL, ns2__DeviceFingerprint *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DeviceFingerprint(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DeviceFingerprint(struct soap *soap, ns2__DeviceFingerprint *p)
{
	if (::soap_read_ns2__DeviceFingerprint(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__TaxReply_DEFINED
#define SOAP_TYPE_ns2__TaxReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TaxReply(struct soap*, const char*, int, const ns2__TaxReply *, const char*);
SOAP_FMAC3 ns2__TaxReply * SOAP_FMAC4 soap_in_ns2__TaxReply(struct soap*, const char*, ns2__TaxReply *, const char*);
SOAP_FMAC1 ns2__TaxReply * SOAP_FMAC2 soap_instantiate_ns2__TaxReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TaxReply * soap_new_ns2__TaxReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__TaxReply(soap, n, NULL, NULL, NULL);
}

inline ns2__TaxReply * soap_new_req_ns2__TaxReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__TaxReply *_p = ::soap_new_ns2__TaxReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__TaxReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__TaxReply * soap_new_set_ns2__TaxReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *currency,
	std::string *grandTotalAmount,
	std::string *totalTaxableAmount,
	std::string *totalExemptAmount,
	std::string *totalSpecialTaxAmount,
	std::string *totalCityTaxAmount,
	std::string *city,
	std::string *totalCountyTaxAmount,
	std::string *county,
	std::string *totalDistrictTaxAmount,
	std::string *totalStateTaxAmount,
	std::string *state,
	std::string *totalCountryTaxAmount,
	std::string *totalTaxAmount,
	std::string *commitIndicator,
	std::string *refundIndicator,
	std::string *postalCode,
	std::string *geocode,
	const std::vector<ns2__TaxReplyItem *> & item)
{
	ns2__TaxReply *_p = ::soap_new_ns2__TaxReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__TaxReply::reasonCode = reasonCode;
		_p->ns2__TaxReply::currency = currency;
		_p->ns2__TaxReply::grandTotalAmount = grandTotalAmount;
		_p->ns2__TaxReply::totalTaxableAmount = totalTaxableAmount;
		_p->ns2__TaxReply::totalExemptAmount = totalExemptAmount;
		_p->ns2__TaxReply::totalSpecialTaxAmount = totalSpecialTaxAmount;
		_p->ns2__TaxReply::totalCityTaxAmount = totalCityTaxAmount;
		_p->ns2__TaxReply::city = city;
		_p->ns2__TaxReply::totalCountyTaxAmount = totalCountyTaxAmount;
		_p->ns2__TaxReply::county = county;
		_p->ns2__TaxReply::totalDistrictTaxAmount = totalDistrictTaxAmount;
		_p->ns2__TaxReply::totalStateTaxAmount = totalStateTaxAmount;
		_p->ns2__TaxReply::state = state;
		_p->ns2__TaxReply::totalCountryTaxAmount = totalCountryTaxAmount;
		_p->ns2__TaxReply::totalTaxAmount = totalTaxAmount;
		_p->ns2__TaxReply::commitIndicator = commitIndicator;
		_p->ns2__TaxReply::refundIndicator = refundIndicator;
		_p->ns2__TaxReply::postalCode = postalCode;
		_p->ns2__TaxReply::geocode = geocode;
		_p->ns2__TaxReply::item = item;
	}
	return _p;
}

inline int soap_write_ns2__TaxReply(struct soap *soap, ns2__TaxReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TaxReply", p->soap_type() == SOAP_TYPE_ns2__TaxReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__TaxReply(struct soap *soap, const char *URL, ns2__TaxReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TaxReply", p->soap_type() == SOAP_TYPE_ns2__TaxReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__TaxReply(struct soap *soap, const char *URL, ns2__TaxReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TaxReply", p->soap_type() == SOAP_TYPE_ns2__TaxReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__TaxReply(struct soap *soap, const char *URL, ns2__TaxReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TaxReply", p->soap_type() == SOAP_TYPE_ns2__TaxReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__TaxReply * SOAP_FMAC4 soap_get_ns2__TaxReply(struct soap*, ns2__TaxReply *, const char*, const char*);

inline int soap_read_ns2__TaxReply(struct soap *soap, ns2__TaxReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__TaxReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__TaxReply(struct soap *soap, const char *URL, ns2__TaxReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__TaxReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__TaxReply(struct soap *soap, ns2__TaxReply *p)
{
	if (::soap_read_ns2__TaxReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__TaxReplyItemJurisdiction_DEFINED
#define SOAP_TYPE_ns2__TaxReplyItemJurisdiction_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TaxReplyItemJurisdiction(struct soap*, const char*, int, const ns2__TaxReplyItemJurisdiction *, const char*);
SOAP_FMAC3 ns2__TaxReplyItemJurisdiction * SOAP_FMAC4 soap_in_ns2__TaxReplyItemJurisdiction(struct soap*, const char*, ns2__TaxReplyItemJurisdiction *, const char*);
SOAP_FMAC1 ns2__TaxReplyItemJurisdiction * SOAP_FMAC2 soap_instantiate_ns2__TaxReplyItemJurisdiction(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TaxReplyItemJurisdiction * soap_new_ns2__TaxReplyItemJurisdiction(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__TaxReplyItemJurisdiction(soap, n, NULL, NULL, NULL);
}

inline ns2__TaxReplyItemJurisdiction * soap_new_req_ns2__TaxReplyItemJurisdiction(
	struct soap *soap,
	const std::string& name,
	const std::string& taxName,
	const std::string& jurisId)
{
	ns2__TaxReplyItemJurisdiction *_p = ::soap_new_ns2__TaxReplyItemJurisdiction(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__TaxReplyItemJurisdiction::name = name;
		_p->ns2__TaxReplyItemJurisdiction::taxName = taxName;
		_p->ns2__TaxReplyItemJurisdiction::jurisId = jurisId;
	}
	return _p;
}

inline ns2__TaxReplyItemJurisdiction * soap_new_set_ns2__TaxReplyItemJurisdiction(
	struct soap *soap,
	std::string *country,
	std::string *region,
	std::string *type,
	std::string *code,
	std::string *taxable,
	std::string *rate,
	std::string *taxAmount,
	const std::string& name,
	const std::string& taxName,
	const std::string& jurisId)
{
	ns2__TaxReplyItemJurisdiction *_p = ::soap_new_ns2__TaxReplyItemJurisdiction(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__TaxReplyItemJurisdiction::country = country;
		_p->ns2__TaxReplyItemJurisdiction::region = region;
		_p->ns2__TaxReplyItemJurisdiction::type = type;
		_p->ns2__TaxReplyItemJurisdiction::code = code;
		_p->ns2__TaxReplyItemJurisdiction::taxable = taxable;
		_p->ns2__TaxReplyItemJurisdiction::rate = rate;
		_p->ns2__TaxReplyItemJurisdiction::taxAmount = taxAmount;
		_p->ns2__TaxReplyItemJurisdiction::name = name;
		_p->ns2__TaxReplyItemJurisdiction::taxName = taxName;
		_p->ns2__TaxReplyItemJurisdiction::jurisId = jurisId;
	}
	return _p;
}

inline int soap_write_ns2__TaxReplyItemJurisdiction(struct soap *soap, ns2__TaxReplyItemJurisdiction const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TaxReplyItemJurisdiction", p->soap_type() == SOAP_TYPE_ns2__TaxReplyItemJurisdiction ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__TaxReplyItemJurisdiction(struct soap *soap, const char *URL, ns2__TaxReplyItemJurisdiction const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TaxReplyItemJurisdiction", p->soap_type() == SOAP_TYPE_ns2__TaxReplyItemJurisdiction ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__TaxReplyItemJurisdiction(struct soap *soap, const char *URL, ns2__TaxReplyItemJurisdiction const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TaxReplyItemJurisdiction", p->soap_type() == SOAP_TYPE_ns2__TaxReplyItemJurisdiction ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__TaxReplyItemJurisdiction(struct soap *soap, const char *URL, ns2__TaxReplyItemJurisdiction const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TaxReplyItemJurisdiction", p->soap_type() == SOAP_TYPE_ns2__TaxReplyItemJurisdiction ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__TaxReplyItemJurisdiction * SOAP_FMAC4 soap_get_ns2__TaxReplyItemJurisdiction(struct soap*, ns2__TaxReplyItemJurisdiction *, const char*, const char*);

inline int soap_read_ns2__TaxReplyItemJurisdiction(struct soap *soap, ns2__TaxReplyItemJurisdiction *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__TaxReplyItemJurisdiction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__TaxReplyItemJurisdiction(struct soap *soap, const char *URL, ns2__TaxReplyItemJurisdiction *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__TaxReplyItemJurisdiction(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__TaxReplyItemJurisdiction(struct soap *soap, ns2__TaxReplyItemJurisdiction *p)
{
	if (::soap_read_ns2__TaxReplyItemJurisdiction(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__TaxReplyItem_DEFINED
#define SOAP_TYPE_ns2__TaxReplyItem_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TaxReplyItem(struct soap*, const char*, int, const ns2__TaxReplyItem *, const char*);
SOAP_FMAC3 ns2__TaxReplyItem * SOAP_FMAC4 soap_in_ns2__TaxReplyItem(struct soap*, const char*, ns2__TaxReplyItem *, const char*);
SOAP_FMAC1 ns2__TaxReplyItem * SOAP_FMAC2 soap_instantiate_ns2__TaxReplyItem(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TaxReplyItem * soap_new_ns2__TaxReplyItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__TaxReplyItem(soap, n, NULL, NULL, NULL);
}

inline ns2__TaxReplyItem * soap_new_req_ns2__TaxReplyItem(
	struct soap *soap,
	const std::string& totalTaxAmount,
	const std::string& id)
{
	ns2__TaxReplyItem *_p = ::soap_new_ns2__TaxReplyItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__TaxReplyItem::totalTaxAmount = totalTaxAmount;
		_p->ns2__TaxReplyItem::id = id;
	}
	return _p;
}

inline ns2__TaxReplyItem * soap_new_set_ns2__TaxReplyItem(
	struct soap *soap,
	std::string *taxableAmount,
	std::string *exemptAmount,
	std::string *specialTaxAmount,
	std::string *cityTaxAmount,
	std::string *countyTaxAmount,
	std::string *districtTaxAmount,
	std::string *stateTaxAmount,
	std::string *countryTaxAmount,
	const std::string& totalTaxAmount,
	const std::vector<ns2__TaxReplyItemJurisdiction *> & jurisdiction,
	const std::string& id)
{
	ns2__TaxReplyItem *_p = ::soap_new_ns2__TaxReplyItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__TaxReplyItem::taxableAmount = taxableAmount;
		_p->ns2__TaxReplyItem::exemptAmount = exemptAmount;
		_p->ns2__TaxReplyItem::specialTaxAmount = specialTaxAmount;
		_p->ns2__TaxReplyItem::cityTaxAmount = cityTaxAmount;
		_p->ns2__TaxReplyItem::countyTaxAmount = countyTaxAmount;
		_p->ns2__TaxReplyItem::districtTaxAmount = districtTaxAmount;
		_p->ns2__TaxReplyItem::stateTaxAmount = stateTaxAmount;
		_p->ns2__TaxReplyItem::countryTaxAmount = countryTaxAmount;
		_p->ns2__TaxReplyItem::totalTaxAmount = totalTaxAmount;
		_p->ns2__TaxReplyItem::jurisdiction = jurisdiction;
		_p->ns2__TaxReplyItem::id = id;
	}
	return _p;
}

inline int soap_write_ns2__TaxReplyItem(struct soap *soap, ns2__TaxReplyItem const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TaxReplyItem", p->soap_type() == SOAP_TYPE_ns2__TaxReplyItem ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__TaxReplyItem(struct soap *soap, const char *URL, ns2__TaxReplyItem const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TaxReplyItem", p->soap_type() == SOAP_TYPE_ns2__TaxReplyItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__TaxReplyItem(struct soap *soap, const char *URL, ns2__TaxReplyItem const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TaxReplyItem", p->soap_type() == SOAP_TYPE_ns2__TaxReplyItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__TaxReplyItem(struct soap *soap, const char *URL, ns2__TaxReplyItem const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TaxReplyItem", p->soap_type() == SOAP_TYPE_ns2__TaxReplyItem ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__TaxReplyItem * SOAP_FMAC4 soap_get_ns2__TaxReplyItem(struct soap*, ns2__TaxReplyItem *, const char*, const char*);

inline int soap_read_ns2__TaxReplyItem(struct soap *soap, ns2__TaxReplyItem *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__TaxReplyItem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__TaxReplyItem(struct soap *soap, const char *URL, ns2__TaxReplyItem *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__TaxReplyItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__TaxReplyItem(struct soap *soap, ns2__TaxReplyItem *p)
{
	if (::soap_read_ns2__TaxReplyItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayerAuthValidateReply_DEFINED
#define SOAP_TYPE_ns2__PayerAuthValidateReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayerAuthValidateReply(struct soap*, const char*, int, const ns2__PayerAuthValidateReply *, const char*);
SOAP_FMAC3 ns2__PayerAuthValidateReply * SOAP_FMAC4 soap_in_ns2__PayerAuthValidateReply(struct soap*, const char*, ns2__PayerAuthValidateReply *, const char*);
SOAP_FMAC1 ns2__PayerAuthValidateReply * SOAP_FMAC2 soap_instantiate_ns2__PayerAuthValidateReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayerAuthValidateReply * soap_new_ns2__PayerAuthValidateReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayerAuthValidateReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayerAuthValidateReply * soap_new_req_ns2__PayerAuthValidateReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayerAuthValidateReply *_p = ::soap_new_ns2__PayerAuthValidateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayerAuthValidateReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayerAuthValidateReply * soap_new_set_ns2__PayerAuthValidateReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *authenticationResult,
	std::string *authenticationStatusMessage,
	std::string *cavv,
	std::string *cavvAlgorithm,
	std::string *commerceIndicator,
	std::string *eci,
	std::string *eciRaw,
	std::string *xid,
	std::string *ucafAuthenticationData,
	std::string *ucafCollectionIndicator,
	std::string *paresStatus,
	std::string *specificationVersion,
	std::string *directoryServerTransactionID,
	std::string *threeDSServerTransactionID,
	std::string *acsRenderingType,
	std::string *acsTransactionID,
	std::string *authenticationType,
	std::string *directoryServerErrorCode,
	std::string *directoryServerErrorDescription,
	std::string *interactionCounter,
	std::string *sdkTransactionID,
	std::string *whiteListStatus,
	std::string *whiteListStatusSource,
	std::string *effectiveAuthenticationType,
	std::string *authenticationStatusReason,
	std::string *challengeCancelCode,
	xsd__base64Binary *authorizationPayload,
	std::string *cardBin,
	std::string *cardTypeName)
{
	ns2__PayerAuthValidateReply *_p = ::soap_new_ns2__PayerAuthValidateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayerAuthValidateReply::reasonCode = reasonCode;
		_p->ns2__PayerAuthValidateReply::authenticationResult = authenticationResult;
		_p->ns2__PayerAuthValidateReply::authenticationStatusMessage = authenticationStatusMessage;
		_p->ns2__PayerAuthValidateReply::cavv = cavv;
		_p->ns2__PayerAuthValidateReply::cavvAlgorithm = cavvAlgorithm;
		_p->ns2__PayerAuthValidateReply::commerceIndicator = commerceIndicator;
		_p->ns2__PayerAuthValidateReply::eci = eci;
		_p->ns2__PayerAuthValidateReply::eciRaw = eciRaw;
		_p->ns2__PayerAuthValidateReply::xid = xid;
		_p->ns2__PayerAuthValidateReply::ucafAuthenticationData = ucafAuthenticationData;
		_p->ns2__PayerAuthValidateReply::ucafCollectionIndicator = ucafCollectionIndicator;
		_p->ns2__PayerAuthValidateReply::paresStatus = paresStatus;
		_p->ns2__PayerAuthValidateReply::specificationVersion = specificationVersion;
		_p->ns2__PayerAuthValidateReply::directoryServerTransactionID = directoryServerTransactionID;
		_p->ns2__PayerAuthValidateReply::threeDSServerTransactionID = threeDSServerTransactionID;
		_p->ns2__PayerAuthValidateReply::acsRenderingType = acsRenderingType;
		_p->ns2__PayerAuthValidateReply::acsTransactionID = acsTransactionID;
		_p->ns2__PayerAuthValidateReply::authenticationType = authenticationType;
		_p->ns2__PayerAuthValidateReply::directoryServerErrorCode = directoryServerErrorCode;
		_p->ns2__PayerAuthValidateReply::directoryServerErrorDescription = directoryServerErrorDescription;
		_p->ns2__PayerAuthValidateReply::interactionCounter = interactionCounter;
		_p->ns2__PayerAuthValidateReply::sdkTransactionID = sdkTransactionID;
		_p->ns2__PayerAuthValidateReply::whiteListStatus = whiteListStatus;
		_p->ns2__PayerAuthValidateReply::whiteListStatusSource = whiteListStatusSource;
		_p->ns2__PayerAuthValidateReply::effectiveAuthenticationType = effectiveAuthenticationType;
		_p->ns2__PayerAuthValidateReply::authenticationStatusReason = authenticationStatusReason;
		_p->ns2__PayerAuthValidateReply::challengeCancelCode = challengeCancelCode;
		_p->ns2__PayerAuthValidateReply::authorizationPayload = authorizationPayload;
		_p->ns2__PayerAuthValidateReply::cardBin = cardBin;
		_p->ns2__PayerAuthValidateReply::cardTypeName = cardTypeName;
	}
	return _p;
}

inline int soap_write_ns2__PayerAuthValidateReply(struct soap *soap, ns2__PayerAuthValidateReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthValidateReply", p->soap_type() == SOAP_TYPE_ns2__PayerAuthValidateReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayerAuthValidateReply(struct soap *soap, const char *URL, ns2__PayerAuthValidateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthValidateReply", p->soap_type() == SOAP_TYPE_ns2__PayerAuthValidateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayerAuthValidateReply(struct soap *soap, const char *URL, ns2__PayerAuthValidateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthValidateReply", p->soap_type() == SOAP_TYPE_ns2__PayerAuthValidateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayerAuthValidateReply(struct soap *soap, const char *URL, ns2__PayerAuthValidateReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthValidateReply", p->soap_type() == SOAP_TYPE_ns2__PayerAuthValidateReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayerAuthValidateReply * SOAP_FMAC4 soap_get_ns2__PayerAuthValidateReply(struct soap*, ns2__PayerAuthValidateReply *, const char*, const char*);

inline int soap_read_ns2__PayerAuthValidateReply(struct soap *soap, ns2__PayerAuthValidateReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayerAuthValidateReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayerAuthValidateReply(struct soap *soap, const char *URL, ns2__PayerAuthValidateReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayerAuthValidateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayerAuthValidateReply(struct soap *soap, ns2__PayerAuthValidateReply *p)
{
	if (::soap_read_ns2__PayerAuthValidateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayerAuthEnrollReply_DEFINED
#define SOAP_TYPE_ns2__PayerAuthEnrollReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayerAuthEnrollReply(struct soap*, const char*, int, const ns2__PayerAuthEnrollReply *, const char*);
SOAP_FMAC3 ns2__PayerAuthEnrollReply * SOAP_FMAC4 soap_in_ns2__PayerAuthEnrollReply(struct soap*, const char*, ns2__PayerAuthEnrollReply *, const char*);
SOAP_FMAC1 ns2__PayerAuthEnrollReply * SOAP_FMAC2 soap_instantiate_ns2__PayerAuthEnrollReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayerAuthEnrollReply * soap_new_ns2__PayerAuthEnrollReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayerAuthEnrollReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayerAuthEnrollReply * soap_new_req_ns2__PayerAuthEnrollReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayerAuthEnrollReply *_p = ::soap_new_ns2__PayerAuthEnrollReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayerAuthEnrollReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayerAuthEnrollReply * soap_new_set_ns2__PayerAuthEnrollReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *acsURL,
	std::string *accessToken,
	std::string *authenticationResult,
	std::string *authenticationStatusMessage,
	std::string *cavv,
	std::string *cavvAlgorithm,
	std::string *commerceIndicator,
	std::string *eci,
	std::string *eciRaw,
	std::string *paReq,
	std::string *proxyPAN,
	std::string *xid,
	std::string *proofXML,
	std::string *ucafAuthenticationData,
	std::string *ucafCollectionIndicator,
	std::string *paresStatus,
	std::string *veresEnrolled,
	std::string *authenticationPath,
	std::string *specificationVersion,
	std::string *authenticationTransactionID,
	std::string *directoryServerTransactionID,
	std::string *challengeRequired,
	std::string *threeDSServerTransactionID,
	std::string *acsRenderingType,
	std::string *acsTransactionID,
	std::string *authenticationType,
	std::string *cardholderMessage,
	std::string *directoryServerErrorCode,
	std::string *directoryServerErrorDescription,
	std::string *ivrEnabledMessage,
	std::string *ivrEncryptionKey,
	std::string *ivrEncryptionMandatory,
	std::string *ivrEncryptionType,
	std::string *ivrLabel,
	std::string *ivrPrompt,
	std::string *ivrStatusMessage,
	std::string *sdkTransactionID,
	std::string *stepUpUrl,
	std::string *whiteListStatus,
	std::string *whiteListStatusSource,
	std::string *effectiveAuthenticationType,
	std::string *authenticationStatusReason,
	std::string *networkScore,
	xsd__base64Binary *authorizationPayload,
	std::string *challengeCancelCode,
	std::string *decoupledAuthenticationIndicator,
	std::string *cardBin,
	std::string *cardTypeName,
	std::string *transactionIndicator,
	std::string *resendCountRemaining)
{
	ns2__PayerAuthEnrollReply *_p = ::soap_new_ns2__PayerAuthEnrollReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayerAuthEnrollReply::reasonCode = reasonCode;
		_p->ns2__PayerAuthEnrollReply::acsURL = acsURL;
		_p->ns2__PayerAuthEnrollReply::accessToken = accessToken;
		_p->ns2__PayerAuthEnrollReply::authenticationResult = authenticationResult;
		_p->ns2__PayerAuthEnrollReply::authenticationStatusMessage = authenticationStatusMessage;
		_p->ns2__PayerAuthEnrollReply::cavv = cavv;
		_p->ns2__PayerAuthEnrollReply::cavvAlgorithm = cavvAlgorithm;
		_p->ns2__PayerAuthEnrollReply::commerceIndicator = commerceIndicator;
		_p->ns2__PayerAuthEnrollReply::eci = eci;
		_p->ns2__PayerAuthEnrollReply::eciRaw = eciRaw;
		_p->ns2__PayerAuthEnrollReply::paReq = paReq;
		_p->ns2__PayerAuthEnrollReply::proxyPAN = proxyPAN;
		_p->ns2__PayerAuthEnrollReply::xid = xid;
		_p->ns2__PayerAuthEnrollReply::proofXML = proofXML;
		_p->ns2__PayerAuthEnrollReply::ucafAuthenticationData = ucafAuthenticationData;
		_p->ns2__PayerAuthEnrollReply::ucafCollectionIndicator = ucafCollectionIndicator;
		_p->ns2__PayerAuthEnrollReply::paresStatus = paresStatus;
		_p->ns2__PayerAuthEnrollReply::veresEnrolled = veresEnrolled;
		_p->ns2__PayerAuthEnrollReply::authenticationPath = authenticationPath;
		_p->ns2__PayerAuthEnrollReply::specificationVersion = specificationVersion;
		_p->ns2__PayerAuthEnrollReply::authenticationTransactionID = authenticationTransactionID;
		_p->ns2__PayerAuthEnrollReply::directoryServerTransactionID = directoryServerTransactionID;
		_p->ns2__PayerAuthEnrollReply::challengeRequired = challengeRequired;
		_p->ns2__PayerAuthEnrollReply::threeDSServerTransactionID = threeDSServerTransactionID;
		_p->ns2__PayerAuthEnrollReply::acsRenderingType = acsRenderingType;
		_p->ns2__PayerAuthEnrollReply::acsTransactionID = acsTransactionID;
		_p->ns2__PayerAuthEnrollReply::authenticationType = authenticationType;
		_p->ns2__PayerAuthEnrollReply::cardholderMessage = cardholderMessage;
		_p->ns2__PayerAuthEnrollReply::directoryServerErrorCode = directoryServerErrorCode;
		_p->ns2__PayerAuthEnrollReply::directoryServerErrorDescription = directoryServerErrorDescription;
		_p->ns2__PayerAuthEnrollReply::ivrEnabledMessage = ivrEnabledMessage;
		_p->ns2__PayerAuthEnrollReply::ivrEncryptionKey = ivrEncryptionKey;
		_p->ns2__PayerAuthEnrollReply::ivrEncryptionMandatory = ivrEncryptionMandatory;
		_p->ns2__PayerAuthEnrollReply::ivrEncryptionType = ivrEncryptionType;
		_p->ns2__PayerAuthEnrollReply::ivrLabel = ivrLabel;
		_p->ns2__PayerAuthEnrollReply::ivrPrompt = ivrPrompt;
		_p->ns2__PayerAuthEnrollReply::ivrStatusMessage = ivrStatusMessage;
		_p->ns2__PayerAuthEnrollReply::sdkTransactionID = sdkTransactionID;
		_p->ns2__PayerAuthEnrollReply::stepUpUrl = stepUpUrl;
		_p->ns2__PayerAuthEnrollReply::whiteListStatus = whiteListStatus;
		_p->ns2__PayerAuthEnrollReply::whiteListStatusSource = whiteListStatusSource;
		_p->ns2__PayerAuthEnrollReply::effectiveAuthenticationType = effectiveAuthenticationType;
		_p->ns2__PayerAuthEnrollReply::authenticationStatusReason = authenticationStatusReason;
		_p->ns2__PayerAuthEnrollReply::networkScore = networkScore;
		_p->ns2__PayerAuthEnrollReply::authorizationPayload = authorizationPayload;
		_p->ns2__PayerAuthEnrollReply::challengeCancelCode = challengeCancelCode;
		_p->ns2__PayerAuthEnrollReply::decoupledAuthenticationIndicator = decoupledAuthenticationIndicator;
		_p->ns2__PayerAuthEnrollReply::cardBin = cardBin;
		_p->ns2__PayerAuthEnrollReply::cardTypeName = cardTypeName;
		_p->ns2__PayerAuthEnrollReply::transactionIndicator = transactionIndicator;
		_p->ns2__PayerAuthEnrollReply::resendCountRemaining = resendCountRemaining;
	}
	return _p;
}

inline int soap_write_ns2__PayerAuthEnrollReply(struct soap *soap, ns2__PayerAuthEnrollReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthEnrollReply", p->soap_type() == SOAP_TYPE_ns2__PayerAuthEnrollReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayerAuthEnrollReply(struct soap *soap, const char *URL, ns2__PayerAuthEnrollReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthEnrollReply", p->soap_type() == SOAP_TYPE_ns2__PayerAuthEnrollReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayerAuthEnrollReply(struct soap *soap, const char *URL, ns2__PayerAuthEnrollReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthEnrollReply", p->soap_type() == SOAP_TYPE_ns2__PayerAuthEnrollReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayerAuthEnrollReply(struct soap *soap, const char *URL, ns2__PayerAuthEnrollReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthEnrollReply", p->soap_type() == SOAP_TYPE_ns2__PayerAuthEnrollReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayerAuthEnrollReply * SOAP_FMAC4 soap_get_ns2__PayerAuthEnrollReply(struct soap*, ns2__PayerAuthEnrollReply *, const char*, const char*);

inline int soap_read_ns2__PayerAuthEnrollReply(struct soap *soap, ns2__PayerAuthEnrollReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayerAuthEnrollReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayerAuthEnrollReply(struct soap *soap, const char *URL, ns2__PayerAuthEnrollReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayerAuthEnrollReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayerAuthEnrollReply(struct soap *soap, ns2__PayerAuthEnrollReply *p)
{
	if (::soap_read_ns2__PayerAuthEnrollReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayerAuthSetupReply_DEFINED
#define SOAP_TYPE_ns2__PayerAuthSetupReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayerAuthSetupReply(struct soap*, const char*, int, const ns2__PayerAuthSetupReply *, const char*);
SOAP_FMAC3 ns2__PayerAuthSetupReply * SOAP_FMAC4 soap_in_ns2__PayerAuthSetupReply(struct soap*, const char*, ns2__PayerAuthSetupReply *, const char*);
SOAP_FMAC1 ns2__PayerAuthSetupReply * SOAP_FMAC2 soap_instantiate_ns2__PayerAuthSetupReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayerAuthSetupReply * soap_new_ns2__PayerAuthSetupReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayerAuthSetupReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PayerAuthSetupReply * soap_new_req_ns2__PayerAuthSetupReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PayerAuthSetupReply *_p = ::soap_new_ns2__PayerAuthSetupReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayerAuthSetupReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PayerAuthSetupReply * soap_new_set_ns2__PayerAuthSetupReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *referenceID,
	std::string *deviceDataCollectionURL,
	std::string *accessToken)
{
	ns2__PayerAuthSetupReply *_p = ::soap_new_ns2__PayerAuthSetupReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayerAuthSetupReply::reasonCode = reasonCode;
		_p->ns2__PayerAuthSetupReply::referenceID = referenceID;
		_p->ns2__PayerAuthSetupReply::deviceDataCollectionURL = deviceDataCollectionURL;
		_p->ns2__PayerAuthSetupReply::accessToken = accessToken;
	}
	return _p;
}

inline int soap_write_ns2__PayerAuthSetupReply(struct soap *soap, ns2__PayerAuthSetupReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthSetupReply", p->soap_type() == SOAP_TYPE_ns2__PayerAuthSetupReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayerAuthSetupReply(struct soap *soap, const char *URL, ns2__PayerAuthSetupReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthSetupReply", p->soap_type() == SOAP_TYPE_ns2__PayerAuthSetupReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayerAuthSetupReply(struct soap *soap, const char *URL, ns2__PayerAuthSetupReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthSetupReply", p->soap_type() == SOAP_TYPE_ns2__PayerAuthSetupReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayerAuthSetupReply(struct soap *soap, const char *URL, ns2__PayerAuthSetupReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthSetupReply", p->soap_type() == SOAP_TYPE_ns2__PayerAuthSetupReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayerAuthSetupReply * SOAP_FMAC4 soap_get_ns2__PayerAuthSetupReply(struct soap*, ns2__PayerAuthSetupReply *, const char*, const char*);

inline int soap_read_ns2__PayerAuthSetupReply(struct soap *soap, ns2__PayerAuthSetupReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayerAuthSetupReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayerAuthSetupReply(struct soap *soap, const char *URL, ns2__PayerAuthSetupReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayerAuthSetupReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayerAuthSetupReply(struct soap *soap, ns2__PayerAuthSetupReply *p)
{
	if (::soap_read_ns2__PayerAuthSetupReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ECAuthenticateReply_DEFINED
#define SOAP_TYPE_ns2__ECAuthenticateReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ECAuthenticateReply(struct soap*, const char*, int, const ns2__ECAuthenticateReply *, const char*);
SOAP_FMAC3 ns2__ECAuthenticateReply * SOAP_FMAC4 soap_in_ns2__ECAuthenticateReply(struct soap*, const char*, ns2__ECAuthenticateReply *, const char*);
SOAP_FMAC1 ns2__ECAuthenticateReply * SOAP_FMAC2 soap_instantiate_ns2__ECAuthenticateReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ECAuthenticateReply * soap_new_ns2__ECAuthenticateReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ECAuthenticateReply(soap, n, NULL, NULL, NULL);
}

inline ns2__ECAuthenticateReply * soap_new_req_ns2__ECAuthenticateReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__ECAuthenticateReply *_p = ::soap_new_ns2__ECAuthenticateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ECAuthenticateReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__ECAuthenticateReply * soap_new_set_ns2__ECAuthenticateReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *requestDateTime,
	std::string *processorResponse,
	std::string *reconciliationID,
	std::string *checkpointSummary,
	std::string *fraudShieldIndicators)
{
	ns2__ECAuthenticateReply *_p = ::soap_new_ns2__ECAuthenticateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ECAuthenticateReply::reasonCode = reasonCode;
		_p->ns2__ECAuthenticateReply::requestDateTime = requestDateTime;
		_p->ns2__ECAuthenticateReply::processorResponse = processorResponse;
		_p->ns2__ECAuthenticateReply::reconciliationID = reconciliationID;
		_p->ns2__ECAuthenticateReply::checkpointSummary = checkpointSummary;
		_p->ns2__ECAuthenticateReply::fraudShieldIndicators = fraudShieldIndicators;
	}
	return _p;
}

inline int soap_write_ns2__ECAuthenticateReply(struct soap *soap, ns2__ECAuthenticateReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECAuthenticateReply", p->soap_type() == SOAP_TYPE_ns2__ECAuthenticateReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ECAuthenticateReply(struct soap *soap, const char *URL, ns2__ECAuthenticateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECAuthenticateReply", p->soap_type() == SOAP_TYPE_ns2__ECAuthenticateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ECAuthenticateReply(struct soap *soap, const char *URL, ns2__ECAuthenticateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECAuthenticateReply", p->soap_type() == SOAP_TYPE_ns2__ECAuthenticateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ECAuthenticateReply(struct soap *soap, const char *URL, ns2__ECAuthenticateReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECAuthenticateReply", p->soap_type() == SOAP_TYPE_ns2__ECAuthenticateReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ECAuthenticateReply * SOAP_FMAC4 soap_get_ns2__ECAuthenticateReply(struct soap*, ns2__ECAuthenticateReply *, const char*, const char*);

inline int soap_read_ns2__ECAuthenticateReply(struct soap *soap, ns2__ECAuthenticateReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ECAuthenticateReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ECAuthenticateReply(struct soap *soap, const char *URL, ns2__ECAuthenticateReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ECAuthenticateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ECAuthenticateReply(struct soap *soap, ns2__ECAuthenticateReply *p)
{
	if (::soap_read_ns2__ECAuthenticateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ECCreditReply_DEFINED
#define SOAP_TYPE_ns2__ECCreditReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ECCreditReply(struct soap*, const char*, int, const ns2__ECCreditReply *, const char*);
SOAP_FMAC3 ns2__ECCreditReply * SOAP_FMAC4 soap_in_ns2__ECCreditReply(struct soap*, const char*, ns2__ECCreditReply *, const char*);
SOAP_FMAC1 ns2__ECCreditReply * SOAP_FMAC2 soap_instantiate_ns2__ECCreditReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ECCreditReply * soap_new_ns2__ECCreditReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ECCreditReply(soap, n, NULL, NULL, NULL);
}

inline ns2__ECCreditReply * soap_new_req_ns2__ECCreditReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__ECCreditReply *_p = ::soap_new_ns2__ECCreditReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ECCreditReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__ECCreditReply * soap_new_set_ns2__ECCreditReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *settlementMethod,
	std::string *requestDateTime,
	std::string *amount,
	std::string *processorTransactionID,
	std::string *reconciliationID,
	std::string *processorResponse,
	std::string *verificationCode,
	std::string *verificationCodeRaw,
	std::string *correctedAccountNumber,
	std::string *correctedRoutingNumber,
	std::string *ownerMerchantID)
{
	ns2__ECCreditReply *_p = ::soap_new_ns2__ECCreditReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ECCreditReply::reasonCode = reasonCode;
		_p->ns2__ECCreditReply::settlementMethod = settlementMethod;
		_p->ns2__ECCreditReply::requestDateTime = requestDateTime;
		_p->ns2__ECCreditReply::amount = amount;
		_p->ns2__ECCreditReply::processorTransactionID = processorTransactionID;
		_p->ns2__ECCreditReply::reconciliationID = reconciliationID;
		_p->ns2__ECCreditReply::processorResponse = processorResponse;
		_p->ns2__ECCreditReply::verificationCode = verificationCode;
		_p->ns2__ECCreditReply::verificationCodeRaw = verificationCodeRaw;
		_p->ns2__ECCreditReply::correctedAccountNumber = correctedAccountNumber;
		_p->ns2__ECCreditReply::correctedRoutingNumber = correctedRoutingNumber;
		_p->ns2__ECCreditReply::ownerMerchantID = ownerMerchantID;
	}
	return _p;
}

inline int soap_write_ns2__ECCreditReply(struct soap *soap, ns2__ECCreditReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECCreditReply", p->soap_type() == SOAP_TYPE_ns2__ECCreditReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ECCreditReply(struct soap *soap, const char *URL, ns2__ECCreditReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECCreditReply", p->soap_type() == SOAP_TYPE_ns2__ECCreditReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ECCreditReply(struct soap *soap, const char *URL, ns2__ECCreditReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECCreditReply", p->soap_type() == SOAP_TYPE_ns2__ECCreditReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ECCreditReply(struct soap *soap, const char *URL, ns2__ECCreditReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECCreditReply", p->soap_type() == SOAP_TYPE_ns2__ECCreditReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ECCreditReply * SOAP_FMAC4 soap_get_ns2__ECCreditReply(struct soap*, ns2__ECCreditReply *, const char*, const char*);

inline int soap_read_ns2__ECCreditReply(struct soap *soap, ns2__ECCreditReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ECCreditReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ECCreditReply(struct soap *soap, const char *URL, ns2__ECCreditReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ECCreditReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ECCreditReply(struct soap *soap, ns2__ECCreditReply *p)
{
	if (::soap_read_ns2__ECCreditReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ECDebitReply_DEFINED
#define SOAP_TYPE_ns2__ECDebitReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ECDebitReply(struct soap*, const char*, int, const ns2__ECDebitReply *, const char*);
SOAP_FMAC3 ns2__ECDebitReply * SOAP_FMAC4 soap_in_ns2__ECDebitReply(struct soap*, const char*, ns2__ECDebitReply *, const char*);
SOAP_FMAC1 ns2__ECDebitReply * SOAP_FMAC2 soap_instantiate_ns2__ECDebitReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ECDebitReply * soap_new_ns2__ECDebitReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ECDebitReply(soap, n, NULL, NULL, NULL);
}

inline ns2__ECDebitReply * soap_new_req_ns2__ECDebitReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__ECDebitReply *_p = ::soap_new_ns2__ECDebitReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ECDebitReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__ECDebitReply * soap_new_set_ns2__ECDebitReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *settlementMethod,
	std::string *requestDateTime,
	std::string *amount,
	std::string *verificationLevel,
	std::string *processorTransactionID,
	std::string *reconciliationID,
	std::string *processorResponse,
	std::string *avsCode,
	std::string *avsCodeRaw,
	std::string *verificationCode,
	std::string *verificationCodeRaw,
	std::string *correctedAccountNumber,
	std::string *correctedRoutingNumber,
	std::string *ownerMerchantID)
{
	ns2__ECDebitReply *_p = ::soap_new_ns2__ECDebitReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ECDebitReply::reasonCode = reasonCode;
		_p->ns2__ECDebitReply::settlementMethod = settlementMethod;
		_p->ns2__ECDebitReply::requestDateTime = requestDateTime;
		_p->ns2__ECDebitReply::amount = amount;
		_p->ns2__ECDebitReply::verificationLevel = verificationLevel;
		_p->ns2__ECDebitReply::processorTransactionID = processorTransactionID;
		_p->ns2__ECDebitReply::reconciliationID = reconciliationID;
		_p->ns2__ECDebitReply::processorResponse = processorResponse;
		_p->ns2__ECDebitReply::avsCode = avsCode;
		_p->ns2__ECDebitReply::avsCodeRaw = avsCodeRaw;
		_p->ns2__ECDebitReply::verificationCode = verificationCode;
		_p->ns2__ECDebitReply::verificationCodeRaw = verificationCodeRaw;
		_p->ns2__ECDebitReply::correctedAccountNumber = correctedAccountNumber;
		_p->ns2__ECDebitReply::correctedRoutingNumber = correctedRoutingNumber;
		_p->ns2__ECDebitReply::ownerMerchantID = ownerMerchantID;
	}
	return _p;
}

inline int soap_write_ns2__ECDebitReply(struct soap *soap, ns2__ECDebitReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECDebitReply", p->soap_type() == SOAP_TYPE_ns2__ECDebitReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ECDebitReply(struct soap *soap, const char *URL, ns2__ECDebitReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECDebitReply", p->soap_type() == SOAP_TYPE_ns2__ECDebitReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ECDebitReply(struct soap *soap, const char *URL, ns2__ECDebitReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECDebitReply", p->soap_type() == SOAP_TYPE_ns2__ECDebitReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ECDebitReply(struct soap *soap, const char *URL, ns2__ECDebitReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECDebitReply", p->soap_type() == SOAP_TYPE_ns2__ECDebitReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ECDebitReply * SOAP_FMAC4 soap_get_ns2__ECDebitReply(struct soap*, ns2__ECDebitReply *, const char*, const char*);

inline int soap_read_ns2__ECDebitReply(struct soap *soap, ns2__ECDebitReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ECDebitReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ECDebitReply(struct soap *soap, const char *URL, ns2__ECDebitReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ECDebitReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ECDebitReply(struct soap *soap, ns2__ECDebitReply *p)
{
	if (::soap_read_ns2__ECDebitReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ECAVSReply_DEFINED
#define SOAP_TYPE_ns2__ECAVSReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ECAVSReply(struct soap*, const char*, int, const ns2__ECAVSReply *, const char*);
SOAP_FMAC3 ns2__ECAVSReply * SOAP_FMAC4 soap_in_ns2__ECAVSReply(struct soap*, const char*, ns2__ECAVSReply *, const char*);
SOAP_FMAC1 ns2__ECAVSReply * SOAP_FMAC2 soap_instantiate_ns2__ECAVSReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ECAVSReply * soap_new_ns2__ECAVSReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ECAVSReply(soap, n, NULL, NULL, NULL);
}

inline ns2__ECAVSReply * soap_new_req_ns2__ECAVSReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__ECAVSReply *_p = ::soap_new_ns2__ECAVSReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ECAVSReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__ECAVSReply * soap_new_set_ns2__ECAVSReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *validationType,
	std::string *primaryStatusCode,
	std::string *secondaryStatusCode,
	std::string *additionalStatusCode,
	std::string *numberOfReturns,
	std::string *lastReturnDate,
	std::string *lastReturnProcessorResponse,
	std::string *lastUpdateDate,
	std::string *addedOrClosedDate,
	std::string *previousStatusCode,
	std::string *fcraDisputeCode,
	std::string *scoredAccountProcessorResponse1,
	std::string *scoredAccountProcessorResponse2,
	std::string *scoredAccountProcessorResponse3,
	std::string *scoredAccountProcessorResponse5,
	std::string *customerDataConditionCode,
	std::string *matchBillToFullName,
	std::string *matchBillToPrefix,
	std::string *matchBillToFirstName,
	std::string *matchBillToMiddleName,
	std::string *matchBillToLastName,
	std::string *matchBillToSuffix,
	std::string *matchBillToCompany,
	std::string *matchBillToAddress,
	std::string *matchBillToCity,
	std::string *matchBillToState,
	std::string *matchBillToPostalCode,
	std::string *matchBillToPhoneNumber,
	std::string *matchBillToCompanyPhoneNumber,
	std::string *matchBillToCompanyTaxID,
	std::string *matchBillToSSN,
	std::string *matchBillToDateOfBirth,
	std::string *matchPersonalIDType,
	std::string *matchPersonalID,
	std::string *matchPersonalIDIssuedBy,
	std::string *overallMatchScore,
	std::string *calculatedResponse)
{
	ns2__ECAVSReply *_p = ::soap_new_ns2__ECAVSReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ECAVSReply::reasonCode = reasonCode;
		_p->ns2__ECAVSReply::validationType = validationType;
		_p->ns2__ECAVSReply::primaryStatusCode = primaryStatusCode;
		_p->ns2__ECAVSReply::secondaryStatusCode = secondaryStatusCode;
		_p->ns2__ECAVSReply::additionalStatusCode = additionalStatusCode;
		_p->ns2__ECAVSReply::numberOfReturns = numberOfReturns;
		_p->ns2__ECAVSReply::lastReturnDate = lastReturnDate;
		_p->ns2__ECAVSReply::lastReturnProcessorResponse = lastReturnProcessorResponse;
		_p->ns2__ECAVSReply::lastUpdateDate = lastUpdateDate;
		_p->ns2__ECAVSReply::addedOrClosedDate = addedOrClosedDate;
		_p->ns2__ECAVSReply::previousStatusCode = previousStatusCode;
		_p->ns2__ECAVSReply::fcraDisputeCode = fcraDisputeCode;
		_p->ns2__ECAVSReply::scoredAccountProcessorResponse1 = scoredAccountProcessorResponse1;
		_p->ns2__ECAVSReply::scoredAccountProcessorResponse2 = scoredAccountProcessorResponse2;
		_p->ns2__ECAVSReply::scoredAccountProcessorResponse3 = scoredAccountProcessorResponse3;
		_p->ns2__ECAVSReply::scoredAccountProcessorResponse5 = scoredAccountProcessorResponse5;
		_p->ns2__ECAVSReply::customerDataConditionCode = customerDataConditionCode;
		_p->ns2__ECAVSReply::matchBillToFullName = matchBillToFullName;
		_p->ns2__ECAVSReply::matchBillToPrefix = matchBillToPrefix;
		_p->ns2__ECAVSReply::matchBillToFirstName = matchBillToFirstName;
		_p->ns2__ECAVSReply::matchBillToMiddleName = matchBillToMiddleName;
		_p->ns2__ECAVSReply::matchBillToLastName = matchBillToLastName;
		_p->ns2__ECAVSReply::matchBillToSuffix = matchBillToSuffix;
		_p->ns2__ECAVSReply::matchBillToCompany = matchBillToCompany;
		_p->ns2__ECAVSReply::matchBillToAddress = matchBillToAddress;
		_p->ns2__ECAVSReply::matchBillToCity = matchBillToCity;
		_p->ns2__ECAVSReply::matchBillToState = matchBillToState;
		_p->ns2__ECAVSReply::matchBillToPostalCode = matchBillToPostalCode;
		_p->ns2__ECAVSReply::matchBillToPhoneNumber = matchBillToPhoneNumber;
		_p->ns2__ECAVSReply::matchBillToCompanyPhoneNumber = matchBillToCompanyPhoneNumber;
		_p->ns2__ECAVSReply::matchBillToCompanyTaxID = matchBillToCompanyTaxID;
		_p->ns2__ECAVSReply::matchBillToSSN = matchBillToSSN;
		_p->ns2__ECAVSReply::matchBillToDateOfBirth = matchBillToDateOfBirth;
		_p->ns2__ECAVSReply::matchPersonalIDType = matchPersonalIDType;
		_p->ns2__ECAVSReply::matchPersonalID = matchPersonalID;
		_p->ns2__ECAVSReply::matchPersonalIDIssuedBy = matchPersonalIDIssuedBy;
		_p->ns2__ECAVSReply::overallMatchScore = overallMatchScore;
		_p->ns2__ECAVSReply::calculatedResponse = calculatedResponse;
	}
	return _p;
}

inline int soap_write_ns2__ECAVSReply(struct soap *soap, ns2__ECAVSReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECAVSReply", p->soap_type() == SOAP_TYPE_ns2__ECAVSReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ECAVSReply(struct soap *soap, const char *URL, ns2__ECAVSReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECAVSReply", p->soap_type() == SOAP_TYPE_ns2__ECAVSReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ECAVSReply(struct soap *soap, const char *URL, ns2__ECAVSReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECAVSReply", p->soap_type() == SOAP_TYPE_ns2__ECAVSReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ECAVSReply(struct soap *soap, const char *URL, ns2__ECAVSReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECAVSReply", p->soap_type() == SOAP_TYPE_ns2__ECAVSReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ECAVSReply * SOAP_FMAC4 soap_get_ns2__ECAVSReply(struct soap*, ns2__ECAVSReply *, const char*, const char*);

inline int soap_read_ns2__ECAVSReply(struct soap *soap, ns2__ECAVSReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ECAVSReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ECAVSReply(struct soap *soap, const char *URL, ns2__ECAVSReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ECAVSReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ECAVSReply(struct soap *soap, ns2__ECAVSReply *p)
{
	if (::soap_read_ns2__ECAVSReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCAutoAuthReversalReply_DEFINED
#define SOAP_TYPE_ns2__CCAutoAuthReversalReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCAutoAuthReversalReply(struct soap*, const char*, int, const ns2__CCAutoAuthReversalReply *, const char*);
SOAP_FMAC3 ns2__CCAutoAuthReversalReply * SOAP_FMAC4 soap_in_ns2__CCAutoAuthReversalReply(struct soap*, const char*, ns2__CCAutoAuthReversalReply *, const char*);
SOAP_FMAC1 ns2__CCAutoAuthReversalReply * SOAP_FMAC2 soap_instantiate_ns2__CCAutoAuthReversalReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCAutoAuthReversalReply * soap_new_ns2__CCAutoAuthReversalReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCAutoAuthReversalReply(soap, n, NULL, NULL, NULL);
}

inline ns2__CCAutoAuthReversalReply * soap_new_req_ns2__CCAutoAuthReversalReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__CCAutoAuthReversalReply *_p = ::soap_new_ns2__CCAutoAuthReversalReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCAutoAuthReversalReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__CCAutoAuthReversalReply * soap_new_set_ns2__CCAutoAuthReversalReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *processorResponse,
	std::string *result)
{
	ns2__CCAutoAuthReversalReply *_p = ::soap_new_ns2__CCAutoAuthReversalReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCAutoAuthReversalReply::reasonCode = reasonCode;
		_p->ns2__CCAutoAuthReversalReply::processorResponse = processorResponse;
		_p->ns2__CCAutoAuthReversalReply::result = result;
	}
	return _p;
}

inline int soap_write_ns2__CCAutoAuthReversalReply(struct soap *soap, ns2__CCAutoAuthReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAutoAuthReversalReply", p->soap_type() == SOAP_TYPE_ns2__CCAutoAuthReversalReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCAutoAuthReversalReply(struct soap *soap, const char *URL, ns2__CCAutoAuthReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAutoAuthReversalReply", p->soap_type() == SOAP_TYPE_ns2__CCAutoAuthReversalReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCAutoAuthReversalReply(struct soap *soap, const char *URL, ns2__CCAutoAuthReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAutoAuthReversalReply", p->soap_type() == SOAP_TYPE_ns2__CCAutoAuthReversalReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCAutoAuthReversalReply(struct soap *soap, const char *URL, ns2__CCAutoAuthReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAutoAuthReversalReply", p->soap_type() == SOAP_TYPE_ns2__CCAutoAuthReversalReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCAutoAuthReversalReply * SOAP_FMAC4 soap_get_ns2__CCAutoAuthReversalReply(struct soap*, ns2__CCAutoAuthReversalReply *, const char*, const char*);

inline int soap_read_ns2__CCAutoAuthReversalReply(struct soap *soap, ns2__CCAutoAuthReversalReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCAutoAuthReversalReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCAutoAuthReversalReply(struct soap *soap, const char *URL, ns2__CCAutoAuthReversalReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCAutoAuthReversalReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCAutoAuthReversalReply(struct soap *soap, ns2__CCAutoAuthReversalReply *p)
{
	if (::soap_read_ns2__CCAutoAuthReversalReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCAuthReversalReply_DEFINED
#define SOAP_TYPE_ns2__CCAuthReversalReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCAuthReversalReply(struct soap*, const char*, int, const ns2__CCAuthReversalReply *, const char*);
SOAP_FMAC3 ns2__CCAuthReversalReply * SOAP_FMAC4 soap_in_ns2__CCAuthReversalReply(struct soap*, const char*, ns2__CCAuthReversalReply *, const char*);
SOAP_FMAC1 ns2__CCAuthReversalReply * SOAP_FMAC2 soap_instantiate_ns2__CCAuthReversalReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCAuthReversalReply * soap_new_ns2__CCAuthReversalReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCAuthReversalReply(soap, n, NULL, NULL, NULL);
}

inline ns2__CCAuthReversalReply * soap_new_req_ns2__CCAuthReversalReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__CCAuthReversalReply *_p = ::soap_new_ns2__CCAuthReversalReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCAuthReversalReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__CCAuthReversalReply * soap_new_set_ns2__CCAuthReversalReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *amount,
	std::string *authorizationCode,
	std::string *processorResponse,
	std::string *requestDateTime,
	std::string *forwardCode,
	std::string *reconciliationID,
	std::string *processorTransactionID,
	std::string *paymentCardService,
	std::string *paymentCardServiceResult)
{
	ns2__CCAuthReversalReply *_p = ::soap_new_ns2__CCAuthReversalReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCAuthReversalReply::reasonCode = reasonCode;
		_p->ns2__CCAuthReversalReply::amount = amount;
		_p->ns2__CCAuthReversalReply::authorizationCode = authorizationCode;
		_p->ns2__CCAuthReversalReply::processorResponse = processorResponse;
		_p->ns2__CCAuthReversalReply::requestDateTime = requestDateTime;
		_p->ns2__CCAuthReversalReply::forwardCode = forwardCode;
		_p->ns2__CCAuthReversalReply::reconciliationID = reconciliationID;
		_p->ns2__CCAuthReversalReply::processorTransactionID = processorTransactionID;
		_p->ns2__CCAuthReversalReply::paymentCardService = paymentCardService;
		_p->ns2__CCAuthReversalReply::paymentCardServiceResult = paymentCardServiceResult;
	}
	return _p;
}

inline int soap_write_ns2__CCAuthReversalReply(struct soap *soap, ns2__CCAuthReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAuthReversalReply", p->soap_type() == SOAP_TYPE_ns2__CCAuthReversalReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCAuthReversalReply(struct soap *soap, const char *URL, ns2__CCAuthReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAuthReversalReply", p->soap_type() == SOAP_TYPE_ns2__CCAuthReversalReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCAuthReversalReply(struct soap *soap, const char *URL, ns2__CCAuthReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAuthReversalReply", p->soap_type() == SOAP_TYPE_ns2__CCAuthReversalReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCAuthReversalReply(struct soap *soap, const char *URL, ns2__CCAuthReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAuthReversalReply", p->soap_type() == SOAP_TYPE_ns2__CCAuthReversalReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCAuthReversalReply * SOAP_FMAC4 soap_get_ns2__CCAuthReversalReply(struct soap*, ns2__CCAuthReversalReply *, const char*, const char*);

inline int soap_read_ns2__CCAuthReversalReply(struct soap *soap, ns2__CCAuthReversalReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCAuthReversalReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCAuthReversalReply(struct soap *soap, const char *URL, ns2__CCAuthReversalReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCAuthReversalReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCAuthReversalReply(struct soap *soap, ns2__CCAuthReversalReply *p)
{
	if (::soap_read_ns2__CCAuthReversalReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PinDebitReversalReply_DEFINED
#define SOAP_TYPE_ns2__PinDebitReversalReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PinDebitReversalReply(struct soap*, const char*, int, const ns2__PinDebitReversalReply *, const char*);
SOAP_FMAC3 ns2__PinDebitReversalReply * SOAP_FMAC4 soap_in_ns2__PinDebitReversalReply(struct soap*, const char*, ns2__PinDebitReversalReply *, const char*);
SOAP_FMAC1 ns2__PinDebitReversalReply * SOAP_FMAC2 soap_instantiate_ns2__PinDebitReversalReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PinDebitReversalReply * soap_new_ns2__PinDebitReversalReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PinDebitReversalReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PinDebitReversalReply * soap_new_req_ns2__PinDebitReversalReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PinDebitReversalReply *_p = ::soap_new_ns2__PinDebitReversalReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinDebitReversalReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PinDebitReversalReply * soap_new_set_ns2__PinDebitReversalReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *processorResponse,
	std::string *reconciliationID,
	std::string *amount,
	std::string *dateTime)
{
	ns2__PinDebitReversalReply *_p = ::soap_new_ns2__PinDebitReversalReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinDebitReversalReply::reasonCode = reasonCode;
		_p->ns2__PinDebitReversalReply::processorResponse = processorResponse;
		_p->ns2__PinDebitReversalReply::reconciliationID = reconciliationID;
		_p->ns2__PinDebitReversalReply::amount = amount;
		_p->ns2__PinDebitReversalReply::dateTime = dateTime;
	}
	return _p;
}

inline int soap_write_ns2__PinDebitReversalReply(struct soap *soap, ns2__PinDebitReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitReversalReply", p->soap_type() == SOAP_TYPE_ns2__PinDebitReversalReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PinDebitReversalReply(struct soap *soap, const char *URL, ns2__PinDebitReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitReversalReply", p->soap_type() == SOAP_TYPE_ns2__PinDebitReversalReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PinDebitReversalReply(struct soap *soap, const char *URL, ns2__PinDebitReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitReversalReply", p->soap_type() == SOAP_TYPE_ns2__PinDebitReversalReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PinDebitReversalReply(struct soap *soap, const char *URL, ns2__PinDebitReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitReversalReply", p->soap_type() == SOAP_TYPE_ns2__PinDebitReversalReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PinDebitReversalReply * SOAP_FMAC4 soap_get_ns2__PinDebitReversalReply(struct soap*, ns2__PinDebitReversalReply *, const char*, const char*);

inline int soap_read_ns2__PinDebitReversalReply(struct soap *soap, ns2__PinDebitReversalReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PinDebitReversalReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PinDebitReversalReply(struct soap *soap, const char *URL, ns2__PinDebitReversalReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PinDebitReversalReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PinDebitReversalReply(struct soap *soap, ns2__PinDebitReversalReply *p)
{
	if (::soap_read_ns2__PinDebitReversalReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PinDebitCreditReply_DEFINED
#define SOAP_TYPE_ns2__PinDebitCreditReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PinDebitCreditReply(struct soap*, const char*, int, const ns2__PinDebitCreditReply *, const char*);
SOAP_FMAC3 ns2__PinDebitCreditReply * SOAP_FMAC4 soap_in_ns2__PinDebitCreditReply(struct soap*, const char*, ns2__PinDebitCreditReply *, const char*);
SOAP_FMAC1 ns2__PinDebitCreditReply * SOAP_FMAC2 soap_instantiate_ns2__PinDebitCreditReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PinDebitCreditReply * soap_new_ns2__PinDebitCreditReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PinDebitCreditReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PinDebitCreditReply * soap_new_req_ns2__PinDebitCreditReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PinDebitCreditReply *_p = ::soap_new_ns2__PinDebitCreditReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinDebitCreditReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PinDebitCreditReply * soap_new_set_ns2__PinDebitCreditReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *processorResponse,
	std::string *authorizationCode,
	std::string *reconciliationID,
	std::string *networkCode,
	std::string *transactionID,
	std::string *amount,
	std::string *dateTime)
{
	ns2__PinDebitCreditReply *_p = ::soap_new_ns2__PinDebitCreditReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinDebitCreditReply::reasonCode = reasonCode;
		_p->ns2__PinDebitCreditReply::processorResponse = processorResponse;
		_p->ns2__PinDebitCreditReply::authorizationCode = authorizationCode;
		_p->ns2__PinDebitCreditReply::reconciliationID = reconciliationID;
		_p->ns2__PinDebitCreditReply::networkCode = networkCode;
		_p->ns2__PinDebitCreditReply::transactionID = transactionID;
		_p->ns2__PinDebitCreditReply::amount = amount;
		_p->ns2__PinDebitCreditReply::dateTime = dateTime;
	}
	return _p;
}

inline int soap_write_ns2__PinDebitCreditReply(struct soap *soap, ns2__PinDebitCreditReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitCreditReply", p->soap_type() == SOAP_TYPE_ns2__PinDebitCreditReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PinDebitCreditReply(struct soap *soap, const char *URL, ns2__PinDebitCreditReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitCreditReply", p->soap_type() == SOAP_TYPE_ns2__PinDebitCreditReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PinDebitCreditReply(struct soap *soap, const char *URL, ns2__PinDebitCreditReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitCreditReply", p->soap_type() == SOAP_TYPE_ns2__PinDebitCreditReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PinDebitCreditReply(struct soap *soap, const char *URL, ns2__PinDebitCreditReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitCreditReply", p->soap_type() == SOAP_TYPE_ns2__PinDebitCreditReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PinDebitCreditReply * SOAP_FMAC4 soap_get_ns2__PinDebitCreditReply(struct soap*, ns2__PinDebitCreditReply *, const char*, const char*);

inline int soap_read_ns2__PinDebitCreditReply(struct soap *soap, ns2__PinDebitCreditReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PinDebitCreditReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PinDebitCreditReply(struct soap *soap, const char *URL, ns2__PinDebitCreditReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PinDebitCreditReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PinDebitCreditReply(struct soap *soap, ns2__PinDebitCreditReply *p)
{
	if (::soap_read_ns2__PinDebitCreditReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PinDebitPurchaseReply_DEFINED
#define SOAP_TYPE_ns2__PinDebitPurchaseReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PinDebitPurchaseReply(struct soap*, const char*, int, const ns2__PinDebitPurchaseReply *, const char*);
SOAP_FMAC3 ns2__PinDebitPurchaseReply * SOAP_FMAC4 soap_in_ns2__PinDebitPurchaseReply(struct soap*, const char*, ns2__PinDebitPurchaseReply *, const char*);
SOAP_FMAC1 ns2__PinDebitPurchaseReply * SOAP_FMAC2 soap_instantiate_ns2__PinDebitPurchaseReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PinDebitPurchaseReply * soap_new_ns2__PinDebitPurchaseReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PinDebitPurchaseReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PinDebitPurchaseReply * soap_new_req_ns2__PinDebitPurchaseReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__PinDebitPurchaseReply *_p = ::soap_new_ns2__PinDebitPurchaseReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinDebitPurchaseReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__PinDebitPurchaseReply * soap_new_set_ns2__PinDebitPurchaseReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *processorResponse,
	std::string *authorizationCode,
	std::string *reconciliationID,
	std::string *networkCode,
	std::string *transactionID,
	std::string *requestAmount,
	std::string *requestCurrency,
	std::string *amount,
	std::string *dateTime,
	std::string *accountType,
	std::string *amountType,
	std::string *accountBalance,
	std::string *accountBalanceCurrency,
	std::string *accountBalanceSign)
{
	ns2__PinDebitPurchaseReply *_p = ::soap_new_ns2__PinDebitPurchaseReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinDebitPurchaseReply::reasonCode = reasonCode;
		_p->ns2__PinDebitPurchaseReply::processorResponse = processorResponse;
		_p->ns2__PinDebitPurchaseReply::authorizationCode = authorizationCode;
		_p->ns2__PinDebitPurchaseReply::reconciliationID = reconciliationID;
		_p->ns2__PinDebitPurchaseReply::networkCode = networkCode;
		_p->ns2__PinDebitPurchaseReply::transactionID = transactionID;
		_p->ns2__PinDebitPurchaseReply::requestAmount = requestAmount;
		_p->ns2__PinDebitPurchaseReply::requestCurrency = requestCurrency;
		_p->ns2__PinDebitPurchaseReply::amount = amount;
		_p->ns2__PinDebitPurchaseReply::dateTime = dateTime;
		_p->ns2__PinDebitPurchaseReply::accountType = accountType;
		_p->ns2__PinDebitPurchaseReply::amountType = amountType;
		_p->ns2__PinDebitPurchaseReply::accountBalance = accountBalance;
		_p->ns2__PinDebitPurchaseReply::accountBalanceCurrency = accountBalanceCurrency;
		_p->ns2__PinDebitPurchaseReply::accountBalanceSign = accountBalanceSign;
	}
	return _p;
}

inline int soap_write_ns2__PinDebitPurchaseReply(struct soap *soap, ns2__PinDebitPurchaseReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitPurchaseReply", p->soap_type() == SOAP_TYPE_ns2__PinDebitPurchaseReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PinDebitPurchaseReply(struct soap *soap, const char *URL, ns2__PinDebitPurchaseReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitPurchaseReply", p->soap_type() == SOAP_TYPE_ns2__PinDebitPurchaseReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PinDebitPurchaseReply(struct soap *soap, const char *URL, ns2__PinDebitPurchaseReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitPurchaseReply", p->soap_type() == SOAP_TYPE_ns2__PinDebitPurchaseReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PinDebitPurchaseReply(struct soap *soap, const char *URL, ns2__PinDebitPurchaseReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitPurchaseReply", p->soap_type() == SOAP_TYPE_ns2__PinDebitPurchaseReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PinDebitPurchaseReply * SOAP_FMAC4 soap_get_ns2__PinDebitPurchaseReply(struct soap*, ns2__PinDebitPurchaseReply *, const char*, const char*);

inline int soap_read_ns2__PinDebitPurchaseReply(struct soap *soap, ns2__PinDebitPurchaseReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PinDebitPurchaseReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PinDebitPurchaseReply(struct soap *soap, const char *URL, ns2__PinDebitPurchaseReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PinDebitPurchaseReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PinDebitPurchaseReply(struct soap *soap, ns2__PinDebitPurchaseReply *p)
{
	if (::soap_read_ns2__PinDebitPurchaseReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCCreditReply_DEFINED
#define SOAP_TYPE_ns2__CCCreditReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCCreditReply(struct soap*, const char*, int, const ns2__CCCreditReply *, const char*);
SOAP_FMAC3 ns2__CCCreditReply * SOAP_FMAC4 soap_in_ns2__CCCreditReply(struct soap*, const char*, ns2__CCCreditReply *, const char*);
SOAP_FMAC1 ns2__CCCreditReply * SOAP_FMAC2 soap_instantiate_ns2__CCCreditReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCCreditReply * soap_new_ns2__CCCreditReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCCreditReply(soap, n, NULL, NULL, NULL);
}

inline ns2__CCCreditReply * soap_new_req_ns2__CCCreditReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__CCCreditReply *_p = ::soap_new_ns2__CCCreditReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCCreditReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__CCCreditReply * soap_new_set_ns2__CCCreditReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *requestDateTime,
	std::string *amount,
	std::string *reconciliationID,
	std::string *purchasingLevel3Enabled,
	std::string *enhancedDataEnabled,
	std::string *authorizationXID,
	std::string *forwardCode,
	std::string *ownerMerchantID,
	std::string *reconciliationReferenceNumber,
	std::string *authorizationCode,
	std::string *processorResponse,
	std::string *paymentNetworkTransactionID)
{
	ns2__CCCreditReply *_p = ::soap_new_ns2__CCCreditReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCCreditReply::reasonCode = reasonCode;
		_p->ns2__CCCreditReply::requestDateTime = requestDateTime;
		_p->ns2__CCCreditReply::amount = amount;
		_p->ns2__CCCreditReply::reconciliationID = reconciliationID;
		_p->ns2__CCCreditReply::purchasingLevel3Enabled = purchasingLevel3Enabled;
		_p->ns2__CCCreditReply::enhancedDataEnabled = enhancedDataEnabled;
		_p->ns2__CCCreditReply::authorizationXID = authorizationXID;
		_p->ns2__CCCreditReply::forwardCode = forwardCode;
		_p->ns2__CCCreditReply::ownerMerchantID = ownerMerchantID;
		_p->ns2__CCCreditReply::reconciliationReferenceNumber = reconciliationReferenceNumber;
		_p->ns2__CCCreditReply::authorizationCode = authorizationCode;
		_p->ns2__CCCreditReply::processorResponse = processorResponse;
		_p->ns2__CCCreditReply::paymentNetworkTransactionID = paymentNetworkTransactionID;
	}
	return _p;
}

inline int soap_write_ns2__CCCreditReply(struct soap *soap, ns2__CCCreditReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCreditReply", p->soap_type() == SOAP_TYPE_ns2__CCCreditReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCCreditReply(struct soap *soap, const char *URL, ns2__CCCreditReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCreditReply", p->soap_type() == SOAP_TYPE_ns2__CCCreditReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCCreditReply(struct soap *soap, const char *URL, ns2__CCCreditReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCreditReply", p->soap_type() == SOAP_TYPE_ns2__CCCreditReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCCreditReply(struct soap *soap, const char *URL, ns2__CCCreditReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCreditReply", p->soap_type() == SOAP_TYPE_ns2__CCCreditReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCCreditReply * SOAP_FMAC4 soap_get_ns2__CCCreditReply(struct soap*, ns2__CCCreditReply *, const char*, const char*);

inline int soap_read_ns2__CCCreditReply(struct soap *soap, ns2__CCCreditReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCCreditReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCCreditReply(struct soap *soap, const char *URL, ns2__CCCreditReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCCreditReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCCreditReply(struct soap *soap, ns2__CCCreditReply *p)
{
	if (::soap_read_ns2__CCCreditReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ServiceFeeCalculateReply_DEFINED
#define SOAP_TYPE_ns2__ServiceFeeCalculateReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ServiceFeeCalculateReply(struct soap*, const char*, int, const ns2__ServiceFeeCalculateReply *, const char*);
SOAP_FMAC3 ns2__ServiceFeeCalculateReply * SOAP_FMAC4 soap_in_ns2__ServiceFeeCalculateReply(struct soap*, const char*, ns2__ServiceFeeCalculateReply *, const char*);
SOAP_FMAC1 ns2__ServiceFeeCalculateReply * SOAP_FMAC2 soap_instantiate_ns2__ServiceFeeCalculateReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ServiceFeeCalculateReply * soap_new_ns2__ServiceFeeCalculateReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ServiceFeeCalculateReply(soap, n, NULL, NULL, NULL);
}

inline ns2__ServiceFeeCalculateReply * soap_new_req_ns2__ServiceFeeCalculateReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__ServiceFeeCalculateReply *_p = ::soap_new_ns2__ServiceFeeCalculateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ServiceFeeCalculateReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__ServiceFeeCalculateReply * soap_new_set_ns2__ServiceFeeCalculateReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *amount,
	std::string *requestDateTime)
{
	ns2__ServiceFeeCalculateReply *_p = ::soap_new_ns2__ServiceFeeCalculateReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ServiceFeeCalculateReply::reasonCode = reasonCode;
		_p->ns2__ServiceFeeCalculateReply::amount = amount;
		_p->ns2__ServiceFeeCalculateReply::requestDateTime = requestDateTime;
	}
	return _p;
}

inline int soap_write_ns2__ServiceFeeCalculateReply(struct soap *soap, ns2__ServiceFeeCalculateReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ServiceFeeCalculateReply", p->soap_type() == SOAP_TYPE_ns2__ServiceFeeCalculateReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ServiceFeeCalculateReply(struct soap *soap, const char *URL, ns2__ServiceFeeCalculateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ServiceFeeCalculateReply", p->soap_type() == SOAP_TYPE_ns2__ServiceFeeCalculateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ServiceFeeCalculateReply(struct soap *soap, const char *URL, ns2__ServiceFeeCalculateReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ServiceFeeCalculateReply", p->soap_type() == SOAP_TYPE_ns2__ServiceFeeCalculateReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ServiceFeeCalculateReply(struct soap *soap, const char *URL, ns2__ServiceFeeCalculateReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ServiceFeeCalculateReply", p->soap_type() == SOAP_TYPE_ns2__ServiceFeeCalculateReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ServiceFeeCalculateReply * SOAP_FMAC4 soap_get_ns2__ServiceFeeCalculateReply(struct soap*, ns2__ServiceFeeCalculateReply *, const char*, const char*);

inline int soap_read_ns2__ServiceFeeCalculateReply(struct soap *soap, ns2__ServiceFeeCalculateReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ServiceFeeCalculateReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ServiceFeeCalculateReply(struct soap *soap, const char *URL, ns2__ServiceFeeCalculateReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ServiceFeeCalculateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ServiceFeeCalculateReply(struct soap *soap, ns2__ServiceFeeCalculateReply *p)
{
	if (::soap_read_ns2__ServiceFeeCalculateReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCCaptureReply_DEFINED
#define SOAP_TYPE_ns2__CCCaptureReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCCaptureReply(struct soap*, const char*, int, const ns2__CCCaptureReply *, const char*);
SOAP_FMAC3 ns2__CCCaptureReply * SOAP_FMAC4 soap_in_ns2__CCCaptureReply(struct soap*, const char*, ns2__CCCaptureReply *, const char*);
SOAP_FMAC1 ns2__CCCaptureReply * SOAP_FMAC2 soap_instantiate_ns2__CCCaptureReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCCaptureReply * soap_new_ns2__CCCaptureReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCCaptureReply(soap, n, NULL, NULL, NULL);
}

inline ns2__CCCaptureReply * soap_new_req_ns2__CCCaptureReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__CCCaptureReply *_p = ::soap_new_ns2__CCCaptureReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCCaptureReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__CCCaptureReply * soap_new_set_ns2__CCCaptureReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *requestDateTime,
	std::string *amount,
	std::string *reconciliationID,
	ns2__FundingTotals *fundingTotals,
	std::string *fxQuoteID,
	std::string *fxQuoteRate,
	std::string *fxQuoteType,
	std::string *fxQuoteExpirationDateTime,
	std::string *purchasingLevel3Enabled,
	std::string *enhancedDataEnabled,
	std::string *reconciliationReferenceNumber)
{
	ns2__CCCaptureReply *_p = ::soap_new_ns2__CCCaptureReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCCaptureReply::reasonCode = reasonCode;
		_p->ns2__CCCaptureReply::requestDateTime = requestDateTime;
		_p->ns2__CCCaptureReply::amount = amount;
		_p->ns2__CCCaptureReply::reconciliationID = reconciliationID;
		_p->ns2__CCCaptureReply::fundingTotals = fundingTotals;
		_p->ns2__CCCaptureReply::fxQuoteID = fxQuoteID;
		_p->ns2__CCCaptureReply::fxQuoteRate = fxQuoteRate;
		_p->ns2__CCCaptureReply::fxQuoteType = fxQuoteType;
		_p->ns2__CCCaptureReply::fxQuoteExpirationDateTime = fxQuoteExpirationDateTime;
		_p->ns2__CCCaptureReply::purchasingLevel3Enabled = purchasingLevel3Enabled;
		_p->ns2__CCCaptureReply::enhancedDataEnabled = enhancedDataEnabled;
		_p->ns2__CCCaptureReply::reconciliationReferenceNumber = reconciliationReferenceNumber;
	}
	return _p;
}

inline int soap_write_ns2__CCCaptureReply(struct soap *soap, ns2__CCCaptureReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCaptureReply", p->soap_type() == SOAP_TYPE_ns2__CCCaptureReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCCaptureReply(struct soap *soap, const char *URL, ns2__CCCaptureReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCaptureReply", p->soap_type() == SOAP_TYPE_ns2__CCCaptureReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCCaptureReply(struct soap *soap, const char *URL, ns2__CCCaptureReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCaptureReply", p->soap_type() == SOAP_TYPE_ns2__CCCaptureReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCCaptureReply(struct soap *soap, const char *URL, ns2__CCCaptureReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCaptureReply", p->soap_type() == SOAP_TYPE_ns2__CCCaptureReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCCaptureReply * SOAP_FMAC4 soap_get_ns2__CCCaptureReply(struct soap*, ns2__CCCaptureReply *, const char*, const char*);

inline int soap_read_ns2__CCCaptureReply(struct soap *soap, ns2__CCCaptureReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCCaptureReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCCaptureReply(struct soap *soap, const char *URL, ns2__CCCaptureReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCCaptureReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCCaptureReply(struct soap *soap, ns2__CCCaptureReply *p)
{
	if (::soap_read_ns2__CCCaptureReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCIncrementalAuthReply_DEFINED
#define SOAP_TYPE_ns2__CCIncrementalAuthReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCIncrementalAuthReply(struct soap*, const char*, int, const ns2__CCIncrementalAuthReply *, const char*);
SOAP_FMAC3 ns2__CCIncrementalAuthReply * SOAP_FMAC4 soap_in_ns2__CCIncrementalAuthReply(struct soap*, const char*, ns2__CCIncrementalAuthReply *, const char*);
SOAP_FMAC1 ns2__CCIncrementalAuthReply * SOAP_FMAC2 soap_instantiate_ns2__CCIncrementalAuthReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCIncrementalAuthReply * soap_new_ns2__CCIncrementalAuthReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCIncrementalAuthReply(soap, n, NULL, NULL, NULL);
}

inline ns2__CCIncrementalAuthReply * soap_new_req_ns2__CCIncrementalAuthReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__CCIncrementalAuthReply *_p = ::soap_new_ns2__CCIncrementalAuthReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCIncrementalAuthReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__CCIncrementalAuthReply * soap_new_set_ns2__CCIncrementalAuthReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *amount,
	std::string *authorizationCode,
	std::string *processorResponse,
	std::string *authorizedDateTime,
	std::string *reconciliationID,
	std::string *paymentNetworkTransactionID,
	std::string *cardCategory)
{
	ns2__CCIncrementalAuthReply *_p = ::soap_new_ns2__CCIncrementalAuthReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCIncrementalAuthReply::reasonCode = reasonCode;
		_p->ns2__CCIncrementalAuthReply::amount = amount;
		_p->ns2__CCIncrementalAuthReply::authorizationCode = authorizationCode;
		_p->ns2__CCIncrementalAuthReply::processorResponse = processorResponse;
		_p->ns2__CCIncrementalAuthReply::authorizedDateTime = authorizedDateTime;
		_p->ns2__CCIncrementalAuthReply::reconciliationID = reconciliationID;
		_p->ns2__CCIncrementalAuthReply::paymentNetworkTransactionID = paymentNetworkTransactionID;
		_p->ns2__CCIncrementalAuthReply::cardCategory = cardCategory;
	}
	return _p;
}

inline int soap_write_ns2__CCIncrementalAuthReply(struct soap *soap, ns2__CCIncrementalAuthReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCIncrementalAuthReply", p->soap_type() == SOAP_TYPE_ns2__CCIncrementalAuthReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCIncrementalAuthReply(struct soap *soap, const char *URL, ns2__CCIncrementalAuthReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCIncrementalAuthReply", p->soap_type() == SOAP_TYPE_ns2__CCIncrementalAuthReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCIncrementalAuthReply(struct soap *soap, const char *URL, ns2__CCIncrementalAuthReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCIncrementalAuthReply", p->soap_type() == SOAP_TYPE_ns2__CCIncrementalAuthReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCIncrementalAuthReply(struct soap *soap, const char *URL, ns2__CCIncrementalAuthReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCIncrementalAuthReply", p->soap_type() == SOAP_TYPE_ns2__CCIncrementalAuthReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCIncrementalAuthReply * SOAP_FMAC4 soap_get_ns2__CCIncrementalAuthReply(struct soap*, ns2__CCIncrementalAuthReply *, const char*, const char*);

inline int soap_read_ns2__CCIncrementalAuthReply(struct soap *soap, ns2__CCIncrementalAuthReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCIncrementalAuthReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCIncrementalAuthReply(struct soap *soap, const char *URL, ns2__CCIncrementalAuthReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCIncrementalAuthReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCIncrementalAuthReply(struct soap *soap, ns2__CCIncrementalAuthReply *p)
{
	if (::soap_read_ns2__CCIncrementalAuthReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCSaleReversalReply_DEFINED
#define SOAP_TYPE_ns2__CCSaleReversalReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCSaleReversalReply(struct soap*, const char*, int, const ns2__CCSaleReversalReply *, const char*);
SOAP_FMAC3 ns2__CCSaleReversalReply * SOAP_FMAC4 soap_in_ns2__CCSaleReversalReply(struct soap*, const char*, ns2__CCSaleReversalReply *, const char*);
SOAP_FMAC1 ns2__CCSaleReversalReply * SOAP_FMAC2 soap_instantiate_ns2__CCSaleReversalReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCSaleReversalReply * soap_new_ns2__CCSaleReversalReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCSaleReversalReply(soap, n, NULL, NULL, NULL);
}

inline ns2__CCSaleReversalReply * soap_new_req_ns2__CCSaleReversalReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__CCSaleReversalReply *_p = ::soap_new_ns2__CCSaleReversalReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCSaleReversalReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__CCSaleReversalReply * soap_new_set_ns2__CCSaleReversalReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *amount,
	std::string *authorizationCode,
	std::string *processorResponse,
	std::string *reconciliationID,
	std::string *requestDateTime)
{
	ns2__CCSaleReversalReply *_p = ::soap_new_ns2__CCSaleReversalReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCSaleReversalReply::reasonCode = reasonCode;
		_p->ns2__CCSaleReversalReply::amount = amount;
		_p->ns2__CCSaleReversalReply::authorizationCode = authorizationCode;
		_p->ns2__CCSaleReversalReply::processorResponse = processorResponse;
		_p->ns2__CCSaleReversalReply::reconciliationID = reconciliationID;
		_p->ns2__CCSaleReversalReply::requestDateTime = requestDateTime;
	}
	return _p;
}

inline int soap_write_ns2__CCSaleReversalReply(struct soap *soap, ns2__CCSaleReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleReversalReply", p->soap_type() == SOAP_TYPE_ns2__CCSaleReversalReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCSaleReversalReply(struct soap *soap, const char *URL, ns2__CCSaleReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleReversalReply", p->soap_type() == SOAP_TYPE_ns2__CCSaleReversalReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCSaleReversalReply(struct soap *soap, const char *URL, ns2__CCSaleReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleReversalReply", p->soap_type() == SOAP_TYPE_ns2__CCSaleReversalReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCSaleReversalReply(struct soap *soap, const char *URL, ns2__CCSaleReversalReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleReversalReply", p->soap_type() == SOAP_TYPE_ns2__CCSaleReversalReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCSaleReversalReply * SOAP_FMAC4 soap_get_ns2__CCSaleReversalReply(struct soap*, ns2__CCSaleReversalReply *, const char*, const char*);

inline int soap_read_ns2__CCSaleReversalReply(struct soap *soap, ns2__CCSaleReversalReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCSaleReversalReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCSaleReversalReply(struct soap *soap, const char *URL, ns2__CCSaleReversalReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCSaleReversalReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCSaleReversalReply(struct soap *soap, ns2__CCSaleReversalReply *p)
{
	if (::soap_read_ns2__CCSaleReversalReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCSaleCreditReply_DEFINED
#define SOAP_TYPE_ns2__CCSaleCreditReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCSaleCreditReply(struct soap*, const char*, int, const ns2__CCSaleCreditReply *, const char*);
SOAP_FMAC3 ns2__CCSaleCreditReply * SOAP_FMAC4 soap_in_ns2__CCSaleCreditReply(struct soap*, const char*, ns2__CCSaleCreditReply *, const char*);
SOAP_FMAC1 ns2__CCSaleCreditReply * SOAP_FMAC2 soap_instantiate_ns2__CCSaleCreditReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCSaleCreditReply * soap_new_ns2__CCSaleCreditReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCSaleCreditReply(soap, n, NULL, NULL, NULL);
}

inline ns2__CCSaleCreditReply * soap_new_req_ns2__CCSaleCreditReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__CCSaleCreditReply *_p = ::soap_new_ns2__CCSaleCreditReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCSaleCreditReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__CCSaleCreditReply * soap_new_set_ns2__CCSaleCreditReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *amount,
	std::string *authorizationCode,
	std::string *processorResponse,
	std::string *authorizedDateTime,
	std::string *reconciliationID,
	std::string *paymentNetworkTransactionID)
{
	ns2__CCSaleCreditReply *_p = ::soap_new_ns2__CCSaleCreditReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCSaleCreditReply::reasonCode = reasonCode;
		_p->ns2__CCSaleCreditReply::amount = amount;
		_p->ns2__CCSaleCreditReply::authorizationCode = authorizationCode;
		_p->ns2__CCSaleCreditReply::processorResponse = processorResponse;
		_p->ns2__CCSaleCreditReply::authorizedDateTime = authorizedDateTime;
		_p->ns2__CCSaleCreditReply::reconciliationID = reconciliationID;
		_p->ns2__CCSaleCreditReply::paymentNetworkTransactionID = paymentNetworkTransactionID;
	}
	return _p;
}

inline int soap_write_ns2__CCSaleCreditReply(struct soap *soap, ns2__CCSaleCreditReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleCreditReply", p->soap_type() == SOAP_TYPE_ns2__CCSaleCreditReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCSaleCreditReply(struct soap *soap, const char *URL, ns2__CCSaleCreditReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleCreditReply", p->soap_type() == SOAP_TYPE_ns2__CCSaleCreditReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCSaleCreditReply(struct soap *soap, const char *URL, ns2__CCSaleCreditReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleCreditReply", p->soap_type() == SOAP_TYPE_ns2__CCSaleCreditReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCSaleCreditReply(struct soap *soap, const char *URL, ns2__CCSaleCreditReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleCreditReply", p->soap_type() == SOAP_TYPE_ns2__CCSaleCreditReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCSaleCreditReply * SOAP_FMAC4 soap_get_ns2__CCSaleCreditReply(struct soap*, ns2__CCSaleCreditReply *, const char*, const char*);

inline int soap_read_ns2__CCSaleCreditReply(struct soap *soap, ns2__CCSaleCreditReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCSaleCreditReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCSaleCreditReply(struct soap *soap, const char *URL, ns2__CCSaleCreditReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCSaleCreditReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCSaleCreditReply(struct soap *soap, ns2__CCSaleCreditReply *p)
{
	if (::soap_read_ns2__CCSaleCreditReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCSaleReply_DEFINED
#define SOAP_TYPE_ns2__CCSaleReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCSaleReply(struct soap*, const char*, int, const ns2__CCSaleReply *, const char*);
SOAP_FMAC3 ns2__CCSaleReply * SOAP_FMAC4 soap_in_ns2__CCSaleReply(struct soap*, const char*, ns2__CCSaleReply *, const char*);
SOAP_FMAC1 ns2__CCSaleReply * SOAP_FMAC2 soap_instantiate_ns2__CCSaleReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCSaleReply * soap_new_ns2__CCSaleReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCSaleReply(soap, n, NULL, NULL, NULL);
}

inline ns2__CCSaleReply * soap_new_req_ns2__CCSaleReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__CCSaleReply *_p = ::soap_new_ns2__CCSaleReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCSaleReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__CCSaleReply * soap_new_set_ns2__CCSaleReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *amount,
	std::string *authorizationCode,
	std::string *processorResponse,
	std::string *avsCode,
	std::string *avsCodeRaw,
	std::string *cvCode,
	std::string *cvCodeRaw,
	std::string *cavvResponseCode,
	std::string *cavvResponseCodeRaw,
	std::string *cardGroup,
	std::string *paymentNetworkTransactionID,
	std::string *cardCategory,
	std::string *accountBalance,
	std::string *authorizedDateTime,
	std::string *requestAmount,
	std::string *reconciliationID,
	std::string *accountBalanceCurrency,
	std::string *accountBalanceSign,
	std::string *cardReferenceData,
	std::string *partialPANandIBAN)
{
	ns2__CCSaleReply *_p = ::soap_new_ns2__CCSaleReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCSaleReply::reasonCode = reasonCode;
		_p->ns2__CCSaleReply::amount = amount;
		_p->ns2__CCSaleReply::authorizationCode = authorizationCode;
		_p->ns2__CCSaleReply::processorResponse = processorResponse;
		_p->ns2__CCSaleReply::avsCode = avsCode;
		_p->ns2__CCSaleReply::avsCodeRaw = avsCodeRaw;
		_p->ns2__CCSaleReply::cvCode = cvCode;
		_p->ns2__CCSaleReply::cvCodeRaw = cvCodeRaw;
		_p->ns2__CCSaleReply::cavvResponseCode = cavvResponseCode;
		_p->ns2__CCSaleReply::cavvResponseCodeRaw = cavvResponseCodeRaw;
		_p->ns2__CCSaleReply::cardGroup = cardGroup;
		_p->ns2__CCSaleReply::paymentNetworkTransactionID = paymentNetworkTransactionID;
		_p->ns2__CCSaleReply::cardCategory = cardCategory;
		_p->ns2__CCSaleReply::accountBalance = accountBalance;
		_p->ns2__CCSaleReply::authorizedDateTime = authorizedDateTime;
		_p->ns2__CCSaleReply::requestAmount = requestAmount;
		_p->ns2__CCSaleReply::reconciliationID = reconciliationID;
		_p->ns2__CCSaleReply::accountBalanceCurrency = accountBalanceCurrency;
		_p->ns2__CCSaleReply::accountBalanceSign = accountBalanceSign;
		_p->ns2__CCSaleReply::cardReferenceData = cardReferenceData;
		_p->ns2__CCSaleReply::partialPANandIBAN = partialPANandIBAN;
	}
	return _p;
}

inline int soap_write_ns2__CCSaleReply(struct soap *soap, ns2__CCSaleReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleReply", p->soap_type() == SOAP_TYPE_ns2__CCSaleReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCSaleReply(struct soap *soap, const char *URL, ns2__CCSaleReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleReply", p->soap_type() == SOAP_TYPE_ns2__CCSaleReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCSaleReply(struct soap *soap, const char *URL, ns2__CCSaleReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleReply", p->soap_type() == SOAP_TYPE_ns2__CCSaleReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCSaleReply(struct soap *soap, const char *URL, ns2__CCSaleReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleReply", p->soap_type() == SOAP_TYPE_ns2__CCSaleReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCSaleReply * SOAP_FMAC4 soap_get_ns2__CCSaleReply(struct soap*, ns2__CCSaleReply *, const char*, const char*);

inline int soap_read_ns2__CCSaleReply(struct soap *soap, ns2__CCSaleReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCSaleReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCSaleReply(struct soap *soap, const char *URL, ns2__CCSaleReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCSaleReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCSaleReply(struct soap *soap, ns2__CCSaleReply *p)
{
	if (::soap_read_ns2__CCSaleReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__VerificationReply_DEFINED
#define SOAP_TYPE_ns2__VerificationReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VerificationReply(struct soap*, const char*, int, const ns2__VerificationReply *, const char*);
SOAP_FMAC3 ns2__VerificationReply * SOAP_FMAC4 soap_in_ns2__VerificationReply(struct soap*, const char*, ns2__VerificationReply *, const char*);
SOAP_FMAC1 ns2__VerificationReply * SOAP_FMAC2 soap_instantiate_ns2__VerificationReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VerificationReply * soap_new_ns2__VerificationReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__VerificationReply(soap, n, NULL, NULL, NULL);
}

inline ns2__VerificationReply * soap_new_req_ns2__VerificationReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__VerificationReply *_p = ::soap_new_ns2__VerificationReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__VerificationReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__VerificationReply * soap_new_set_ns2__VerificationReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *processorTransactionID,
	std::string *processorResponse,
	std::string *verifiedDateTime,
	std::string *reconciliationID)
{
	ns2__VerificationReply *_p = ::soap_new_ns2__VerificationReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__VerificationReply::reasonCode = reasonCode;
		_p->ns2__VerificationReply::processorTransactionID = processorTransactionID;
		_p->ns2__VerificationReply::processorResponse = processorResponse;
		_p->ns2__VerificationReply::verifiedDateTime = verifiedDateTime;
		_p->ns2__VerificationReply::reconciliationID = reconciliationID;
	}
	return _p;
}

inline int soap_write_ns2__VerificationReply(struct soap *soap, ns2__VerificationReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VerificationReply", p->soap_type() == SOAP_TYPE_ns2__VerificationReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__VerificationReply(struct soap *soap, const char *URL, ns2__VerificationReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VerificationReply", p->soap_type() == SOAP_TYPE_ns2__VerificationReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__VerificationReply(struct soap *soap, const char *URL, ns2__VerificationReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VerificationReply", p->soap_type() == SOAP_TYPE_ns2__VerificationReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__VerificationReply(struct soap *soap, const char *URL, ns2__VerificationReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VerificationReply", p->soap_type() == SOAP_TYPE_ns2__VerificationReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__VerificationReply * SOAP_FMAC4 soap_get_ns2__VerificationReply(struct soap*, ns2__VerificationReply *, const char*, const char*);

inline int soap_read_ns2__VerificationReply(struct soap *soap, ns2__VerificationReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__VerificationReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__VerificationReply(struct soap *soap, const char *URL, ns2__VerificationReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__VerificationReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__VerificationReply(struct soap *soap, ns2__VerificationReply *p)
{
	if (::soap_read_ns2__VerificationReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__OCTReply_DEFINED
#define SOAP_TYPE_ns2__OCTReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OCTReply(struct soap*, const char*, int, const ns2__OCTReply *, const char*);
SOAP_FMAC3 ns2__OCTReply * SOAP_FMAC4 soap_in_ns2__OCTReply(struct soap*, const char*, ns2__OCTReply *, const char*);
SOAP_FMAC1 ns2__OCTReply * SOAP_FMAC2 soap_instantiate_ns2__OCTReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OCTReply * soap_new_ns2__OCTReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__OCTReply(soap, n, NULL, NULL, NULL);
}

inline ns2__OCTReply * soap_new_req_ns2__OCTReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__OCTReply *_p = ::soap_new_ns2__OCTReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__OCTReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__OCTReply * soap_new_set_ns2__OCTReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *requestDateTime,
	std::string *reconciliationID,
	std::string *processorResponse,
	std::string *approvalCode,
	std::string *amount,
	std::string *paymentNetworkTransactionID,
	std::string *prepaidBalanceCurrency,
	std::string *prepaidBalanceAmount,
	std::string *processorResponseSource,
	std::string *reconciliationIdType)
{
	ns2__OCTReply *_p = ::soap_new_ns2__OCTReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__OCTReply::reasonCode = reasonCode;
		_p->ns2__OCTReply::requestDateTime = requestDateTime;
		_p->ns2__OCTReply::reconciliationID = reconciliationID;
		_p->ns2__OCTReply::processorResponse = processorResponse;
		_p->ns2__OCTReply::approvalCode = approvalCode;
		_p->ns2__OCTReply::amount = amount;
		_p->ns2__OCTReply::paymentNetworkTransactionID = paymentNetworkTransactionID;
		_p->ns2__OCTReply::prepaidBalanceCurrency = prepaidBalanceCurrency;
		_p->ns2__OCTReply::prepaidBalanceAmount = prepaidBalanceAmount;
		_p->ns2__OCTReply::processorResponseSource = processorResponseSource;
		_p->ns2__OCTReply::reconciliationIdType = reconciliationIdType;
	}
	return _p;
}

inline int soap_write_ns2__OCTReply(struct soap *soap, ns2__OCTReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:OCTReply", p->soap_type() == SOAP_TYPE_ns2__OCTReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__OCTReply(struct soap *soap, const char *URL, ns2__OCTReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:OCTReply", p->soap_type() == SOAP_TYPE_ns2__OCTReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__OCTReply(struct soap *soap, const char *URL, ns2__OCTReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:OCTReply", p->soap_type() == SOAP_TYPE_ns2__OCTReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__OCTReply(struct soap *soap, const char *URL, ns2__OCTReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:OCTReply", p->soap_type() == SOAP_TYPE_ns2__OCTReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__OCTReply * SOAP_FMAC4 soap_get_ns2__OCTReply(struct soap*, ns2__OCTReply *, const char*, const char*);

inline int soap_read_ns2__OCTReply(struct soap *soap, ns2__OCTReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__OCTReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__OCTReply(struct soap *soap, const char *URL, ns2__OCTReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__OCTReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__OCTReply(struct soap *soap, ns2__OCTReply *p)
{
	if (::soap_read_ns2__OCTReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCAuthReply_DEFINED
#define SOAP_TYPE_ns2__CCAuthReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCAuthReply(struct soap*, const char*, int, const ns2__CCAuthReply *, const char*);
SOAP_FMAC3 ns2__CCAuthReply * SOAP_FMAC4 soap_in_ns2__CCAuthReply(struct soap*, const char*, ns2__CCAuthReply *, const char*);
SOAP_FMAC1 ns2__CCAuthReply * SOAP_FMAC2 soap_instantiate_ns2__CCAuthReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCAuthReply * soap_new_ns2__CCAuthReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCAuthReply(soap, n, NULL, NULL, NULL);
}

inline ns2__CCAuthReply * soap_new_req_ns2__CCAuthReply(
	struct soap *soap,
	const std::string& reasonCode)
{
	ns2__CCAuthReply *_p = ::soap_new_ns2__CCAuthReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCAuthReply::reasonCode = reasonCode;
	}
	return _p;
}

inline ns2__CCAuthReply * soap_new_set_ns2__CCAuthReply(
	struct soap *soap,
	const std::string& reasonCode,
	std::string *amount,
	std::string *authorizationCode,
	std::string *avsCode,
	std::string *avsCodeRaw,
	std::string *cvCode,
	std::string *cvCodeRaw,
	std::string *personalIDCode,
	std::string *authorizedDateTime,
	std::string *processorResponse,
	std::string *bmlAccountNumber,
	std::string *authFactorCode,
	std::string *reconciliationID,
	ns2__FundingTotals *fundingTotals,
	std::string *fxQuoteID,
	std::string *fxQuoteRate,
	std::string *fxQuoteType,
	std::string *fxQuoteExpirationDateTime,
	std::string *authRecord,
	std::string *merchantAdviceCode,
	std::string *merchantAdviceCodeRaw,
	std::string *cavvResponseCode,
	std::string *cavvResponseCodeRaw,
	std::string *authenticationXID,
	std::string *authorizationXID,
	std::string *processorCardType,
	std::string *accountBalance,
	std::string *forwardCode,
	std::string *enhancedDataEnabled,
	std::string *referralResponseNumber,
	std::string *subResponseCode,
	std::string *approvedAmount,
	std::string *creditLine,
	std::string *approvedTerms,
	std::string *paymentNetworkTransactionID,
	std::string *cardCategory,
	std::string *ownerMerchantID,
	std::string *requestAmount,
	std::string *requestCurrency,
	std::string *accountBalanceCurrency,
	std::string *accountBalanceSign,
	std::string *amountType,
	std::string *accountType,
	std::string *affluenceIndicator,
	std::string *evEmail,
	std::string *evPhoneNumber,
	std::string *evPostalCode,
	std::string *evName,
	std::string *evStreet,
	std::string *evEmailRaw,
	std::string *evPhoneNumberRaw,
	std::string *evPostalCodeRaw,
	std::string *evNameRaw,
	std::string *evStreetRaw,
	std::string *cardGroup,
	std::string *posData,
	std::string *transactionID,
	std::string *cardIssuerCountry,
	std::string *cardRegulated,
	std::string *cardCommercial,
	std::string *cardPrepaid,
	std::string *cardPayroll,
	std::string *cardHealthcare,
	std::string *cardSignatureDebit,
	std::string *cardPINlessDebit,
	std::string *cardLevel3Eligible,
	std::string *processorTransactionID,
	std::string *providerReasonCode,
	std::string *providerReasonDescription,
	std::string *providerPassThroughData,
	std::string *providerCVNResponseCode,
	std::string *providerAVSResponseCode,
	std::string *providerAcquirerBankCode,
	std::string *paymentCardService,
	std::string *paymentCardServiceResult,
	std::string *transactionQualification,
	std::string *transactionIntegrity,
	std::string *emsTransactionRiskScore,
	std::string *reconciliationReferenceNumber,
	std::string *cardReferenceData,
	std::string *partialPANandIBAN,
	std::string *issuerPINrequest)
{
	ns2__CCAuthReply *_p = ::soap_new_ns2__CCAuthReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCAuthReply::reasonCode = reasonCode;
		_p->ns2__CCAuthReply::amount = amount;
		_p->ns2__CCAuthReply::authorizationCode = authorizationCode;
		_p->ns2__CCAuthReply::avsCode = avsCode;
		_p->ns2__CCAuthReply::avsCodeRaw = avsCodeRaw;
		_p->ns2__CCAuthReply::cvCode = cvCode;
		_p->ns2__CCAuthReply::cvCodeRaw = cvCodeRaw;
		_p->ns2__CCAuthReply::personalIDCode = personalIDCode;
		_p->ns2__CCAuthReply::authorizedDateTime = authorizedDateTime;
		_p->ns2__CCAuthReply::processorResponse = processorResponse;
		_p->ns2__CCAuthReply::bmlAccountNumber = bmlAccountNumber;
		_p->ns2__CCAuthReply::authFactorCode = authFactorCode;
		_p->ns2__CCAuthReply::reconciliationID = reconciliationID;
		_p->ns2__CCAuthReply::fundingTotals = fundingTotals;
		_p->ns2__CCAuthReply::fxQuoteID = fxQuoteID;
		_p->ns2__CCAuthReply::fxQuoteRate = fxQuoteRate;
		_p->ns2__CCAuthReply::fxQuoteType = fxQuoteType;
		_p->ns2__CCAuthReply::fxQuoteExpirationDateTime = fxQuoteExpirationDateTime;
		_p->ns2__CCAuthReply::authRecord = authRecord;
		_p->ns2__CCAuthReply::merchantAdviceCode = merchantAdviceCode;
		_p->ns2__CCAuthReply::merchantAdviceCodeRaw = merchantAdviceCodeRaw;
		_p->ns2__CCAuthReply::cavvResponseCode = cavvResponseCode;
		_p->ns2__CCAuthReply::cavvResponseCodeRaw = cavvResponseCodeRaw;
		_p->ns2__CCAuthReply::authenticationXID = authenticationXID;
		_p->ns2__CCAuthReply::authorizationXID = authorizationXID;
		_p->ns2__CCAuthReply::processorCardType = processorCardType;
		_p->ns2__CCAuthReply::accountBalance = accountBalance;
		_p->ns2__CCAuthReply::forwardCode = forwardCode;
		_p->ns2__CCAuthReply::enhancedDataEnabled = enhancedDataEnabled;
		_p->ns2__CCAuthReply::referralResponseNumber = referralResponseNumber;
		_p->ns2__CCAuthReply::subResponseCode = subResponseCode;
		_p->ns2__CCAuthReply::approvedAmount = approvedAmount;
		_p->ns2__CCAuthReply::creditLine = creditLine;
		_p->ns2__CCAuthReply::approvedTerms = approvedTerms;
		_p->ns2__CCAuthReply::paymentNetworkTransactionID = paymentNetworkTransactionID;
		_p->ns2__CCAuthReply::cardCategory = cardCategory;
		_p->ns2__CCAuthReply::ownerMerchantID = ownerMerchantID;
		_p->ns2__CCAuthReply::requestAmount = requestAmount;
		_p->ns2__CCAuthReply::requestCurrency = requestCurrency;
		_p->ns2__CCAuthReply::accountBalanceCurrency = accountBalanceCurrency;
		_p->ns2__CCAuthReply::accountBalanceSign = accountBalanceSign;
		_p->ns2__CCAuthReply::amountType = amountType;
		_p->ns2__CCAuthReply::accountType = accountType;
		_p->ns2__CCAuthReply::affluenceIndicator = affluenceIndicator;
		_p->ns2__CCAuthReply::evEmail = evEmail;
		_p->ns2__CCAuthReply::evPhoneNumber = evPhoneNumber;
		_p->ns2__CCAuthReply::evPostalCode = evPostalCode;
		_p->ns2__CCAuthReply::evName = evName;
		_p->ns2__CCAuthReply::evStreet = evStreet;
		_p->ns2__CCAuthReply::evEmailRaw = evEmailRaw;
		_p->ns2__CCAuthReply::evPhoneNumberRaw = evPhoneNumberRaw;
		_p->ns2__CCAuthReply::evPostalCodeRaw = evPostalCodeRaw;
		_p->ns2__CCAuthReply::evNameRaw = evNameRaw;
		_p->ns2__CCAuthReply::evStreetRaw = evStreetRaw;
		_p->ns2__CCAuthReply::cardGroup = cardGroup;
		_p->ns2__CCAuthReply::posData = posData;
		_p->ns2__CCAuthReply::transactionID = transactionID;
		_p->ns2__CCAuthReply::cardIssuerCountry = cardIssuerCountry;
		_p->ns2__CCAuthReply::cardRegulated = cardRegulated;
		_p->ns2__CCAuthReply::cardCommercial = cardCommercial;
		_p->ns2__CCAuthReply::cardPrepaid = cardPrepaid;
		_p->ns2__CCAuthReply::cardPayroll = cardPayroll;
		_p->ns2__CCAuthReply::cardHealthcare = cardHealthcare;
		_p->ns2__CCAuthReply::cardSignatureDebit = cardSignatureDebit;
		_p->ns2__CCAuthReply::cardPINlessDebit = cardPINlessDebit;
		_p->ns2__CCAuthReply::cardLevel3Eligible = cardLevel3Eligible;
		_p->ns2__CCAuthReply::processorTransactionID = processorTransactionID;
		_p->ns2__CCAuthReply::providerReasonCode = providerReasonCode;
		_p->ns2__CCAuthReply::providerReasonDescription = providerReasonDescription;
		_p->ns2__CCAuthReply::providerPassThroughData = providerPassThroughData;
		_p->ns2__CCAuthReply::providerCVNResponseCode = providerCVNResponseCode;
		_p->ns2__CCAuthReply::providerAVSResponseCode = providerAVSResponseCode;
		_p->ns2__CCAuthReply::providerAcquirerBankCode = providerAcquirerBankCode;
		_p->ns2__CCAuthReply::paymentCardService = paymentCardService;
		_p->ns2__CCAuthReply::paymentCardServiceResult = paymentCardServiceResult;
		_p->ns2__CCAuthReply::transactionQualification = transactionQualification;
		_p->ns2__CCAuthReply::transactionIntegrity = transactionIntegrity;
		_p->ns2__CCAuthReply::emsTransactionRiskScore = emsTransactionRiskScore;
		_p->ns2__CCAuthReply::reconciliationReferenceNumber = reconciliationReferenceNumber;
		_p->ns2__CCAuthReply::cardReferenceData = cardReferenceData;
		_p->ns2__CCAuthReply::partialPANandIBAN = partialPANandIBAN;
		_p->ns2__CCAuthReply::issuerPINrequest = issuerPINrequest;
	}
	return _p;
}

inline int soap_write_ns2__CCAuthReply(struct soap *soap, ns2__CCAuthReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAuthReply", p->soap_type() == SOAP_TYPE_ns2__CCAuthReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCAuthReply(struct soap *soap, const char *URL, ns2__CCAuthReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAuthReply", p->soap_type() == SOAP_TYPE_ns2__CCAuthReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCAuthReply(struct soap *soap, const char *URL, ns2__CCAuthReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAuthReply", p->soap_type() == SOAP_TYPE_ns2__CCAuthReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCAuthReply(struct soap *soap, const char *URL, ns2__CCAuthReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAuthReply", p->soap_type() == SOAP_TYPE_ns2__CCAuthReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCAuthReply * SOAP_FMAC4 soap_get_ns2__CCAuthReply(struct soap*, ns2__CCAuthReply *, const char*, const char*);

inline int soap_read_ns2__CCAuthReply(struct soap *soap, ns2__CCAuthReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCAuthReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCAuthReply(struct soap *soap, const char *URL, ns2__CCAuthReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCAuthReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCAuthReply(struct soap *soap, ns2__CCAuthReply *p)
{
	if (::soap_read_ns2__CCAuthReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__BalanceInfo_DEFINED
#define SOAP_TYPE_ns2__BalanceInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BalanceInfo(struct soap*, const char*, int, const ns2__BalanceInfo *, const char*);
SOAP_FMAC3 ns2__BalanceInfo * SOAP_FMAC4 soap_in_ns2__BalanceInfo(struct soap*, const char*, ns2__BalanceInfo *, const char*);
SOAP_FMAC1 ns2__BalanceInfo * SOAP_FMAC2 soap_instantiate_ns2__BalanceInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BalanceInfo * soap_new_ns2__BalanceInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__BalanceInfo(soap, n, NULL, NULL, NULL);
}

inline ns2__BalanceInfo * soap_new_req_ns2__BalanceInfo(
	struct soap *soap)
{
	ns2__BalanceInfo *_p = ::soap_new_ns2__BalanceInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__BalanceInfo * soap_new_set_ns2__BalanceInfo(
	struct soap *soap,
	std::string *accountType,
	std::string *amount,
	std::string *amountType,
	std::string *currency,
	std::string *sign,
	std::string *id)
{
	ns2__BalanceInfo *_p = ::soap_new_ns2__BalanceInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BalanceInfo::accountType = accountType;
		_p->ns2__BalanceInfo::amount = amount;
		_p->ns2__BalanceInfo::amountType = amountType;
		_p->ns2__BalanceInfo::currency = currency;
		_p->ns2__BalanceInfo::sign = sign;
		_p->ns2__BalanceInfo::id = id;
	}
	return _p;
}

inline int soap_write_ns2__BalanceInfo(struct soap *soap, ns2__BalanceInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BalanceInfo", p->soap_type() == SOAP_TYPE_ns2__BalanceInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__BalanceInfo(struct soap *soap, const char *URL, ns2__BalanceInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BalanceInfo", p->soap_type() == SOAP_TYPE_ns2__BalanceInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__BalanceInfo(struct soap *soap, const char *URL, ns2__BalanceInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BalanceInfo", p->soap_type() == SOAP_TYPE_ns2__BalanceInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__BalanceInfo(struct soap *soap, const char *URL, ns2__BalanceInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BalanceInfo", p->soap_type() == SOAP_TYPE_ns2__BalanceInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__BalanceInfo * SOAP_FMAC4 soap_get_ns2__BalanceInfo(struct soap*, ns2__BalanceInfo *, const char*, const char*);

inline int soap_read_ns2__BalanceInfo(struct soap *soap, ns2__BalanceInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__BalanceInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__BalanceInfo(struct soap *soap, const char *URL, ns2__BalanceInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__BalanceInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__BalanceInfo(struct soap *soap, ns2__BalanceInfo *p)
{
	if (::soap_read_ns2__BalanceInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PromotionGroupReply_DEFINED
#define SOAP_TYPE_ns2__PromotionGroupReply_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PromotionGroupReply(struct soap*, const char*, int, const ns2__PromotionGroupReply *, const char*);
SOAP_FMAC3 ns2__PromotionGroupReply * SOAP_FMAC4 soap_in_ns2__PromotionGroupReply(struct soap*, const char*, ns2__PromotionGroupReply *, const char*);
SOAP_FMAC1 ns2__PromotionGroupReply * SOAP_FMAC2 soap_instantiate_ns2__PromotionGroupReply(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PromotionGroupReply * soap_new_ns2__PromotionGroupReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PromotionGroupReply(soap, n, NULL, NULL, NULL);
}

inline ns2__PromotionGroupReply * soap_new_req_ns2__PromotionGroupReply(
	struct soap *soap)
{
	ns2__PromotionGroupReply *_p = ::soap_new_ns2__PromotionGroupReply(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__PromotionGroupReply * soap_new_set_ns2__PromotionGroupReply(
	struct soap *soap,
	std::string *discountApplied,
	std::string *id)
{
	ns2__PromotionGroupReply *_p = ::soap_new_ns2__PromotionGroupReply(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PromotionGroupReply::discountApplied = discountApplied;
		_p->ns2__PromotionGroupReply::id = id;
	}
	return _p;
}

inline int soap_write_ns2__PromotionGroupReply(struct soap *soap, ns2__PromotionGroupReply const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PromotionGroupReply", p->soap_type() == SOAP_TYPE_ns2__PromotionGroupReply ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PromotionGroupReply(struct soap *soap, const char *URL, ns2__PromotionGroupReply const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PromotionGroupReply", p->soap_type() == SOAP_TYPE_ns2__PromotionGroupReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PromotionGroupReply(struct soap *soap, const char *URL, ns2__PromotionGroupReply const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PromotionGroupReply", p->soap_type() == SOAP_TYPE_ns2__PromotionGroupReply ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PromotionGroupReply(struct soap *soap, const char *URL, ns2__PromotionGroupReply const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PromotionGroupReply", p->soap_type() == SOAP_TYPE_ns2__PromotionGroupReply ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PromotionGroupReply * SOAP_FMAC4 soap_get_ns2__PromotionGroupReply(struct soap*, ns2__PromotionGroupReply *, const char*, const char*);

inline int soap_read_ns2__PromotionGroupReply(struct soap *soap, ns2__PromotionGroupReply *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PromotionGroupReply(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PromotionGroupReply(struct soap *soap, const char *URL, ns2__PromotionGroupReply *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PromotionGroupReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PromotionGroupReply(struct soap *soap, ns2__PromotionGroupReply *p)
{
	if (::soap_read_ns2__PromotionGroupReply(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PromotionGroup_DEFINED
#define SOAP_TYPE_ns2__PromotionGroup_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PromotionGroup(struct soap*, const char*, int, const ns2__PromotionGroup *, const char*);
SOAP_FMAC3 ns2__PromotionGroup * SOAP_FMAC4 soap_in_ns2__PromotionGroup(struct soap*, const char*, ns2__PromotionGroup *, const char*);
SOAP_FMAC1 ns2__PromotionGroup * SOAP_FMAC2 soap_instantiate_ns2__PromotionGroup(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PromotionGroup * soap_new_ns2__PromotionGroup(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PromotionGroup(soap, n, NULL, NULL, NULL);
}

inline ns2__PromotionGroup * soap_new_req_ns2__PromotionGroup(
	struct soap *soap)
{
	ns2__PromotionGroup *_p = ::soap_new_ns2__PromotionGroup(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__PromotionGroup * soap_new_set_ns2__PromotionGroup(
	struct soap *soap,
	std::string *subtotalAmount,
	std::string *taxRate,
	std::string *prohibitDiscount,
	std::string *id)
{
	ns2__PromotionGroup *_p = ::soap_new_ns2__PromotionGroup(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PromotionGroup::subtotalAmount = subtotalAmount;
		_p->ns2__PromotionGroup::taxRate = taxRate;
		_p->ns2__PromotionGroup::prohibitDiscount = prohibitDiscount;
		_p->ns2__PromotionGroup::id = id;
	}
	return _p;
}

inline int soap_write_ns2__PromotionGroup(struct soap *soap, ns2__PromotionGroup const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PromotionGroup", p->soap_type() == SOAP_TYPE_ns2__PromotionGroup ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PromotionGroup(struct soap *soap, const char *URL, ns2__PromotionGroup const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PromotionGroup", p->soap_type() == SOAP_TYPE_ns2__PromotionGroup ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PromotionGroup(struct soap *soap, const char *URL, ns2__PromotionGroup const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PromotionGroup", p->soap_type() == SOAP_TYPE_ns2__PromotionGroup ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PromotionGroup(struct soap *soap, const char *URL, ns2__PromotionGroup const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PromotionGroup", p->soap_type() == SOAP_TYPE_ns2__PromotionGroup ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PromotionGroup * SOAP_FMAC4 soap_get_ns2__PromotionGroup(struct soap*, ns2__PromotionGroup *, const char*, const char*);

inline int soap_read_ns2__PromotionGroup(struct soap *soap, ns2__PromotionGroup *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PromotionGroup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PromotionGroup(struct soap *soap, const char *URL, ns2__PromotionGroup *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PromotionGroup(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PromotionGroup(struct soap *soap, ns2__PromotionGroup *p)
{
	if (::soap_read_ns2__PromotionGroup(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Promotion_DEFINED
#define SOAP_TYPE_ns2__Promotion_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Promotion(struct soap*, const char*, int, const ns2__Promotion *, const char*);
SOAP_FMAC3 ns2__Promotion * SOAP_FMAC4 soap_in_ns2__Promotion(struct soap*, const char*, ns2__Promotion *, const char*);
SOAP_FMAC1 ns2__Promotion * SOAP_FMAC2 soap_instantiate_ns2__Promotion(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Promotion * soap_new_ns2__Promotion(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Promotion(soap, n, NULL, NULL, NULL);
}

inline ns2__Promotion * soap_new_req_ns2__Promotion(
	struct soap *soap)
{
	ns2__Promotion *_p = ::soap_new_ns2__Promotion(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Promotion * soap_new_set_ns2__Promotion(
	struct soap *soap,
	std::string *discountedAmount,
	std::string *type,
	std::string *code,
	std::string *receiptData,
	std::string *discountApplied,
	std::string *description,
	std::string *additionalCode)
{
	ns2__Promotion *_p = ::soap_new_ns2__Promotion(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Promotion::discountedAmount = discountedAmount;
		_p->ns2__Promotion::type = type;
		_p->ns2__Promotion::code = code;
		_p->ns2__Promotion::receiptData = receiptData;
		_p->ns2__Promotion::discountApplied = discountApplied;
		_p->ns2__Promotion::description = description;
		_p->ns2__Promotion::additionalCode = additionalCode;
	}
	return _p;
}

inline int soap_write_ns2__Promotion(struct soap *soap, ns2__Promotion const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Promotion", p->soap_type() == SOAP_TYPE_ns2__Promotion ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Promotion(struct soap *soap, const char *URL, ns2__Promotion const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Promotion", p->soap_type() == SOAP_TYPE_ns2__Promotion ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Promotion(struct soap *soap, const char *URL, ns2__Promotion const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Promotion", p->soap_type() == SOAP_TYPE_ns2__Promotion ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Promotion(struct soap *soap, const char *URL, ns2__Promotion const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Promotion", p->soap_type() == SOAP_TYPE_ns2__Promotion ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Promotion * SOAP_FMAC4 soap_get_ns2__Promotion(struct soap*, ns2__Promotion *, const char*, const char*);

inline int soap_read_ns2__Promotion(struct soap *soap, ns2__Promotion *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Promotion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Promotion(struct soap *soap, const char *URL, ns2__Promotion *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Promotion(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Promotion(struct soap *soap, ns2__Promotion *p)
{
	if (::soap_read_ns2__Promotion(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DCC_DEFINED
#define SOAP_TYPE_ns2__DCC_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DCC(struct soap*, const char*, int, const ns2__DCC *, const char*);
SOAP_FMAC3 ns2__DCC * SOAP_FMAC4 soap_in_ns2__DCC(struct soap*, const char*, ns2__DCC *, const char*);
SOAP_FMAC1 ns2__DCC * SOAP_FMAC2 soap_instantiate_ns2__DCC(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DCC * soap_new_ns2__DCC(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DCC(soap, n, NULL, NULL, NULL);
}

inline ns2__DCC * soap_new_req_ns2__DCC(
	struct soap *soap)
{
	ns2__DCC *_p = ::soap_new_ns2__DCC(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__DCC * soap_new_set_ns2__DCC(
	struct soap *soap,
	std::string *dccIndicator,
	std::string *referenceNumber)
{
	ns2__DCC *_p = ::soap_new_ns2__DCC(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DCC::dccIndicator = dccIndicator;
		_p->ns2__DCC::referenceNumber = referenceNumber;
	}
	return _p;
}

inline int soap_write_ns2__DCC(struct soap *soap, ns2__DCC const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DCC", p->soap_type() == SOAP_TYPE_ns2__DCC ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DCC(struct soap *soap, const char *URL, ns2__DCC const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DCC", p->soap_type() == SOAP_TYPE_ns2__DCC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DCC(struct soap *soap, const char *URL, ns2__DCC const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DCC", p->soap_type() == SOAP_TYPE_ns2__DCC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DCC(struct soap *soap, const char *URL, ns2__DCC const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DCC", p->soap_type() == SOAP_TYPE_ns2__DCC ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DCC * SOAP_FMAC4 soap_get_ns2__DCC(struct soap*, ns2__DCC *, const char*, const char*);

inline int soap_read_ns2__DCC(struct soap *soap, ns2__DCC *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DCC(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DCC(struct soap *soap, const char *URL, ns2__DCC *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DCC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DCC(struct soap *soap, ns2__DCC *p)
{
	if (::soap_read_ns2__DCC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DecryptVisaCheckoutDataService_DEFINED
#define SOAP_TYPE_ns2__DecryptVisaCheckoutDataService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DecryptVisaCheckoutDataService(struct soap*, const char*, int, const ns2__DecryptVisaCheckoutDataService *, const char*);
SOAP_FMAC3 ns2__DecryptVisaCheckoutDataService * SOAP_FMAC4 soap_in_ns2__DecryptVisaCheckoutDataService(struct soap*, const char*, ns2__DecryptVisaCheckoutDataService *, const char*);
SOAP_FMAC1 ns2__DecryptVisaCheckoutDataService * SOAP_FMAC2 soap_instantiate_ns2__DecryptVisaCheckoutDataService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DecryptVisaCheckoutDataService * soap_new_ns2__DecryptVisaCheckoutDataService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DecryptVisaCheckoutDataService(soap, n, NULL, NULL, NULL);
}

inline ns2__DecryptVisaCheckoutDataService * soap_new_req_ns2__DecryptVisaCheckoutDataService(
	struct soap *soap,
	const std::string& run)
{
	ns2__DecryptVisaCheckoutDataService *_p = ::soap_new_ns2__DecryptVisaCheckoutDataService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DecryptVisaCheckoutDataService::run = run;
	}
	return _p;
}

inline ns2__DecryptVisaCheckoutDataService * soap_new_set_ns2__DecryptVisaCheckoutDataService(
	struct soap *soap,
	const std::string& run)
{
	ns2__DecryptVisaCheckoutDataService *_p = ::soap_new_ns2__DecryptVisaCheckoutDataService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DecryptVisaCheckoutDataService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__DecryptVisaCheckoutDataService(struct soap *soap, ns2__DecryptVisaCheckoutDataService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecryptVisaCheckoutDataService", p->soap_type() == SOAP_TYPE_ns2__DecryptVisaCheckoutDataService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DecryptVisaCheckoutDataService(struct soap *soap, const char *URL, ns2__DecryptVisaCheckoutDataService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecryptVisaCheckoutDataService", p->soap_type() == SOAP_TYPE_ns2__DecryptVisaCheckoutDataService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DecryptVisaCheckoutDataService(struct soap *soap, const char *URL, ns2__DecryptVisaCheckoutDataService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecryptVisaCheckoutDataService", p->soap_type() == SOAP_TYPE_ns2__DecryptVisaCheckoutDataService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DecryptVisaCheckoutDataService(struct soap *soap, const char *URL, ns2__DecryptVisaCheckoutDataService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecryptVisaCheckoutDataService", p->soap_type() == SOAP_TYPE_ns2__DecryptVisaCheckoutDataService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DecryptVisaCheckoutDataService * SOAP_FMAC4 soap_get_ns2__DecryptVisaCheckoutDataService(struct soap*, ns2__DecryptVisaCheckoutDataService *, const char*, const char*);

inline int soap_read_ns2__DecryptVisaCheckoutDataService(struct soap *soap, ns2__DecryptVisaCheckoutDataService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DecryptVisaCheckoutDataService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DecryptVisaCheckoutDataService(struct soap *soap, const char *URL, ns2__DecryptVisaCheckoutDataService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DecryptVisaCheckoutDataService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DecryptVisaCheckoutDataService(struct soap *soap, ns2__DecryptVisaCheckoutDataService *p)
{
	if (::soap_read_ns2__DecryptVisaCheckoutDataService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__VC_DEFINED
#define SOAP_TYPE_ns2__VC_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VC(struct soap*, const char*, int, const ns2__VC *, const char*);
SOAP_FMAC3 ns2__VC * SOAP_FMAC4 soap_in_ns2__VC(struct soap*, const char*, ns2__VC *, const char*);
SOAP_FMAC1 ns2__VC * SOAP_FMAC2 soap_instantiate_ns2__VC(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VC * soap_new_ns2__VC(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__VC(soap, n, NULL, NULL, NULL);
}

inline ns2__VC * soap_new_req_ns2__VC(
	struct soap *soap)
{
	ns2__VC *_p = ::soap_new_ns2__VC(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__VC * soap_new_set_ns2__VC(
	struct soap *soap,
	std::string *orderID)
{
	ns2__VC *_p = ::soap_new_ns2__VC(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__VC::orderID = orderID;
	}
	return _p;
}

inline int soap_write_ns2__VC(struct soap *soap, ns2__VC const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VC", p->soap_type() == SOAP_TYPE_ns2__VC ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__VC(struct soap *soap, const char *URL, ns2__VC const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VC", p->soap_type() == SOAP_TYPE_ns2__VC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__VC(struct soap *soap, const char *URL, ns2__VC const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VC", p->soap_type() == SOAP_TYPE_ns2__VC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__VC(struct soap *soap, const char *URL, ns2__VC const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VC", p->soap_type() == SOAP_TYPE_ns2__VC ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__VC * SOAP_FMAC4 soap_get_ns2__VC(struct soap*, ns2__VC *, const char*, const char*);

inline int soap_read_ns2__VC(struct soap *soap, ns2__VC *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__VC(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__VC(struct soap *soap, const char *URL, ns2__VC *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__VC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__VC(struct soap *soap, ns2__VC *p)
{
	if (::soap_read_ns2__VC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__RequestMessage_DEFINED
#define SOAP_TYPE_ns2__RequestMessage_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RequestMessage(struct soap*, const char*, int, const ns2__RequestMessage *, const char*);
SOAP_FMAC3 ns2__RequestMessage * SOAP_FMAC4 soap_in_ns2__RequestMessage(struct soap*, const char*, ns2__RequestMessage *, const char*);
SOAP_FMAC1 ns2__RequestMessage * SOAP_FMAC2 soap_instantiate_ns2__RequestMessage(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RequestMessage * soap_new_ns2__RequestMessage(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__RequestMessage(soap, n, NULL, NULL, NULL);
}

inline ns2__RequestMessage * soap_new_req_ns2__RequestMessage(
	struct soap *soap)
{
	ns2__RequestMessage *_p = ::soap_new_ns2__RequestMessage(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__RequestMessage * soap_new_set_ns2__RequestMessage(
	struct soap *soap,
	std::string *merchantID,
	std::string *merchantReferenceCode,
	std::string *debtIndicator,
	std::string *clientLibrary,
	std::string *clientLibraryVersion,
	std::string *clientEnvironment,
	std::string *clientSecurityLibraryVersion,
	std::string *clientApplication,
	std::string *clientApplicationVersion,
	std::string *clientApplicationUser,
	std::string *routingCode,
	std::string *comments,
	std::string *returnURL,
	ns2__InvoiceHeader *invoiceHeader,
	std::string *paymentScheme,
	std::string *mandateID,
	std::string *aggregatorMerchantIdentifier,
	std::string *customerID,
	std::string *customerFirstName,
	std::string *customerLastName,
	ns2__BillTo *billTo,
	ns2__ShipTo *shipTo,
	ns2__PersonalID *personalID,
	ns2__ShipFrom *shipFrom,
	const std::vector<ns2__Item *> & item,
	ns2__PurchaseTotals *purchaseTotals,
	ns2__FundingTotals *fundingTotals,
	ns2__DCC *dcc,
	ns2__Pos *pos,
	ns2__Pin *pin,
	ns2__EncryptedPayment *encryptedPayment,
	ns2__Installment *installment,
	ns2__Card *card,
	ns2__Category *category,
	ns2__Check *check,
	ns2__BML *bml,
	ns2__GECC *gecc,
	ns2__UCAF *ucaf,
	ns2__FundTransfer *fundTransfer,
	ns2__BankInfo *bankInfo,
	ns2__Subscription *subscription,
	ns2__RecurringSubscriptionInfo *recurringSubscriptionInfo,
	ns2__TokenSource *tokenSource,
	ns2__DecisionManager *decisionManager,
	ns2__OtherTax *otherTax,
	ns2__PayPal *paypal,
	ns2__MerchantDefinedData *merchantDefinedData,
	ns2__AuxiliaryData *auxiliaryData,
	ns2__MerchantSecureData *merchantSecureData,
	ns2__JPO *jpo,
	std::string *orderRequestToken,
	std::string *linkToRequest,
	ns2__ServiceFee *serviceFee,
	ns2__GiftCard *giftCard,
	ns2__CCAuthService *ccAuthService,
	ns2__OCTService *octService,
	ns2__ECAVSService *ecAVSService,
	ns2__GiftCardActivationService *giftCardActivationService,
	ns2__GiftCardBalanceInquiryService *giftCardBalanceInquiryService,
	ns2__GiftCardRedemptionService *giftCardRedemptionService,
	ns2__GiftCardVoidService *giftCardVoidService,
	ns2__GiftCardReversalService *giftCardReversalService,
	ns2__GiftCardReloadService *giftCardReloadService,
	ns2__GiftCardRefundService *giftCardRefundService,
	ns2__VerificationService *verificationService,
	ns2__CCSaleService *ccSaleService,
	ns2__CCSaleCreditService *ccSaleCreditService,
	ns2__CCSaleReversalService *ccSaleReversalService,
	ns2__CCIncrementalAuthService *ccIncrementalAuthService,
	ns2__CCCaptureService *ccCaptureService,
	ns2__CCCreditService *ccCreditService,
	ns2__CCAuthReversalService *ccAuthReversalService,
	ns2__CCAutoAuthReversalService *ccAutoAuthReversalService,
	ns2__CCDCCService *ccDCCService,
	ns2__ServiceFeeCalculateService *serviceFeeCalculateService,
	ns2__ECDebitService *ecDebitService,
	ns2__ECCreditService *ecCreditService,
	ns2__ECAuthenticateService *ecAuthenticateService,
	ns2__PayerAuthSetupService *payerAuthSetupService,
	ns2__PayerAuthEnrollService *payerAuthEnrollService,
	ns2__PayerAuthValidateService *payerAuthValidateService,
	ns2__TaxService *taxService,
	ns2__DMEService *dmeService,
	ns2__AFSService *afsService,
	ns2__DAVService *davService,
	ns2__ExportService *exportService,
	ns2__FXRatesService *fxRatesService,
	ns2__BankTransferService *bankTransferService,
	ns2__BankTransferRefundService *bankTransferRefundService,
	ns2__BankTransferRealTimeService *bankTransferRealTimeService,
	ns2__DirectDebitMandateService *directDebitMandateService,
	ns2__DirectDebitService *directDebitService,
	ns2__DirectDebitRefundService *directDebitRefundService,
	ns2__DirectDebitValidateService *directDebitValidateService,
	const std::vector<ns2__DeviceFingerprintData *> & deviceFingerprintData,
	ns2__PaySubscriptionCreateService *paySubscriptionCreateService,
	ns2__PaySubscriptionUpdateService *paySubscriptionUpdateService,
	ns2__PaySubscriptionEventUpdateService *paySubscriptionEventUpdateService,
	ns2__PaySubscriptionRetrieveService *paySubscriptionRetrieveService,
	ns2__PaySubscriptionDeleteService *paySubscriptionDeleteService,
	ns2__PayPalPaymentService *payPalPaymentService,
	ns2__PayPalCreditService *payPalCreditService,
	ns2__VoidService *voidService,
	ns2__BusinessRules *businessRules,
	ns2__PinlessDebitService *pinlessDebitService,
	ns2__PinlessDebitValidateService *pinlessDebitValidateService,
	ns2__PinlessDebitReversalService *pinlessDebitReversalService,
	ns2__Batch *batch,
	ns2__AirlineData *airlineData,
	ns2__AncillaryData *ancillaryData,
	ns2__LodgingData *lodgingData,
	ns2__PayPalButtonCreateService *payPalButtonCreateService,
	ns2__PayPalPreapprovedPaymentService *payPalPreapprovedPaymentService,
	ns2__PayPalPreapprovedUpdateService *payPalPreapprovedUpdateService,
	ns2__RiskUpdateService *riskUpdateService,
	ns2__FraudUpdateService *fraudUpdateService,
	ns2__CaseManagementActionService *caseManagementActionService,
	const std::vector<ns2__RequestReserved *> & reserved,
	std::string *deviceFingerprintID,
	std::string *deviceFingerprintRaw,
	std::string *deviceFingerprintHash,
	ns2__PayPalRefundService *payPalRefundService,
	ns2__PayPalAuthReversalService *payPalAuthReversalService,
	ns2__PayPalDoCaptureService *payPalDoCaptureService,
	ns2__PayPalEcDoPaymentService *payPalEcDoPaymentService,
	ns2__PayPalEcGetDetailsService *payPalEcGetDetailsService,
	ns2__PayPalEcSetService *payPalEcSetService,
	ns2__PayPalEcOrderSetupService *payPalEcOrderSetupService,
	ns2__PayPalAuthorizationService *payPalAuthorizationService,
	ns2__PayPalUpdateAgreementService *payPalUpdateAgreementService,
	ns2__PayPalCreateAgreementService *payPalCreateAgreementService,
	ns2__PayPalDoRefTransactionService *payPalDoRefTransactionService,
	ns2__ChinaPaymentService *chinaPaymentService,
	ns2__ChinaRefundService *chinaRefundService,
	ns2__BoletoPaymentService *boletoPaymentService,
	std::string *apPaymentType,
	ns2__APInitiateService *apInitiateService,
	ns2__APCheckStatusService *apCheckStatusService,
	std::string *ignoreCardExpiration,
	std::string *reportGroup,
	std::string *processorID,
	std::string *thirdPartyCertificationNumber,
	std::string *transactionLocalDateTime,
	std::string *solutionProviderTransactionID,
	std::string *surchargeAmount,
	std::string *surchargeSign,
	std::string *pinDataEncryptedPIN,
	std::string *pinDataKeySerialNumber,
	std::string *pinDataPinBlockEncodingFormat,
	std::string *cashbackAmount,
	ns2__PinDebitPurchaseService *pinDebitPurchaseService,
	ns2__PinDebitCreditService *pinDebitCreditService,
	ns2__PinDebitReversalService *pinDebitReversalService,
	ns2__AP *ap,
	ns2__APAuthService *apAuthService,
	ns2__APAuthReversalService *apAuthReversalService,
	ns2__APCaptureService *apCaptureService,
	ns2__APOptionsService *apOptionsService,
	ns2__APRefundService *apRefundService,
	ns2__APSaleService *apSaleService,
	ns2__APCheckOutDetailsService *apCheckoutDetailsService,
	ns2__APSessionsService *apSessionsService,
	ns2__APUI *apUI,
	ns2__APTransactionDetailsService *apTransactionDetailsService,
	ns2__APConfirmPurchaseService *apConfirmPurchaseService,
	ns2__PayPalGetTxnDetailsService *payPalGetTxnDetailsService,
	ns2__PayPalTransactionSearchService *payPalTransactionSearchService,
	ns2__CCDCCUpdateService *ccDCCUpdateService,
	ns2__EmvRequest *emvRequest,
	ns2__merchant *merchant,
	std::string *merchantTransactionIdentifier,
	ns2__HostedDataCreateService *hostedDataCreateService,
	ns2__HostedDataRetrieveService *hostedDataRetrieveService,
	std::string *merchantDomainName,
	std::string *merchantCategoryCode,
	std::string *merchantCategoryCodeDomestic,
	std::string *salesSlipNumber,
	std::string *merchandiseCode,
	std::string *merchandiseDescription,
	std::string *paymentInitiationChannel,
	std::string *extendedCreditTotalCount,
	std::string *authIndicator,
	ns2__PaymentNetworkToken *paymentNetworkToken,
	ns2__Recipient *recipient,
	ns2__Sender *sender,
	ns2__AutoRentalData *autoRentalData,
	std::string *paymentSolution,
	ns2__VC *vc,
	ns2__DecryptVisaCheckoutDataService *decryptVisaCheckoutDataService,
	std::string *taxManagementIndicator,
	const std::vector<ns2__PromotionGroup *> & promotionGroup,
	ns2__Wallet *wallet,
	ns2__Aft *aft,
	std::string *balanceInquiry,
	std::string *prenoteTransaction,
	ns2__EncryptPaymentDataService *encryptPaymentDataService,
	std::string *nationalNetDomesticData,
	std::string *subsequentAuth,
	std::string *subsequentAuthOriginalAmount,
	ns2__BinLookupService *binLookupService,
	std::string *verificationCode,
	std::string *mobileNumber,
	ns2__issuer *issuer,
	std::string *partnerSolutionID,
	std::string *developerID,
	ns2__GETVisaCheckoutDataService *getVisaCheckoutDataService,
	std::string *customerSignatureImage,
	ns2__TransactionMetadataService *transactionMetadataService,
	std::string *subsequentAuthFirst,
	std::string *subsequentAuthReason,
	std::string *subsequentAuthTransactionID,
	std::string *subsequentAuthStoredCredential,
	std::string *subsequentAuthCumulativeAuthAmount,
	std::string *subsequentAuthCITAuthenticationData,
	ns2__Loan *loan,
	std::string *eligibilityInquiry,
	std::string *redemptionInquiry,
	std::string *feeProgramIndicator,
	ns2__APOrderService *apOrderService,
	ns2__APCancelService *apCancelService,
	ns2__APBillingAgreementService *apBillingAgreementService,
	std::string *note_USCOREtoPayee,
	std::string *note_USCOREtoPayer,
	std::string *clientMetadataID,
	std::string *partnerSDKversion,
	std::string *partnerOriginalTransactionID,
	std::string *cardTypeSelectionIndicator,
	ns2__APCreateMandateService *apCreateMandateService,
	ns2__APMandateStatusService *apMandateStatusService,
	ns2__APUpdateMandateService *apUpdateMandateService,
	ns2__APImportMandateService *apImportMandateService,
	ns2__APRevokeMandateService *apRevokeMandateService,
	std::string *billPaymentType,
	ns2__PostdatedTransaction *postdatedTransaction,
	ns2__GetMasterpassDataService *getMasterpassDataService,
	ns2__CCCheckStatusService *ccCheckStatusService,
	ns2__mPOS *mPOS,
	ns2__AbortService *abortService,
	std::string *ignoreRelaxAVS,
	ns2__AgencyInformation *agencyInformation,
	ns2__AutoRental *autoRental,
	const std::vector<ns2__HealthCare *> & healthCare,
	ns2__payByPoints *payByPoints)
{
	ns2__RequestMessage *_p = ::soap_new_ns2__RequestMessage(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__RequestMessage::merchantID = merchantID;
		_p->ns2__RequestMessage::merchantReferenceCode = merchantReferenceCode;
		_p->ns2__RequestMessage::debtIndicator = debtIndicator;
		_p->ns2__RequestMessage::clientLibrary = clientLibrary;
		_p->ns2__RequestMessage::clientLibraryVersion = clientLibraryVersion;
		_p->ns2__RequestMessage::clientEnvironment = clientEnvironment;
		_p->ns2__RequestMessage::clientSecurityLibraryVersion = clientSecurityLibraryVersion;
		_p->ns2__RequestMessage::clientApplication = clientApplication;
		_p->ns2__RequestMessage::clientApplicationVersion = clientApplicationVersion;
		_p->ns2__RequestMessage::clientApplicationUser = clientApplicationUser;
		_p->ns2__RequestMessage::routingCode = routingCode;
		_p->ns2__RequestMessage::comments = comments;
		_p->ns2__RequestMessage::returnURL = returnURL;
		_p->ns2__RequestMessage::invoiceHeader = invoiceHeader;
		_p->ns2__RequestMessage::paymentScheme = paymentScheme;
		_p->ns2__RequestMessage::mandateID = mandateID;
		_p->ns2__RequestMessage::aggregatorMerchantIdentifier = aggregatorMerchantIdentifier;
		_p->ns2__RequestMessage::customerID = customerID;
		_p->ns2__RequestMessage::customerFirstName = customerFirstName;
		_p->ns2__RequestMessage::customerLastName = customerLastName;
		_p->ns2__RequestMessage::billTo = billTo;
		_p->ns2__RequestMessage::shipTo = shipTo;
		_p->ns2__RequestMessage::personalID = personalID;
		_p->ns2__RequestMessage::shipFrom = shipFrom;
		_p->ns2__RequestMessage::item = item;
		_p->ns2__RequestMessage::purchaseTotals = purchaseTotals;
		_p->ns2__RequestMessage::fundingTotals = fundingTotals;
		_p->ns2__RequestMessage::dcc = dcc;
		_p->ns2__RequestMessage::pos = pos;
		_p->ns2__RequestMessage::pin = pin;
		_p->ns2__RequestMessage::encryptedPayment = encryptedPayment;
		_p->ns2__RequestMessage::installment = installment;
		_p->ns2__RequestMessage::card = card;
		_p->ns2__RequestMessage::category = category;
		_p->ns2__RequestMessage::check = check;
		_p->ns2__RequestMessage::bml = bml;
		_p->ns2__RequestMessage::gecc = gecc;
		_p->ns2__RequestMessage::ucaf = ucaf;
		_p->ns2__RequestMessage::fundTransfer = fundTransfer;
		_p->ns2__RequestMessage::bankInfo = bankInfo;
		_p->ns2__RequestMessage::subscription = subscription;
		_p->ns2__RequestMessage::recurringSubscriptionInfo = recurringSubscriptionInfo;
		_p->ns2__RequestMessage::tokenSource = tokenSource;
		_p->ns2__RequestMessage::decisionManager = decisionManager;
		_p->ns2__RequestMessage::otherTax = otherTax;
		_p->ns2__RequestMessage::paypal = paypal;
		_p->ns2__RequestMessage::merchantDefinedData = merchantDefinedData;
		_p->ns2__RequestMessage::auxiliaryData = auxiliaryData;
		_p->ns2__RequestMessage::merchantSecureData = merchantSecureData;
		_p->ns2__RequestMessage::jpo = jpo;
		_p->ns2__RequestMessage::orderRequestToken = orderRequestToken;
		_p->ns2__RequestMessage::linkToRequest = linkToRequest;
		_p->ns2__RequestMessage::serviceFee = serviceFee;
		_p->ns2__RequestMessage::giftCard = giftCard;
		_p->ns2__RequestMessage::ccAuthService = ccAuthService;
		_p->ns2__RequestMessage::octService = octService;
		_p->ns2__RequestMessage::ecAVSService = ecAVSService;
		_p->ns2__RequestMessage::giftCardActivationService = giftCardActivationService;
		_p->ns2__RequestMessage::giftCardBalanceInquiryService = giftCardBalanceInquiryService;
		_p->ns2__RequestMessage::giftCardRedemptionService = giftCardRedemptionService;
		_p->ns2__RequestMessage::giftCardVoidService = giftCardVoidService;
		_p->ns2__RequestMessage::giftCardReversalService = giftCardReversalService;
		_p->ns2__RequestMessage::giftCardReloadService = giftCardReloadService;
		_p->ns2__RequestMessage::giftCardRefundService = giftCardRefundService;
		_p->ns2__RequestMessage::verificationService = verificationService;
		_p->ns2__RequestMessage::ccSaleService = ccSaleService;
		_p->ns2__RequestMessage::ccSaleCreditService = ccSaleCreditService;
		_p->ns2__RequestMessage::ccSaleReversalService = ccSaleReversalService;
		_p->ns2__RequestMessage::ccIncrementalAuthService = ccIncrementalAuthService;
		_p->ns2__RequestMessage::ccCaptureService = ccCaptureService;
		_p->ns2__RequestMessage::ccCreditService = ccCreditService;
		_p->ns2__RequestMessage::ccAuthReversalService = ccAuthReversalService;
		_p->ns2__RequestMessage::ccAutoAuthReversalService = ccAutoAuthReversalService;
		_p->ns2__RequestMessage::ccDCCService = ccDCCService;
		_p->ns2__RequestMessage::serviceFeeCalculateService = serviceFeeCalculateService;
		_p->ns2__RequestMessage::ecDebitService = ecDebitService;
		_p->ns2__RequestMessage::ecCreditService = ecCreditService;
		_p->ns2__RequestMessage::ecAuthenticateService = ecAuthenticateService;
		_p->ns2__RequestMessage::payerAuthSetupService = payerAuthSetupService;
		_p->ns2__RequestMessage::payerAuthEnrollService = payerAuthEnrollService;
		_p->ns2__RequestMessage::payerAuthValidateService = payerAuthValidateService;
		_p->ns2__RequestMessage::taxService = taxService;
		_p->ns2__RequestMessage::dmeService = dmeService;
		_p->ns2__RequestMessage::afsService = afsService;
		_p->ns2__RequestMessage::davService = davService;
		_p->ns2__RequestMessage::exportService = exportService;
		_p->ns2__RequestMessage::fxRatesService = fxRatesService;
		_p->ns2__RequestMessage::bankTransferService = bankTransferService;
		_p->ns2__RequestMessage::bankTransferRefundService = bankTransferRefundService;
		_p->ns2__RequestMessage::bankTransferRealTimeService = bankTransferRealTimeService;
		_p->ns2__RequestMessage::directDebitMandateService = directDebitMandateService;
		_p->ns2__RequestMessage::directDebitService = directDebitService;
		_p->ns2__RequestMessage::directDebitRefundService = directDebitRefundService;
		_p->ns2__RequestMessage::directDebitValidateService = directDebitValidateService;
		_p->ns2__RequestMessage::deviceFingerprintData = deviceFingerprintData;
		_p->ns2__RequestMessage::paySubscriptionCreateService = paySubscriptionCreateService;
		_p->ns2__RequestMessage::paySubscriptionUpdateService = paySubscriptionUpdateService;
		_p->ns2__RequestMessage::paySubscriptionEventUpdateService = paySubscriptionEventUpdateService;
		_p->ns2__RequestMessage::paySubscriptionRetrieveService = paySubscriptionRetrieveService;
		_p->ns2__RequestMessage::paySubscriptionDeleteService = paySubscriptionDeleteService;
		_p->ns2__RequestMessage::payPalPaymentService = payPalPaymentService;
		_p->ns2__RequestMessage::payPalCreditService = payPalCreditService;
		_p->ns2__RequestMessage::voidService = voidService;
		_p->ns2__RequestMessage::businessRules = businessRules;
		_p->ns2__RequestMessage::pinlessDebitService = pinlessDebitService;
		_p->ns2__RequestMessage::pinlessDebitValidateService = pinlessDebitValidateService;
		_p->ns2__RequestMessage::pinlessDebitReversalService = pinlessDebitReversalService;
		_p->ns2__RequestMessage::batch = batch;
		_p->ns2__RequestMessage::airlineData = airlineData;
		_p->ns2__RequestMessage::ancillaryData = ancillaryData;
		_p->ns2__RequestMessage::lodgingData = lodgingData;
		_p->ns2__RequestMessage::payPalButtonCreateService = payPalButtonCreateService;
		_p->ns2__RequestMessage::payPalPreapprovedPaymentService = payPalPreapprovedPaymentService;
		_p->ns2__RequestMessage::payPalPreapprovedUpdateService = payPalPreapprovedUpdateService;
		_p->ns2__RequestMessage::riskUpdateService = riskUpdateService;
		_p->ns2__RequestMessage::fraudUpdateService = fraudUpdateService;
		_p->ns2__RequestMessage::caseManagementActionService = caseManagementActionService;
		_p->ns2__RequestMessage::reserved = reserved;
		_p->ns2__RequestMessage::deviceFingerprintID = deviceFingerprintID;
		_p->ns2__RequestMessage::deviceFingerprintRaw = deviceFingerprintRaw;
		_p->ns2__RequestMessage::deviceFingerprintHash = deviceFingerprintHash;
		_p->ns2__RequestMessage::payPalRefundService = payPalRefundService;
		_p->ns2__RequestMessage::payPalAuthReversalService = payPalAuthReversalService;
		_p->ns2__RequestMessage::payPalDoCaptureService = payPalDoCaptureService;
		_p->ns2__RequestMessage::payPalEcDoPaymentService = payPalEcDoPaymentService;
		_p->ns2__RequestMessage::payPalEcGetDetailsService = payPalEcGetDetailsService;
		_p->ns2__RequestMessage::payPalEcSetService = payPalEcSetService;
		_p->ns2__RequestMessage::payPalEcOrderSetupService = payPalEcOrderSetupService;
		_p->ns2__RequestMessage::payPalAuthorizationService = payPalAuthorizationService;
		_p->ns2__RequestMessage::payPalUpdateAgreementService = payPalUpdateAgreementService;
		_p->ns2__RequestMessage::payPalCreateAgreementService = payPalCreateAgreementService;
		_p->ns2__RequestMessage::payPalDoRefTransactionService = payPalDoRefTransactionService;
		_p->ns2__RequestMessage::chinaPaymentService = chinaPaymentService;
		_p->ns2__RequestMessage::chinaRefundService = chinaRefundService;
		_p->ns2__RequestMessage::boletoPaymentService = boletoPaymentService;
		_p->ns2__RequestMessage::apPaymentType = apPaymentType;
		_p->ns2__RequestMessage::apInitiateService = apInitiateService;
		_p->ns2__RequestMessage::apCheckStatusService = apCheckStatusService;
		_p->ns2__RequestMessage::ignoreCardExpiration = ignoreCardExpiration;
		_p->ns2__RequestMessage::reportGroup = reportGroup;
		_p->ns2__RequestMessage::processorID = processorID;
		_p->ns2__RequestMessage::thirdPartyCertificationNumber = thirdPartyCertificationNumber;
		_p->ns2__RequestMessage::transactionLocalDateTime = transactionLocalDateTime;
		_p->ns2__RequestMessage::solutionProviderTransactionID = solutionProviderTransactionID;
		_p->ns2__RequestMessage::surchargeAmount = surchargeAmount;
		_p->ns2__RequestMessage::surchargeSign = surchargeSign;
		_p->ns2__RequestMessage::pinDataEncryptedPIN = pinDataEncryptedPIN;
		_p->ns2__RequestMessage::pinDataKeySerialNumber = pinDataKeySerialNumber;
		_p->ns2__RequestMessage::pinDataPinBlockEncodingFormat = pinDataPinBlockEncodingFormat;
		_p->ns2__RequestMessage::cashbackAmount = cashbackAmount;
		_p->ns2__RequestMessage::pinDebitPurchaseService = pinDebitPurchaseService;
		_p->ns2__RequestMessage::pinDebitCreditService = pinDebitCreditService;
		_p->ns2__RequestMessage::pinDebitReversalService = pinDebitReversalService;
		_p->ns2__RequestMessage::ap = ap;
		_p->ns2__RequestMessage::apAuthService = apAuthService;
		_p->ns2__RequestMessage::apAuthReversalService = apAuthReversalService;
		_p->ns2__RequestMessage::apCaptureService = apCaptureService;
		_p->ns2__RequestMessage::apOptionsService = apOptionsService;
		_p->ns2__RequestMessage::apRefundService = apRefundService;
		_p->ns2__RequestMessage::apSaleService = apSaleService;
		_p->ns2__RequestMessage::apCheckoutDetailsService = apCheckoutDetailsService;
		_p->ns2__RequestMessage::apSessionsService = apSessionsService;
		_p->ns2__RequestMessage::apUI = apUI;
		_p->ns2__RequestMessage::apTransactionDetailsService = apTransactionDetailsService;
		_p->ns2__RequestMessage::apConfirmPurchaseService = apConfirmPurchaseService;
		_p->ns2__RequestMessage::payPalGetTxnDetailsService = payPalGetTxnDetailsService;
		_p->ns2__RequestMessage::payPalTransactionSearchService = payPalTransactionSearchService;
		_p->ns2__RequestMessage::ccDCCUpdateService = ccDCCUpdateService;
		_p->ns2__RequestMessage::emvRequest = emvRequest;
		_p->ns2__RequestMessage::merchant = merchant;
		_p->ns2__RequestMessage::merchantTransactionIdentifier = merchantTransactionIdentifier;
		_p->ns2__RequestMessage::hostedDataCreateService = hostedDataCreateService;
		_p->ns2__RequestMessage::hostedDataRetrieveService = hostedDataRetrieveService;
		_p->ns2__RequestMessage::merchantDomainName = merchantDomainName;
		_p->ns2__RequestMessage::merchantCategoryCode = merchantCategoryCode;
		_p->ns2__RequestMessage::merchantCategoryCodeDomestic = merchantCategoryCodeDomestic;
		_p->ns2__RequestMessage::salesSlipNumber = salesSlipNumber;
		_p->ns2__RequestMessage::merchandiseCode = merchandiseCode;
		_p->ns2__RequestMessage::merchandiseDescription = merchandiseDescription;
		_p->ns2__RequestMessage::paymentInitiationChannel = paymentInitiationChannel;
		_p->ns2__RequestMessage::extendedCreditTotalCount = extendedCreditTotalCount;
		_p->ns2__RequestMessage::authIndicator = authIndicator;
		_p->ns2__RequestMessage::paymentNetworkToken = paymentNetworkToken;
		_p->ns2__RequestMessage::recipient = recipient;
		_p->ns2__RequestMessage::sender = sender;
		_p->ns2__RequestMessage::autoRentalData = autoRentalData;
		_p->ns2__RequestMessage::paymentSolution = paymentSolution;
		_p->ns2__RequestMessage::vc = vc;
		_p->ns2__RequestMessage::decryptVisaCheckoutDataService = decryptVisaCheckoutDataService;
		_p->ns2__RequestMessage::taxManagementIndicator = taxManagementIndicator;
		_p->ns2__RequestMessage::promotionGroup = promotionGroup;
		_p->ns2__RequestMessage::wallet = wallet;
		_p->ns2__RequestMessage::aft = aft;
		_p->ns2__RequestMessage::balanceInquiry = balanceInquiry;
		_p->ns2__RequestMessage::prenoteTransaction = prenoteTransaction;
		_p->ns2__RequestMessage::encryptPaymentDataService = encryptPaymentDataService;
		_p->ns2__RequestMessage::nationalNetDomesticData = nationalNetDomesticData;
		_p->ns2__RequestMessage::subsequentAuth = subsequentAuth;
		_p->ns2__RequestMessage::subsequentAuthOriginalAmount = subsequentAuthOriginalAmount;
		_p->ns2__RequestMessage::binLookupService = binLookupService;
		_p->ns2__RequestMessage::verificationCode = verificationCode;
		_p->ns2__RequestMessage::mobileNumber = mobileNumber;
		_p->ns2__RequestMessage::issuer = issuer;
		_p->ns2__RequestMessage::partnerSolutionID = partnerSolutionID;
		_p->ns2__RequestMessage::developerID = developerID;
		_p->ns2__RequestMessage::getVisaCheckoutDataService = getVisaCheckoutDataService;
		_p->ns2__RequestMessage::customerSignatureImage = customerSignatureImage;
		_p->ns2__RequestMessage::transactionMetadataService = transactionMetadataService;
		_p->ns2__RequestMessage::subsequentAuthFirst = subsequentAuthFirst;
		_p->ns2__RequestMessage::subsequentAuthReason = subsequentAuthReason;
		_p->ns2__RequestMessage::subsequentAuthTransactionID = subsequentAuthTransactionID;
		_p->ns2__RequestMessage::subsequentAuthStoredCredential = subsequentAuthStoredCredential;
		_p->ns2__RequestMessage::subsequentAuthCumulativeAuthAmount = subsequentAuthCumulativeAuthAmount;
		_p->ns2__RequestMessage::subsequentAuthCITAuthenticationData = subsequentAuthCITAuthenticationData;
		_p->ns2__RequestMessage::loan = loan;
		_p->ns2__RequestMessage::eligibilityInquiry = eligibilityInquiry;
		_p->ns2__RequestMessage::redemptionInquiry = redemptionInquiry;
		_p->ns2__RequestMessage::feeProgramIndicator = feeProgramIndicator;
		_p->ns2__RequestMessage::apOrderService = apOrderService;
		_p->ns2__RequestMessage::apCancelService = apCancelService;
		_p->ns2__RequestMessage::apBillingAgreementService = apBillingAgreementService;
		_p->ns2__RequestMessage::note_USCOREtoPayee = note_USCOREtoPayee;
		_p->ns2__RequestMessage::note_USCOREtoPayer = note_USCOREtoPayer;
		_p->ns2__RequestMessage::clientMetadataID = clientMetadataID;
		_p->ns2__RequestMessage::partnerSDKversion = partnerSDKversion;
		_p->ns2__RequestMessage::partnerOriginalTransactionID = partnerOriginalTransactionID;
		_p->ns2__RequestMessage::cardTypeSelectionIndicator = cardTypeSelectionIndicator;
		_p->ns2__RequestMessage::apCreateMandateService = apCreateMandateService;
		_p->ns2__RequestMessage::apMandateStatusService = apMandateStatusService;
		_p->ns2__RequestMessage::apUpdateMandateService = apUpdateMandateService;
		_p->ns2__RequestMessage::apImportMandateService = apImportMandateService;
		_p->ns2__RequestMessage::apRevokeMandateService = apRevokeMandateService;
		_p->ns2__RequestMessage::billPaymentType = billPaymentType;
		_p->ns2__RequestMessage::postdatedTransaction = postdatedTransaction;
		_p->ns2__RequestMessage::getMasterpassDataService = getMasterpassDataService;
		_p->ns2__RequestMessage::ccCheckStatusService = ccCheckStatusService;
		_p->ns2__RequestMessage::mPOS = mPOS;
		_p->ns2__RequestMessage::abortService = abortService;
		_p->ns2__RequestMessage::ignoreRelaxAVS = ignoreRelaxAVS;
		_p->ns2__RequestMessage::agencyInformation = agencyInformation;
		_p->ns2__RequestMessage::autoRental = autoRental;
		_p->ns2__RequestMessage::healthCare = healthCare;
		_p->ns2__RequestMessage::payByPoints = payByPoints;
	}
	return _p;
}

inline int soap_write_ns2__RequestMessage(struct soap *soap, ns2__RequestMessage const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RequestMessage", p->soap_type() == SOAP_TYPE_ns2__RequestMessage ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__RequestMessage(struct soap *soap, const char *URL, ns2__RequestMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RequestMessage", p->soap_type() == SOAP_TYPE_ns2__RequestMessage ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__RequestMessage(struct soap *soap, const char *URL, ns2__RequestMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RequestMessage", p->soap_type() == SOAP_TYPE_ns2__RequestMessage ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__RequestMessage(struct soap *soap, const char *URL, ns2__RequestMessage const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RequestMessage", p->soap_type() == SOAP_TYPE_ns2__RequestMessage ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__RequestMessage * SOAP_FMAC4 soap_get_ns2__RequestMessage(struct soap*, ns2__RequestMessage *, const char*, const char*);

inline int soap_read_ns2__RequestMessage(struct soap *soap, ns2__RequestMessage *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__RequestMessage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__RequestMessage(struct soap *soap, const char *URL, ns2__RequestMessage *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__RequestMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__RequestMessage(struct soap *soap, ns2__RequestMessage *p)
{
	if (::soap_read_ns2__RequestMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCCheckStatusService_DEFINED
#define SOAP_TYPE_ns2__CCCheckStatusService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCCheckStatusService(struct soap*, const char*, int, const ns2__CCCheckStatusService *, const char*);
SOAP_FMAC3 ns2__CCCheckStatusService * SOAP_FMAC4 soap_in_ns2__CCCheckStatusService(struct soap*, const char*, ns2__CCCheckStatusService *, const char*);
SOAP_FMAC1 ns2__CCCheckStatusService * SOAP_FMAC2 soap_instantiate_ns2__CCCheckStatusService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCCheckStatusService * soap_new_ns2__CCCheckStatusService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCCheckStatusService(soap, n, NULL, NULL, NULL);
}

inline ns2__CCCheckStatusService * soap_new_req_ns2__CCCheckStatusService(
	struct soap *soap,
	const std::string& run)
{
	ns2__CCCheckStatusService *_p = ::soap_new_ns2__CCCheckStatusService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCCheckStatusService::run = run;
	}
	return _p;
}

inline ns2__CCCheckStatusService * soap_new_set_ns2__CCCheckStatusService(
	struct soap *soap,
	std::string *authRequestID,
	const std::string& run)
{
	ns2__CCCheckStatusService *_p = ::soap_new_ns2__CCCheckStatusService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCCheckStatusService::authRequestID = authRequestID;
		_p->ns2__CCCheckStatusService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__CCCheckStatusService(struct soap *soap, ns2__CCCheckStatusService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCheckStatusService", p->soap_type() == SOAP_TYPE_ns2__CCCheckStatusService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCCheckStatusService(struct soap *soap, const char *URL, ns2__CCCheckStatusService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCheckStatusService", p->soap_type() == SOAP_TYPE_ns2__CCCheckStatusService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCCheckStatusService(struct soap *soap, const char *URL, ns2__CCCheckStatusService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCheckStatusService", p->soap_type() == SOAP_TYPE_ns2__CCCheckStatusService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCCheckStatusService(struct soap *soap, const char *URL, ns2__CCCheckStatusService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCheckStatusService", p->soap_type() == SOAP_TYPE_ns2__CCCheckStatusService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCCheckStatusService * SOAP_FMAC4 soap_get_ns2__CCCheckStatusService(struct soap*, ns2__CCCheckStatusService *, const char*, const char*);

inline int soap_read_ns2__CCCheckStatusService(struct soap *soap, ns2__CCCheckStatusService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCCheckStatusService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCCheckStatusService(struct soap *soap, const char *URL, ns2__CCCheckStatusService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCCheckStatusService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCCheckStatusService(struct soap *soap, ns2__CCCheckStatusService *p)
{
	if (::soap_read_ns2__CCCheckStatusService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Sender_DEFINED
#define SOAP_TYPE_ns2__Sender_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Sender(struct soap*, const char*, int, const ns2__Sender *, const char*);
SOAP_FMAC3 ns2__Sender * SOAP_FMAC4 soap_in_ns2__Sender(struct soap*, const char*, ns2__Sender *, const char*);
SOAP_FMAC1 ns2__Sender * SOAP_FMAC2 soap_instantiate_ns2__Sender(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Sender * soap_new_ns2__Sender(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Sender(soap, n, NULL, NULL, NULL);
}

inline ns2__Sender * soap_new_req_ns2__Sender(
	struct soap *soap)
{
	ns2__Sender *_p = ::soap_new_ns2__Sender(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Sender * soap_new_set_ns2__Sender(
	struct soap *soap,
	std::string *referenceNumber,
	std::string *sourceOfFunds,
	std::string *name,
	std::string *address,
	std::string *city,
	std::string *state,
	std::string *postalCode,
	std::string *country,
	std::string *accountNumber,
	std::string *dateOfBirth,
	std::string *firstName,
	std::string *middleName,
	std::string *middleInitial,
	std::string *lastName,
	std::string *phoneNumber)
{
	ns2__Sender *_p = ::soap_new_ns2__Sender(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Sender::referenceNumber = referenceNumber;
		_p->ns2__Sender::sourceOfFunds = sourceOfFunds;
		_p->ns2__Sender::name = name;
		_p->ns2__Sender::address = address;
		_p->ns2__Sender::city = city;
		_p->ns2__Sender::state = state;
		_p->ns2__Sender::postalCode = postalCode;
		_p->ns2__Sender::country = country;
		_p->ns2__Sender::accountNumber = accountNumber;
		_p->ns2__Sender::dateOfBirth = dateOfBirth;
		_p->ns2__Sender::firstName = firstName;
		_p->ns2__Sender::middleName = middleName;
		_p->ns2__Sender::middleInitial = middleInitial;
		_p->ns2__Sender::lastName = lastName;
		_p->ns2__Sender::phoneNumber = phoneNumber;
	}
	return _p;
}

inline int soap_write_ns2__Sender(struct soap *soap, ns2__Sender const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Sender", p->soap_type() == SOAP_TYPE_ns2__Sender ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Sender(struct soap *soap, const char *URL, ns2__Sender const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Sender", p->soap_type() == SOAP_TYPE_ns2__Sender ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Sender(struct soap *soap, const char *URL, ns2__Sender const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Sender", p->soap_type() == SOAP_TYPE_ns2__Sender ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Sender(struct soap *soap, const char *URL, ns2__Sender const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Sender", p->soap_type() == SOAP_TYPE_ns2__Sender ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Sender * SOAP_FMAC4 soap_get_ns2__Sender(struct soap*, ns2__Sender *, const char*, const char*);

inline int soap_read_ns2__Sender(struct soap *soap, ns2__Sender *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Sender(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Sender(struct soap *soap, const char *URL, ns2__Sender *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Sender(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Sender(struct soap *soap, ns2__Sender *p)
{
	if (::soap_read_ns2__Sender(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Recipient_DEFINED
#define SOAP_TYPE_ns2__Recipient_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Recipient(struct soap*, const char*, int, const ns2__Recipient *, const char*);
SOAP_FMAC3 ns2__Recipient * SOAP_FMAC4 soap_in_ns2__Recipient(struct soap*, const char*, ns2__Recipient *, const char*);
SOAP_FMAC1 ns2__Recipient * SOAP_FMAC2 soap_instantiate_ns2__Recipient(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Recipient * soap_new_ns2__Recipient(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Recipient(soap, n, NULL, NULL, NULL);
}

inline ns2__Recipient * soap_new_req_ns2__Recipient(
	struct soap *soap)
{
	ns2__Recipient *_p = ::soap_new_ns2__Recipient(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Recipient * soap_new_set_ns2__Recipient(
	struct soap *soap,
	std::string *dateOfBirth,
	std::string *postalCode,
	std::string *accountID,
	std::string *lastName,
	std::string *name,
	std::string *billingAmount,
	std::string *billingCurrency,
	std::string *billingConversionRate,
	std::string *firstName,
	std::string *middleName,
	std::string *middleInitial,
	std::string *address,
	std::string *city,
	std::string *state,
	std::string *country,
	std::string *phoneNumber)
{
	ns2__Recipient *_p = ::soap_new_ns2__Recipient(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Recipient::dateOfBirth = dateOfBirth;
		_p->ns2__Recipient::postalCode = postalCode;
		_p->ns2__Recipient::accountID = accountID;
		_p->ns2__Recipient::lastName = lastName;
		_p->ns2__Recipient::name = name;
		_p->ns2__Recipient::billingAmount = billingAmount;
		_p->ns2__Recipient::billingCurrency = billingCurrency;
		_p->ns2__Recipient::billingConversionRate = billingConversionRate;
		_p->ns2__Recipient::firstName = firstName;
		_p->ns2__Recipient::middleName = middleName;
		_p->ns2__Recipient::middleInitial = middleInitial;
		_p->ns2__Recipient::address = address;
		_p->ns2__Recipient::city = city;
		_p->ns2__Recipient::state = state;
		_p->ns2__Recipient::country = country;
		_p->ns2__Recipient::phoneNumber = phoneNumber;
	}
	return _p;
}

inline int soap_write_ns2__Recipient(struct soap *soap, ns2__Recipient const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Recipient", p->soap_type() == SOAP_TYPE_ns2__Recipient ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Recipient(struct soap *soap, const char *URL, ns2__Recipient const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Recipient", p->soap_type() == SOAP_TYPE_ns2__Recipient ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Recipient(struct soap *soap, const char *URL, ns2__Recipient const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Recipient", p->soap_type() == SOAP_TYPE_ns2__Recipient ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Recipient(struct soap *soap, const char *URL, ns2__Recipient const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Recipient", p->soap_type() == SOAP_TYPE_ns2__Recipient ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Recipient * SOAP_FMAC4 soap_get_ns2__Recipient(struct soap*, ns2__Recipient *, const char*, const char*);

inline int soap_read_ns2__Recipient(struct soap *soap, ns2__Recipient *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Recipient(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Recipient(struct soap *soap, const char *URL, ns2__Recipient *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Recipient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Recipient(struct soap *soap, ns2__Recipient *p)
{
	if (::soap_read_ns2__Recipient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalTransactionSearchService_DEFINED
#define SOAP_TYPE_ns2__PayPalTransactionSearchService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalTransactionSearchService(struct soap*, const char*, int, const ns2__PayPalTransactionSearchService *, const char*);
SOAP_FMAC3 ns2__PayPalTransactionSearchService * SOAP_FMAC4 soap_in_ns2__PayPalTransactionSearchService(struct soap*, const char*, ns2__PayPalTransactionSearchService *, const char*);
SOAP_FMAC1 ns2__PayPalTransactionSearchService * SOAP_FMAC2 soap_instantiate_ns2__PayPalTransactionSearchService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalTransactionSearchService * soap_new_ns2__PayPalTransactionSearchService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalTransactionSearchService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalTransactionSearchService * soap_new_req_ns2__PayPalTransactionSearchService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayPalTransactionSearchService *_p = ::soap_new_ns2__PayPalTransactionSearchService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalTransactionSearchService::run = run;
	}
	return _p;
}

inline ns2__PayPalTransactionSearchService * soap_new_set_ns2__PayPalTransactionSearchService(
	struct soap *soap,
	std::string *startDate,
	std::string *endDate,
	std::string *paypalCustomerEmail,
	std::string *paypalReceiptId,
	std::string *transactionID,
	std::string *invoiceNumber,
	std::string *grandTotalAmount,
	std::string *currency,
	std::string *paymentStatus,
	std::string *payerSalutation,
	std::string *payerFirstname,
	std::string *payerMiddlename,
	std::string *payerLastname,
	std::string *payerSuffix,
	const std::string& run)
{
	ns2__PayPalTransactionSearchService *_p = ::soap_new_ns2__PayPalTransactionSearchService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalTransactionSearchService::startDate = startDate;
		_p->ns2__PayPalTransactionSearchService::endDate = endDate;
		_p->ns2__PayPalTransactionSearchService::paypalCustomerEmail = paypalCustomerEmail;
		_p->ns2__PayPalTransactionSearchService::paypalReceiptId = paypalReceiptId;
		_p->ns2__PayPalTransactionSearchService::transactionID = transactionID;
		_p->ns2__PayPalTransactionSearchService::invoiceNumber = invoiceNumber;
		_p->ns2__PayPalTransactionSearchService::grandTotalAmount = grandTotalAmount;
		_p->ns2__PayPalTransactionSearchService::currency = currency;
		_p->ns2__PayPalTransactionSearchService::paymentStatus = paymentStatus;
		_p->ns2__PayPalTransactionSearchService::payerSalutation = payerSalutation;
		_p->ns2__PayPalTransactionSearchService::payerFirstname = payerFirstname;
		_p->ns2__PayPalTransactionSearchService::payerMiddlename = payerMiddlename;
		_p->ns2__PayPalTransactionSearchService::payerLastname = payerLastname;
		_p->ns2__PayPalTransactionSearchService::payerSuffix = payerSuffix;
		_p->ns2__PayPalTransactionSearchService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayPalTransactionSearchService(struct soap *soap, ns2__PayPalTransactionSearchService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalTransactionSearchService", p->soap_type() == SOAP_TYPE_ns2__PayPalTransactionSearchService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalTransactionSearchService(struct soap *soap, const char *URL, ns2__PayPalTransactionSearchService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalTransactionSearchService", p->soap_type() == SOAP_TYPE_ns2__PayPalTransactionSearchService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalTransactionSearchService(struct soap *soap, const char *URL, ns2__PayPalTransactionSearchService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalTransactionSearchService", p->soap_type() == SOAP_TYPE_ns2__PayPalTransactionSearchService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalTransactionSearchService(struct soap *soap, const char *URL, ns2__PayPalTransactionSearchService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalTransactionSearchService", p->soap_type() == SOAP_TYPE_ns2__PayPalTransactionSearchService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalTransactionSearchService * SOAP_FMAC4 soap_get_ns2__PayPalTransactionSearchService(struct soap*, ns2__PayPalTransactionSearchService *, const char*, const char*);

inline int soap_read_ns2__PayPalTransactionSearchService(struct soap *soap, ns2__PayPalTransactionSearchService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalTransactionSearchService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalTransactionSearchService(struct soap *soap, const char *URL, ns2__PayPalTransactionSearchService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalTransactionSearchService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalTransactionSearchService(struct soap *soap, ns2__PayPalTransactionSearchService *p)
{
	if (::soap_read_ns2__PayPalTransactionSearchService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalGetTxnDetailsService_DEFINED
#define SOAP_TYPE_ns2__PayPalGetTxnDetailsService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalGetTxnDetailsService(struct soap*, const char*, int, const ns2__PayPalGetTxnDetailsService *, const char*);
SOAP_FMAC3 ns2__PayPalGetTxnDetailsService * SOAP_FMAC4 soap_in_ns2__PayPalGetTxnDetailsService(struct soap*, const char*, ns2__PayPalGetTxnDetailsService *, const char*);
SOAP_FMAC1 ns2__PayPalGetTxnDetailsService * SOAP_FMAC2 soap_instantiate_ns2__PayPalGetTxnDetailsService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalGetTxnDetailsService * soap_new_ns2__PayPalGetTxnDetailsService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalGetTxnDetailsService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalGetTxnDetailsService * soap_new_req_ns2__PayPalGetTxnDetailsService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayPalGetTxnDetailsService *_p = ::soap_new_ns2__PayPalGetTxnDetailsService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalGetTxnDetailsService::run = run;
	}
	return _p;
}

inline ns2__PayPalGetTxnDetailsService * soap_new_set_ns2__PayPalGetTxnDetailsService(
	struct soap *soap,
	std::string *transactionID,
	const std::string& run)
{
	ns2__PayPalGetTxnDetailsService *_p = ::soap_new_ns2__PayPalGetTxnDetailsService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalGetTxnDetailsService::transactionID = transactionID;
		_p->ns2__PayPalGetTxnDetailsService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayPalGetTxnDetailsService(struct soap *soap, ns2__PayPalGetTxnDetailsService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalGetTxnDetailsService", p->soap_type() == SOAP_TYPE_ns2__PayPalGetTxnDetailsService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalGetTxnDetailsService(struct soap *soap, const char *URL, ns2__PayPalGetTxnDetailsService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalGetTxnDetailsService", p->soap_type() == SOAP_TYPE_ns2__PayPalGetTxnDetailsService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalGetTxnDetailsService(struct soap *soap, const char *URL, ns2__PayPalGetTxnDetailsService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalGetTxnDetailsService", p->soap_type() == SOAP_TYPE_ns2__PayPalGetTxnDetailsService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalGetTxnDetailsService(struct soap *soap, const char *URL, ns2__PayPalGetTxnDetailsService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalGetTxnDetailsService", p->soap_type() == SOAP_TYPE_ns2__PayPalGetTxnDetailsService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalGetTxnDetailsService * SOAP_FMAC4 soap_get_ns2__PayPalGetTxnDetailsService(struct soap*, ns2__PayPalGetTxnDetailsService *, const char*, const char*);

inline int soap_read_ns2__PayPalGetTxnDetailsService(struct soap *soap, ns2__PayPalGetTxnDetailsService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalGetTxnDetailsService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalGetTxnDetailsService(struct soap *soap, const char *URL, ns2__PayPalGetTxnDetailsService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalGetTxnDetailsService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalGetTxnDetailsService(struct soap *soap, ns2__PayPalGetTxnDetailsService *p)
{
	if (::soap_read_ns2__PayPalGetTxnDetailsService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APUI_DEFINED
#define SOAP_TYPE_ns2__APUI_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APUI(struct soap*, const char*, int, const ns2__APUI *, const char*);
SOAP_FMAC3 ns2__APUI * SOAP_FMAC4 soap_in_ns2__APUI(struct soap*, const char*, ns2__APUI *, const char*);
SOAP_FMAC1 ns2__APUI * SOAP_FMAC2 soap_instantiate_ns2__APUI(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APUI * soap_new_ns2__APUI(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APUI(soap, n, NULL, NULL, NULL);
}

inline ns2__APUI * soap_new_req_ns2__APUI(
	struct soap *soap)
{
	ns2__APUI *_p = ::soap_new_ns2__APUI(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__APUI * soap_new_set_ns2__APUI(
	struct soap *soap,
	std::string *colorBorder,
	std::string *colorBorderSelected,
	std::string *colorButton,
	std::string *colorButtonText,
	std::string *colorCheckbox,
	std::string *colorCheckboxCheckMark,
	std::string *colorHeader,
	std::string *colorLink,
	std::string *colorText,
	std::string *borderRadius,
	std::string *theme)
{
	ns2__APUI *_p = ::soap_new_ns2__APUI(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APUI::colorBorder = colorBorder;
		_p->ns2__APUI::colorBorderSelected = colorBorderSelected;
		_p->ns2__APUI::colorButton = colorButton;
		_p->ns2__APUI::colorButtonText = colorButtonText;
		_p->ns2__APUI::colorCheckbox = colorCheckbox;
		_p->ns2__APUI::colorCheckboxCheckMark = colorCheckboxCheckMark;
		_p->ns2__APUI::colorHeader = colorHeader;
		_p->ns2__APUI::colorLink = colorLink;
		_p->ns2__APUI::colorText = colorText;
		_p->ns2__APUI::borderRadius = borderRadius;
		_p->ns2__APUI::theme = theme;
	}
	return _p;
}

inline int soap_write_ns2__APUI(struct soap *soap, ns2__APUI const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APUI", p->soap_type() == SOAP_TYPE_ns2__APUI ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APUI(struct soap *soap, const char *URL, ns2__APUI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APUI", p->soap_type() == SOAP_TYPE_ns2__APUI ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APUI(struct soap *soap, const char *URL, ns2__APUI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APUI", p->soap_type() == SOAP_TYPE_ns2__APUI ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APUI(struct soap *soap, const char *URL, ns2__APUI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APUI", p->soap_type() == SOAP_TYPE_ns2__APUI ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APUI * SOAP_FMAC4 soap_get_ns2__APUI(struct soap*, ns2__APUI *, const char*, const char*);

inline int soap_read_ns2__APUI(struct soap *soap, ns2__APUI *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APUI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APUI(struct soap *soap, const char *URL, ns2__APUI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APUI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APUI(struct soap *soap, ns2__APUI *p)
{
	if (::soap_read_ns2__APUI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APSessionsService_DEFINED
#define SOAP_TYPE_ns2__APSessionsService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APSessionsService(struct soap*, const char*, int, const ns2__APSessionsService *, const char*);
SOAP_FMAC3 ns2__APSessionsService * SOAP_FMAC4 soap_in_ns2__APSessionsService(struct soap*, const char*, ns2__APSessionsService *, const char*);
SOAP_FMAC1 ns2__APSessionsService * SOAP_FMAC2 soap_instantiate_ns2__APSessionsService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APSessionsService * soap_new_ns2__APSessionsService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APSessionsService(soap, n, NULL, NULL, NULL);
}

inline ns2__APSessionsService * soap_new_req_ns2__APSessionsService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APSessionsService *_p = ::soap_new_ns2__APSessionsService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APSessionsService::run = run;
	}
	return _p;
}

inline ns2__APSessionsService * soap_new_set_ns2__APSessionsService(
	struct soap *soap,
	std::string *cancelURL,
	std::string *successURL,
	std::string *failureURL,
	std::string *reconciliationID,
	std::string *overridePaymentMethod,
	std::string *paymentOptionID,
	std::string *sessionsType,
	std::string *sessionsRequestID,
	const std::string& run)
{
	ns2__APSessionsService *_p = ::soap_new_ns2__APSessionsService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APSessionsService::cancelURL = cancelURL;
		_p->ns2__APSessionsService::successURL = successURL;
		_p->ns2__APSessionsService::failureURL = failureURL;
		_p->ns2__APSessionsService::reconciliationID = reconciliationID;
		_p->ns2__APSessionsService::overridePaymentMethod = overridePaymentMethod;
		_p->ns2__APSessionsService::paymentOptionID = paymentOptionID;
		_p->ns2__APSessionsService::sessionsType = sessionsType;
		_p->ns2__APSessionsService::sessionsRequestID = sessionsRequestID;
		_p->ns2__APSessionsService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__APSessionsService(struct soap *soap, ns2__APSessionsService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APSessionsService", p->soap_type() == SOAP_TYPE_ns2__APSessionsService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APSessionsService(struct soap *soap, const char *URL, ns2__APSessionsService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APSessionsService", p->soap_type() == SOAP_TYPE_ns2__APSessionsService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APSessionsService(struct soap *soap, const char *URL, ns2__APSessionsService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APSessionsService", p->soap_type() == SOAP_TYPE_ns2__APSessionsService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APSessionsService(struct soap *soap, const char *URL, ns2__APSessionsService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APSessionsService", p->soap_type() == SOAP_TYPE_ns2__APSessionsService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APSessionsService * SOAP_FMAC4 soap_get_ns2__APSessionsService(struct soap*, ns2__APSessionsService *, const char*, const char*);

inline int soap_read_ns2__APSessionsService(struct soap *soap, ns2__APSessionsService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APSessionsService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APSessionsService(struct soap *soap, const char *URL, ns2__APSessionsService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APSessionsService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APSessionsService(struct soap *soap, ns2__APSessionsService *p)
{
	if (::soap_read_ns2__APSessionsService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APConfirmPurchaseService_DEFINED
#define SOAP_TYPE_ns2__APConfirmPurchaseService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APConfirmPurchaseService(struct soap*, const char*, int, const ns2__APConfirmPurchaseService *, const char*);
SOAP_FMAC3 ns2__APConfirmPurchaseService * SOAP_FMAC4 soap_in_ns2__APConfirmPurchaseService(struct soap*, const char*, ns2__APConfirmPurchaseService *, const char*);
SOAP_FMAC1 ns2__APConfirmPurchaseService * SOAP_FMAC2 soap_instantiate_ns2__APConfirmPurchaseService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APConfirmPurchaseService * soap_new_ns2__APConfirmPurchaseService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APConfirmPurchaseService(soap, n, NULL, NULL, NULL);
}

inline ns2__APConfirmPurchaseService * soap_new_req_ns2__APConfirmPurchaseService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APConfirmPurchaseService *_p = ::soap_new_ns2__APConfirmPurchaseService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APConfirmPurchaseService::run = run;
	}
	return _p;
}

inline ns2__APConfirmPurchaseService * soap_new_set_ns2__APConfirmPurchaseService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APConfirmPurchaseService *_p = ::soap_new_ns2__APConfirmPurchaseService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APConfirmPurchaseService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__APConfirmPurchaseService(struct soap *soap, ns2__APConfirmPurchaseService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APConfirmPurchaseService", p->soap_type() == SOAP_TYPE_ns2__APConfirmPurchaseService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APConfirmPurchaseService(struct soap *soap, const char *URL, ns2__APConfirmPurchaseService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APConfirmPurchaseService", p->soap_type() == SOAP_TYPE_ns2__APConfirmPurchaseService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APConfirmPurchaseService(struct soap *soap, const char *URL, ns2__APConfirmPurchaseService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APConfirmPurchaseService", p->soap_type() == SOAP_TYPE_ns2__APConfirmPurchaseService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APConfirmPurchaseService(struct soap *soap, const char *URL, ns2__APConfirmPurchaseService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APConfirmPurchaseService", p->soap_type() == SOAP_TYPE_ns2__APConfirmPurchaseService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APConfirmPurchaseService * SOAP_FMAC4 soap_get_ns2__APConfirmPurchaseService(struct soap*, ns2__APConfirmPurchaseService *, const char*, const char*);

inline int soap_read_ns2__APConfirmPurchaseService(struct soap *soap, ns2__APConfirmPurchaseService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APConfirmPurchaseService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APConfirmPurchaseService(struct soap *soap, const char *URL, ns2__APConfirmPurchaseService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APConfirmPurchaseService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APConfirmPurchaseService(struct soap *soap, ns2__APConfirmPurchaseService *p)
{
	if (::soap_read_ns2__APConfirmPurchaseService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APTransactionDetailsService_DEFINED
#define SOAP_TYPE_ns2__APTransactionDetailsService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APTransactionDetailsService(struct soap*, const char*, int, const ns2__APTransactionDetailsService *, const char*);
SOAP_FMAC3 ns2__APTransactionDetailsService * SOAP_FMAC4 soap_in_ns2__APTransactionDetailsService(struct soap*, const char*, ns2__APTransactionDetailsService *, const char*);
SOAP_FMAC1 ns2__APTransactionDetailsService * SOAP_FMAC2 soap_instantiate_ns2__APTransactionDetailsService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APTransactionDetailsService * soap_new_ns2__APTransactionDetailsService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APTransactionDetailsService(soap, n, NULL, NULL, NULL);
}

inline ns2__APTransactionDetailsService * soap_new_req_ns2__APTransactionDetailsService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APTransactionDetailsService *_p = ::soap_new_ns2__APTransactionDetailsService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APTransactionDetailsService::run = run;
	}
	return _p;
}

inline ns2__APTransactionDetailsService * soap_new_set_ns2__APTransactionDetailsService(
	struct soap *soap,
	std::string *transactionDetailsRequestID,
	const std::string& run)
{
	ns2__APTransactionDetailsService *_p = ::soap_new_ns2__APTransactionDetailsService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APTransactionDetailsService::transactionDetailsRequestID = transactionDetailsRequestID;
		_p->ns2__APTransactionDetailsService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__APTransactionDetailsService(struct soap *soap, ns2__APTransactionDetailsService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APTransactionDetailsService", p->soap_type() == SOAP_TYPE_ns2__APTransactionDetailsService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APTransactionDetailsService(struct soap *soap, const char *URL, ns2__APTransactionDetailsService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APTransactionDetailsService", p->soap_type() == SOAP_TYPE_ns2__APTransactionDetailsService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APTransactionDetailsService(struct soap *soap, const char *URL, ns2__APTransactionDetailsService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APTransactionDetailsService", p->soap_type() == SOAP_TYPE_ns2__APTransactionDetailsService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APTransactionDetailsService(struct soap *soap, const char *URL, ns2__APTransactionDetailsService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APTransactionDetailsService", p->soap_type() == SOAP_TYPE_ns2__APTransactionDetailsService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APTransactionDetailsService * SOAP_FMAC4 soap_get_ns2__APTransactionDetailsService(struct soap*, ns2__APTransactionDetailsService *, const char*, const char*);

inline int soap_read_ns2__APTransactionDetailsService(struct soap *soap, ns2__APTransactionDetailsService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APTransactionDetailsService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APTransactionDetailsService(struct soap *soap, const char *URL, ns2__APTransactionDetailsService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APTransactionDetailsService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APTransactionDetailsService(struct soap *soap, ns2__APTransactionDetailsService *p)
{
	if (::soap_read_ns2__APTransactionDetailsService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APCheckOutDetailsService_DEFINED
#define SOAP_TYPE_ns2__APCheckOutDetailsService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APCheckOutDetailsService(struct soap*, const char*, int, const ns2__APCheckOutDetailsService *, const char*);
SOAP_FMAC3 ns2__APCheckOutDetailsService * SOAP_FMAC4 soap_in_ns2__APCheckOutDetailsService(struct soap*, const char*, ns2__APCheckOutDetailsService *, const char*);
SOAP_FMAC1 ns2__APCheckOutDetailsService * SOAP_FMAC2 soap_instantiate_ns2__APCheckOutDetailsService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APCheckOutDetailsService * soap_new_ns2__APCheckOutDetailsService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APCheckOutDetailsService(soap, n, NULL, NULL, NULL);
}

inline ns2__APCheckOutDetailsService * soap_new_req_ns2__APCheckOutDetailsService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APCheckOutDetailsService *_p = ::soap_new_ns2__APCheckOutDetailsService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APCheckOutDetailsService::run = run;
	}
	return _p;
}

inline ns2__APCheckOutDetailsService * soap_new_set_ns2__APCheckOutDetailsService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APCheckOutDetailsService *_p = ::soap_new_ns2__APCheckOutDetailsService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APCheckOutDetailsService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__APCheckOutDetailsService(struct soap *soap, ns2__APCheckOutDetailsService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCheckOutDetailsService", p->soap_type() == SOAP_TYPE_ns2__APCheckOutDetailsService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APCheckOutDetailsService(struct soap *soap, const char *URL, ns2__APCheckOutDetailsService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCheckOutDetailsService", p->soap_type() == SOAP_TYPE_ns2__APCheckOutDetailsService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APCheckOutDetailsService(struct soap *soap, const char *URL, ns2__APCheckOutDetailsService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCheckOutDetailsService", p->soap_type() == SOAP_TYPE_ns2__APCheckOutDetailsService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APCheckOutDetailsService(struct soap *soap, const char *URL, ns2__APCheckOutDetailsService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCheckOutDetailsService", p->soap_type() == SOAP_TYPE_ns2__APCheckOutDetailsService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APCheckOutDetailsService * SOAP_FMAC4 soap_get_ns2__APCheckOutDetailsService(struct soap*, ns2__APCheckOutDetailsService *, const char*, const char*);

inline int soap_read_ns2__APCheckOutDetailsService(struct soap *soap, ns2__APCheckOutDetailsService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APCheckOutDetailsService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APCheckOutDetailsService(struct soap *soap, const char *URL, ns2__APCheckOutDetailsService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APCheckOutDetailsService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APCheckOutDetailsService(struct soap *soap, ns2__APCheckOutDetailsService *p)
{
	if (::soap_read_ns2__APCheckOutDetailsService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APSaleService_DEFINED
#define SOAP_TYPE_ns2__APSaleService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APSaleService(struct soap*, const char*, int, const ns2__APSaleService *, const char*);
SOAP_FMAC3 ns2__APSaleService * SOAP_FMAC4 soap_in_ns2__APSaleService(struct soap*, const char*, ns2__APSaleService *, const char*);
SOAP_FMAC1 ns2__APSaleService * SOAP_FMAC2 soap_instantiate_ns2__APSaleService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APSaleService * soap_new_ns2__APSaleService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APSaleService(soap, n, NULL, NULL, NULL);
}

inline ns2__APSaleService * soap_new_req_ns2__APSaleService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APSaleService *_p = ::soap_new_ns2__APSaleService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APSaleService::run = run;
	}
	return _p;
}

inline ns2__APSaleService * soap_new_set_ns2__APSaleService(
	struct soap *soap,
	std::string *cancelURL,
	std::string *successURL,
	std::string *failureURL,
	std::string *reconciliationID,
	std::string *overridePaymentMethod,
	std::string *paymentOptionID,
	std::string *transactionTimeout,
	std::string *orderRequestID,
	std::string *billingAgreementID,
	std::string *mandateID,
	std::string *dateCollect,
	std::string *preapprovalToken,
	const std::string& run)
{
	ns2__APSaleService *_p = ::soap_new_ns2__APSaleService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APSaleService::cancelURL = cancelURL;
		_p->ns2__APSaleService::successURL = successURL;
		_p->ns2__APSaleService::failureURL = failureURL;
		_p->ns2__APSaleService::reconciliationID = reconciliationID;
		_p->ns2__APSaleService::overridePaymentMethod = overridePaymentMethod;
		_p->ns2__APSaleService::paymentOptionID = paymentOptionID;
		_p->ns2__APSaleService::transactionTimeout = transactionTimeout;
		_p->ns2__APSaleService::orderRequestID = orderRequestID;
		_p->ns2__APSaleService::billingAgreementID = billingAgreementID;
		_p->ns2__APSaleService::mandateID = mandateID;
		_p->ns2__APSaleService::dateCollect = dateCollect;
		_p->ns2__APSaleService::preapprovalToken = preapprovalToken;
		_p->ns2__APSaleService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__APSaleService(struct soap *soap, ns2__APSaleService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APSaleService", p->soap_type() == SOAP_TYPE_ns2__APSaleService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APSaleService(struct soap *soap, const char *URL, ns2__APSaleService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APSaleService", p->soap_type() == SOAP_TYPE_ns2__APSaleService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APSaleService(struct soap *soap, const char *URL, ns2__APSaleService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APSaleService", p->soap_type() == SOAP_TYPE_ns2__APSaleService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APSaleService(struct soap *soap, const char *URL, ns2__APSaleService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APSaleService", p->soap_type() == SOAP_TYPE_ns2__APSaleService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APSaleService * SOAP_FMAC4 soap_get_ns2__APSaleService(struct soap*, ns2__APSaleService *, const char*, const char*);

inline int soap_read_ns2__APSaleService(struct soap *soap, ns2__APSaleService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APSaleService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APSaleService(struct soap *soap, const char *URL, ns2__APSaleService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APSaleService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APSaleService(struct soap *soap, ns2__APSaleService *p)
{
	if (::soap_read_ns2__APSaleService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APRefundService_DEFINED
#define SOAP_TYPE_ns2__APRefundService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APRefundService(struct soap*, const char*, int, const ns2__APRefundService *, const char*);
SOAP_FMAC3 ns2__APRefundService * SOAP_FMAC4 soap_in_ns2__APRefundService(struct soap*, const char*, ns2__APRefundService *, const char*);
SOAP_FMAC1 ns2__APRefundService * SOAP_FMAC2 soap_instantiate_ns2__APRefundService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APRefundService * soap_new_ns2__APRefundService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APRefundService(soap, n, NULL, NULL, NULL);
}

inline ns2__APRefundService * soap_new_req_ns2__APRefundService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APRefundService *_p = ::soap_new_ns2__APRefundService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APRefundService::run = run;
	}
	return _p;
}

inline ns2__APRefundService * soap_new_set_ns2__APRefundService(
	struct soap *soap,
	std::string *captureRequestID,
	std::string *refundRequestID,
	std::string *reason,
	std::string *instant,
	std::string *note,
	std::string *apInitiateRequestID,
	std::string *returnRef,
	std::string *reconciliationID,
	std::string *saleRequestID,
	const std::string& run)
{
	ns2__APRefundService *_p = ::soap_new_ns2__APRefundService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APRefundService::captureRequestID = captureRequestID;
		_p->ns2__APRefundService::refundRequestID = refundRequestID;
		_p->ns2__APRefundService::reason = reason;
		_p->ns2__APRefundService::instant = instant;
		_p->ns2__APRefundService::note = note;
		_p->ns2__APRefundService::apInitiateRequestID = apInitiateRequestID;
		_p->ns2__APRefundService::returnRef = returnRef;
		_p->ns2__APRefundService::reconciliationID = reconciliationID;
		_p->ns2__APRefundService::saleRequestID = saleRequestID;
		_p->ns2__APRefundService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__APRefundService(struct soap *soap, ns2__APRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APRefundService", p->soap_type() == SOAP_TYPE_ns2__APRefundService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APRefundService(struct soap *soap, const char *URL, ns2__APRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APRefundService", p->soap_type() == SOAP_TYPE_ns2__APRefundService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APRefundService(struct soap *soap, const char *URL, ns2__APRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APRefundService", p->soap_type() == SOAP_TYPE_ns2__APRefundService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APRefundService(struct soap *soap, const char *URL, ns2__APRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APRefundService", p->soap_type() == SOAP_TYPE_ns2__APRefundService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APRefundService * SOAP_FMAC4 soap_get_ns2__APRefundService(struct soap*, ns2__APRefundService *, const char*, const char*);

inline int soap_read_ns2__APRefundService(struct soap *soap, ns2__APRefundService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APRefundService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APRefundService(struct soap *soap, const char *URL, ns2__APRefundService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APRefundService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APRefundService(struct soap *soap, ns2__APRefundService *p)
{
	if (::soap_read_ns2__APRefundService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APOptionsService_DEFINED
#define SOAP_TYPE_ns2__APOptionsService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APOptionsService(struct soap*, const char*, int, const ns2__APOptionsService *, const char*);
SOAP_FMAC3 ns2__APOptionsService * SOAP_FMAC4 soap_in_ns2__APOptionsService(struct soap*, const char*, ns2__APOptionsService *, const char*);
SOAP_FMAC1 ns2__APOptionsService * SOAP_FMAC2 soap_instantiate_ns2__APOptionsService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APOptionsService * soap_new_ns2__APOptionsService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APOptionsService(soap, n, NULL, NULL, NULL);
}

inline ns2__APOptionsService * soap_new_req_ns2__APOptionsService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APOptionsService *_p = ::soap_new_ns2__APOptionsService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APOptionsService::run = run;
	}
	return _p;
}

inline ns2__APOptionsService * soap_new_set_ns2__APOptionsService(
	struct soap *soap,
	std::string *limit,
	std::string *offset,
	const std::string& run)
{
	ns2__APOptionsService *_p = ::soap_new_ns2__APOptionsService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APOptionsService::limit = limit;
		_p->ns2__APOptionsService::offset = offset;
		_p->ns2__APOptionsService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__APOptionsService(struct soap *soap, ns2__APOptionsService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APOptionsService", p->soap_type() == SOAP_TYPE_ns2__APOptionsService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APOptionsService(struct soap *soap, const char *URL, ns2__APOptionsService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APOptionsService", p->soap_type() == SOAP_TYPE_ns2__APOptionsService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APOptionsService(struct soap *soap, const char *URL, ns2__APOptionsService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APOptionsService", p->soap_type() == SOAP_TYPE_ns2__APOptionsService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APOptionsService(struct soap *soap, const char *URL, ns2__APOptionsService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APOptionsService", p->soap_type() == SOAP_TYPE_ns2__APOptionsService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APOptionsService * SOAP_FMAC4 soap_get_ns2__APOptionsService(struct soap*, ns2__APOptionsService *, const char*, const char*);

inline int soap_read_ns2__APOptionsService(struct soap *soap, ns2__APOptionsService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APOptionsService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APOptionsService(struct soap *soap, const char *URL, ns2__APOptionsService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APOptionsService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APOptionsService(struct soap *soap, ns2__APOptionsService *p)
{
	if (::soap_read_ns2__APOptionsService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APCaptureService_DEFINED
#define SOAP_TYPE_ns2__APCaptureService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APCaptureService(struct soap*, const char*, int, const ns2__APCaptureService *, const char*);
SOAP_FMAC3 ns2__APCaptureService * SOAP_FMAC4 soap_in_ns2__APCaptureService(struct soap*, const char*, ns2__APCaptureService *, const char*);
SOAP_FMAC1 ns2__APCaptureService * SOAP_FMAC2 soap_instantiate_ns2__APCaptureService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APCaptureService * soap_new_ns2__APCaptureService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APCaptureService(soap, n, NULL, NULL, NULL);
}

inline ns2__APCaptureService * soap_new_req_ns2__APCaptureService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APCaptureService *_p = ::soap_new_ns2__APCaptureService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APCaptureService::run = run;
	}
	return _p;
}

inline ns2__APCaptureService * soap_new_set_ns2__APCaptureService(
	struct soap *soap,
	std::string *authRequestID,
	std::string *reconciliationID,
	std::string *isFinal,
	const std::string& run)
{
	ns2__APCaptureService *_p = ::soap_new_ns2__APCaptureService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APCaptureService::authRequestID = authRequestID;
		_p->ns2__APCaptureService::reconciliationID = reconciliationID;
		_p->ns2__APCaptureService::isFinal = isFinal;
		_p->ns2__APCaptureService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__APCaptureService(struct soap *soap, ns2__APCaptureService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCaptureService", p->soap_type() == SOAP_TYPE_ns2__APCaptureService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APCaptureService(struct soap *soap, const char *URL, ns2__APCaptureService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCaptureService", p->soap_type() == SOAP_TYPE_ns2__APCaptureService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APCaptureService(struct soap *soap, const char *URL, ns2__APCaptureService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCaptureService", p->soap_type() == SOAP_TYPE_ns2__APCaptureService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APCaptureService(struct soap *soap, const char *URL, ns2__APCaptureService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCaptureService", p->soap_type() == SOAP_TYPE_ns2__APCaptureService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APCaptureService * SOAP_FMAC4 soap_get_ns2__APCaptureService(struct soap*, ns2__APCaptureService *, const char*, const char*);

inline int soap_read_ns2__APCaptureService(struct soap *soap, ns2__APCaptureService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APCaptureService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APCaptureService(struct soap *soap, const char *URL, ns2__APCaptureService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APCaptureService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APCaptureService(struct soap *soap, ns2__APCaptureService *p)
{
	if (::soap_read_ns2__APCaptureService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APAuthReversalService_DEFINED
#define SOAP_TYPE_ns2__APAuthReversalService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APAuthReversalService(struct soap*, const char*, int, const ns2__APAuthReversalService *, const char*);
SOAP_FMAC3 ns2__APAuthReversalService * SOAP_FMAC4 soap_in_ns2__APAuthReversalService(struct soap*, const char*, ns2__APAuthReversalService *, const char*);
SOAP_FMAC1 ns2__APAuthReversalService * SOAP_FMAC2 soap_instantiate_ns2__APAuthReversalService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APAuthReversalService * soap_new_ns2__APAuthReversalService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APAuthReversalService(soap, n, NULL, NULL, NULL);
}

inline ns2__APAuthReversalService * soap_new_req_ns2__APAuthReversalService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APAuthReversalService *_p = ::soap_new_ns2__APAuthReversalService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APAuthReversalService::run = run;
	}
	return _p;
}

inline ns2__APAuthReversalService * soap_new_set_ns2__APAuthReversalService(
	struct soap *soap,
	std::string *authRequestID,
	std::string *reconciliationID,
	const std::string& run)
{
	ns2__APAuthReversalService *_p = ::soap_new_ns2__APAuthReversalService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APAuthReversalService::authRequestID = authRequestID;
		_p->ns2__APAuthReversalService::reconciliationID = reconciliationID;
		_p->ns2__APAuthReversalService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__APAuthReversalService(struct soap *soap, ns2__APAuthReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APAuthReversalService", p->soap_type() == SOAP_TYPE_ns2__APAuthReversalService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APAuthReversalService(struct soap *soap, const char *URL, ns2__APAuthReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APAuthReversalService", p->soap_type() == SOAP_TYPE_ns2__APAuthReversalService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APAuthReversalService(struct soap *soap, const char *URL, ns2__APAuthReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APAuthReversalService", p->soap_type() == SOAP_TYPE_ns2__APAuthReversalService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APAuthReversalService(struct soap *soap, const char *URL, ns2__APAuthReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APAuthReversalService", p->soap_type() == SOAP_TYPE_ns2__APAuthReversalService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APAuthReversalService * SOAP_FMAC4 soap_get_ns2__APAuthReversalService(struct soap*, ns2__APAuthReversalService *, const char*, const char*);

inline int soap_read_ns2__APAuthReversalService(struct soap *soap, ns2__APAuthReversalService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APAuthReversalService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APAuthReversalService(struct soap *soap, const char *URL, ns2__APAuthReversalService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APAuthReversalService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APAuthReversalService(struct soap *soap, ns2__APAuthReversalService *p)
{
	if (::soap_read_ns2__APAuthReversalService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APImportMandateService_DEFINED
#define SOAP_TYPE_ns2__APImportMandateService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APImportMandateService(struct soap*, const char*, int, const ns2__APImportMandateService *, const char*);
SOAP_FMAC3 ns2__APImportMandateService * SOAP_FMAC4 soap_in_ns2__APImportMandateService(struct soap*, const char*, ns2__APImportMandateService *, const char*);
SOAP_FMAC1 ns2__APImportMandateService * SOAP_FMAC2 soap_instantiate_ns2__APImportMandateService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APImportMandateService * soap_new_ns2__APImportMandateService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APImportMandateService(soap, n, NULL, NULL, NULL);
}

inline ns2__APImportMandateService * soap_new_req_ns2__APImportMandateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APImportMandateService *_p = ::soap_new_ns2__APImportMandateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APImportMandateService::run = run;
	}
	return _p;
}

inline ns2__APImportMandateService * soap_new_set_ns2__APImportMandateService(
	struct soap *soap,
	std::string *dateSigned,
	const std::string& run)
{
	ns2__APImportMandateService *_p = ::soap_new_ns2__APImportMandateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APImportMandateService::dateSigned = dateSigned;
		_p->ns2__APImportMandateService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__APImportMandateService(struct soap *soap, ns2__APImportMandateService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APImportMandateService", p->soap_type() == SOAP_TYPE_ns2__APImportMandateService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APImportMandateService(struct soap *soap, const char *URL, ns2__APImportMandateService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APImportMandateService", p->soap_type() == SOAP_TYPE_ns2__APImportMandateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APImportMandateService(struct soap *soap, const char *URL, ns2__APImportMandateService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APImportMandateService", p->soap_type() == SOAP_TYPE_ns2__APImportMandateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APImportMandateService(struct soap *soap, const char *URL, ns2__APImportMandateService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APImportMandateService", p->soap_type() == SOAP_TYPE_ns2__APImportMandateService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APImportMandateService * SOAP_FMAC4 soap_get_ns2__APImportMandateService(struct soap*, ns2__APImportMandateService *, const char*, const char*);

inline int soap_read_ns2__APImportMandateService(struct soap *soap, ns2__APImportMandateService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APImportMandateService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APImportMandateService(struct soap *soap, const char *URL, ns2__APImportMandateService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APImportMandateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APImportMandateService(struct soap *soap, ns2__APImportMandateService *p)
{
	if (::soap_read_ns2__APImportMandateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APAuthService_DEFINED
#define SOAP_TYPE_ns2__APAuthService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APAuthService(struct soap*, const char*, int, const ns2__APAuthService *, const char*);
SOAP_FMAC3 ns2__APAuthService * SOAP_FMAC4 soap_in_ns2__APAuthService(struct soap*, const char*, ns2__APAuthService *, const char*);
SOAP_FMAC1 ns2__APAuthService * SOAP_FMAC2 soap_instantiate_ns2__APAuthService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APAuthService * soap_new_ns2__APAuthService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APAuthService(soap, n, NULL, NULL, NULL);
}

inline ns2__APAuthService * soap_new_req_ns2__APAuthService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APAuthService *_p = ::soap_new_ns2__APAuthService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APAuthService::run = run;
	}
	return _p;
}

inline ns2__APAuthService * soap_new_set_ns2__APAuthService(
	struct soap *soap,
	std::string *cancelURL,
	std::string *successURL,
	std::string *failureURL,
	std::string *overridePaymentMethod,
	std::string *reconciliationID,
	std::string *preapprovalToken,
	std::string *orderRequestID,
	const std::string& run)
{
	ns2__APAuthService *_p = ::soap_new_ns2__APAuthService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APAuthService::cancelURL = cancelURL;
		_p->ns2__APAuthService::successURL = successURL;
		_p->ns2__APAuthService::failureURL = failureURL;
		_p->ns2__APAuthService::overridePaymentMethod = overridePaymentMethod;
		_p->ns2__APAuthService::reconciliationID = reconciliationID;
		_p->ns2__APAuthService::preapprovalToken = preapprovalToken;
		_p->ns2__APAuthService::orderRequestID = orderRequestID;
		_p->ns2__APAuthService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__APAuthService(struct soap *soap, ns2__APAuthService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APAuthService", p->soap_type() == SOAP_TYPE_ns2__APAuthService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APAuthService(struct soap *soap, const char *URL, ns2__APAuthService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APAuthService", p->soap_type() == SOAP_TYPE_ns2__APAuthService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APAuthService(struct soap *soap, const char *URL, ns2__APAuthService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APAuthService", p->soap_type() == SOAP_TYPE_ns2__APAuthService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APAuthService(struct soap *soap, const char *URL, ns2__APAuthService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APAuthService", p->soap_type() == SOAP_TYPE_ns2__APAuthService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APAuthService * SOAP_FMAC4 soap_get_ns2__APAuthService(struct soap*, ns2__APAuthService *, const char*, const char*);

inline int soap_read_ns2__APAuthService(struct soap *soap, ns2__APAuthService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APAuthService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APAuthService(struct soap *soap, const char *URL, ns2__APAuthService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APAuthService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APAuthService(struct soap *soap, ns2__APAuthService *p)
{
	if (::soap_read_ns2__APAuthService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APDevice_DEFINED
#define SOAP_TYPE_ns2__APDevice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APDevice(struct soap*, const char*, int, const ns2__APDevice *, const char*);
SOAP_FMAC3 ns2__APDevice * SOAP_FMAC4 soap_in_ns2__APDevice(struct soap*, const char*, ns2__APDevice *, const char*);
SOAP_FMAC1 ns2__APDevice * SOAP_FMAC2 soap_instantiate_ns2__APDevice(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APDevice * soap_new_ns2__APDevice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APDevice(soap, n, NULL, NULL, NULL);
}

inline ns2__APDevice * soap_new_req_ns2__APDevice(
	struct soap *soap)
{
	ns2__APDevice *_p = ::soap_new_ns2__APDevice(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__APDevice * soap_new_set_ns2__APDevice(
	struct soap *soap,
	std::string *id,
	std::string *type,
	std::string *userAgent)
{
	ns2__APDevice *_p = ::soap_new_ns2__APDevice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APDevice::id = id;
		_p->ns2__APDevice::type = type;
		_p->ns2__APDevice::userAgent = userAgent;
	}
	return _p;
}

inline int soap_write_ns2__APDevice(struct soap *soap, ns2__APDevice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APDevice", p->soap_type() == SOAP_TYPE_ns2__APDevice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APDevice(struct soap *soap, const char *URL, ns2__APDevice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APDevice", p->soap_type() == SOAP_TYPE_ns2__APDevice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APDevice(struct soap *soap, const char *URL, ns2__APDevice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APDevice", p->soap_type() == SOAP_TYPE_ns2__APDevice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APDevice(struct soap *soap, const char *URL, ns2__APDevice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APDevice", p->soap_type() == SOAP_TYPE_ns2__APDevice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APDevice * SOAP_FMAC4 soap_get_ns2__APDevice(struct soap*, ns2__APDevice *, const char*, const char*);

inline int soap_read_ns2__APDevice(struct soap *soap, ns2__APDevice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APDevice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APDevice(struct soap *soap, const char *URL, ns2__APDevice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APDevice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APDevice(struct soap *soap, ns2__APDevice *p)
{
	if (::soap_read_ns2__APDevice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__AP_DEFINED
#define SOAP_TYPE_ns2__AP_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AP(struct soap*, const char*, int, const ns2__AP *, const char*);
SOAP_FMAC3 ns2__AP * SOAP_FMAC4 soap_in_ns2__AP(struct soap*, const char*, ns2__AP *, const char*);
SOAP_FMAC1 ns2__AP * SOAP_FMAC2 soap_instantiate_ns2__AP(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AP * soap_new_ns2__AP(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__AP(soap, n, NULL, NULL, NULL);
}

inline ns2__AP * soap_new_req_ns2__AP(
	struct soap *soap)
{
	ns2__AP *_p = ::soap_new_ns2__AP(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__AP * soap_new_set_ns2__AP(
	struct soap *soap,
	std::string *orderID,
	std::string *pspBarcodeID,
	std::string *customerRepresentativeID,
	std::string *productDescription,
	std::string *settlementCurrency,
	std::string *subtotalAmount,
	std::string *shippingAmount,
	std::string *handlingAmount,
	std::string *shippingHandlingAmount,
	std::string *additionalAmount,
	std::string *taxAmount,
	std::string *giftWrapAmount,
	std::string *discountAmount,
	std::string *purchaseID,
	std::string *productID,
	ns2__APDevice *device,
	std::string *apiKey,
	std::string *insuranceAmount,
	std::string *billingAgreementIndicator,
	std::string *billingAgreementID,
	std::string *billingAgreementDescription,
	std::string *payerID,
	std::string *fundingSource,
	std::string *shippingAddressImmutable)
{
	ns2__AP *_p = ::soap_new_ns2__AP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AP::orderID = orderID;
		_p->ns2__AP::pspBarcodeID = pspBarcodeID;
		_p->ns2__AP::customerRepresentativeID = customerRepresentativeID;
		_p->ns2__AP::productDescription = productDescription;
		_p->ns2__AP::settlementCurrency = settlementCurrency;
		_p->ns2__AP::subtotalAmount = subtotalAmount;
		_p->ns2__AP::shippingAmount = shippingAmount;
		_p->ns2__AP::handlingAmount = handlingAmount;
		_p->ns2__AP::shippingHandlingAmount = shippingHandlingAmount;
		_p->ns2__AP::additionalAmount = additionalAmount;
		_p->ns2__AP::taxAmount = taxAmount;
		_p->ns2__AP::giftWrapAmount = giftWrapAmount;
		_p->ns2__AP::discountAmount = discountAmount;
		_p->ns2__AP::purchaseID = purchaseID;
		_p->ns2__AP::productID = productID;
		_p->ns2__AP::device = device;
		_p->ns2__AP::apiKey = apiKey;
		_p->ns2__AP::insuranceAmount = insuranceAmount;
		_p->ns2__AP::billingAgreementIndicator = billingAgreementIndicator;
		_p->ns2__AP::billingAgreementID = billingAgreementID;
		_p->ns2__AP::billingAgreementDescription = billingAgreementDescription;
		_p->ns2__AP::payerID = payerID;
		_p->ns2__AP::fundingSource = fundingSource;
		_p->ns2__AP::shippingAddressImmutable = shippingAddressImmutable;
	}
	return _p;
}

inline int soap_write_ns2__AP(struct soap *soap, ns2__AP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AP", p->soap_type() == SOAP_TYPE_ns2__AP ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__AP(struct soap *soap, const char *URL, ns2__AP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AP", p->soap_type() == SOAP_TYPE_ns2__AP ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__AP(struct soap *soap, const char *URL, ns2__AP const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AP", p->soap_type() == SOAP_TYPE_ns2__AP ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__AP(struct soap *soap, const char *URL, ns2__AP const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AP", p->soap_type() == SOAP_TYPE_ns2__AP ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__AP * SOAP_FMAC4 soap_get_ns2__AP(struct soap*, ns2__AP *, const char*, const char*);

inline int soap_read_ns2__AP(struct soap *soap, ns2__AP *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__AP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__AP(struct soap *soap, const char *URL, ns2__AP *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__AP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__AP(struct soap *soap, ns2__AP *p)
{
	if (::soap_read_ns2__AP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Token_DEFINED
#define SOAP_TYPE_ns2__Token_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Token(struct soap*, const char*, int, const ns2__Token *, const char*);
SOAP_FMAC3 ns2__Token * SOAP_FMAC4 soap_in_ns2__Token(struct soap*, const char*, ns2__Token *, const char*);
SOAP_FMAC1 ns2__Token * SOAP_FMAC2 soap_instantiate_ns2__Token(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Token * soap_new_ns2__Token(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Token(soap, n, NULL, NULL, NULL);
}

inline ns2__Token * soap_new_req_ns2__Token(
	struct soap *soap)
{
	ns2__Token *_p = ::soap_new_ns2__Token(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Token * soap_new_set_ns2__Token(
	struct soap *soap,
	std::string *prefix,
	std::string *suffix,
	std::string *expirationMonth,
	std::string *expirationYear)
{
	ns2__Token *_p = ::soap_new_ns2__Token(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Token::prefix = prefix;
		_p->ns2__Token::suffix = suffix;
		_p->ns2__Token::expirationMonth = expirationMonth;
		_p->ns2__Token::expirationYear = expirationYear;
	}
	return _p;
}

inline int soap_write_ns2__Token(struct soap *soap, ns2__Token const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Token", p->soap_type() == SOAP_TYPE_ns2__Token ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Token(struct soap *soap, const char *URL, ns2__Token const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Token", p->soap_type() == SOAP_TYPE_ns2__Token ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Token(struct soap *soap, const char *URL, ns2__Token const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Token", p->soap_type() == SOAP_TYPE_ns2__Token ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Token(struct soap *soap, const char *URL, ns2__Token const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Token", p->soap_type() == SOAP_TYPE_ns2__Token ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Token * SOAP_FMAC4 soap_get_ns2__Token(struct soap*, ns2__Token *, const char*, const char*);

inline int soap_read_ns2__Token(struct soap *soap, ns2__Token *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Token(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Token(struct soap *soap, const char *URL, ns2__Token *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Token(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Token(struct soap *soap, ns2__Token *p)
{
	if (::soap_read_ns2__Token(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__JPO_DEFINED
#define SOAP_TYPE_ns2__JPO_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__JPO(struct soap*, const char*, int, const ns2__JPO *, const char*);
SOAP_FMAC3 ns2__JPO * SOAP_FMAC4 soap_in_ns2__JPO(struct soap*, const char*, ns2__JPO *, const char*);
SOAP_FMAC1 ns2__JPO * SOAP_FMAC2 soap_instantiate_ns2__JPO(struct soap*, int, const char*, const char*, size_t*);

inline ns2__JPO * soap_new_ns2__JPO(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__JPO(soap, n, NULL, NULL, NULL);
}

inline ns2__JPO * soap_new_req_ns2__JPO(
	struct soap *soap)
{
	ns2__JPO *_p = ::soap_new_ns2__JPO(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__JPO * soap_new_set_ns2__JPO(
	struct soap *soap,
	std::string *paymentMethod,
	std::string *bonusAmount,
	std::string *bonuses,
	std::string *installments,
	std::string *firstBillingMonth,
	std::string *jccaTerminalID,
	std::string *issuerMessage,
	std::string *jis2TrackData,
	std::string *businessNameAlphanumeric,
	std::string *businessNameJapanese,
	std::string *businessNameKatakana)
{
	ns2__JPO *_p = ::soap_new_ns2__JPO(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__JPO::paymentMethod = paymentMethod;
		_p->ns2__JPO::bonusAmount = bonusAmount;
		_p->ns2__JPO::bonuses = bonuses;
		_p->ns2__JPO::installments = installments;
		_p->ns2__JPO::firstBillingMonth = firstBillingMonth;
		_p->ns2__JPO::jccaTerminalID = jccaTerminalID;
		_p->ns2__JPO::issuerMessage = issuerMessage;
		_p->ns2__JPO::jis2TrackData = jis2TrackData;
		_p->ns2__JPO::businessNameAlphanumeric = businessNameAlphanumeric;
		_p->ns2__JPO::businessNameJapanese = businessNameJapanese;
		_p->ns2__JPO::businessNameKatakana = businessNameKatakana;
	}
	return _p;
}

inline int soap_write_ns2__JPO(struct soap *soap, ns2__JPO const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:JPO", p->soap_type() == SOAP_TYPE_ns2__JPO ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__JPO(struct soap *soap, const char *URL, ns2__JPO const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:JPO", p->soap_type() == SOAP_TYPE_ns2__JPO ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__JPO(struct soap *soap, const char *URL, ns2__JPO const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:JPO", p->soap_type() == SOAP_TYPE_ns2__JPO ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__JPO(struct soap *soap, const char *URL, ns2__JPO const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:JPO", p->soap_type() == SOAP_TYPE_ns2__JPO ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__JPO * SOAP_FMAC4 soap_get_ns2__JPO(struct soap*, ns2__JPO *, const char*, const char*);

inline int soap_read_ns2__JPO(struct soap *soap, ns2__JPO *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__JPO(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__JPO(struct soap *soap, const char *URL, ns2__JPO *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__JPO(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__JPO(struct soap *soap, ns2__JPO *p)
{
	if (::soap_read_ns2__JPO(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPal_DEFINED
#define SOAP_TYPE_ns2__PayPal_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPal(struct soap*, const char*, int, const ns2__PayPal *, const char*);
SOAP_FMAC3 ns2__PayPal * SOAP_FMAC4 soap_in_ns2__PayPal(struct soap*, const char*, ns2__PayPal *, const char*);
SOAP_FMAC1 ns2__PayPal * SOAP_FMAC2 soap_instantiate_ns2__PayPal(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPal * soap_new_ns2__PayPal(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPal(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPal * soap_new_req_ns2__PayPal(
	struct soap *soap)
{
	ns2__PayPal *_p = ::soap_new_ns2__PayPal(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__PayPal * soap_new_set_ns2__PayPal(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	ns2__PayPal *_p = ::soap_new_ns2__PayPal(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPal::__any = __any;
	}
	return _p;
}

inline int soap_write_ns2__PayPal(struct soap *soap, ns2__PayPal const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPal", p->soap_type() == SOAP_TYPE_ns2__PayPal ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPal(struct soap *soap, const char *URL, ns2__PayPal const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPal", p->soap_type() == SOAP_TYPE_ns2__PayPal ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPal(struct soap *soap, const char *URL, ns2__PayPal const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPal", p->soap_type() == SOAP_TYPE_ns2__PayPal ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPal(struct soap *soap, const char *URL, ns2__PayPal const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPal", p->soap_type() == SOAP_TYPE_ns2__PayPal ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPal * SOAP_FMAC4 soap_get_ns2__PayPal(struct soap*, ns2__PayPal *, const char*, const char*);

inline int soap_read_ns2__PayPal(struct soap *soap, ns2__PayPal *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPal(struct soap *soap, const char *URL, ns2__PayPal *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPal(struct soap *soap, ns2__PayPal *p)
{
	if (::soap_read_ns2__PayPal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Batch_DEFINED
#define SOAP_TYPE_ns2__Batch_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Batch(struct soap*, const char*, int, const ns2__Batch *, const char*);
SOAP_FMAC3 ns2__Batch * SOAP_FMAC4 soap_in_ns2__Batch(struct soap*, const char*, ns2__Batch *, const char*);
SOAP_FMAC1 ns2__Batch * SOAP_FMAC2 soap_instantiate_ns2__Batch(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Batch * soap_new_ns2__Batch(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Batch(soap, n, NULL, NULL, NULL);
}

inline ns2__Batch * soap_new_req_ns2__Batch(
	struct soap *soap)
{
	ns2__Batch *_p = ::soap_new_ns2__Batch(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Batch * soap_new_set_ns2__Batch(
	struct soap *soap,
	std::string *batchID,
	std::string *recordID)
{
	ns2__Batch *_p = ::soap_new_ns2__Batch(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Batch::batchID = batchID;
		_p->ns2__Batch::recordID = recordID;
	}
	return _p;
}

inline int soap_write_ns2__Batch(struct soap *soap, ns2__Batch const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Batch", p->soap_type() == SOAP_TYPE_ns2__Batch ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Batch(struct soap *soap, const char *URL, ns2__Batch const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Batch", p->soap_type() == SOAP_TYPE_ns2__Batch ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Batch(struct soap *soap, const char *URL, ns2__Batch const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Batch", p->soap_type() == SOAP_TYPE_ns2__Batch ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Batch(struct soap *soap, const char *URL, ns2__Batch const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Batch", p->soap_type() == SOAP_TYPE_ns2__Batch ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Batch * SOAP_FMAC4 soap_get_ns2__Batch(struct soap*, ns2__Batch *, const char*, const char*);

inline int soap_read_ns2__Batch(struct soap *soap, ns2__Batch *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Batch(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Batch(struct soap *soap, const char *URL, ns2__Batch *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Batch(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Batch(struct soap *soap, ns2__Batch *p)
{
	if (::soap_read_ns2__Batch(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DecisionManagerTravelLeg_DEFINED
#define SOAP_TYPE_ns2__DecisionManagerTravelLeg_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DecisionManagerTravelLeg(struct soap*, const char*, int, const ns2__DecisionManagerTravelLeg *, const char*);
SOAP_FMAC3 ns2__DecisionManagerTravelLeg * SOAP_FMAC4 soap_in_ns2__DecisionManagerTravelLeg(struct soap*, const char*, ns2__DecisionManagerTravelLeg *, const char*);
SOAP_FMAC1 ns2__DecisionManagerTravelLeg * SOAP_FMAC2 soap_instantiate_ns2__DecisionManagerTravelLeg(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DecisionManagerTravelLeg * soap_new_ns2__DecisionManagerTravelLeg(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DecisionManagerTravelLeg(soap, n, NULL, NULL, NULL);
}

inline ns2__DecisionManagerTravelLeg * soap_new_req_ns2__DecisionManagerTravelLeg(
	struct soap *soap)
{
	ns2__DecisionManagerTravelLeg *_p = ::soap_new_ns2__DecisionManagerTravelLeg(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__DecisionManagerTravelLeg * soap_new_set_ns2__DecisionManagerTravelLeg(
	struct soap *soap,
	std::string *origin,
	std::string *destination,
	std::string *departureDateTime,
	std::string *id)
{
	ns2__DecisionManagerTravelLeg *_p = ::soap_new_ns2__DecisionManagerTravelLeg(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DecisionManagerTravelLeg::origin = origin;
		_p->ns2__DecisionManagerTravelLeg::destination = destination;
		_p->ns2__DecisionManagerTravelLeg::departureDateTime = departureDateTime;
		_p->ns2__DecisionManagerTravelLeg::id = id;
	}
	return _p;
}

inline int soap_write_ns2__DecisionManagerTravelLeg(struct soap *soap, ns2__DecisionManagerTravelLeg const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecisionManagerTravelLeg", p->soap_type() == SOAP_TYPE_ns2__DecisionManagerTravelLeg ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DecisionManagerTravelLeg(struct soap *soap, const char *URL, ns2__DecisionManagerTravelLeg const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecisionManagerTravelLeg", p->soap_type() == SOAP_TYPE_ns2__DecisionManagerTravelLeg ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DecisionManagerTravelLeg(struct soap *soap, const char *URL, ns2__DecisionManagerTravelLeg const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecisionManagerTravelLeg", p->soap_type() == SOAP_TYPE_ns2__DecisionManagerTravelLeg ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DecisionManagerTravelLeg(struct soap *soap, const char *URL, ns2__DecisionManagerTravelLeg const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecisionManagerTravelLeg", p->soap_type() == SOAP_TYPE_ns2__DecisionManagerTravelLeg ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DecisionManagerTravelLeg * SOAP_FMAC4 soap_get_ns2__DecisionManagerTravelLeg(struct soap*, ns2__DecisionManagerTravelLeg *, const char*, const char*);

inline int soap_read_ns2__DecisionManagerTravelLeg(struct soap *soap, ns2__DecisionManagerTravelLeg *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DecisionManagerTravelLeg(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DecisionManagerTravelLeg(struct soap *soap, const char *URL, ns2__DecisionManagerTravelLeg *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DecisionManagerTravelLeg(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DecisionManagerTravelLeg(struct soap *soap, ns2__DecisionManagerTravelLeg *p)
{
	if (::soap_read_ns2__DecisionManagerTravelLeg(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DecisionManagerTravelData_DEFINED
#define SOAP_TYPE_ns2__DecisionManagerTravelData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DecisionManagerTravelData(struct soap*, const char*, int, const ns2__DecisionManagerTravelData *, const char*);
SOAP_FMAC3 ns2__DecisionManagerTravelData * SOAP_FMAC4 soap_in_ns2__DecisionManagerTravelData(struct soap*, const char*, ns2__DecisionManagerTravelData *, const char*);
SOAP_FMAC1 ns2__DecisionManagerTravelData * SOAP_FMAC2 soap_instantiate_ns2__DecisionManagerTravelData(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DecisionManagerTravelData * soap_new_ns2__DecisionManagerTravelData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DecisionManagerTravelData(soap, n, NULL, NULL, NULL);
}

inline ns2__DecisionManagerTravelData * soap_new_req_ns2__DecisionManagerTravelData(
	struct soap *soap)
{
	ns2__DecisionManagerTravelData *_p = ::soap_new_ns2__DecisionManagerTravelData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__DecisionManagerTravelData * soap_new_set_ns2__DecisionManagerTravelData(
	struct soap *soap,
	const std::vector<ns2__DecisionManagerTravelLeg *> & leg,
	std::string *departureDateTime,
	std::string *completeRoute,
	std::string *journeyType,
	std::string *actualFinalDestination)
{
	ns2__DecisionManagerTravelData *_p = ::soap_new_ns2__DecisionManagerTravelData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DecisionManagerTravelData::leg = leg;
		_p->ns2__DecisionManagerTravelData::departureDateTime = departureDateTime;
		_p->ns2__DecisionManagerTravelData::completeRoute = completeRoute;
		_p->ns2__DecisionManagerTravelData::journeyType = journeyType;
		_p->ns2__DecisionManagerTravelData::actualFinalDestination = actualFinalDestination;
	}
	return _p;
}

inline int soap_write_ns2__DecisionManagerTravelData(struct soap *soap, ns2__DecisionManagerTravelData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecisionManagerTravelData", p->soap_type() == SOAP_TYPE_ns2__DecisionManagerTravelData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DecisionManagerTravelData(struct soap *soap, const char *URL, ns2__DecisionManagerTravelData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecisionManagerTravelData", p->soap_type() == SOAP_TYPE_ns2__DecisionManagerTravelData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DecisionManagerTravelData(struct soap *soap, const char *URL, ns2__DecisionManagerTravelData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecisionManagerTravelData", p->soap_type() == SOAP_TYPE_ns2__DecisionManagerTravelData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DecisionManagerTravelData(struct soap *soap, const char *URL, ns2__DecisionManagerTravelData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecisionManagerTravelData", p->soap_type() == SOAP_TYPE_ns2__DecisionManagerTravelData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DecisionManagerTravelData * SOAP_FMAC4 soap_get_ns2__DecisionManagerTravelData(struct soap*, ns2__DecisionManagerTravelData *, const char*, const char*);

inline int soap_read_ns2__DecisionManagerTravelData(struct soap *soap, ns2__DecisionManagerTravelData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DecisionManagerTravelData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DecisionManagerTravelData(struct soap *soap, const char *URL, ns2__DecisionManagerTravelData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DecisionManagerTravelData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DecisionManagerTravelData(struct soap *soap, ns2__DecisionManagerTravelData *p)
{
	if (::soap_read_ns2__DecisionManagerTravelData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Authentication_DEFINED
#define SOAP_TYPE_ns2__Authentication_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Authentication(struct soap*, const char*, int, const ns2__Authentication *, const char*);
SOAP_FMAC3 ns2__Authentication * SOAP_FMAC4 soap_in_ns2__Authentication(struct soap*, const char*, ns2__Authentication *, const char*);
SOAP_FMAC1 ns2__Authentication * SOAP_FMAC2 soap_instantiate_ns2__Authentication(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Authentication * soap_new_ns2__Authentication(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Authentication(soap, n, NULL, NULL, NULL);
}

inline ns2__Authentication * soap_new_req_ns2__Authentication(
	struct soap *soap)
{
	ns2__Authentication *_p = ::soap_new_ns2__Authentication(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Authentication * soap_new_set_ns2__Authentication(
	struct soap *soap,
	std::string *outOfScope,
	std::string *exemption)
{
	ns2__Authentication *_p = ::soap_new_ns2__Authentication(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Authentication::outOfScope = outOfScope;
		_p->ns2__Authentication::exemption = exemption;
	}
	return _p;
}

inline int soap_write_ns2__Authentication(struct soap *soap, ns2__Authentication const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Authentication", p->soap_type() == SOAP_TYPE_ns2__Authentication ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Authentication(struct soap *soap, const char *URL, ns2__Authentication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Authentication", p->soap_type() == SOAP_TYPE_ns2__Authentication ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Authentication(struct soap *soap, const char *URL, ns2__Authentication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Authentication", p->soap_type() == SOAP_TYPE_ns2__Authentication ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Authentication(struct soap *soap, const char *URL, ns2__Authentication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Authentication", p->soap_type() == SOAP_TYPE_ns2__Authentication ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Authentication * SOAP_FMAC4 soap_get_ns2__Authentication(struct soap*, ns2__Authentication *, const char*, const char*);

inline int soap_read_ns2__Authentication(struct soap *soap, ns2__Authentication *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Authentication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Authentication(struct soap *soap, const char *URL, ns2__Authentication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Authentication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Authentication(struct soap *soap, ns2__Authentication *p)
{
	if (::soap_read_ns2__Authentication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DecisionManager_DEFINED
#define SOAP_TYPE_ns2__DecisionManager_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DecisionManager(struct soap*, const char*, int, const ns2__DecisionManager *, const char*);
SOAP_FMAC3 ns2__DecisionManager * SOAP_FMAC4 soap_in_ns2__DecisionManager(struct soap*, const char*, ns2__DecisionManager *, const char*);
SOAP_FMAC1 ns2__DecisionManager * SOAP_FMAC2 soap_instantiate_ns2__DecisionManager(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DecisionManager * soap_new_ns2__DecisionManager(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DecisionManager(soap, n, NULL, NULL, NULL);
}

inline ns2__DecisionManager * soap_new_req_ns2__DecisionManager(
	struct soap *soap)
{
	ns2__DecisionManager *_p = ::soap_new_ns2__DecisionManager(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__DecisionManager * soap_new_set_ns2__DecisionManager(
	struct soap *soap,
	std::string *enabled,
	std::string *profile,
	std::string *pausedRequestID,
	ns2__Authentication *authentication,
	ns2__DecisionManagerTravelData *travelData)
{
	ns2__DecisionManager *_p = ::soap_new_ns2__DecisionManager(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DecisionManager::enabled = enabled;
		_p->ns2__DecisionManager::profile = profile;
		_p->ns2__DecisionManager::pausedRequestID = pausedRequestID;
		_p->ns2__DecisionManager::authentication = authentication;
		_p->ns2__DecisionManager::travelData = travelData;
	}
	return _p;
}

inline int soap_write_ns2__DecisionManager(struct soap *soap, ns2__DecisionManager const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecisionManager", p->soap_type() == SOAP_TYPE_ns2__DecisionManager ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DecisionManager(struct soap *soap, const char *URL, ns2__DecisionManager const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecisionManager", p->soap_type() == SOAP_TYPE_ns2__DecisionManager ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DecisionManager(struct soap *soap, const char *URL, ns2__DecisionManager const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecisionManager", p->soap_type() == SOAP_TYPE_ns2__DecisionManager ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DecisionManager(struct soap *soap, const char *URL, ns2__DecisionManager const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DecisionManager", p->soap_type() == SOAP_TYPE_ns2__DecisionManager ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DecisionManager * SOAP_FMAC4 soap_get_ns2__DecisionManager(struct soap*, ns2__DecisionManager *, const char*, const char*);

inline int soap_read_ns2__DecisionManager(struct soap *soap, ns2__DecisionManager *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DecisionManager(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DecisionManager(struct soap *soap, const char *URL, ns2__DecisionManager *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DecisionManager(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DecisionManager(struct soap *soap, ns2__DecisionManager *p)
{
	if (::soap_read_ns2__DecisionManager(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PaymentNetworkToken_DEFINED
#define SOAP_TYPE_ns2__PaymentNetworkToken_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PaymentNetworkToken(struct soap*, const char*, int, const ns2__PaymentNetworkToken *, const char*);
SOAP_FMAC3 ns2__PaymentNetworkToken * SOAP_FMAC4 soap_in_ns2__PaymentNetworkToken(struct soap*, const char*, ns2__PaymentNetworkToken *, const char*);
SOAP_FMAC1 ns2__PaymentNetworkToken * SOAP_FMAC2 soap_instantiate_ns2__PaymentNetworkToken(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PaymentNetworkToken * soap_new_ns2__PaymentNetworkToken(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PaymentNetworkToken(soap, n, NULL, NULL, NULL);
}

inline ns2__PaymentNetworkToken * soap_new_req_ns2__PaymentNetworkToken(
	struct soap *soap)
{
	ns2__PaymentNetworkToken *_p = ::soap_new_ns2__PaymentNetworkToken(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__PaymentNetworkToken * soap_new_set_ns2__PaymentNetworkToken(
	struct soap *soap,
	std::string *requestorID,
	std::string *transactionType,
	std::string *assuranceLevel,
	std::string *accountStatus,
	std::string *originalCardCategory,
	std::string *deviceTechType)
{
	ns2__PaymentNetworkToken *_p = ::soap_new_ns2__PaymentNetworkToken(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaymentNetworkToken::requestorID = requestorID;
		_p->ns2__PaymentNetworkToken::transactionType = transactionType;
		_p->ns2__PaymentNetworkToken::assuranceLevel = assuranceLevel;
		_p->ns2__PaymentNetworkToken::accountStatus = accountStatus;
		_p->ns2__PaymentNetworkToken::originalCardCategory = originalCardCategory;
		_p->ns2__PaymentNetworkToken::deviceTechType = deviceTechType;
	}
	return _p;
}

inline int soap_write_ns2__PaymentNetworkToken(struct soap *soap, ns2__PaymentNetworkToken const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaymentNetworkToken", p->soap_type() == SOAP_TYPE_ns2__PaymentNetworkToken ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PaymentNetworkToken(struct soap *soap, const char *URL, ns2__PaymentNetworkToken const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaymentNetworkToken", p->soap_type() == SOAP_TYPE_ns2__PaymentNetworkToken ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PaymentNetworkToken(struct soap *soap, const char *URL, ns2__PaymentNetworkToken const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaymentNetworkToken", p->soap_type() == SOAP_TYPE_ns2__PaymentNetworkToken ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PaymentNetworkToken(struct soap *soap, const char *URL, ns2__PaymentNetworkToken const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaymentNetworkToken", p->soap_type() == SOAP_TYPE_ns2__PaymentNetworkToken ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PaymentNetworkToken * SOAP_FMAC4 soap_get_ns2__PaymentNetworkToken(struct soap*, ns2__PaymentNetworkToken *, const char*, const char*);

inline int soap_read_ns2__PaymentNetworkToken(struct soap *soap, ns2__PaymentNetworkToken *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PaymentNetworkToken(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PaymentNetworkToken(struct soap *soap, const char *URL, ns2__PaymentNetworkToken *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PaymentNetworkToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PaymentNetworkToken(struct soap *soap, ns2__PaymentNetworkToken *p)
{
	if (::soap_read_ns2__PaymentNetworkToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__TokenSource_DEFINED
#define SOAP_TYPE_ns2__TokenSource_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TokenSource(struct soap*, const char*, int, const ns2__TokenSource *, const char*);
SOAP_FMAC3 ns2__TokenSource * SOAP_FMAC4 soap_in_ns2__TokenSource(struct soap*, const char*, ns2__TokenSource *, const char*);
SOAP_FMAC1 ns2__TokenSource * SOAP_FMAC2 soap_instantiate_ns2__TokenSource(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TokenSource * soap_new_ns2__TokenSource(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__TokenSource(soap, n, NULL, NULL, NULL);
}

inline ns2__TokenSource * soap_new_req_ns2__TokenSource(
	struct soap *soap)
{
	ns2__TokenSource *_p = ::soap_new_ns2__TokenSource(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__TokenSource * soap_new_set_ns2__TokenSource(
	struct soap *soap,
	std::string *transientToken,
	std::string *networkTokenOption)
{
	ns2__TokenSource *_p = ::soap_new_ns2__TokenSource(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__TokenSource::transientToken = transientToken;
		_p->ns2__TokenSource::networkTokenOption = networkTokenOption;
	}
	return _p;
}

inline int soap_write_ns2__TokenSource(struct soap *soap, ns2__TokenSource const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TokenSource", p->soap_type() == SOAP_TYPE_ns2__TokenSource ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__TokenSource(struct soap *soap, const char *URL, ns2__TokenSource const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TokenSource", p->soap_type() == SOAP_TYPE_ns2__TokenSource ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__TokenSource(struct soap *soap, const char *URL, ns2__TokenSource const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TokenSource", p->soap_type() == SOAP_TYPE_ns2__TokenSource ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__TokenSource(struct soap *soap, const char *URL, ns2__TokenSource const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TokenSource", p->soap_type() == SOAP_TYPE_ns2__TokenSource ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__TokenSource * SOAP_FMAC4 soap_get_ns2__TokenSource(struct soap*, ns2__TokenSource *, const char*, const char*);

inline int soap_read_ns2__TokenSource(struct soap *soap, ns2__TokenSource *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__TokenSource(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__TokenSource(struct soap *soap, const char *URL, ns2__TokenSource *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__TokenSource(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__TokenSource(struct soap *soap, ns2__TokenSource *p)
{
	if (::soap_read_ns2__TokenSource(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Subscription_DEFINED
#define SOAP_TYPE_ns2__Subscription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Subscription(struct soap*, const char*, int, const ns2__Subscription *, const char*);
SOAP_FMAC3 ns2__Subscription * SOAP_FMAC4 soap_in_ns2__Subscription(struct soap*, const char*, ns2__Subscription *, const char*);
SOAP_FMAC1 ns2__Subscription * SOAP_FMAC2 soap_instantiate_ns2__Subscription(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Subscription * soap_new_ns2__Subscription(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Subscription(soap, n, NULL, NULL, NULL);
}

inline ns2__Subscription * soap_new_req_ns2__Subscription(
	struct soap *soap)
{
	ns2__Subscription *_p = ::soap_new_ns2__Subscription(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Subscription * soap_new_set_ns2__Subscription(
	struct soap *soap,
	std::string *title,
	std::string *paymentMethod)
{
	ns2__Subscription *_p = ::soap_new_ns2__Subscription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Subscription::title = title;
		_p->ns2__Subscription::paymentMethod = paymentMethod;
	}
	return _p;
}

inline int soap_write_ns2__Subscription(struct soap *soap, ns2__Subscription const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Subscription", p->soap_type() == SOAP_TYPE_ns2__Subscription ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Subscription(struct soap *soap, const char *URL, ns2__Subscription const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Subscription", p->soap_type() == SOAP_TYPE_ns2__Subscription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Subscription(struct soap *soap, const char *URL, ns2__Subscription const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Subscription", p->soap_type() == SOAP_TYPE_ns2__Subscription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Subscription(struct soap *soap, const char *URL, ns2__Subscription const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Subscription", p->soap_type() == SOAP_TYPE_ns2__Subscription ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Subscription * SOAP_FMAC4 soap_get_ns2__Subscription(struct soap*, ns2__Subscription *, const char*, const char*);

inline int soap_read_ns2__Subscription(struct soap *soap, ns2__Subscription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Subscription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Subscription(struct soap *soap, const char *URL, ns2__Subscription *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Subscription(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Subscription(struct soap *soap, ns2__Subscription *p)
{
	if (::soap_read_ns2__Subscription(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PaySubscriptionEvent_DEFINED
#define SOAP_TYPE_ns2__PaySubscriptionEvent_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PaySubscriptionEvent(struct soap*, const char*, int, const ns2__PaySubscriptionEvent *, const char*);
SOAP_FMAC3 ns2__PaySubscriptionEvent * SOAP_FMAC4 soap_in_ns2__PaySubscriptionEvent(struct soap*, const char*, ns2__PaySubscriptionEvent *, const char*);
SOAP_FMAC1 ns2__PaySubscriptionEvent * SOAP_FMAC2 soap_instantiate_ns2__PaySubscriptionEvent(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PaySubscriptionEvent * soap_new_ns2__PaySubscriptionEvent(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PaySubscriptionEvent(soap, n, NULL, NULL, NULL);
}

inline ns2__PaySubscriptionEvent * soap_new_req_ns2__PaySubscriptionEvent(
	struct soap *soap)
{
	ns2__PaySubscriptionEvent *_p = ::soap_new_ns2__PaySubscriptionEvent(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__PaySubscriptionEvent * soap_new_set_ns2__PaySubscriptionEvent(
	struct soap *soap,
	std::string *amount,
	std::string *approvedBy,
	std::string *number)
{
	ns2__PaySubscriptionEvent *_p = ::soap_new_ns2__PaySubscriptionEvent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionEvent::amount = amount;
		_p->ns2__PaySubscriptionEvent::approvedBy = approvedBy;
		_p->ns2__PaySubscriptionEvent::number = number;
	}
	return _p;
}

inline int soap_write_ns2__PaySubscriptionEvent(struct soap *soap, ns2__PaySubscriptionEvent const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionEvent", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionEvent ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PaySubscriptionEvent(struct soap *soap, const char *URL, ns2__PaySubscriptionEvent const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionEvent", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionEvent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PaySubscriptionEvent(struct soap *soap, const char *URL, ns2__PaySubscriptionEvent const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionEvent", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionEvent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PaySubscriptionEvent(struct soap *soap, const char *URL, ns2__PaySubscriptionEvent const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionEvent", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionEvent ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PaySubscriptionEvent * SOAP_FMAC4 soap_get_ns2__PaySubscriptionEvent(struct soap*, ns2__PaySubscriptionEvent *, const char*, const char*);

inline int soap_read_ns2__PaySubscriptionEvent(struct soap *soap, ns2__PaySubscriptionEvent *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PaySubscriptionEvent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PaySubscriptionEvent(struct soap *soap, const char *URL, ns2__PaySubscriptionEvent *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PaySubscriptionEvent(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PaySubscriptionEvent(struct soap *soap, ns2__PaySubscriptionEvent *p)
{
	if (::soap_read_ns2__PaySubscriptionEvent(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__RecurringSubscriptionInfo_DEFINED
#define SOAP_TYPE_ns2__RecurringSubscriptionInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecurringSubscriptionInfo(struct soap*, const char*, int, const ns2__RecurringSubscriptionInfo *, const char*);
SOAP_FMAC3 ns2__RecurringSubscriptionInfo * SOAP_FMAC4 soap_in_ns2__RecurringSubscriptionInfo(struct soap*, const char*, ns2__RecurringSubscriptionInfo *, const char*);
SOAP_FMAC1 ns2__RecurringSubscriptionInfo * SOAP_FMAC2 soap_instantiate_ns2__RecurringSubscriptionInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecurringSubscriptionInfo * soap_new_ns2__RecurringSubscriptionInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__RecurringSubscriptionInfo(soap, n, NULL, NULL, NULL);
}

inline ns2__RecurringSubscriptionInfo * soap_new_req_ns2__RecurringSubscriptionInfo(
	struct soap *soap)
{
	ns2__RecurringSubscriptionInfo *_p = ::soap_new_ns2__RecurringSubscriptionInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__RecurringSubscriptionInfo * soap_new_set_ns2__RecurringSubscriptionInfo(
	struct soap *soap,
	std::string *subscriptionID,
	std::string *status,
	std::string *amount,
	std::string *numberOfPayments,
	std::string *numberOfPaymentsToAdd,
	std::string *sequenceNumber,
	std::string *automaticRenew,
	std::string *frequency,
	std::string *startDate,
	std::string *endDate,
	std::string *approvalRequired,
	ns2__PaySubscriptionEvent *event,
	std::string *billPayment)
{
	ns2__RecurringSubscriptionInfo *_p = ::soap_new_ns2__RecurringSubscriptionInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__RecurringSubscriptionInfo::subscriptionID = subscriptionID;
		_p->ns2__RecurringSubscriptionInfo::status = status;
		_p->ns2__RecurringSubscriptionInfo::amount = amount;
		_p->ns2__RecurringSubscriptionInfo::numberOfPayments = numberOfPayments;
		_p->ns2__RecurringSubscriptionInfo::numberOfPaymentsToAdd = numberOfPaymentsToAdd;
		_p->ns2__RecurringSubscriptionInfo::sequenceNumber = sequenceNumber;
		_p->ns2__RecurringSubscriptionInfo::automaticRenew = automaticRenew;
		_p->ns2__RecurringSubscriptionInfo::frequency = frequency;
		_p->ns2__RecurringSubscriptionInfo::startDate = startDate;
		_p->ns2__RecurringSubscriptionInfo::endDate = endDate;
		_p->ns2__RecurringSubscriptionInfo::approvalRequired = approvalRequired;
		_p->ns2__RecurringSubscriptionInfo::event = event;
		_p->ns2__RecurringSubscriptionInfo::billPayment = billPayment;
	}
	return _p;
}

inline int soap_write_ns2__RecurringSubscriptionInfo(struct soap *soap, ns2__RecurringSubscriptionInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RecurringSubscriptionInfo", p->soap_type() == SOAP_TYPE_ns2__RecurringSubscriptionInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__RecurringSubscriptionInfo(struct soap *soap, const char *URL, ns2__RecurringSubscriptionInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RecurringSubscriptionInfo", p->soap_type() == SOAP_TYPE_ns2__RecurringSubscriptionInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__RecurringSubscriptionInfo(struct soap *soap, const char *URL, ns2__RecurringSubscriptionInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RecurringSubscriptionInfo", p->soap_type() == SOAP_TYPE_ns2__RecurringSubscriptionInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__RecurringSubscriptionInfo(struct soap *soap, const char *URL, ns2__RecurringSubscriptionInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RecurringSubscriptionInfo", p->soap_type() == SOAP_TYPE_ns2__RecurringSubscriptionInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__RecurringSubscriptionInfo * SOAP_FMAC4 soap_get_ns2__RecurringSubscriptionInfo(struct soap*, ns2__RecurringSubscriptionInfo *, const char*, const char*);

inline int soap_read_ns2__RecurringSubscriptionInfo(struct soap *soap, ns2__RecurringSubscriptionInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__RecurringSubscriptionInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__RecurringSubscriptionInfo(struct soap *soap, const char *URL, ns2__RecurringSubscriptionInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__RecurringSubscriptionInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__RecurringSubscriptionInfo(struct soap *soap, ns2__RecurringSubscriptionInfo *p)
{
	if (::soap_read_ns2__RecurringSubscriptionInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__BankInfo_DEFINED
#define SOAP_TYPE_ns2__BankInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BankInfo(struct soap*, const char*, int, const ns2__BankInfo *, const char*);
SOAP_FMAC3 ns2__BankInfo * SOAP_FMAC4 soap_in_ns2__BankInfo(struct soap*, const char*, ns2__BankInfo *, const char*);
SOAP_FMAC1 ns2__BankInfo * SOAP_FMAC2 soap_instantiate_ns2__BankInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BankInfo * soap_new_ns2__BankInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__BankInfo(soap, n, NULL, NULL, NULL);
}

inline ns2__BankInfo * soap_new_req_ns2__BankInfo(
	struct soap *soap)
{
	ns2__BankInfo *_p = ::soap_new_ns2__BankInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__BankInfo * soap_new_set_ns2__BankInfo(
	struct soap *soap,
	std::string *bankCode,
	std::string *name,
	std::string *address,
	std::string *city,
	std::string *country,
	std::string *branchCode,
	std::string *swiftCode,
	std::string *sortCode,
	std::string *issuerID)
{
	ns2__BankInfo *_p = ::soap_new_ns2__BankInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BankInfo::bankCode = bankCode;
		_p->ns2__BankInfo::name = name;
		_p->ns2__BankInfo::address = address;
		_p->ns2__BankInfo::city = city;
		_p->ns2__BankInfo::country = country;
		_p->ns2__BankInfo::branchCode = branchCode;
		_p->ns2__BankInfo::swiftCode = swiftCode;
		_p->ns2__BankInfo::sortCode = sortCode;
		_p->ns2__BankInfo::issuerID = issuerID;
	}
	return _p;
}

inline int soap_write_ns2__BankInfo(struct soap *soap, ns2__BankInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankInfo", p->soap_type() == SOAP_TYPE_ns2__BankInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__BankInfo(struct soap *soap, const char *URL, ns2__BankInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankInfo", p->soap_type() == SOAP_TYPE_ns2__BankInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__BankInfo(struct soap *soap, const char *URL, ns2__BankInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankInfo", p->soap_type() == SOAP_TYPE_ns2__BankInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__BankInfo(struct soap *soap, const char *URL, ns2__BankInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankInfo", p->soap_type() == SOAP_TYPE_ns2__BankInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__BankInfo * SOAP_FMAC4 soap_get_ns2__BankInfo(struct soap*, ns2__BankInfo *, const char*, const char*);

inline int soap_read_ns2__BankInfo(struct soap *soap, ns2__BankInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__BankInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__BankInfo(struct soap *soap, const char *URL, ns2__BankInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__BankInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__BankInfo(struct soap *soap, ns2__BankInfo *p)
{
	if (::soap_read_ns2__BankInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__FundTransfer_DEFINED
#define SOAP_TYPE_ns2__FundTransfer_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FundTransfer(struct soap*, const char*, int, const ns2__FundTransfer *, const char*);
SOAP_FMAC3 ns2__FundTransfer * SOAP_FMAC4 soap_in_ns2__FundTransfer(struct soap*, const char*, ns2__FundTransfer *, const char*);
SOAP_FMAC1 ns2__FundTransfer * SOAP_FMAC2 soap_instantiate_ns2__FundTransfer(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FundTransfer * soap_new_ns2__FundTransfer(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__FundTransfer(soap, n, NULL, NULL, NULL);
}

inline ns2__FundTransfer * soap_new_req_ns2__FundTransfer(
	struct soap *soap)
{
	ns2__FundTransfer *_p = ::soap_new_ns2__FundTransfer(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__FundTransfer * soap_new_set_ns2__FundTransfer(
	struct soap *soap,
	std::string *accountNumber,
	std::string *accountName,
	std::string *bankCheckDigit,
	std::string *iban)
{
	ns2__FundTransfer *_p = ::soap_new_ns2__FundTransfer(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__FundTransfer::accountNumber = accountNumber;
		_p->ns2__FundTransfer::accountName = accountName;
		_p->ns2__FundTransfer::bankCheckDigit = bankCheckDigit;
		_p->ns2__FundTransfer::iban = iban;
	}
	return _p;
}

inline int soap_write_ns2__FundTransfer(struct soap *soap, ns2__FundTransfer const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FundTransfer", p->soap_type() == SOAP_TYPE_ns2__FundTransfer ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__FundTransfer(struct soap *soap, const char *URL, ns2__FundTransfer const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FundTransfer", p->soap_type() == SOAP_TYPE_ns2__FundTransfer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__FundTransfer(struct soap *soap, const char *URL, ns2__FundTransfer const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FundTransfer", p->soap_type() == SOAP_TYPE_ns2__FundTransfer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__FundTransfer(struct soap *soap, const char *URL, ns2__FundTransfer const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FundTransfer", p->soap_type() == SOAP_TYPE_ns2__FundTransfer ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__FundTransfer * SOAP_FMAC4 soap_get_ns2__FundTransfer(struct soap*, ns2__FundTransfer *, const char*, const char*);

inline int soap_read_ns2__FundTransfer(struct soap *soap, ns2__FundTransfer *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__FundTransfer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__FundTransfer(struct soap *soap, const char *URL, ns2__FundTransfer *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__FundTransfer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__FundTransfer(struct soap *soap, ns2__FundTransfer *p)
{
	if (::soap_read_ns2__FundTransfer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Brands_DEFINED
#define SOAP_TYPE_ns2__Brands_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Brands(struct soap*, const char*, int, const ns2__Brands *, const char*);
SOAP_FMAC3 ns2__Brands * SOAP_FMAC4 soap_in_ns2__Brands(struct soap*, const char*, ns2__Brands *, const char*);
SOAP_FMAC1 ns2__Brands * SOAP_FMAC2 soap_instantiate_ns2__Brands(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Brands * soap_new_ns2__Brands(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Brands(soap, n, NULL, NULL, NULL);
}

inline ns2__Brands * soap_new_req_ns2__Brands(
	struct soap *soap)
{
	ns2__Brands *_p = ::soap_new_ns2__Brands(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Brands * soap_new_set_ns2__Brands(
	struct soap *soap,
	std::string *name,
	std::string *type,
	std::string *id)
{
	ns2__Brands *_p = ::soap_new_ns2__Brands(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Brands::name = name;
		_p->ns2__Brands::type = type;
		_p->ns2__Brands::id = id;
	}
	return _p;
}

inline int soap_write_ns2__Brands(struct soap *soap, ns2__Brands const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Brands", p->soap_type() == SOAP_TYPE_ns2__Brands ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Brands(struct soap *soap, const char *URL, ns2__Brands const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Brands", p->soap_type() == SOAP_TYPE_ns2__Brands ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Brands(struct soap *soap, const char *URL, ns2__Brands const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Brands", p->soap_type() == SOAP_TYPE_ns2__Brands ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Brands(struct soap *soap, const char *URL, ns2__Brands const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Brands", p->soap_type() == SOAP_TYPE_ns2__Brands ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Brands * SOAP_FMAC4 soap_get_ns2__Brands(struct soap*, ns2__Brands *, const char*, const char*);

inline int soap_read_ns2__Brands(struct soap *soap, ns2__Brands *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Brands(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Brands(struct soap *soap, const char *URL, ns2__Brands *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Brands(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Brands(struct soap *soap, ns2__Brands *p)
{
	if (::soap_read_ns2__Brands(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Network_DEFINED
#define SOAP_TYPE_ns2__Network_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Network(struct soap*, const char*, int, const ns2__Network *, const char*);
SOAP_FMAC3 ns2__Network * SOAP_FMAC4 soap_in_ns2__Network(struct soap*, const char*, ns2__Network *, const char*);
SOAP_FMAC1 ns2__Network * SOAP_FMAC2 soap_instantiate_ns2__Network(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Network * soap_new_ns2__Network(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Network(soap, n, NULL, NULL, NULL);
}

inline ns2__Network * soap_new_req_ns2__Network(
	struct soap *soap)
{
	ns2__Network *_p = ::soap_new_ns2__Network(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Network * soap_new_set_ns2__Network(
	struct soap *soap,
	std::string *octDomesticIndicator,
	std::string *octCrossBorderIndicator,
	std::string *aftDomesticIndicator,
	std::string *aftCrossBorderIndicator,
	std::string *networkID,
	std::string *networkOrder,
	std::string *id)
{
	ns2__Network *_p = ::soap_new_ns2__Network(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Network::octDomesticIndicator = octDomesticIndicator;
		_p->ns2__Network::octCrossBorderIndicator = octCrossBorderIndicator;
		_p->ns2__Network::aftDomesticIndicator = aftDomesticIndicator;
		_p->ns2__Network::aftCrossBorderIndicator = aftCrossBorderIndicator;
		_p->ns2__Network::networkID = networkID;
		_p->ns2__Network::networkOrder = networkOrder;
		_p->ns2__Network::id = id;
	}
	return _p;
}

inline int soap_write_ns2__Network(struct soap *soap, ns2__Network const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Network", p->soap_type() == SOAP_TYPE_ns2__Network ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Network(struct soap *soap, const char *URL, ns2__Network const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Network", p->soap_type() == SOAP_TYPE_ns2__Network ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Network(struct soap *soap, const char *URL, ns2__Network const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Network", p->soap_type() == SOAP_TYPE_ns2__Network ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Network(struct soap *soap, const char *URL, ns2__Network const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Network", p->soap_type() == SOAP_TYPE_ns2__Network ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Network * SOAP_FMAC4 soap_get_ns2__Network(struct soap*, ns2__Network *, const char*, const char*);

inline int soap_read_ns2__Network(struct soap *soap, ns2__Network *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Network(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Network(struct soap *soap, const char *URL, ns2__Network *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Network(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Network(struct soap *soap, ns2__Network *p)
{
	if (::soap_read_ns2__Network(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__UCAF_DEFINED
#define SOAP_TYPE_ns2__UCAF_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__UCAF(struct soap*, const char*, int, const ns2__UCAF *, const char*);
SOAP_FMAC3 ns2__UCAF * SOAP_FMAC4 soap_in_ns2__UCAF(struct soap*, const char*, ns2__UCAF *, const char*);
SOAP_FMAC1 ns2__UCAF * SOAP_FMAC2 soap_instantiate_ns2__UCAF(struct soap*, int, const char*, const char*, size_t*);

inline ns2__UCAF * soap_new_ns2__UCAF(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__UCAF(soap, n, NULL, NULL, NULL);
}

inline ns2__UCAF * soap_new_req_ns2__UCAF(
	struct soap *soap)
{
	ns2__UCAF *_p = ::soap_new_ns2__UCAF(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__UCAF * soap_new_set_ns2__UCAF(
	struct soap *soap,
	std::string *authenticationData,
	std::string *collectionIndicator,
	std::string *downgradeReasonCode)
{
	ns2__UCAF *_p = ::soap_new_ns2__UCAF(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__UCAF::authenticationData = authenticationData;
		_p->ns2__UCAF::collectionIndicator = collectionIndicator;
		_p->ns2__UCAF::downgradeReasonCode = downgradeReasonCode;
	}
	return _p;
}

inline int soap_write_ns2__UCAF(struct soap *soap, ns2__UCAF const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:UCAF", p->soap_type() == SOAP_TYPE_ns2__UCAF ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__UCAF(struct soap *soap, const char *URL, ns2__UCAF const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:UCAF", p->soap_type() == SOAP_TYPE_ns2__UCAF ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__UCAF(struct soap *soap, const char *URL, ns2__UCAF const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:UCAF", p->soap_type() == SOAP_TYPE_ns2__UCAF ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__UCAF(struct soap *soap, const char *URL, ns2__UCAF const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:UCAF", p->soap_type() == SOAP_TYPE_ns2__UCAF ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__UCAF * SOAP_FMAC4 soap_get_ns2__UCAF(struct soap*, ns2__UCAF *, const char*, const char*);

inline int soap_read_ns2__UCAF(struct soap *soap, ns2__UCAF *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__UCAF(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__UCAF(struct soap *soap, const char *URL, ns2__UCAF *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__UCAF(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__UCAF(struct soap *soap, ns2__UCAF *p)
{
	if (::soap_read_ns2__UCAF(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__GECC_DEFINED
#define SOAP_TYPE_ns2__GECC_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GECC(struct soap*, const char*, int, const ns2__GECC *, const char*);
SOAP_FMAC3 ns2__GECC * SOAP_FMAC4 soap_in_ns2__GECC(struct soap*, const char*, ns2__GECC *, const char*);
SOAP_FMAC1 ns2__GECC * SOAP_FMAC2 soap_instantiate_ns2__GECC(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GECC * soap_new_ns2__GECC(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__GECC(soap, n, NULL, NULL, NULL);
}

inline ns2__GECC * soap_new_req_ns2__GECC(
	struct soap *soap)
{
	ns2__GECC *_p = ::soap_new_ns2__GECC(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__GECC * soap_new_set_ns2__GECC(
	struct soap *soap,
	std::string *saleType,
	std::string *planNumber,
	std::string *sequenceNumber,
	std::string *promotionEndDate,
	std::string *promotionPlan,
	const std::vector<std::string> & line)
{
	ns2__GECC *_p = ::soap_new_ns2__GECC(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__GECC::saleType = saleType;
		_p->ns2__GECC::planNumber = planNumber;
		_p->ns2__GECC::sequenceNumber = sequenceNumber;
		_p->ns2__GECC::promotionEndDate = promotionEndDate;
		_p->ns2__GECC::promotionPlan = promotionPlan;
		_p->ns2__GECC::line = line;
	}
	return _p;
}

inline int soap_write_ns2__GECC(struct soap *soap, ns2__GECC const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GECC", p->soap_type() == SOAP_TYPE_ns2__GECC ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__GECC(struct soap *soap, const char *URL, ns2__GECC const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GECC", p->soap_type() == SOAP_TYPE_ns2__GECC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__GECC(struct soap *soap, const char *URL, ns2__GECC const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GECC", p->soap_type() == SOAP_TYPE_ns2__GECC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__GECC(struct soap *soap, const char *URL, ns2__GECC const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GECC", p->soap_type() == SOAP_TYPE_ns2__GECC ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__GECC * SOAP_FMAC4 soap_get_ns2__GECC(struct soap*, ns2__GECC *, const char*, const char*);

inline int soap_read_ns2__GECC(struct soap *soap, ns2__GECC *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__GECC(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__GECC(struct soap *soap, const char *URL, ns2__GECC *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__GECC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__GECC(struct soap *soap, ns2__GECC *p)
{
	if (::soap_read_ns2__GECC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__FundingTotals_DEFINED
#define SOAP_TYPE_ns2__FundingTotals_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FundingTotals(struct soap*, const char*, int, const ns2__FundingTotals *, const char*);
SOAP_FMAC3 ns2__FundingTotals * SOAP_FMAC4 soap_in_ns2__FundingTotals(struct soap*, const char*, ns2__FundingTotals *, const char*);
SOAP_FMAC1 ns2__FundingTotals * SOAP_FMAC2 soap_instantiate_ns2__FundingTotals(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FundingTotals * soap_new_ns2__FundingTotals(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__FundingTotals(soap, n, NULL, NULL, NULL);
}

inline ns2__FundingTotals * soap_new_req_ns2__FundingTotals(
	struct soap *soap)
{
	ns2__FundingTotals *_p = ::soap_new_ns2__FundingTotals(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__FundingTotals * soap_new_set_ns2__FundingTotals(
	struct soap *soap,
	std::string *currency,
	std::string *grandTotalAmount)
{
	ns2__FundingTotals *_p = ::soap_new_ns2__FundingTotals(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__FundingTotals::currency = currency;
		_p->ns2__FundingTotals::grandTotalAmount = grandTotalAmount;
	}
	return _p;
}

inline int soap_write_ns2__FundingTotals(struct soap *soap, ns2__FundingTotals const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FundingTotals", p->soap_type() == SOAP_TYPE_ns2__FundingTotals ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__FundingTotals(struct soap *soap, const char *URL, ns2__FundingTotals const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FundingTotals", p->soap_type() == SOAP_TYPE_ns2__FundingTotals ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__FundingTotals(struct soap *soap, const char *URL, ns2__FundingTotals const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FundingTotals", p->soap_type() == SOAP_TYPE_ns2__FundingTotals ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__FundingTotals(struct soap *soap, const char *URL, ns2__FundingTotals const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FundingTotals", p->soap_type() == SOAP_TYPE_ns2__FundingTotals ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__FundingTotals * SOAP_FMAC4 soap_get_ns2__FundingTotals(struct soap*, ns2__FundingTotals *, const char*, const char*);

inline int soap_read_ns2__FundingTotals(struct soap *soap, ns2__FundingTotals *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__FundingTotals(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__FundingTotals(struct soap *soap, const char *URL, ns2__FundingTotals *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__FundingTotals(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__FundingTotals(struct soap *soap, ns2__FundingTotals *p)
{
	if (::soap_read_ns2__FundingTotals(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PurchaseTotals_DEFINED
#define SOAP_TYPE_ns2__PurchaseTotals_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PurchaseTotals(struct soap*, const char*, int, const ns2__PurchaseTotals *, const char*);
SOAP_FMAC3 ns2__PurchaseTotals * SOAP_FMAC4 soap_in_ns2__PurchaseTotals(struct soap*, const char*, ns2__PurchaseTotals *, const char*);
SOAP_FMAC1 ns2__PurchaseTotals * SOAP_FMAC2 soap_instantiate_ns2__PurchaseTotals(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PurchaseTotals * soap_new_ns2__PurchaseTotals(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PurchaseTotals(soap, n, NULL, NULL, NULL);
}

inline ns2__PurchaseTotals * soap_new_req_ns2__PurchaseTotals(
	struct soap *soap)
{
	ns2__PurchaseTotals *_p = ::soap_new_ns2__PurchaseTotals(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__PurchaseTotals * soap_new_set_ns2__PurchaseTotals(
	struct soap *soap,
	std::string *currency,
	std::string *discountAmount,
	std::string *discountAmountSign,
	std::string *discountManagementIndicator,
	std::string *taxAmount,
	std::string *dutyAmount,
	std::string *dutyAmountSign,
	std::string *grandTotalAmount,
	std::string *freightAmount,
	std::string *freightAmountSign,
	std::string *foreignAmount,
	std::string *foreignCurrency,
	std::string *originalAmount,
	std::string *originalCurrency,
	std::string *exchangeRate,
	std::string *exchangeRateTimeStamp,
	std::string *exchangeRateType,
	std::string *additionalAmountType0,
	std::string *additionalAmount0,
	std::string *additionalAmountType1,
	std::string *additionalAmount1,
	std::string *additionalAmountType2,
	std::string *additionalAmount2,
	std::string *additionalAmountType3,
	std::string *additionalAmount3,
	std::string *additionalAmountType4,
	std::string *additionalAmount4,
	std::string *serviceFeeAmount,
	std::string *subtotalAmount,
	std::string *shippingAmount,
	std::string *handlingAmount,
	std::string *shippingHandlingAmount,
	std::string *shippingDiscountAmount,
	std::string *giftWrapAmount,
	std::string *insuranceAmount)
{
	ns2__PurchaseTotals *_p = ::soap_new_ns2__PurchaseTotals(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PurchaseTotals::currency = currency;
		_p->ns2__PurchaseTotals::discountAmount = discountAmount;
		_p->ns2__PurchaseTotals::discountAmountSign = discountAmountSign;
		_p->ns2__PurchaseTotals::discountManagementIndicator = discountManagementIndicator;
		_p->ns2__PurchaseTotals::taxAmount = taxAmount;
		_p->ns2__PurchaseTotals::dutyAmount = dutyAmount;
		_p->ns2__PurchaseTotals::dutyAmountSign = dutyAmountSign;
		_p->ns2__PurchaseTotals::grandTotalAmount = grandTotalAmount;
		_p->ns2__PurchaseTotals::freightAmount = freightAmount;
		_p->ns2__PurchaseTotals::freightAmountSign = freightAmountSign;
		_p->ns2__PurchaseTotals::foreignAmount = foreignAmount;
		_p->ns2__PurchaseTotals::foreignCurrency = foreignCurrency;
		_p->ns2__PurchaseTotals::originalAmount = originalAmount;
		_p->ns2__PurchaseTotals::originalCurrency = originalCurrency;
		_p->ns2__PurchaseTotals::exchangeRate = exchangeRate;
		_p->ns2__PurchaseTotals::exchangeRateTimeStamp = exchangeRateTimeStamp;
		_p->ns2__PurchaseTotals::exchangeRateType = exchangeRateType;
		_p->ns2__PurchaseTotals::additionalAmountType0 = additionalAmountType0;
		_p->ns2__PurchaseTotals::additionalAmount0 = additionalAmount0;
		_p->ns2__PurchaseTotals::additionalAmountType1 = additionalAmountType1;
		_p->ns2__PurchaseTotals::additionalAmount1 = additionalAmount1;
		_p->ns2__PurchaseTotals::additionalAmountType2 = additionalAmountType2;
		_p->ns2__PurchaseTotals::additionalAmount2 = additionalAmount2;
		_p->ns2__PurchaseTotals::additionalAmountType3 = additionalAmountType3;
		_p->ns2__PurchaseTotals::additionalAmount3 = additionalAmount3;
		_p->ns2__PurchaseTotals::additionalAmountType4 = additionalAmountType4;
		_p->ns2__PurchaseTotals::additionalAmount4 = additionalAmount4;
		_p->ns2__PurchaseTotals::serviceFeeAmount = serviceFeeAmount;
		_p->ns2__PurchaseTotals::subtotalAmount = subtotalAmount;
		_p->ns2__PurchaseTotals::shippingAmount = shippingAmount;
		_p->ns2__PurchaseTotals::handlingAmount = handlingAmount;
		_p->ns2__PurchaseTotals::shippingHandlingAmount = shippingHandlingAmount;
		_p->ns2__PurchaseTotals::shippingDiscountAmount = shippingDiscountAmount;
		_p->ns2__PurchaseTotals::giftWrapAmount = giftWrapAmount;
		_p->ns2__PurchaseTotals::insuranceAmount = insuranceAmount;
	}
	return _p;
}

inline int soap_write_ns2__PurchaseTotals(struct soap *soap, ns2__PurchaseTotals const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PurchaseTotals", p->soap_type() == SOAP_TYPE_ns2__PurchaseTotals ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PurchaseTotals(struct soap *soap, const char *URL, ns2__PurchaseTotals const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PurchaseTotals", p->soap_type() == SOAP_TYPE_ns2__PurchaseTotals ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PurchaseTotals(struct soap *soap, const char *URL, ns2__PurchaseTotals const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PurchaseTotals", p->soap_type() == SOAP_TYPE_ns2__PurchaseTotals ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PurchaseTotals(struct soap *soap, const char *URL, ns2__PurchaseTotals const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PurchaseTotals", p->soap_type() == SOAP_TYPE_ns2__PurchaseTotals ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PurchaseTotals * SOAP_FMAC4 soap_get_ns2__PurchaseTotals(struct soap*, ns2__PurchaseTotals *, const char*, const char*);

inline int soap_read_ns2__PurchaseTotals(struct soap *soap, ns2__PurchaseTotals *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PurchaseTotals(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PurchaseTotals(struct soap *soap, const char *URL, ns2__PurchaseTotals *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PurchaseTotals(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PurchaseTotals(struct soap *soap, ns2__PurchaseTotals *p)
{
	if (::soap_read_ns2__PurchaseTotals(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Wallet_DEFINED
#define SOAP_TYPE_ns2__Wallet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Wallet(struct soap*, const char*, int, const ns2__Wallet *, const char*);
SOAP_FMAC3 ns2__Wallet * SOAP_FMAC4 soap_in_ns2__Wallet(struct soap*, const char*, ns2__Wallet *, const char*);
SOAP_FMAC1 ns2__Wallet * SOAP_FMAC2 soap_instantiate_ns2__Wallet(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Wallet * soap_new_ns2__Wallet(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Wallet(soap, n, NULL, NULL, NULL);
}

inline ns2__Wallet * soap_new_req_ns2__Wallet(
	struct soap *soap)
{
	ns2__Wallet *_p = ::soap_new_ns2__Wallet(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Wallet * soap_new_set_ns2__Wallet(
	struct soap *soap,
	std::string *type,
	std::string *orderID,
	std::string *merchantReferenceID,
	std::string *userPhone,
	std::string *avv,
	std::string *eciRaw,
	std::string *authenticatonMethod,
	std::string *cardEnrollmentMethod,
	std::string *paresStatus,
	std::string *veresEnrolled,
	std::string *xid,
	std::string *totalPurchaseAmount,
	std::string *subtotalAmount,
	std::string *discountAmount,
	std::string *giftWrapAmount,
	std::string *eventType,
	std::string *promotionCode,
	std::string *enrollmentID,
	std::string *staySignedInIndicator,
	std::string *authenticationData,
	std::string *deviceID,
	std::string *httpResponse,
	std::string *errorCode,
	std::string *errorDescription,
	std::string *pinURL)
{
	ns2__Wallet *_p = ::soap_new_ns2__Wallet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Wallet::type = type;
		_p->ns2__Wallet::orderID = orderID;
		_p->ns2__Wallet::merchantReferenceID = merchantReferenceID;
		_p->ns2__Wallet::userPhone = userPhone;
		_p->ns2__Wallet::avv = avv;
		_p->ns2__Wallet::eciRaw = eciRaw;
		_p->ns2__Wallet::authenticatonMethod = authenticatonMethod;
		_p->ns2__Wallet::cardEnrollmentMethod = cardEnrollmentMethod;
		_p->ns2__Wallet::paresStatus = paresStatus;
		_p->ns2__Wallet::veresEnrolled = veresEnrolled;
		_p->ns2__Wallet::xid = xid;
		_p->ns2__Wallet::totalPurchaseAmount = totalPurchaseAmount;
		_p->ns2__Wallet::subtotalAmount = subtotalAmount;
		_p->ns2__Wallet::discountAmount = discountAmount;
		_p->ns2__Wallet::giftWrapAmount = giftWrapAmount;
		_p->ns2__Wallet::eventType = eventType;
		_p->ns2__Wallet::promotionCode = promotionCode;
		_p->ns2__Wallet::enrollmentID = enrollmentID;
		_p->ns2__Wallet::staySignedInIndicator = staySignedInIndicator;
		_p->ns2__Wallet::authenticationData = authenticationData;
		_p->ns2__Wallet::deviceID = deviceID;
		_p->ns2__Wallet::httpResponse = httpResponse;
		_p->ns2__Wallet::errorCode = errorCode;
		_p->ns2__Wallet::errorDescription = errorDescription;
		_p->ns2__Wallet::pinURL = pinURL;
	}
	return _p;
}

inline int soap_write_ns2__Wallet(struct soap *soap, ns2__Wallet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Wallet", p->soap_type() == SOAP_TYPE_ns2__Wallet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Wallet(struct soap *soap, const char *URL, ns2__Wallet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Wallet", p->soap_type() == SOAP_TYPE_ns2__Wallet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Wallet(struct soap *soap, const char *URL, ns2__Wallet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Wallet", p->soap_type() == SOAP_TYPE_ns2__Wallet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Wallet(struct soap *soap, const char *URL, ns2__Wallet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Wallet", p->soap_type() == SOAP_TYPE_ns2__Wallet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Wallet * SOAP_FMAC4 soap_get_ns2__Wallet(struct soap*, ns2__Wallet *, const char*, const char*);

inline int soap_read_ns2__Wallet(struct soap *soap, ns2__Wallet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Wallet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Wallet(struct soap *soap, const char *URL, ns2__Wallet *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Wallet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Wallet(struct soap *soap, ns2__Wallet *p)
{
	if (::soap_read_ns2__Wallet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Aft_DEFINED
#define SOAP_TYPE_ns2__Aft_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Aft(struct soap*, const char*, int, const ns2__Aft *, const char*);
SOAP_FMAC3 ns2__Aft * SOAP_FMAC4 soap_in_ns2__Aft(struct soap*, const char*, ns2__Aft *, const char*);
SOAP_FMAC1 ns2__Aft * SOAP_FMAC2 soap_instantiate_ns2__Aft(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Aft * soap_new_ns2__Aft(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Aft(soap, n, NULL, NULL, NULL);
}

inline ns2__Aft * soap_new_req_ns2__Aft(
	struct soap *soap)
{
	ns2__Aft *_p = ::soap_new_ns2__Aft(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Aft * soap_new_set_ns2__Aft(
	struct soap *soap,
	std::string *indicator,
	std::string *serviceFee,
	std::string *foreignExchangeFee)
{
	ns2__Aft *_p = ::soap_new_ns2__Aft(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Aft::indicator = indicator;
		_p->ns2__Aft::serviceFee = serviceFee;
		_p->ns2__Aft::foreignExchangeFee = foreignExchangeFee;
	}
	return _p;
}

inline int soap_write_ns2__Aft(struct soap *soap, ns2__Aft const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Aft", p->soap_type() == SOAP_TYPE_ns2__Aft ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Aft(struct soap *soap, const char *URL, ns2__Aft const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Aft", p->soap_type() == SOAP_TYPE_ns2__Aft ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Aft(struct soap *soap, const char *URL, ns2__Aft const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Aft", p->soap_type() == SOAP_TYPE_ns2__Aft ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Aft(struct soap *soap, const char *URL, ns2__Aft const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Aft", p->soap_type() == SOAP_TYPE_ns2__Aft ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Aft * SOAP_FMAC4 soap_get_ns2__Aft(struct soap*, ns2__Aft *, const char*, const char*);

inline int soap_read_ns2__Aft(struct soap *soap, ns2__Aft *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Aft(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Aft(struct soap *soap, const char *URL, ns2__Aft *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Aft(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Aft(struct soap *soap, ns2__Aft *p)
{
	if (::soap_read_ns2__Aft(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__OtherTax_DEFINED
#define SOAP_TYPE_ns2__OtherTax_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OtherTax(struct soap*, const char*, int, const ns2__OtherTax *, const char*);
SOAP_FMAC3 ns2__OtherTax * SOAP_FMAC4 soap_in_ns2__OtherTax(struct soap*, const char*, ns2__OtherTax *, const char*);
SOAP_FMAC1 ns2__OtherTax * SOAP_FMAC2 soap_instantiate_ns2__OtherTax(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OtherTax * soap_new_ns2__OtherTax(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__OtherTax(soap, n, NULL, NULL, NULL);
}

inline ns2__OtherTax * soap_new_req_ns2__OtherTax(
	struct soap *soap)
{
	ns2__OtherTax *_p = ::soap_new_ns2__OtherTax(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__OtherTax * soap_new_set_ns2__OtherTax(
	struct soap *soap,
	std::string *vatTaxAmount,
	std::string *vatTaxRate,
	std::string *vatTaxAmountSign,
	std::string *alternateTaxAmount,
	std::string *alternateTaxIndicator,
	std::string *alternateTaxID,
	std::string *localTaxAmount,
	std::string *localTaxIndicator,
	std::string *nationalTaxAmount,
	std::string *nationalTaxIndicator)
{
	ns2__OtherTax *_p = ::soap_new_ns2__OtherTax(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__OtherTax::vatTaxAmount = vatTaxAmount;
		_p->ns2__OtherTax::vatTaxRate = vatTaxRate;
		_p->ns2__OtherTax::vatTaxAmountSign = vatTaxAmountSign;
		_p->ns2__OtherTax::alternateTaxAmount = alternateTaxAmount;
		_p->ns2__OtherTax::alternateTaxIndicator = alternateTaxIndicator;
		_p->ns2__OtherTax::alternateTaxID = alternateTaxID;
		_p->ns2__OtherTax::localTaxAmount = localTaxAmount;
		_p->ns2__OtherTax::localTaxIndicator = localTaxIndicator;
		_p->ns2__OtherTax::nationalTaxAmount = nationalTaxAmount;
		_p->ns2__OtherTax::nationalTaxIndicator = nationalTaxIndicator;
	}
	return _p;
}

inline int soap_write_ns2__OtherTax(struct soap *soap, ns2__OtherTax const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:OtherTax", p->soap_type() == SOAP_TYPE_ns2__OtherTax ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__OtherTax(struct soap *soap, const char *URL, ns2__OtherTax const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:OtherTax", p->soap_type() == SOAP_TYPE_ns2__OtherTax ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__OtherTax(struct soap *soap, const char *URL, ns2__OtherTax const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:OtherTax", p->soap_type() == SOAP_TYPE_ns2__OtherTax ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__OtherTax(struct soap *soap, const char *URL, ns2__OtherTax const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:OtherTax", p->soap_type() == SOAP_TYPE_ns2__OtherTax ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__OtherTax * SOAP_FMAC4 soap_get_ns2__OtherTax(struct soap*, ns2__OtherTax *, const char*, const char*);

inline int soap_read_ns2__OtherTax(struct soap *soap, ns2__OtherTax *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__OtherTax(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__OtherTax(struct soap *soap, const char *URL, ns2__OtherTax *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__OtherTax(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__OtherTax(struct soap *soap, ns2__OtherTax *p)
{
	if (::soap_read_ns2__OtherTax(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__BML_DEFINED
#define SOAP_TYPE_ns2__BML_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BML(struct soap*, const char*, int, const ns2__BML *, const char*);
SOAP_FMAC3 ns2__BML * SOAP_FMAC4 soap_in_ns2__BML(struct soap*, const char*, ns2__BML *, const char*);
SOAP_FMAC1 ns2__BML * SOAP_FMAC2 soap_instantiate_ns2__BML(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BML * soap_new_ns2__BML(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__BML(soap, n, NULL, NULL, NULL);
}

inline ns2__BML * soap_new_req_ns2__BML(
	struct soap *soap)
{
	ns2__BML *_p = ::soap_new_ns2__BML(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__BML * soap_new_set_ns2__BML(
	struct soap *soap,
	std::string *customerBillingAddressChange,
	std::string *customerEmailChange,
	std::string *customerHasCheckingAccount,
	std::string *customerHasSavingsAccount,
	std::string *customerPasswordChange,
	std::string *customerPhoneChange,
	std::string *customerRegistrationDate,
	std::string *customerTypeFlag,
	std::string *grossHouseholdIncome,
	std::string *householdIncomeCurrency,
	std::string *itemCategory,
	std::string *merchantPromotionCode,
	std::string *preapprovalNumber,
	std::string *productDeliveryTypeIndicator,
	std::string *residenceStatus,
	std::string *tcVersion,
	std::string *yearsAtCurrentResidence,
	std::string *yearsWithCurrentEmployer,
	std::string *employerStreet1,
	std::string *employerStreet2,
	std::string *employerCity,
	std::string *employerCompanyName,
	std::string *employerCountry,
	std::string *employerPhoneNumber,
	std::string *employerPhoneType,
	std::string *employerState,
	std::string *employerPostalCode,
	std::string *shipToPhoneType,
	std::string *billToPhoneType,
	std::string *methodOfPayment,
	std::string *productType,
	std::string *customerAuthenticatedByMerchant,
	std::string *backOfficeIndicator,
	std::string *shipToEqualsBillToNameIndicator,
	std::string *shipToEqualsBillToAddressIndicator,
	std::string *alternateIPAddress,
	std::string *businessLegalName,
	std::string *dbaName,
	std::string *businessAddress1,
	std::string *businessAddress2,
	std::string *businessCity,
	std::string *businessState,
	std::string *businessPostalCode,
	std::string *businessCountry,
	std::string *businessMainPhone,
	std::string *userID,
	std::string *pin,
	std::string *adminLastName,
	std::string *adminFirstName,
	std::string *adminPhone,
	std::string *adminFax,
	std::string *adminEmailAddress,
	std::string *adminTitle,
	std::string *supervisorLastName,
	std::string *supervisorFirstName,
	std::string *supervisorEmailAddress,
	std::string *businessDAndBNumber,
	std::string *businessTaxID,
	std::string *businessNAICSCode,
	std::string *businessType,
	std::string *businessYearsInBusiness,
	std::string *businessNumberOfEmployees,
	std::string *businessPONumber,
	std::string *businessLoanType,
	std::string *businessApplicationID,
	std::string *businessProductCode,
	std::string *pgLastName,
	std::string *pgFirstName,
	std::string *pgSSN,
	std::string *pgDateOfBirth,
	std::string *pgAnnualIncome,
	std::string *pgIncomeCurrencyType,
	std::string *pgResidenceStatus,
	std::string *pgCheckingAccountIndicator,
	std::string *pgSavingsAccountIndicator,
	std::string *pgYearsAtEmployer,
	std::string *pgYearsAtResidence,
	std::string *pgHomeAddress1,
	std::string *pgHomeAddress2,
	std::string *pgHomeCity,
	std::string *pgHomeState,
	std::string *pgHomePostalCode,
	std::string *pgHomeCountry,
	std::string *pgEmailAddress,
	std::string *pgHomePhone,
	std::string *pgTitle)
{
	ns2__BML *_p = ::soap_new_ns2__BML(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BML::customerBillingAddressChange = customerBillingAddressChange;
		_p->ns2__BML::customerEmailChange = customerEmailChange;
		_p->ns2__BML::customerHasCheckingAccount = customerHasCheckingAccount;
		_p->ns2__BML::customerHasSavingsAccount = customerHasSavingsAccount;
		_p->ns2__BML::customerPasswordChange = customerPasswordChange;
		_p->ns2__BML::customerPhoneChange = customerPhoneChange;
		_p->ns2__BML::customerRegistrationDate = customerRegistrationDate;
		_p->ns2__BML::customerTypeFlag = customerTypeFlag;
		_p->ns2__BML::grossHouseholdIncome = grossHouseholdIncome;
		_p->ns2__BML::householdIncomeCurrency = householdIncomeCurrency;
		_p->ns2__BML::itemCategory = itemCategory;
		_p->ns2__BML::merchantPromotionCode = merchantPromotionCode;
		_p->ns2__BML::preapprovalNumber = preapprovalNumber;
		_p->ns2__BML::productDeliveryTypeIndicator = productDeliveryTypeIndicator;
		_p->ns2__BML::residenceStatus = residenceStatus;
		_p->ns2__BML::tcVersion = tcVersion;
		_p->ns2__BML::yearsAtCurrentResidence = yearsAtCurrentResidence;
		_p->ns2__BML::yearsWithCurrentEmployer = yearsWithCurrentEmployer;
		_p->ns2__BML::employerStreet1 = employerStreet1;
		_p->ns2__BML::employerStreet2 = employerStreet2;
		_p->ns2__BML::employerCity = employerCity;
		_p->ns2__BML::employerCompanyName = employerCompanyName;
		_p->ns2__BML::employerCountry = employerCountry;
		_p->ns2__BML::employerPhoneNumber = employerPhoneNumber;
		_p->ns2__BML::employerPhoneType = employerPhoneType;
		_p->ns2__BML::employerState = employerState;
		_p->ns2__BML::employerPostalCode = employerPostalCode;
		_p->ns2__BML::shipToPhoneType = shipToPhoneType;
		_p->ns2__BML::billToPhoneType = billToPhoneType;
		_p->ns2__BML::methodOfPayment = methodOfPayment;
		_p->ns2__BML::productType = productType;
		_p->ns2__BML::customerAuthenticatedByMerchant = customerAuthenticatedByMerchant;
		_p->ns2__BML::backOfficeIndicator = backOfficeIndicator;
		_p->ns2__BML::shipToEqualsBillToNameIndicator = shipToEqualsBillToNameIndicator;
		_p->ns2__BML::shipToEqualsBillToAddressIndicator = shipToEqualsBillToAddressIndicator;
		_p->ns2__BML::alternateIPAddress = alternateIPAddress;
		_p->ns2__BML::businessLegalName = businessLegalName;
		_p->ns2__BML::dbaName = dbaName;
		_p->ns2__BML::businessAddress1 = businessAddress1;
		_p->ns2__BML::businessAddress2 = businessAddress2;
		_p->ns2__BML::businessCity = businessCity;
		_p->ns2__BML::businessState = businessState;
		_p->ns2__BML::businessPostalCode = businessPostalCode;
		_p->ns2__BML::businessCountry = businessCountry;
		_p->ns2__BML::businessMainPhone = businessMainPhone;
		_p->ns2__BML::userID = userID;
		_p->ns2__BML::pin = pin;
		_p->ns2__BML::adminLastName = adminLastName;
		_p->ns2__BML::adminFirstName = adminFirstName;
		_p->ns2__BML::adminPhone = adminPhone;
		_p->ns2__BML::adminFax = adminFax;
		_p->ns2__BML::adminEmailAddress = adminEmailAddress;
		_p->ns2__BML::adminTitle = adminTitle;
		_p->ns2__BML::supervisorLastName = supervisorLastName;
		_p->ns2__BML::supervisorFirstName = supervisorFirstName;
		_p->ns2__BML::supervisorEmailAddress = supervisorEmailAddress;
		_p->ns2__BML::businessDAndBNumber = businessDAndBNumber;
		_p->ns2__BML::businessTaxID = businessTaxID;
		_p->ns2__BML::businessNAICSCode = businessNAICSCode;
		_p->ns2__BML::businessType = businessType;
		_p->ns2__BML::businessYearsInBusiness = businessYearsInBusiness;
		_p->ns2__BML::businessNumberOfEmployees = businessNumberOfEmployees;
		_p->ns2__BML::businessPONumber = businessPONumber;
		_p->ns2__BML::businessLoanType = businessLoanType;
		_p->ns2__BML::businessApplicationID = businessApplicationID;
		_p->ns2__BML::businessProductCode = businessProductCode;
		_p->ns2__BML::pgLastName = pgLastName;
		_p->ns2__BML::pgFirstName = pgFirstName;
		_p->ns2__BML::pgSSN = pgSSN;
		_p->ns2__BML::pgDateOfBirth = pgDateOfBirth;
		_p->ns2__BML::pgAnnualIncome = pgAnnualIncome;
		_p->ns2__BML::pgIncomeCurrencyType = pgIncomeCurrencyType;
		_p->ns2__BML::pgResidenceStatus = pgResidenceStatus;
		_p->ns2__BML::pgCheckingAccountIndicator = pgCheckingAccountIndicator;
		_p->ns2__BML::pgSavingsAccountIndicator = pgSavingsAccountIndicator;
		_p->ns2__BML::pgYearsAtEmployer = pgYearsAtEmployer;
		_p->ns2__BML::pgYearsAtResidence = pgYearsAtResidence;
		_p->ns2__BML::pgHomeAddress1 = pgHomeAddress1;
		_p->ns2__BML::pgHomeAddress2 = pgHomeAddress2;
		_p->ns2__BML::pgHomeCity = pgHomeCity;
		_p->ns2__BML::pgHomeState = pgHomeState;
		_p->ns2__BML::pgHomePostalCode = pgHomePostalCode;
		_p->ns2__BML::pgHomeCountry = pgHomeCountry;
		_p->ns2__BML::pgEmailAddress = pgEmailAddress;
		_p->ns2__BML::pgHomePhone = pgHomePhone;
		_p->ns2__BML::pgTitle = pgTitle;
	}
	return _p;
}

inline int soap_write_ns2__BML(struct soap *soap, ns2__BML const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BML", p->soap_type() == SOAP_TYPE_ns2__BML ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__BML(struct soap *soap, const char *URL, ns2__BML const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BML", p->soap_type() == SOAP_TYPE_ns2__BML ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__BML(struct soap *soap, const char *URL, ns2__BML const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BML", p->soap_type() == SOAP_TYPE_ns2__BML ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__BML(struct soap *soap, const char *URL, ns2__BML const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BML", p->soap_type() == SOAP_TYPE_ns2__BML ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__BML * SOAP_FMAC4 soap_get_ns2__BML(struct soap*, ns2__BML *, const char*, const char*);

inline int soap_read_ns2__BML(struct soap *soap, ns2__BML *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__BML(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__BML(struct soap *soap, const char *URL, ns2__BML *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__BML(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__BML(struct soap *soap, ns2__BML *p)
{
	if (::soap_read_ns2__BML(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Check_DEFINED
#define SOAP_TYPE_ns2__Check_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Check(struct soap*, const char*, int, const ns2__Check *, const char*);
SOAP_FMAC3 ns2__Check * SOAP_FMAC4 soap_in_ns2__Check(struct soap*, const char*, ns2__Check *, const char*);
SOAP_FMAC1 ns2__Check * SOAP_FMAC2 soap_instantiate_ns2__Check(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Check * soap_new_ns2__Check(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Check(soap, n, NULL, NULL, NULL);
}

inline ns2__Check * soap_new_req_ns2__Check(
	struct soap *soap)
{
	ns2__Check *_p = ::soap_new_ns2__Check(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Check * soap_new_set_ns2__Check(
	struct soap *soap,
	std::string *fullName,
	std::string *accountNumber,
	std::string *accountType,
	std::string *bankTransitNumber,
	std::string *checkNumber,
	std::string *secCode,
	std::string *accountEncoderID,
	std::string *authenticateID,
	std::string *paymentInfo,
	std::string *imageReferenceNumber,
	std::string *terminalCity,
	std::string *terminalState,
	std::string *customerPresent,
	std::string *checkTransactionCode,
	std::string *disableAccountValidation)
{
	ns2__Check *_p = ::soap_new_ns2__Check(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Check::fullName = fullName;
		_p->ns2__Check::accountNumber = accountNumber;
		_p->ns2__Check::accountType = accountType;
		_p->ns2__Check::bankTransitNumber = bankTransitNumber;
		_p->ns2__Check::checkNumber = checkNumber;
		_p->ns2__Check::secCode = secCode;
		_p->ns2__Check::accountEncoderID = accountEncoderID;
		_p->ns2__Check::authenticateID = authenticateID;
		_p->ns2__Check::paymentInfo = paymentInfo;
		_p->ns2__Check::imageReferenceNumber = imageReferenceNumber;
		_p->ns2__Check::terminalCity = terminalCity;
		_p->ns2__Check::terminalState = terminalState;
		_p->ns2__Check::customerPresent = customerPresent;
		_p->ns2__Check::checkTransactionCode = checkTransactionCode;
		_p->ns2__Check::disableAccountValidation = disableAccountValidation;
	}
	return _p;
}

inline int soap_write_ns2__Check(struct soap *soap, ns2__Check const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Check", p->soap_type() == SOAP_TYPE_ns2__Check ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Check(struct soap *soap, const char *URL, ns2__Check const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Check", p->soap_type() == SOAP_TYPE_ns2__Check ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Check(struct soap *soap, const char *URL, ns2__Check const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Check", p->soap_type() == SOAP_TYPE_ns2__Check ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Check(struct soap *soap, const char *URL, ns2__Check const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Check", p->soap_type() == SOAP_TYPE_ns2__Check ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Check * SOAP_FMAC4 soap_get_ns2__Check(struct soap*, ns2__Check *, const char*, const char*);

inline int soap_read_ns2__Check(struct soap *soap, ns2__Check *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Check(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Check(struct soap *soap, const char *URL, ns2__Check *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Check(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Check(struct soap *soap, ns2__Check *p)
{
	if (::soap_read_ns2__Check(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Card_DEFINED
#define SOAP_TYPE_ns2__Card_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Card(struct soap*, const char*, int, const ns2__Card *, const char*);
SOAP_FMAC3 ns2__Card * SOAP_FMAC4 soap_in_ns2__Card(struct soap*, const char*, ns2__Card *, const char*);
SOAP_FMAC1 ns2__Card * SOAP_FMAC2 soap_instantiate_ns2__Card(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Card * soap_new_ns2__Card(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Card(soap, n, NULL, NULL, NULL);
}

inline ns2__Card * soap_new_req_ns2__Card(
	struct soap *soap)
{
	ns2__Card *_p = ::soap_new_ns2__Card(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Card * soap_new_set_ns2__Card(
	struct soap *soap,
	std::string *fullName,
	std::string *accountNumber,
	std::string *expirationMonth,
	std::string *expirationYear,
	std::string *cvIndicator,
	std::string *cvNumber,
	std::string *cardType,
	std::string *issueNumber,
	std::string *startMonth,
	std::string *startYear,
	std::string *pin,
	std::string *accountEncoderID,
	std::string *bin,
	std::string *encryptedData,
	std::string *suffix,
	std::string *virtual_,
	std::string *prefix,
	std::string *cardTypeName,
	std::string *cardSubType,
	std::string *level2Eligible,
	std::string *level3Eligible,
	std::string *productCategory,
	std::string *billingCurrency,
	std::string *billingCurrencyNumericCode,
	std::string *billingCurrencyMinorDigits,
	std::string *productName,
	std::string *usage,
	std::string *prepaidReloadable,
	std::string *prepaidType,
	const std::vector<ns2__Brands *> & brands,
	std::string *fastFundsBusinessFundedTransferDomestic,
	std::string *fastFundsBusinessFundedTransferCrossBorder,
	std::string *fastFundsConsumerFundedTransferDomestic,
	std::string *fastFundsConsumerFundedTransferCrossBorder,
	std::string *octBusinessFundedTransferDomestic,
	std::string *octBusinessFundedTransferCrossBorder,
	std::string *octConsumerFundedTransferDomestic,
	std::string *octConsumerFundedTransferCrossBorder,
	std::string *octGamblingDomestic,
	std::string *octGamblingCrossBorder,
	std::string *fastFundsGamblingDomestic,
	std::string *fastFundsGamblingCrossBorder,
	std::string *octGeoRestrictionIndicator,
	std::string *comboCardType,
	std::string *prepaidIndicator,
	std::string *passPhrase,
	std::string *personalData)
{
	ns2__Card *_p = ::soap_new_ns2__Card(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Card::fullName = fullName;
		_p->ns2__Card::accountNumber = accountNumber;
		_p->ns2__Card::expirationMonth = expirationMonth;
		_p->ns2__Card::expirationYear = expirationYear;
		_p->ns2__Card::cvIndicator = cvIndicator;
		_p->ns2__Card::cvNumber = cvNumber;
		_p->ns2__Card::cardType = cardType;
		_p->ns2__Card::issueNumber = issueNumber;
		_p->ns2__Card::startMonth = startMonth;
		_p->ns2__Card::startYear = startYear;
		_p->ns2__Card::pin = pin;
		_p->ns2__Card::accountEncoderID = accountEncoderID;
		_p->ns2__Card::bin = bin;
		_p->ns2__Card::encryptedData = encryptedData;
		_p->ns2__Card::suffix = suffix;
		_p->ns2__Card::virtual_ = virtual_;
		_p->ns2__Card::prefix = prefix;
		_p->ns2__Card::cardTypeName = cardTypeName;
		_p->ns2__Card::cardSubType = cardSubType;
		_p->ns2__Card::level2Eligible = level2Eligible;
		_p->ns2__Card::level3Eligible = level3Eligible;
		_p->ns2__Card::productCategory = productCategory;
		_p->ns2__Card::billingCurrency = billingCurrency;
		_p->ns2__Card::billingCurrencyNumericCode = billingCurrencyNumericCode;
		_p->ns2__Card::billingCurrencyMinorDigits = billingCurrencyMinorDigits;
		_p->ns2__Card::productName = productName;
		_p->ns2__Card::usage = usage;
		_p->ns2__Card::prepaidReloadable = prepaidReloadable;
		_p->ns2__Card::prepaidType = prepaidType;
		_p->ns2__Card::brands = brands;
		_p->ns2__Card::fastFundsBusinessFundedTransferDomestic = fastFundsBusinessFundedTransferDomestic;
		_p->ns2__Card::fastFundsBusinessFundedTransferCrossBorder = fastFundsBusinessFundedTransferCrossBorder;
		_p->ns2__Card::fastFundsConsumerFundedTransferDomestic = fastFundsConsumerFundedTransferDomestic;
		_p->ns2__Card::fastFundsConsumerFundedTransferCrossBorder = fastFundsConsumerFundedTransferCrossBorder;
		_p->ns2__Card::octBusinessFundedTransferDomestic = octBusinessFundedTransferDomestic;
		_p->ns2__Card::octBusinessFundedTransferCrossBorder = octBusinessFundedTransferCrossBorder;
		_p->ns2__Card::octConsumerFundedTransferDomestic = octConsumerFundedTransferDomestic;
		_p->ns2__Card::octConsumerFundedTransferCrossBorder = octConsumerFundedTransferCrossBorder;
		_p->ns2__Card::octGamblingDomestic = octGamblingDomestic;
		_p->ns2__Card::octGamblingCrossBorder = octGamblingCrossBorder;
		_p->ns2__Card::fastFundsGamblingDomestic = fastFundsGamblingDomestic;
		_p->ns2__Card::fastFundsGamblingCrossBorder = fastFundsGamblingCrossBorder;
		_p->ns2__Card::octGeoRestrictionIndicator = octGeoRestrictionIndicator;
		_p->ns2__Card::comboCardType = comboCardType;
		_p->ns2__Card::prepaidIndicator = prepaidIndicator;
		_p->ns2__Card::passPhrase = passPhrase;
		_p->ns2__Card::personalData = personalData;
	}
	return _p;
}

inline int soap_write_ns2__Card(struct soap *soap, ns2__Card const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Card", p->soap_type() == SOAP_TYPE_ns2__Card ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Card(struct soap *soap, const char *URL, ns2__Card const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Card", p->soap_type() == SOAP_TYPE_ns2__Card ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Card(struct soap *soap, const char *URL, ns2__Card const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Card", p->soap_type() == SOAP_TYPE_ns2__Card ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Card(struct soap *soap, const char *URL, ns2__Card const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Card", p->soap_type() == SOAP_TYPE_ns2__Card ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Card * SOAP_FMAC4 soap_get_ns2__Card(struct soap*, ns2__Card *, const char*, const char*);

inline int soap_read_ns2__Card(struct soap *soap, ns2__Card *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Card(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Card(struct soap *soap, const char *URL, ns2__Card *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Card(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Card(struct soap *soap, ns2__Card *p)
{
	if (::soap_read_ns2__Card(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ShipFrom_DEFINED
#define SOAP_TYPE_ns2__ShipFrom_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ShipFrom(struct soap*, const char*, int, const ns2__ShipFrom *, const char*);
SOAP_FMAC3 ns2__ShipFrom * SOAP_FMAC4 soap_in_ns2__ShipFrom(struct soap*, const char*, ns2__ShipFrom *, const char*);
SOAP_FMAC1 ns2__ShipFrom * SOAP_FMAC2 soap_instantiate_ns2__ShipFrom(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ShipFrom * soap_new_ns2__ShipFrom(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ShipFrom(soap, n, NULL, NULL, NULL);
}

inline ns2__ShipFrom * soap_new_req_ns2__ShipFrom(
	struct soap *soap)
{
	ns2__ShipFrom *_p = ::soap_new_ns2__ShipFrom(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__ShipFrom * soap_new_set_ns2__ShipFrom(
	struct soap *soap,
	std::string *title,
	std::string *firstName,
	std::string *middleName,
	std::string *lastName,
	std::string *suffix,
	std::string *street1,
	std::string *street2,
	std::string *street3,
	std::string *street4,
	std::string *city,
	std::string *county,
	std::string *state,
	std::string *postalCode,
	std::string *country,
	std::string *company,
	std::string *phoneNumber,
	std::string *email)
{
	ns2__ShipFrom *_p = ::soap_new_ns2__ShipFrom(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ShipFrom::title = title;
		_p->ns2__ShipFrom::firstName = firstName;
		_p->ns2__ShipFrom::middleName = middleName;
		_p->ns2__ShipFrom::lastName = lastName;
		_p->ns2__ShipFrom::suffix = suffix;
		_p->ns2__ShipFrom::street1 = street1;
		_p->ns2__ShipFrom::street2 = street2;
		_p->ns2__ShipFrom::street3 = street3;
		_p->ns2__ShipFrom::street4 = street4;
		_p->ns2__ShipFrom::city = city;
		_p->ns2__ShipFrom::county = county;
		_p->ns2__ShipFrom::state = state;
		_p->ns2__ShipFrom::postalCode = postalCode;
		_p->ns2__ShipFrom::country = country;
		_p->ns2__ShipFrom::company = company;
		_p->ns2__ShipFrom::phoneNumber = phoneNumber;
		_p->ns2__ShipFrom::email = email;
	}
	return _p;
}

inline int soap_write_ns2__ShipFrom(struct soap *soap, ns2__ShipFrom const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ShipFrom", p->soap_type() == SOAP_TYPE_ns2__ShipFrom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ShipFrom(struct soap *soap, const char *URL, ns2__ShipFrom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ShipFrom", p->soap_type() == SOAP_TYPE_ns2__ShipFrom ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ShipFrom(struct soap *soap, const char *URL, ns2__ShipFrom const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ShipFrom", p->soap_type() == SOAP_TYPE_ns2__ShipFrom ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ShipFrom(struct soap *soap, const char *URL, ns2__ShipFrom const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ShipFrom", p->soap_type() == SOAP_TYPE_ns2__ShipFrom ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ShipFrom * SOAP_FMAC4 soap_get_ns2__ShipFrom(struct soap*, ns2__ShipFrom *, const char*, const char*);

inline int soap_read_ns2__ShipFrom(struct soap *soap, ns2__ShipFrom *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ShipFrom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ShipFrom(struct soap *soap, const char *URL, ns2__ShipFrom *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ShipFrom(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ShipFrom(struct soap *soap, ns2__ShipFrom *p)
{
	if (::soap_read_ns2__ShipFrom(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ShipTo_DEFINED
#define SOAP_TYPE_ns2__ShipTo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ShipTo(struct soap*, const char*, int, const ns2__ShipTo *, const char*);
SOAP_FMAC3 ns2__ShipTo * SOAP_FMAC4 soap_in_ns2__ShipTo(struct soap*, const char*, ns2__ShipTo *, const char*);
SOAP_FMAC1 ns2__ShipTo * SOAP_FMAC2 soap_instantiate_ns2__ShipTo(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ShipTo * soap_new_ns2__ShipTo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ShipTo(soap, n, NULL, NULL, NULL);
}

inline ns2__ShipTo * soap_new_req_ns2__ShipTo(
	struct soap *soap)
{
	ns2__ShipTo *_p = ::soap_new_ns2__ShipTo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__ShipTo * soap_new_set_ns2__ShipTo(
	struct soap *soap,
	std::string *title,
	std::string *firstName,
	std::string *middleName,
	std::string *lastName,
	std::string *suffix,
	std::string *street1,
	std::string *street2,
	std::string *street3,
	std::string *street4,
	std::string *street5,
	std::string *city,
	std::string *county,
	std::string *state,
	std::string *buildingNumber,
	std::string *district,
	std::string *postalCode,
	std::string *country,
	std::string *company,
	std::string *phoneNumber,
	std::string *email,
	std::string *shippingMethod,
	std::string *name,
	std::string *id,
	std::string *addressVerificationStatus,
	std::string *notApplicable,
	std::string *immutable,
	std::string *destinationCode,
	std::string *pointOfReference,
	std::string *default_,
	std::string *destinationTypes)
{
	ns2__ShipTo *_p = ::soap_new_ns2__ShipTo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ShipTo::title = title;
		_p->ns2__ShipTo::firstName = firstName;
		_p->ns2__ShipTo::middleName = middleName;
		_p->ns2__ShipTo::lastName = lastName;
		_p->ns2__ShipTo::suffix = suffix;
		_p->ns2__ShipTo::street1 = street1;
		_p->ns2__ShipTo::street2 = street2;
		_p->ns2__ShipTo::street3 = street3;
		_p->ns2__ShipTo::street4 = street4;
		_p->ns2__ShipTo::street5 = street5;
		_p->ns2__ShipTo::city = city;
		_p->ns2__ShipTo::county = county;
		_p->ns2__ShipTo::state = state;
		_p->ns2__ShipTo::buildingNumber = buildingNumber;
		_p->ns2__ShipTo::district = district;
		_p->ns2__ShipTo::postalCode = postalCode;
		_p->ns2__ShipTo::country = country;
		_p->ns2__ShipTo::company = company;
		_p->ns2__ShipTo::phoneNumber = phoneNumber;
		_p->ns2__ShipTo::email = email;
		_p->ns2__ShipTo::shippingMethod = shippingMethod;
		_p->ns2__ShipTo::name = name;
		_p->ns2__ShipTo::id = id;
		_p->ns2__ShipTo::addressVerificationStatus = addressVerificationStatus;
		_p->ns2__ShipTo::notApplicable = notApplicable;
		_p->ns2__ShipTo::immutable = immutable;
		_p->ns2__ShipTo::destinationCode = destinationCode;
		_p->ns2__ShipTo::pointOfReference = pointOfReference;
		_p->ns2__ShipTo::default_ = default_;
		_p->ns2__ShipTo::destinationTypes = destinationTypes;
	}
	return _p;
}

inline int soap_write_ns2__ShipTo(struct soap *soap, ns2__ShipTo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ShipTo", p->soap_type() == SOAP_TYPE_ns2__ShipTo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ShipTo(struct soap *soap, const char *URL, ns2__ShipTo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ShipTo", p->soap_type() == SOAP_TYPE_ns2__ShipTo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ShipTo(struct soap *soap, const char *URL, ns2__ShipTo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ShipTo", p->soap_type() == SOAP_TYPE_ns2__ShipTo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ShipTo(struct soap *soap, const char *URL, ns2__ShipTo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ShipTo", p->soap_type() == SOAP_TYPE_ns2__ShipTo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ShipTo * SOAP_FMAC4 soap_get_ns2__ShipTo(struct soap*, ns2__ShipTo *, const char*, const char*);

inline int soap_read_ns2__ShipTo(struct soap *soap, ns2__ShipTo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ShipTo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ShipTo(struct soap *soap, const char *URL, ns2__ShipTo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ShipTo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ShipTo(struct soap *soap, ns2__ShipTo *p)
{
	if (::soap_read_ns2__ShipTo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__BillTo_DEFINED
#define SOAP_TYPE_ns2__BillTo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BillTo(struct soap*, const char*, int, const ns2__BillTo *, const char*);
SOAP_FMAC3 ns2__BillTo * SOAP_FMAC4 soap_in_ns2__BillTo(struct soap*, const char*, ns2__BillTo *, const char*);
SOAP_FMAC1 ns2__BillTo * SOAP_FMAC2 soap_instantiate_ns2__BillTo(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BillTo * soap_new_ns2__BillTo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__BillTo(soap, n, NULL, NULL, NULL);
}

inline ns2__BillTo * soap_new_req_ns2__BillTo(
	struct soap *soap)
{
	ns2__BillTo *_p = ::soap_new_ns2__BillTo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__BillTo * soap_new_set_ns2__BillTo(
	struct soap *soap,
	std::string *title,
	std::string *firstName,
	std::string *middleName,
	std::string *lastName,
	std::string *suffix,
	std::string *buildingNumber,
	std::string *street1,
	std::string *street2,
	std::string *street3,
	std::string *street4,
	std::string *street5,
	std::string *city,
	std::string *district,
	std::string *county,
	std::string *state,
	std::string *postalCode,
	std::string *country,
	std::string *company,
	std::string *companyTaxID,
	std::string *phoneNumber,
	std::string *email,
	std::string *ipAddress,
	std::string *customerUserName,
	std::string *customerPassword,
	std::string *ipNetworkAddress,
	std::string *hostname,
	std::string *domainName,
	std::string *dateOfBirth,
	std::string *driversLicenseNumber,
	std::string *driversLicenseState,
	std::string *ssn,
	std::string *customerID,
	std::string *httpBrowserType,
	std::string *httpBrowserEmail,
	std::string *httpBrowserCookiesAccepted,
	std::string *nif,
	std::string *personalID,
	std::string *language,
	std::string *name,
	std::string *gender,
	std::string *merchantTaxID,
	std::string *passportNumber,
	std::string *passportCountry,
	std::string *customerAccountCreateDate,
	std::string *customerAccountChangeDate,
	std::string *customerAccountPasswordChangeDate,
	std::string *pointOfReference,
	std::string *defaultIndicator,
	std::string *companyStreet1,
	std::string *companyStreet2,
	std::string *companyCity,
	std::string *companyCountry,
	std::string *companyState,
	std::string *companyPostalCode,
	std::string *prefix,
	std::string *companyPhoneNumber,
	std::string *httpBrowserColorDepth,
	std::string *httpBrowserJavaEnabled,
	std::string *httpBrowserJavaScriptEnabled,
	std::string *httpBrowserLanguage,
	std::string *httpBrowserScreenHeight,
	std::string *httpBrowserScreenWidth,
	std::string *httpBrowserTimeDifference)
{
	ns2__BillTo *_p = ::soap_new_ns2__BillTo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BillTo::title = title;
		_p->ns2__BillTo::firstName = firstName;
		_p->ns2__BillTo::middleName = middleName;
		_p->ns2__BillTo::lastName = lastName;
		_p->ns2__BillTo::suffix = suffix;
		_p->ns2__BillTo::buildingNumber = buildingNumber;
		_p->ns2__BillTo::street1 = street1;
		_p->ns2__BillTo::street2 = street2;
		_p->ns2__BillTo::street3 = street3;
		_p->ns2__BillTo::street4 = street4;
		_p->ns2__BillTo::street5 = street5;
		_p->ns2__BillTo::city = city;
		_p->ns2__BillTo::district = district;
		_p->ns2__BillTo::county = county;
		_p->ns2__BillTo::state = state;
		_p->ns2__BillTo::postalCode = postalCode;
		_p->ns2__BillTo::country = country;
		_p->ns2__BillTo::company = company;
		_p->ns2__BillTo::companyTaxID = companyTaxID;
		_p->ns2__BillTo::phoneNumber = phoneNumber;
		_p->ns2__BillTo::email = email;
		_p->ns2__BillTo::ipAddress = ipAddress;
		_p->ns2__BillTo::customerUserName = customerUserName;
		_p->ns2__BillTo::customerPassword = customerPassword;
		_p->ns2__BillTo::ipNetworkAddress = ipNetworkAddress;
		_p->ns2__BillTo::hostname = hostname;
		_p->ns2__BillTo::domainName = domainName;
		_p->ns2__BillTo::dateOfBirth = dateOfBirth;
		_p->ns2__BillTo::driversLicenseNumber = driversLicenseNumber;
		_p->ns2__BillTo::driversLicenseState = driversLicenseState;
		_p->ns2__BillTo::ssn = ssn;
		_p->ns2__BillTo::customerID = customerID;
		_p->ns2__BillTo::httpBrowserType = httpBrowserType;
		_p->ns2__BillTo::httpBrowserEmail = httpBrowserEmail;
		_p->ns2__BillTo::httpBrowserCookiesAccepted = httpBrowserCookiesAccepted;
		_p->ns2__BillTo::nif = nif;
		_p->ns2__BillTo::personalID = personalID;
		_p->ns2__BillTo::language = language;
		_p->ns2__BillTo::name = name;
		_p->ns2__BillTo::gender = gender;
		_p->ns2__BillTo::merchantTaxID = merchantTaxID;
		_p->ns2__BillTo::passportNumber = passportNumber;
		_p->ns2__BillTo::passportCountry = passportCountry;
		_p->ns2__BillTo::customerAccountCreateDate = customerAccountCreateDate;
		_p->ns2__BillTo::customerAccountChangeDate = customerAccountChangeDate;
		_p->ns2__BillTo::customerAccountPasswordChangeDate = customerAccountPasswordChangeDate;
		_p->ns2__BillTo::pointOfReference = pointOfReference;
		_p->ns2__BillTo::defaultIndicator = defaultIndicator;
		_p->ns2__BillTo::companyStreet1 = companyStreet1;
		_p->ns2__BillTo::companyStreet2 = companyStreet2;
		_p->ns2__BillTo::companyCity = companyCity;
		_p->ns2__BillTo::companyCountry = companyCountry;
		_p->ns2__BillTo::companyState = companyState;
		_p->ns2__BillTo::companyPostalCode = companyPostalCode;
		_p->ns2__BillTo::prefix = prefix;
		_p->ns2__BillTo::companyPhoneNumber = companyPhoneNumber;
		_p->ns2__BillTo::httpBrowserColorDepth = httpBrowserColorDepth;
		_p->ns2__BillTo::httpBrowserJavaEnabled = httpBrowserJavaEnabled;
		_p->ns2__BillTo::httpBrowserJavaScriptEnabled = httpBrowserJavaScriptEnabled;
		_p->ns2__BillTo::httpBrowserLanguage = httpBrowserLanguage;
		_p->ns2__BillTo::httpBrowserScreenHeight = httpBrowserScreenHeight;
		_p->ns2__BillTo::httpBrowserScreenWidth = httpBrowserScreenWidth;
		_p->ns2__BillTo::httpBrowserTimeDifference = httpBrowserTimeDifference;
	}
	return _p;
}

inline int soap_write_ns2__BillTo(struct soap *soap, ns2__BillTo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BillTo", p->soap_type() == SOAP_TYPE_ns2__BillTo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__BillTo(struct soap *soap, const char *URL, ns2__BillTo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BillTo", p->soap_type() == SOAP_TYPE_ns2__BillTo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__BillTo(struct soap *soap, const char *URL, ns2__BillTo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BillTo", p->soap_type() == SOAP_TYPE_ns2__BillTo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__BillTo(struct soap *soap, const char *URL, ns2__BillTo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BillTo", p->soap_type() == SOAP_TYPE_ns2__BillTo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__BillTo * SOAP_FMAC4 soap_get_ns2__BillTo(struct soap*, ns2__BillTo *, const char*, const char*);

inline int soap_read_ns2__BillTo(struct soap *soap, ns2__BillTo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__BillTo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__BillTo(struct soap *soap, const char *URL, ns2__BillTo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__BillTo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__BillTo(struct soap *soap, ns2__BillTo *p)
{
	if (::soap_read_ns2__BillTo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__BusinessRules_DEFINED
#define SOAP_TYPE_ns2__BusinessRules_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BusinessRules(struct soap*, const char*, int, const ns2__BusinessRules *, const char*);
SOAP_FMAC3 ns2__BusinessRules * SOAP_FMAC4 soap_in_ns2__BusinessRules(struct soap*, const char*, ns2__BusinessRules *, const char*);
SOAP_FMAC1 ns2__BusinessRules * SOAP_FMAC2 soap_instantiate_ns2__BusinessRules(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BusinessRules * soap_new_ns2__BusinessRules(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__BusinessRules(soap, n, NULL, NULL, NULL);
}

inline ns2__BusinessRules * soap_new_req_ns2__BusinessRules(
	struct soap *soap)
{
	ns2__BusinessRules *_p = ::soap_new_ns2__BusinessRules(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__BusinessRules * soap_new_set_ns2__BusinessRules(
	struct soap *soap,
	std::string *ignoreAVSResult,
	std::string *ignoreCVResult,
	std::string *ignoreDAVResult,
	std::string *ignoreExportResult,
	std::string *ignoreValidateResult,
	std::string *declineAVSFlags,
	std::string *scoreThreshold)
{
	ns2__BusinessRules *_p = ::soap_new_ns2__BusinessRules(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BusinessRules::ignoreAVSResult = ignoreAVSResult;
		_p->ns2__BusinessRules::ignoreCVResult = ignoreCVResult;
		_p->ns2__BusinessRules::ignoreDAVResult = ignoreDAVResult;
		_p->ns2__BusinessRules::ignoreExportResult = ignoreExportResult;
		_p->ns2__BusinessRules::ignoreValidateResult = ignoreValidateResult;
		_p->ns2__BusinessRules::declineAVSFlags = declineAVSFlags;
		_p->ns2__BusinessRules::scoreThreshold = scoreThreshold;
	}
	return _p;
}

inline int soap_write_ns2__BusinessRules(struct soap *soap, ns2__BusinessRules const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BusinessRules", p->soap_type() == SOAP_TYPE_ns2__BusinessRules ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__BusinessRules(struct soap *soap, const char *URL, ns2__BusinessRules const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BusinessRules", p->soap_type() == SOAP_TYPE_ns2__BusinessRules ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__BusinessRules(struct soap *soap, const char *URL, ns2__BusinessRules const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BusinessRules", p->soap_type() == SOAP_TYPE_ns2__BusinessRules ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__BusinessRules(struct soap *soap, const char *URL, ns2__BusinessRules const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BusinessRules", p->soap_type() == SOAP_TYPE_ns2__BusinessRules ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__BusinessRules * SOAP_FMAC4 soap_get_ns2__BusinessRules(struct soap*, ns2__BusinessRules *, const char*, const char*);

inline int soap_read_ns2__BusinessRules(struct soap *soap, ns2__BusinessRules *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__BusinessRules(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__BusinessRules(struct soap *soap, const char *URL, ns2__BusinessRules *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__BusinessRules(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__BusinessRules(struct soap *soap, ns2__BusinessRules *p)
{
	if (::soap_read_ns2__BusinessRules(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__InvoiceHeader_DEFINED
#define SOAP_TYPE_ns2__InvoiceHeader_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__InvoiceHeader(struct soap*, const char*, int, const ns2__InvoiceHeader *, const char*);
SOAP_FMAC3 ns2__InvoiceHeader * SOAP_FMAC4 soap_in_ns2__InvoiceHeader(struct soap*, const char*, ns2__InvoiceHeader *, const char*);
SOAP_FMAC1 ns2__InvoiceHeader * SOAP_FMAC2 soap_instantiate_ns2__InvoiceHeader(struct soap*, int, const char*, const char*, size_t*);

inline ns2__InvoiceHeader * soap_new_ns2__InvoiceHeader(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__InvoiceHeader(soap, n, NULL, NULL, NULL);
}

inline ns2__InvoiceHeader * soap_new_req_ns2__InvoiceHeader(
	struct soap *soap)
{
	ns2__InvoiceHeader *_p = ::soap_new_ns2__InvoiceHeader(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__InvoiceHeader * soap_new_set_ns2__InvoiceHeader(
	struct soap *soap,
	std::string *merchantDescriptor,
	std::string *merchantDescriptorContact,
	std::string *merchantDescriptorAlternate,
	std::string *merchantDescriptorStreet,
	std::string *merchantDescriptorCity,
	std::string *merchantDescriptorState,
	std::string *merchantDescriptorPostalCode,
	std::string *merchantDescriptorCountry,
	std::string *isGift,
	std::string *returnsAccepted,
	std::string *tenderType,
	std::string *merchantVATRegistrationNumber,
	std::string *purchaserOrderDate,
	std::string *purchaserVATRegistrationNumber,
	std::string *vatInvoiceReferenceNumber,
	std::string *summaryCommodityCode,
	std::string *supplierOrderReference,
	std::string *userPO,
	std::string *costCenter,
	std::string *purchaserCode,
	std::string *taxable,
	std::string *amexDataTAA1,
	std::string *amexDataTAA2,
	std::string *amexDataTAA3,
	std::string *amexDataTAA4,
	std::string *invoiceDate,
	std::string *totalTaxTypeCode,
	std::string *cardAcceptorRefNumber,
	std::string *authorizedContactName,
	std::string *businessApplicationID,
	std::string *salesOrganizationID,
	std::string *submerchantID,
	std::string *submerchantName,
	std::string *submerchantStreet,
	std::string *submerchantCity,
	std::string *submerchantPostalCode,
	std::string *submerchantState,
	std::string *submerchantCountry,
	std::string *submerchantEmail,
	std::string *submerchantTelephoneNumber,
	std::string *submerchantRegion,
	std::string *submerchantMerchantID,
	std::string *merchantDescriptorCounty,
	std::string *referenceDataCode,
	std::string *referenceDataNumber,
	std::string *merchantDescriptorStoreID,
	std::string *clerkID,
	std::string *customData_USCORE1)
{
	ns2__InvoiceHeader *_p = ::soap_new_ns2__InvoiceHeader(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__InvoiceHeader::merchantDescriptor = merchantDescriptor;
		_p->ns2__InvoiceHeader::merchantDescriptorContact = merchantDescriptorContact;
		_p->ns2__InvoiceHeader::merchantDescriptorAlternate = merchantDescriptorAlternate;
		_p->ns2__InvoiceHeader::merchantDescriptorStreet = merchantDescriptorStreet;
		_p->ns2__InvoiceHeader::merchantDescriptorCity = merchantDescriptorCity;
		_p->ns2__InvoiceHeader::merchantDescriptorState = merchantDescriptorState;
		_p->ns2__InvoiceHeader::merchantDescriptorPostalCode = merchantDescriptorPostalCode;
		_p->ns2__InvoiceHeader::merchantDescriptorCountry = merchantDescriptorCountry;
		_p->ns2__InvoiceHeader::isGift = isGift;
		_p->ns2__InvoiceHeader::returnsAccepted = returnsAccepted;
		_p->ns2__InvoiceHeader::tenderType = tenderType;
		_p->ns2__InvoiceHeader::merchantVATRegistrationNumber = merchantVATRegistrationNumber;
		_p->ns2__InvoiceHeader::purchaserOrderDate = purchaserOrderDate;
		_p->ns2__InvoiceHeader::purchaserVATRegistrationNumber = purchaserVATRegistrationNumber;
		_p->ns2__InvoiceHeader::vatInvoiceReferenceNumber = vatInvoiceReferenceNumber;
		_p->ns2__InvoiceHeader::summaryCommodityCode = summaryCommodityCode;
		_p->ns2__InvoiceHeader::supplierOrderReference = supplierOrderReference;
		_p->ns2__InvoiceHeader::userPO = userPO;
		_p->ns2__InvoiceHeader::costCenter = costCenter;
		_p->ns2__InvoiceHeader::purchaserCode = purchaserCode;
		_p->ns2__InvoiceHeader::taxable = taxable;
		_p->ns2__InvoiceHeader::amexDataTAA1 = amexDataTAA1;
		_p->ns2__InvoiceHeader::amexDataTAA2 = amexDataTAA2;
		_p->ns2__InvoiceHeader::amexDataTAA3 = amexDataTAA3;
		_p->ns2__InvoiceHeader::amexDataTAA4 = amexDataTAA4;
		_p->ns2__InvoiceHeader::invoiceDate = invoiceDate;
		_p->ns2__InvoiceHeader::totalTaxTypeCode = totalTaxTypeCode;
		_p->ns2__InvoiceHeader::cardAcceptorRefNumber = cardAcceptorRefNumber;
		_p->ns2__InvoiceHeader::authorizedContactName = authorizedContactName;
		_p->ns2__InvoiceHeader::businessApplicationID = businessApplicationID;
		_p->ns2__InvoiceHeader::salesOrganizationID = salesOrganizationID;
		_p->ns2__InvoiceHeader::submerchantID = submerchantID;
		_p->ns2__InvoiceHeader::submerchantName = submerchantName;
		_p->ns2__InvoiceHeader::submerchantStreet = submerchantStreet;
		_p->ns2__InvoiceHeader::submerchantCity = submerchantCity;
		_p->ns2__InvoiceHeader::submerchantPostalCode = submerchantPostalCode;
		_p->ns2__InvoiceHeader::submerchantState = submerchantState;
		_p->ns2__InvoiceHeader::submerchantCountry = submerchantCountry;
		_p->ns2__InvoiceHeader::submerchantEmail = submerchantEmail;
		_p->ns2__InvoiceHeader::submerchantTelephoneNumber = submerchantTelephoneNumber;
		_p->ns2__InvoiceHeader::submerchantRegion = submerchantRegion;
		_p->ns2__InvoiceHeader::submerchantMerchantID = submerchantMerchantID;
		_p->ns2__InvoiceHeader::merchantDescriptorCounty = merchantDescriptorCounty;
		_p->ns2__InvoiceHeader::referenceDataCode = referenceDataCode;
		_p->ns2__InvoiceHeader::referenceDataNumber = referenceDataNumber;
		_p->ns2__InvoiceHeader::merchantDescriptorStoreID = merchantDescriptorStoreID;
		_p->ns2__InvoiceHeader::clerkID = clerkID;
		_p->ns2__InvoiceHeader::customData_USCORE1 = customData_USCORE1;
	}
	return _p;
}

inline int soap_write_ns2__InvoiceHeader(struct soap *soap, ns2__InvoiceHeader const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InvoiceHeader", p->soap_type() == SOAP_TYPE_ns2__InvoiceHeader ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__InvoiceHeader(struct soap *soap, const char *URL, ns2__InvoiceHeader const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InvoiceHeader", p->soap_type() == SOAP_TYPE_ns2__InvoiceHeader ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__InvoiceHeader(struct soap *soap, const char *URL, ns2__InvoiceHeader const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InvoiceHeader", p->soap_type() == SOAP_TYPE_ns2__InvoiceHeader ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__InvoiceHeader(struct soap *soap, const char *URL, ns2__InvoiceHeader const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InvoiceHeader", p->soap_type() == SOAP_TYPE_ns2__InvoiceHeader ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__InvoiceHeader * SOAP_FMAC4 soap_get_ns2__InvoiceHeader(struct soap*, ns2__InvoiceHeader *, const char*, const char*);

inline int soap_read_ns2__InvoiceHeader(struct soap *soap, ns2__InvoiceHeader *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__InvoiceHeader(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__InvoiceHeader(struct soap *soap, const char *URL, ns2__InvoiceHeader *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__InvoiceHeader(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__InvoiceHeader(struct soap *soap, ns2__InvoiceHeader *p)
{
	if (::soap_read_ns2__InvoiceHeader(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__EncryptPaymentDataService_DEFINED
#define SOAP_TYPE_ns2__EncryptPaymentDataService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EncryptPaymentDataService(struct soap*, const char*, int, const ns2__EncryptPaymentDataService *, const char*);
SOAP_FMAC3 ns2__EncryptPaymentDataService * SOAP_FMAC4 soap_in_ns2__EncryptPaymentDataService(struct soap*, const char*, ns2__EncryptPaymentDataService *, const char*);
SOAP_FMAC1 ns2__EncryptPaymentDataService * SOAP_FMAC2 soap_instantiate_ns2__EncryptPaymentDataService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__EncryptPaymentDataService * soap_new_ns2__EncryptPaymentDataService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__EncryptPaymentDataService(soap, n, NULL, NULL, NULL);
}

inline ns2__EncryptPaymentDataService * soap_new_req_ns2__EncryptPaymentDataService(
	struct soap *soap,
	const std::string& run)
{
	ns2__EncryptPaymentDataService *_p = ::soap_new_ns2__EncryptPaymentDataService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__EncryptPaymentDataService::run = run;
	}
	return _p;
}

inline ns2__EncryptPaymentDataService * soap_new_set_ns2__EncryptPaymentDataService(
	struct soap *soap,
	const std::string& run)
{
	ns2__EncryptPaymentDataService *_p = ::soap_new_ns2__EncryptPaymentDataService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__EncryptPaymentDataService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__EncryptPaymentDataService(struct soap *soap, ns2__EncryptPaymentDataService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:EncryptPaymentDataService", p->soap_type() == SOAP_TYPE_ns2__EncryptPaymentDataService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__EncryptPaymentDataService(struct soap *soap, const char *URL, ns2__EncryptPaymentDataService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:EncryptPaymentDataService", p->soap_type() == SOAP_TYPE_ns2__EncryptPaymentDataService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__EncryptPaymentDataService(struct soap *soap, const char *URL, ns2__EncryptPaymentDataService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:EncryptPaymentDataService", p->soap_type() == SOAP_TYPE_ns2__EncryptPaymentDataService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__EncryptPaymentDataService(struct soap *soap, const char *URL, ns2__EncryptPaymentDataService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:EncryptPaymentDataService", p->soap_type() == SOAP_TYPE_ns2__EncryptPaymentDataService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__EncryptPaymentDataService * SOAP_FMAC4 soap_get_ns2__EncryptPaymentDataService(struct soap*, ns2__EncryptPaymentDataService *, const char*, const char*);

inline int soap_read_ns2__EncryptPaymentDataService(struct soap *soap, ns2__EncryptPaymentDataService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__EncryptPaymentDataService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__EncryptPaymentDataService(struct soap *soap, const char *URL, ns2__EncryptPaymentDataService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__EncryptPaymentDataService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__EncryptPaymentDataService(struct soap *soap, ns2__EncryptPaymentDataService *p)
{
	if (::soap_read_ns2__EncryptPaymentDataService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CaseManagementActionService_DEFINED
#define SOAP_TYPE_ns2__CaseManagementActionService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CaseManagementActionService(struct soap*, const char*, int, const ns2__CaseManagementActionService *, const char*);
SOAP_FMAC3 ns2__CaseManagementActionService * SOAP_FMAC4 soap_in_ns2__CaseManagementActionService(struct soap*, const char*, ns2__CaseManagementActionService *, const char*);
SOAP_FMAC1 ns2__CaseManagementActionService * SOAP_FMAC2 soap_instantiate_ns2__CaseManagementActionService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CaseManagementActionService * soap_new_ns2__CaseManagementActionService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CaseManagementActionService(soap, n, NULL, NULL, NULL);
}

inline ns2__CaseManagementActionService * soap_new_req_ns2__CaseManagementActionService(
	struct soap *soap,
	const std::string& run)
{
	ns2__CaseManagementActionService *_p = ::soap_new_ns2__CaseManagementActionService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CaseManagementActionService::run = run;
	}
	return _p;
}

inline ns2__CaseManagementActionService * soap_new_set_ns2__CaseManagementActionService(
	struct soap *soap,
	std::string *actionCode,
	std::string *requestID,
	std::string *comments,
	const std::string& run)
{
	ns2__CaseManagementActionService *_p = ::soap_new_ns2__CaseManagementActionService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CaseManagementActionService::actionCode = actionCode;
		_p->ns2__CaseManagementActionService::requestID = requestID;
		_p->ns2__CaseManagementActionService::comments = comments;
		_p->ns2__CaseManagementActionService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__CaseManagementActionService(struct soap *soap, ns2__CaseManagementActionService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CaseManagementActionService", p->soap_type() == SOAP_TYPE_ns2__CaseManagementActionService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CaseManagementActionService(struct soap *soap, const char *URL, ns2__CaseManagementActionService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CaseManagementActionService", p->soap_type() == SOAP_TYPE_ns2__CaseManagementActionService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CaseManagementActionService(struct soap *soap, const char *URL, ns2__CaseManagementActionService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CaseManagementActionService", p->soap_type() == SOAP_TYPE_ns2__CaseManagementActionService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CaseManagementActionService(struct soap *soap, const char *URL, ns2__CaseManagementActionService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CaseManagementActionService", p->soap_type() == SOAP_TYPE_ns2__CaseManagementActionService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CaseManagementActionService * SOAP_FMAC4 soap_get_ns2__CaseManagementActionService(struct soap*, ns2__CaseManagementActionService *, const char*, const char*);

inline int soap_read_ns2__CaseManagementActionService(struct soap *soap, ns2__CaseManagementActionService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CaseManagementActionService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CaseManagementActionService(struct soap *soap, const char *URL, ns2__CaseManagementActionService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CaseManagementActionService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CaseManagementActionService(struct soap *soap, ns2__CaseManagementActionService *p)
{
	if (::soap_read_ns2__CaseManagementActionService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__FraudUpdateService_DEFINED
#define SOAP_TYPE_ns2__FraudUpdateService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FraudUpdateService(struct soap*, const char*, int, const ns2__FraudUpdateService *, const char*);
SOAP_FMAC3 ns2__FraudUpdateService * SOAP_FMAC4 soap_in_ns2__FraudUpdateService(struct soap*, const char*, ns2__FraudUpdateService *, const char*);
SOAP_FMAC1 ns2__FraudUpdateService * SOAP_FMAC2 soap_instantiate_ns2__FraudUpdateService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FraudUpdateService * soap_new_ns2__FraudUpdateService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__FraudUpdateService(soap, n, NULL, NULL, NULL);
}

inline ns2__FraudUpdateService * soap_new_req_ns2__FraudUpdateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__FraudUpdateService *_p = ::soap_new_ns2__FraudUpdateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__FraudUpdateService::run = run;
	}
	return _p;
}

inline ns2__FraudUpdateService * soap_new_set_ns2__FraudUpdateService(
	struct soap *soap,
	std::string *actionCode,
	std::string *markedData,
	std::string *markingReason,
	std::string *markingNotes,
	std::string *markingRequestID,
	std::string *markingTransactionDate,
	std::string *markingAmount,
	std::string *markingCurrency,
	std::string *markingIndicator,
	const std::string& run)
{
	ns2__FraudUpdateService *_p = ::soap_new_ns2__FraudUpdateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__FraudUpdateService::actionCode = actionCode;
		_p->ns2__FraudUpdateService::markedData = markedData;
		_p->ns2__FraudUpdateService::markingReason = markingReason;
		_p->ns2__FraudUpdateService::markingNotes = markingNotes;
		_p->ns2__FraudUpdateService::markingRequestID = markingRequestID;
		_p->ns2__FraudUpdateService::markingTransactionDate = markingTransactionDate;
		_p->ns2__FraudUpdateService::markingAmount = markingAmount;
		_p->ns2__FraudUpdateService::markingCurrency = markingCurrency;
		_p->ns2__FraudUpdateService::markingIndicator = markingIndicator;
		_p->ns2__FraudUpdateService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__FraudUpdateService(struct soap *soap, ns2__FraudUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FraudUpdateService", p->soap_type() == SOAP_TYPE_ns2__FraudUpdateService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__FraudUpdateService(struct soap *soap, const char *URL, ns2__FraudUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FraudUpdateService", p->soap_type() == SOAP_TYPE_ns2__FraudUpdateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__FraudUpdateService(struct soap *soap, const char *URL, ns2__FraudUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FraudUpdateService", p->soap_type() == SOAP_TYPE_ns2__FraudUpdateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__FraudUpdateService(struct soap *soap, const char *URL, ns2__FraudUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FraudUpdateService", p->soap_type() == SOAP_TYPE_ns2__FraudUpdateService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__FraudUpdateService * SOAP_FMAC4 soap_get_ns2__FraudUpdateService(struct soap*, ns2__FraudUpdateService *, const char*, const char*);

inline int soap_read_ns2__FraudUpdateService(struct soap *soap, ns2__FraudUpdateService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__FraudUpdateService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__FraudUpdateService(struct soap *soap, const char *URL, ns2__FraudUpdateService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__FraudUpdateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__FraudUpdateService(struct soap *soap, ns2__FraudUpdateService *p)
{
	if (::soap_read_ns2__FraudUpdateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__RiskUpdateService_DEFINED
#define SOAP_TYPE_ns2__RiskUpdateService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RiskUpdateService(struct soap*, const char*, int, const ns2__RiskUpdateService *, const char*);
SOAP_FMAC3 ns2__RiskUpdateService * SOAP_FMAC4 soap_in_ns2__RiskUpdateService(struct soap*, const char*, ns2__RiskUpdateService *, const char*);
SOAP_FMAC1 ns2__RiskUpdateService * SOAP_FMAC2 soap_instantiate_ns2__RiskUpdateService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RiskUpdateService * soap_new_ns2__RiskUpdateService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__RiskUpdateService(soap, n, NULL, NULL, NULL);
}

inline ns2__RiskUpdateService * soap_new_req_ns2__RiskUpdateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__RiskUpdateService *_p = ::soap_new_ns2__RiskUpdateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__RiskUpdateService::run = run;
	}
	return _p;
}

inline ns2__RiskUpdateService * soap_new_set_ns2__RiskUpdateService(
	struct soap *soap,
	std::string *actionCode,
	std::string *recordID,
	std::string *recordName,
	ns2__Address *negativeAddress,
	std::string *markingReason,
	std::string *markingNotes,
	std::string *markingRequestID,
	std::string *deviceFingerprintSmartID,
	std::string *deviceFingerprintTrueIPAddress,
	std::string *deviceFingerprintProxyIPAddress,
	const std::string& run)
{
	ns2__RiskUpdateService *_p = ::soap_new_ns2__RiskUpdateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__RiskUpdateService::actionCode = actionCode;
		_p->ns2__RiskUpdateService::recordID = recordID;
		_p->ns2__RiskUpdateService::recordName = recordName;
		_p->ns2__RiskUpdateService::negativeAddress = negativeAddress;
		_p->ns2__RiskUpdateService::markingReason = markingReason;
		_p->ns2__RiskUpdateService::markingNotes = markingNotes;
		_p->ns2__RiskUpdateService::markingRequestID = markingRequestID;
		_p->ns2__RiskUpdateService::deviceFingerprintSmartID = deviceFingerprintSmartID;
		_p->ns2__RiskUpdateService::deviceFingerprintTrueIPAddress = deviceFingerprintTrueIPAddress;
		_p->ns2__RiskUpdateService::deviceFingerprintProxyIPAddress = deviceFingerprintProxyIPAddress;
		_p->ns2__RiskUpdateService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__RiskUpdateService(struct soap *soap, ns2__RiskUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RiskUpdateService", p->soap_type() == SOAP_TYPE_ns2__RiskUpdateService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__RiskUpdateService(struct soap *soap, const char *URL, ns2__RiskUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RiskUpdateService", p->soap_type() == SOAP_TYPE_ns2__RiskUpdateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__RiskUpdateService(struct soap *soap, const char *URL, ns2__RiskUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RiskUpdateService", p->soap_type() == SOAP_TYPE_ns2__RiskUpdateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__RiskUpdateService(struct soap *soap, const char *URL, ns2__RiskUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:RiskUpdateService", p->soap_type() == SOAP_TYPE_ns2__RiskUpdateService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__RiskUpdateService * SOAP_FMAC4 soap_get_ns2__RiskUpdateService(struct soap*, ns2__RiskUpdateService *, const char*, const char*);

inline int soap_read_ns2__RiskUpdateService(struct soap *soap, ns2__RiskUpdateService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__RiskUpdateService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__RiskUpdateService(struct soap *soap, const char *URL, ns2__RiskUpdateService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__RiskUpdateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__RiskUpdateService(struct soap *soap, ns2__RiskUpdateService *p)
{
	if (::soap_read_ns2__RiskUpdateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APCheckStatusService_DEFINED
#define SOAP_TYPE_ns2__APCheckStatusService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APCheckStatusService(struct soap*, const char*, int, const ns2__APCheckStatusService *, const char*);
SOAP_FMAC3 ns2__APCheckStatusService * SOAP_FMAC4 soap_in_ns2__APCheckStatusService(struct soap*, const char*, ns2__APCheckStatusService *, const char*);
SOAP_FMAC1 ns2__APCheckStatusService * SOAP_FMAC2 soap_instantiate_ns2__APCheckStatusService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APCheckStatusService * soap_new_ns2__APCheckStatusService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APCheckStatusService(soap, n, NULL, NULL, NULL);
}

inline ns2__APCheckStatusService * soap_new_req_ns2__APCheckStatusService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APCheckStatusService *_p = ::soap_new_ns2__APCheckStatusService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APCheckStatusService::run = run;
	}
	return _p;
}

inline ns2__APCheckStatusService * soap_new_set_ns2__APCheckStatusService(
	struct soap *soap,
	std::string *apInitiateRequestID,
	std::string *reconciliationID,
	std::string *checkStatusRequestID,
	std::string *sessionsRequestID,
	const std::string& run)
{
	ns2__APCheckStatusService *_p = ::soap_new_ns2__APCheckStatusService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APCheckStatusService::apInitiateRequestID = apInitiateRequestID;
		_p->ns2__APCheckStatusService::reconciliationID = reconciliationID;
		_p->ns2__APCheckStatusService::checkStatusRequestID = checkStatusRequestID;
		_p->ns2__APCheckStatusService::sessionsRequestID = sessionsRequestID;
		_p->ns2__APCheckStatusService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__APCheckStatusService(struct soap *soap, ns2__APCheckStatusService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCheckStatusService", p->soap_type() == SOAP_TYPE_ns2__APCheckStatusService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APCheckStatusService(struct soap *soap, const char *URL, ns2__APCheckStatusService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCheckStatusService", p->soap_type() == SOAP_TYPE_ns2__APCheckStatusService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APCheckStatusService(struct soap *soap, const char *URL, ns2__APCheckStatusService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCheckStatusService", p->soap_type() == SOAP_TYPE_ns2__APCheckStatusService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APCheckStatusService(struct soap *soap, const char *URL, ns2__APCheckStatusService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APCheckStatusService", p->soap_type() == SOAP_TYPE_ns2__APCheckStatusService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APCheckStatusService * SOAP_FMAC4 soap_get_ns2__APCheckStatusService(struct soap*, ns2__APCheckStatusService *, const char*, const char*);

inline int soap_read_ns2__APCheckStatusService(struct soap *soap, ns2__APCheckStatusService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APCheckStatusService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APCheckStatusService(struct soap *soap, const char *URL, ns2__APCheckStatusService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APCheckStatusService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APCheckStatusService(struct soap *soap, ns2__APCheckStatusService *p)
{
	if (::soap_read_ns2__APCheckStatusService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__APInitiateService_DEFINED
#define SOAP_TYPE_ns2__APInitiateService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__APInitiateService(struct soap*, const char*, int, const ns2__APInitiateService *, const char*);
SOAP_FMAC3 ns2__APInitiateService * SOAP_FMAC4 soap_in_ns2__APInitiateService(struct soap*, const char*, ns2__APInitiateService *, const char*);
SOAP_FMAC1 ns2__APInitiateService * SOAP_FMAC2 soap_instantiate_ns2__APInitiateService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__APInitiateService * soap_new_ns2__APInitiateService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__APInitiateService(soap, n, NULL, NULL, NULL);
}

inline ns2__APInitiateService * soap_new_req_ns2__APInitiateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__APInitiateService *_p = ::soap_new_ns2__APInitiateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APInitiateService::run = run;
	}
	return _p;
}

inline ns2__APInitiateService * soap_new_set_ns2__APInitiateService(
	struct soap *soap,
	std::string *returnURL,
	std::string *productName,
	std::string *productDescription,
	std::string *reconciliationID,
	std::string *bankID,
	std::string *countryCode,
	std::string *escrowAgreement,
	std::string *languageInterface,
	std::string *intent,
	std::string *successURL,
	std::string *cancelURL,
	std::string *failureURL,
	std::string *overridePaymentMethod,
	const std::string& run)
{
	ns2__APInitiateService *_p = ::soap_new_ns2__APInitiateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__APInitiateService::returnURL = returnURL;
		_p->ns2__APInitiateService::productName = productName;
		_p->ns2__APInitiateService::productDescription = productDescription;
		_p->ns2__APInitiateService::reconciliationID = reconciliationID;
		_p->ns2__APInitiateService::bankID = bankID;
		_p->ns2__APInitiateService::countryCode = countryCode;
		_p->ns2__APInitiateService::escrowAgreement = escrowAgreement;
		_p->ns2__APInitiateService::languageInterface = languageInterface;
		_p->ns2__APInitiateService::intent = intent;
		_p->ns2__APInitiateService::successURL = successURL;
		_p->ns2__APInitiateService::cancelURL = cancelURL;
		_p->ns2__APInitiateService::failureURL = failureURL;
		_p->ns2__APInitiateService::overridePaymentMethod = overridePaymentMethod;
		_p->ns2__APInitiateService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__APInitiateService(struct soap *soap, ns2__APInitiateService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APInitiateService", p->soap_type() == SOAP_TYPE_ns2__APInitiateService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__APInitiateService(struct soap *soap, const char *URL, ns2__APInitiateService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APInitiateService", p->soap_type() == SOAP_TYPE_ns2__APInitiateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__APInitiateService(struct soap *soap, const char *URL, ns2__APInitiateService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APInitiateService", p->soap_type() == SOAP_TYPE_ns2__APInitiateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__APInitiateService(struct soap *soap, const char *URL, ns2__APInitiateService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:APInitiateService", p->soap_type() == SOAP_TYPE_ns2__APInitiateService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__APInitiateService * SOAP_FMAC4 soap_get_ns2__APInitiateService(struct soap*, ns2__APInitiateService *, const char*, const char*);

inline int soap_read_ns2__APInitiateService(struct soap *soap, ns2__APInitiateService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__APInitiateService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__APInitiateService(struct soap *soap, const char *URL, ns2__APInitiateService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__APInitiateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__APInitiateService(struct soap *soap, ns2__APInitiateService *p)
{
	if (::soap_read_ns2__APInitiateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Address_DEFINED
#define SOAP_TYPE_ns2__Address_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Address(struct soap*, const char*, int, const ns2__Address *, const char*);
SOAP_FMAC3 ns2__Address * SOAP_FMAC4 soap_in_ns2__Address(struct soap*, const char*, ns2__Address *, const char*);
SOAP_FMAC1 ns2__Address * SOAP_FMAC2 soap_instantiate_ns2__Address(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Address * soap_new_ns2__Address(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Address(soap, n, NULL, NULL, NULL);
}

inline ns2__Address * soap_new_req_ns2__Address(
	struct soap *soap)
{
	ns2__Address *_p = ::soap_new_ns2__Address(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Address * soap_new_set_ns2__Address(
	struct soap *soap,
	std::string *street1,
	std::string *street2,
	std::string *city,
	std::string *state,
	std::string *postalCode,
	std::string *country)
{
	ns2__Address *_p = ::soap_new_ns2__Address(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Address::street1 = street1;
		_p->ns2__Address::street2 = street2;
		_p->ns2__Address::city = city;
		_p->ns2__Address::state = state;
		_p->ns2__Address::postalCode = postalCode;
		_p->ns2__Address::country = country;
	}
	return _p;
}

inline int soap_write_ns2__Address(struct soap *soap, ns2__Address const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Address", p->soap_type() == SOAP_TYPE_ns2__Address ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Address(struct soap *soap, const char *URL, ns2__Address const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Address", p->soap_type() == SOAP_TYPE_ns2__Address ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Address(struct soap *soap, const char *URL, ns2__Address const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Address", p->soap_type() == SOAP_TYPE_ns2__Address ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Address(struct soap *soap, const char *URL, ns2__Address const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Address", p->soap_type() == SOAP_TYPE_ns2__Address ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Address * SOAP_FMAC4 soap_get_ns2__Address(struct soap*, ns2__Address *, const char*, const char*);

inline int soap_read_ns2__Address(struct soap *soap, ns2__Address *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Address(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Address(struct soap *soap, const char *URL, ns2__Address *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Address(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Address(struct soap *soap, ns2__Address *p)
{
	if (::soap_read_ns2__Address(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Routing_DEFINED
#define SOAP_TYPE_ns2__Routing_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Routing(struct soap*, const char*, int, const ns2__Routing *, const char*);
SOAP_FMAC3 ns2__Routing * SOAP_FMAC4 soap_in_ns2__Routing(struct soap*, const char*, ns2__Routing *, const char*);
SOAP_FMAC1 ns2__Routing * SOAP_FMAC2 soap_instantiate_ns2__Routing(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Routing * soap_new_ns2__Routing(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Routing(soap, n, NULL, NULL, NULL);
}

inline ns2__Routing * soap_new_req_ns2__Routing(
	struct soap *soap)
{
	ns2__Routing *_p = ::soap_new_ns2__Routing(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Routing * soap_new_set_ns2__Routing(
	struct soap *soap,
	std::string *networkType,
	std::string *networkLabel,
	std::string *signatureCVMRequired)
{
	ns2__Routing *_p = ::soap_new_ns2__Routing(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Routing::networkType = networkType;
		_p->ns2__Routing::networkLabel = networkLabel;
		_p->ns2__Routing::signatureCVMRequired = signatureCVMRequired;
	}
	return _p;
}

inline int soap_write_ns2__Routing(struct soap *soap, ns2__Routing const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Routing", p->soap_type() == SOAP_TYPE_ns2__Routing ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Routing(struct soap *soap, const char *URL, ns2__Routing const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Routing", p->soap_type() == SOAP_TYPE_ns2__Routing ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Routing(struct soap *soap, const char *URL, ns2__Routing const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Routing", p->soap_type() == SOAP_TYPE_ns2__Routing ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Routing(struct soap *soap, const char *URL, ns2__Routing const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Routing", p->soap_type() == SOAP_TYPE_ns2__Routing ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Routing * SOAP_FMAC4 soap_get_ns2__Routing(struct soap*, ns2__Routing *, const char*, const char*);

inline int soap_read_ns2__Routing(struct soap *soap, ns2__Routing *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Routing(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Routing(struct soap *soap, const char *URL, ns2__Routing *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Routing(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Routing(struct soap *soap, ns2__Routing *p)
{
	if (::soap_read_ns2__Routing(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PersonalID_DEFINED
#define SOAP_TYPE_ns2__PersonalID_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PersonalID(struct soap*, const char*, int, const ns2__PersonalID *, const char*);
SOAP_FMAC3 ns2__PersonalID * SOAP_FMAC4 soap_in_ns2__PersonalID(struct soap*, const char*, ns2__PersonalID *, const char*);
SOAP_FMAC1 ns2__PersonalID * SOAP_FMAC2 soap_instantiate_ns2__PersonalID(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PersonalID * soap_new_ns2__PersonalID(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PersonalID(soap, n, NULL, NULL, NULL);
}

inline ns2__PersonalID * soap_new_req_ns2__PersonalID(
	struct soap *soap)
{
	ns2__PersonalID *_p = ::soap_new_ns2__PersonalID(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__PersonalID * soap_new_set_ns2__PersonalID(
	struct soap *soap,
	std::string *number,
	std::string *type,
	std::string *name,
	std::string *country,
	std::string *address,
	std::string *issuedBy)
{
	ns2__PersonalID *_p = ::soap_new_ns2__PersonalID(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PersonalID::number = number;
		_p->ns2__PersonalID::type = type;
		_p->ns2__PersonalID::name = name;
		_p->ns2__PersonalID::country = country;
		_p->ns2__PersonalID::address = address;
		_p->ns2__PersonalID::issuedBy = issuedBy;
	}
	return _p;
}

inline int soap_write_ns2__PersonalID(struct soap *soap, ns2__PersonalID const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PersonalID", p->soap_type() == SOAP_TYPE_ns2__PersonalID ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PersonalID(struct soap *soap, const char *URL, ns2__PersonalID const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PersonalID", p->soap_type() == SOAP_TYPE_ns2__PersonalID ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PersonalID(struct soap *soap, const char *URL, ns2__PersonalID const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PersonalID", p->soap_type() == SOAP_TYPE_ns2__PersonalID ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PersonalID(struct soap *soap, const char *URL, ns2__PersonalID const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PersonalID", p->soap_type() == SOAP_TYPE_ns2__PersonalID ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PersonalID * SOAP_FMAC4 soap_get_ns2__PersonalID(struct soap*, ns2__PersonalID *, const char*, const char*);

inline int soap_read_ns2__PersonalID(struct soap *soap, ns2__PersonalID *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PersonalID(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PersonalID(struct soap *soap, const char *URL, ns2__PersonalID *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PersonalID(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PersonalID(struct soap *soap, ns2__PersonalID *p)
{
	if (::soap_read_ns2__PersonalID(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__BoletoPaymentService_DEFINED
#define SOAP_TYPE_ns2__BoletoPaymentService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BoletoPaymentService(struct soap*, const char*, int, const ns2__BoletoPaymentService *, const char*);
SOAP_FMAC3 ns2__BoletoPaymentService * SOAP_FMAC4 soap_in_ns2__BoletoPaymentService(struct soap*, const char*, ns2__BoletoPaymentService *, const char*);
SOAP_FMAC1 ns2__BoletoPaymentService * SOAP_FMAC2 soap_instantiate_ns2__BoletoPaymentService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BoletoPaymentService * soap_new_ns2__BoletoPaymentService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__BoletoPaymentService(soap, n, NULL, NULL, NULL);
}

inline ns2__BoletoPaymentService * soap_new_req_ns2__BoletoPaymentService(
	struct soap *soap,
	const std::string& run)
{
	ns2__BoletoPaymentService *_p = ::soap_new_ns2__BoletoPaymentService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BoletoPaymentService::run = run;
	}
	return _p;
}

inline ns2__BoletoPaymentService * soap_new_set_ns2__BoletoPaymentService(
	struct soap *soap,
	std::string *instruction,
	std::string *expirationDate,
	std::string *reconciliationID,
	const std::string& run)
{
	ns2__BoletoPaymentService *_p = ::soap_new_ns2__BoletoPaymentService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BoletoPaymentService::instruction = instruction;
		_p->ns2__BoletoPaymentService::expirationDate = expirationDate;
		_p->ns2__BoletoPaymentService::reconciliationID = reconciliationID;
		_p->ns2__BoletoPaymentService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__BoletoPaymentService(struct soap *soap, ns2__BoletoPaymentService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BoletoPaymentService", p->soap_type() == SOAP_TYPE_ns2__BoletoPaymentService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__BoletoPaymentService(struct soap *soap, const char *URL, ns2__BoletoPaymentService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BoletoPaymentService", p->soap_type() == SOAP_TYPE_ns2__BoletoPaymentService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__BoletoPaymentService(struct soap *soap, const char *URL, ns2__BoletoPaymentService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BoletoPaymentService", p->soap_type() == SOAP_TYPE_ns2__BoletoPaymentService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__BoletoPaymentService(struct soap *soap, const char *URL, ns2__BoletoPaymentService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BoletoPaymentService", p->soap_type() == SOAP_TYPE_ns2__BoletoPaymentService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__BoletoPaymentService * SOAP_FMAC4 soap_get_ns2__BoletoPaymentService(struct soap*, ns2__BoletoPaymentService *, const char*, const char*);

inline int soap_read_ns2__BoletoPaymentService(struct soap *soap, ns2__BoletoPaymentService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__BoletoPaymentService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__BoletoPaymentService(struct soap *soap, const char *URL, ns2__BoletoPaymentService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__BoletoPaymentService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__BoletoPaymentService(struct soap *soap, ns2__BoletoPaymentService *p)
{
	if (::soap_read_ns2__BoletoPaymentService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ChinaRefundService_DEFINED
#define SOAP_TYPE_ns2__ChinaRefundService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ChinaRefundService(struct soap*, const char*, int, const ns2__ChinaRefundService *, const char*);
SOAP_FMAC3 ns2__ChinaRefundService * SOAP_FMAC4 soap_in_ns2__ChinaRefundService(struct soap*, const char*, ns2__ChinaRefundService *, const char*);
SOAP_FMAC1 ns2__ChinaRefundService * SOAP_FMAC2 soap_instantiate_ns2__ChinaRefundService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ChinaRefundService * soap_new_ns2__ChinaRefundService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ChinaRefundService(soap, n, NULL, NULL, NULL);
}

inline ns2__ChinaRefundService * soap_new_req_ns2__ChinaRefundService(
	struct soap *soap,
	const std::string& run)
{
	ns2__ChinaRefundService *_p = ::soap_new_ns2__ChinaRefundService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ChinaRefundService::run = run;
	}
	return _p;
}

inline ns2__ChinaRefundService * soap_new_set_ns2__ChinaRefundService(
	struct soap *soap,
	std::string *chinaPaymentRequestID,
	std::string *chinaPaymentRequestToken,
	std::string *refundReason,
	const std::string& run)
{
	ns2__ChinaRefundService *_p = ::soap_new_ns2__ChinaRefundService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ChinaRefundService::chinaPaymentRequestID = chinaPaymentRequestID;
		_p->ns2__ChinaRefundService::chinaPaymentRequestToken = chinaPaymentRequestToken;
		_p->ns2__ChinaRefundService::refundReason = refundReason;
		_p->ns2__ChinaRefundService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__ChinaRefundService(struct soap *soap, ns2__ChinaRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ChinaRefundService", p->soap_type() == SOAP_TYPE_ns2__ChinaRefundService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ChinaRefundService(struct soap *soap, const char *URL, ns2__ChinaRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ChinaRefundService", p->soap_type() == SOAP_TYPE_ns2__ChinaRefundService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ChinaRefundService(struct soap *soap, const char *URL, ns2__ChinaRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ChinaRefundService", p->soap_type() == SOAP_TYPE_ns2__ChinaRefundService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ChinaRefundService(struct soap *soap, const char *URL, ns2__ChinaRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ChinaRefundService", p->soap_type() == SOAP_TYPE_ns2__ChinaRefundService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ChinaRefundService * SOAP_FMAC4 soap_get_ns2__ChinaRefundService(struct soap*, ns2__ChinaRefundService *, const char*, const char*);

inline int soap_read_ns2__ChinaRefundService(struct soap *soap, ns2__ChinaRefundService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ChinaRefundService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ChinaRefundService(struct soap *soap, const char *URL, ns2__ChinaRefundService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ChinaRefundService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ChinaRefundService(struct soap *soap, ns2__ChinaRefundService *p)
{
	if (::soap_read_ns2__ChinaRefundService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ChinaPaymentService_DEFINED
#define SOAP_TYPE_ns2__ChinaPaymentService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ChinaPaymentService(struct soap*, const char*, int, const ns2__ChinaPaymentService *, const char*);
SOAP_FMAC3 ns2__ChinaPaymentService * SOAP_FMAC4 soap_in_ns2__ChinaPaymentService(struct soap*, const char*, ns2__ChinaPaymentService *, const char*);
SOAP_FMAC1 ns2__ChinaPaymentService * SOAP_FMAC2 soap_instantiate_ns2__ChinaPaymentService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ChinaPaymentService * soap_new_ns2__ChinaPaymentService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ChinaPaymentService(soap, n, NULL, NULL, NULL);
}

inline ns2__ChinaPaymentService * soap_new_req_ns2__ChinaPaymentService(
	struct soap *soap,
	const std::string& run)
{
	ns2__ChinaPaymentService *_p = ::soap_new_ns2__ChinaPaymentService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ChinaPaymentService::run = run;
	}
	return _p;
}

inline ns2__ChinaPaymentService * soap_new_set_ns2__ChinaPaymentService(
	struct soap *soap,
	std::string *paymentMode,
	std::string *returnURL,
	std::string *pickUpAddress,
	std::string *pickUpPhoneNumber,
	std::string *pickUpPostalCode,
	std::string *pickUpName,
	const std::string& run)
{
	ns2__ChinaPaymentService *_p = ::soap_new_ns2__ChinaPaymentService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ChinaPaymentService::paymentMode = paymentMode;
		_p->ns2__ChinaPaymentService::returnURL = returnURL;
		_p->ns2__ChinaPaymentService::pickUpAddress = pickUpAddress;
		_p->ns2__ChinaPaymentService::pickUpPhoneNumber = pickUpPhoneNumber;
		_p->ns2__ChinaPaymentService::pickUpPostalCode = pickUpPostalCode;
		_p->ns2__ChinaPaymentService::pickUpName = pickUpName;
		_p->ns2__ChinaPaymentService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__ChinaPaymentService(struct soap *soap, ns2__ChinaPaymentService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ChinaPaymentService", p->soap_type() == SOAP_TYPE_ns2__ChinaPaymentService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ChinaPaymentService(struct soap *soap, const char *URL, ns2__ChinaPaymentService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ChinaPaymentService", p->soap_type() == SOAP_TYPE_ns2__ChinaPaymentService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ChinaPaymentService(struct soap *soap, const char *URL, ns2__ChinaPaymentService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ChinaPaymentService", p->soap_type() == SOAP_TYPE_ns2__ChinaPaymentService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ChinaPaymentService(struct soap *soap, const char *URL, ns2__ChinaPaymentService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ChinaPaymentService", p->soap_type() == SOAP_TYPE_ns2__ChinaPaymentService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ChinaPaymentService * SOAP_FMAC4 soap_get_ns2__ChinaPaymentService(struct soap*, ns2__ChinaPaymentService *, const char*, const char*);

inline int soap_read_ns2__ChinaPaymentService(struct soap *soap, ns2__ChinaPaymentService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ChinaPaymentService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ChinaPaymentService(struct soap *soap, const char *URL, ns2__ChinaPaymentService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ChinaPaymentService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ChinaPaymentService(struct soap *soap, ns2__ChinaPaymentService *p)
{
	if (::soap_read_ns2__ChinaPaymentService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalPreapprovedUpdateService_DEFINED
#define SOAP_TYPE_ns2__PayPalPreapprovedUpdateService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalPreapprovedUpdateService(struct soap*, const char*, int, const ns2__PayPalPreapprovedUpdateService *, const char*);
SOAP_FMAC3 ns2__PayPalPreapprovedUpdateService * SOAP_FMAC4 soap_in_ns2__PayPalPreapprovedUpdateService(struct soap*, const char*, ns2__PayPalPreapprovedUpdateService *, const char*);
SOAP_FMAC1 ns2__PayPalPreapprovedUpdateService * SOAP_FMAC2 soap_instantiate_ns2__PayPalPreapprovedUpdateService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalPreapprovedUpdateService * soap_new_ns2__PayPalPreapprovedUpdateService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalPreapprovedUpdateService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalPreapprovedUpdateService * soap_new_req_ns2__PayPalPreapprovedUpdateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayPalPreapprovedUpdateService *_p = ::soap_new_ns2__PayPalPreapprovedUpdateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalPreapprovedUpdateService::run = run;
	}
	return _p;
}

inline ns2__PayPalPreapprovedUpdateService * soap_new_set_ns2__PayPalPreapprovedUpdateService(
	struct soap *soap,
	std::string *mpID,
	std::string *reconciliationID,
	const std::string& run)
{
	ns2__PayPalPreapprovedUpdateService *_p = ::soap_new_ns2__PayPalPreapprovedUpdateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalPreapprovedUpdateService::mpID = mpID;
		_p->ns2__PayPalPreapprovedUpdateService::reconciliationID = reconciliationID;
		_p->ns2__PayPalPreapprovedUpdateService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayPalPreapprovedUpdateService(struct soap *soap, ns2__PayPalPreapprovedUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPreapprovedUpdateService", p->soap_type() == SOAP_TYPE_ns2__PayPalPreapprovedUpdateService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalPreapprovedUpdateService(struct soap *soap, const char *URL, ns2__PayPalPreapprovedUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPreapprovedUpdateService", p->soap_type() == SOAP_TYPE_ns2__PayPalPreapprovedUpdateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalPreapprovedUpdateService(struct soap *soap, const char *URL, ns2__PayPalPreapprovedUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPreapprovedUpdateService", p->soap_type() == SOAP_TYPE_ns2__PayPalPreapprovedUpdateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalPreapprovedUpdateService(struct soap *soap, const char *URL, ns2__PayPalPreapprovedUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPreapprovedUpdateService", p->soap_type() == SOAP_TYPE_ns2__PayPalPreapprovedUpdateService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalPreapprovedUpdateService * SOAP_FMAC4 soap_get_ns2__PayPalPreapprovedUpdateService(struct soap*, ns2__PayPalPreapprovedUpdateService *, const char*, const char*);

inline int soap_read_ns2__PayPalPreapprovedUpdateService(struct soap *soap, ns2__PayPalPreapprovedUpdateService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalPreapprovedUpdateService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalPreapprovedUpdateService(struct soap *soap, const char *URL, ns2__PayPalPreapprovedUpdateService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalPreapprovedUpdateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalPreapprovedUpdateService(struct soap *soap, ns2__PayPalPreapprovedUpdateService *p)
{
	if (::soap_read_ns2__PayPalPreapprovedUpdateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalPreapprovedPaymentService_DEFINED
#define SOAP_TYPE_ns2__PayPalPreapprovedPaymentService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalPreapprovedPaymentService(struct soap*, const char*, int, const ns2__PayPalPreapprovedPaymentService *, const char*);
SOAP_FMAC3 ns2__PayPalPreapprovedPaymentService * SOAP_FMAC4 soap_in_ns2__PayPalPreapprovedPaymentService(struct soap*, const char*, ns2__PayPalPreapprovedPaymentService *, const char*);
SOAP_FMAC1 ns2__PayPalPreapprovedPaymentService * SOAP_FMAC2 soap_instantiate_ns2__PayPalPreapprovedPaymentService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalPreapprovedPaymentService * soap_new_ns2__PayPalPreapprovedPaymentService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalPreapprovedPaymentService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalPreapprovedPaymentService * soap_new_req_ns2__PayPalPreapprovedPaymentService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayPalPreapprovedPaymentService *_p = ::soap_new_ns2__PayPalPreapprovedPaymentService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalPreapprovedPaymentService::run = run;
	}
	return _p;
}

inline ns2__PayPalPreapprovedPaymentService * soap_new_set_ns2__PayPalPreapprovedPaymentService(
	struct soap *soap,
	std::string *mpID,
	std::string *reconciliationID,
	const std::string& run)
{
	ns2__PayPalPreapprovedPaymentService *_p = ::soap_new_ns2__PayPalPreapprovedPaymentService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalPreapprovedPaymentService::mpID = mpID;
		_p->ns2__PayPalPreapprovedPaymentService::reconciliationID = reconciliationID;
		_p->ns2__PayPalPreapprovedPaymentService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayPalPreapprovedPaymentService(struct soap *soap, ns2__PayPalPreapprovedPaymentService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPreapprovedPaymentService", p->soap_type() == SOAP_TYPE_ns2__PayPalPreapprovedPaymentService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalPreapprovedPaymentService(struct soap *soap, const char *URL, ns2__PayPalPreapprovedPaymentService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPreapprovedPaymentService", p->soap_type() == SOAP_TYPE_ns2__PayPalPreapprovedPaymentService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalPreapprovedPaymentService(struct soap *soap, const char *URL, ns2__PayPalPreapprovedPaymentService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPreapprovedPaymentService", p->soap_type() == SOAP_TYPE_ns2__PayPalPreapprovedPaymentService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalPreapprovedPaymentService(struct soap *soap, const char *URL, ns2__PayPalPreapprovedPaymentService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPreapprovedPaymentService", p->soap_type() == SOAP_TYPE_ns2__PayPalPreapprovedPaymentService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalPreapprovedPaymentService * SOAP_FMAC4 soap_get_ns2__PayPalPreapprovedPaymentService(struct soap*, ns2__PayPalPreapprovedPaymentService *, const char*, const char*);

inline int soap_read_ns2__PayPalPreapprovedPaymentService(struct soap *soap, ns2__PayPalPreapprovedPaymentService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalPreapprovedPaymentService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalPreapprovedPaymentService(struct soap *soap, const char *URL, ns2__PayPalPreapprovedPaymentService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalPreapprovedPaymentService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalPreapprovedPaymentService(struct soap *soap, ns2__PayPalPreapprovedPaymentService *p)
{
	if (::soap_read_ns2__PayPalPreapprovedPaymentService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalButtonCreateService_DEFINED
#define SOAP_TYPE_ns2__PayPalButtonCreateService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalButtonCreateService(struct soap*, const char*, int, const ns2__PayPalButtonCreateService *, const char*);
SOAP_FMAC3 ns2__PayPalButtonCreateService * SOAP_FMAC4 soap_in_ns2__PayPalButtonCreateService(struct soap*, const char*, ns2__PayPalButtonCreateService *, const char*);
SOAP_FMAC1 ns2__PayPalButtonCreateService * SOAP_FMAC2 soap_instantiate_ns2__PayPalButtonCreateService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalButtonCreateService * soap_new_ns2__PayPalButtonCreateService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalButtonCreateService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalButtonCreateService * soap_new_req_ns2__PayPalButtonCreateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayPalButtonCreateService *_p = ::soap_new_ns2__PayPalButtonCreateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalButtonCreateService::run = run;
	}
	return _p;
}

inline ns2__PayPalButtonCreateService * soap_new_set_ns2__PayPalButtonCreateService(
	struct soap *soap,
	std::string *buttonType,
	std::string *reconciliationID,
	const std::string& run)
{
	ns2__PayPalButtonCreateService *_p = ::soap_new_ns2__PayPalButtonCreateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalButtonCreateService::buttonType = buttonType;
		_p->ns2__PayPalButtonCreateService::reconciliationID = reconciliationID;
		_p->ns2__PayPalButtonCreateService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayPalButtonCreateService(struct soap *soap, ns2__PayPalButtonCreateService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalButtonCreateService", p->soap_type() == SOAP_TYPE_ns2__PayPalButtonCreateService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalButtonCreateService(struct soap *soap, const char *URL, ns2__PayPalButtonCreateService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalButtonCreateService", p->soap_type() == SOAP_TYPE_ns2__PayPalButtonCreateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalButtonCreateService(struct soap *soap, const char *URL, ns2__PayPalButtonCreateService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalButtonCreateService", p->soap_type() == SOAP_TYPE_ns2__PayPalButtonCreateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalButtonCreateService(struct soap *soap, const char *URL, ns2__PayPalButtonCreateService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalButtonCreateService", p->soap_type() == SOAP_TYPE_ns2__PayPalButtonCreateService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalButtonCreateService * SOAP_FMAC4 soap_get_ns2__PayPalButtonCreateService(struct soap*, ns2__PayPalButtonCreateService *, const char*, const char*);

inline int soap_read_ns2__PayPalButtonCreateService(struct soap *soap, ns2__PayPalButtonCreateService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalButtonCreateService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalButtonCreateService(struct soap *soap, const char *URL, ns2__PayPalButtonCreateService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalButtonCreateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalButtonCreateService(struct soap *soap, ns2__PayPalButtonCreateService *p)
{
	if (::soap_read_ns2__PayPalButtonCreateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PinDebitReversalService_DEFINED
#define SOAP_TYPE_ns2__PinDebitReversalService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PinDebitReversalService(struct soap*, const char*, int, const ns2__PinDebitReversalService *, const char*);
SOAP_FMAC3 ns2__PinDebitReversalService * SOAP_FMAC4 soap_in_ns2__PinDebitReversalService(struct soap*, const char*, ns2__PinDebitReversalService *, const char*);
SOAP_FMAC1 ns2__PinDebitReversalService * SOAP_FMAC2 soap_instantiate_ns2__PinDebitReversalService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PinDebitReversalService * soap_new_ns2__PinDebitReversalService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PinDebitReversalService(soap, n, NULL, NULL, NULL);
}

inline ns2__PinDebitReversalService * soap_new_req_ns2__PinDebitReversalService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PinDebitReversalService *_p = ::soap_new_ns2__PinDebitReversalService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinDebitReversalService::run = run;
	}
	return _p;
}

inline ns2__PinDebitReversalService * soap_new_set_ns2__PinDebitReversalService(
	struct soap *soap,
	std::string *pinDebitRequestID,
	const std::string& run)
{
	ns2__PinDebitReversalService *_p = ::soap_new_ns2__PinDebitReversalService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinDebitReversalService::pinDebitRequestID = pinDebitRequestID;
		_p->ns2__PinDebitReversalService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PinDebitReversalService(struct soap *soap, ns2__PinDebitReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitReversalService", p->soap_type() == SOAP_TYPE_ns2__PinDebitReversalService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PinDebitReversalService(struct soap *soap, const char *URL, ns2__PinDebitReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitReversalService", p->soap_type() == SOAP_TYPE_ns2__PinDebitReversalService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PinDebitReversalService(struct soap *soap, const char *URL, ns2__PinDebitReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitReversalService", p->soap_type() == SOAP_TYPE_ns2__PinDebitReversalService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PinDebitReversalService(struct soap *soap, const char *URL, ns2__PinDebitReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitReversalService", p->soap_type() == SOAP_TYPE_ns2__PinDebitReversalService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PinDebitReversalService * SOAP_FMAC4 soap_get_ns2__PinDebitReversalService(struct soap*, ns2__PinDebitReversalService *, const char*, const char*);

inline int soap_read_ns2__PinDebitReversalService(struct soap *soap, ns2__PinDebitReversalService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PinDebitReversalService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PinDebitReversalService(struct soap *soap, const char *URL, ns2__PinDebitReversalService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PinDebitReversalService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PinDebitReversalService(struct soap *soap, ns2__PinDebitReversalService *p)
{
	if (::soap_read_ns2__PinDebitReversalService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PinDebitCreditService_DEFINED
#define SOAP_TYPE_ns2__PinDebitCreditService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PinDebitCreditService(struct soap*, const char*, int, const ns2__PinDebitCreditService *, const char*);
SOAP_FMAC3 ns2__PinDebitCreditService * SOAP_FMAC4 soap_in_ns2__PinDebitCreditService(struct soap*, const char*, ns2__PinDebitCreditService *, const char*);
SOAP_FMAC1 ns2__PinDebitCreditService * SOAP_FMAC2 soap_instantiate_ns2__PinDebitCreditService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PinDebitCreditService * soap_new_ns2__PinDebitCreditService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PinDebitCreditService(soap, n, NULL, NULL, NULL);
}

inline ns2__PinDebitCreditService * soap_new_req_ns2__PinDebitCreditService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PinDebitCreditService *_p = ::soap_new_ns2__PinDebitCreditService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinDebitCreditService::run = run;
	}
	return _p;
}

inline ns2__PinDebitCreditService * soap_new_set_ns2__PinDebitCreditService(
	struct soap *soap,
	std::string *networkOrder,
	std::string *commerceIndicator,
	std::string *reconciliationID,
	std::string *overridePaymentMethod,
	std::string *paymentType,
	std::string *ebtCategory,
	std::string *transactionType,
	const std::string& run)
{
	ns2__PinDebitCreditService *_p = ::soap_new_ns2__PinDebitCreditService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinDebitCreditService::networkOrder = networkOrder;
		_p->ns2__PinDebitCreditService::commerceIndicator = commerceIndicator;
		_p->ns2__PinDebitCreditService::reconciliationID = reconciliationID;
		_p->ns2__PinDebitCreditService::overridePaymentMethod = overridePaymentMethod;
		_p->ns2__PinDebitCreditService::paymentType = paymentType;
		_p->ns2__PinDebitCreditService::ebtCategory = ebtCategory;
		_p->ns2__PinDebitCreditService::transactionType = transactionType;
		_p->ns2__PinDebitCreditService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PinDebitCreditService(struct soap *soap, ns2__PinDebitCreditService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitCreditService", p->soap_type() == SOAP_TYPE_ns2__PinDebitCreditService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PinDebitCreditService(struct soap *soap, const char *URL, ns2__PinDebitCreditService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitCreditService", p->soap_type() == SOAP_TYPE_ns2__PinDebitCreditService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PinDebitCreditService(struct soap *soap, const char *URL, ns2__PinDebitCreditService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitCreditService", p->soap_type() == SOAP_TYPE_ns2__PinDebitCreditService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PinDebitCreditService(struct soap *soap, const char *URL, ns2__PinDebitCreditService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitCreditService", p->soap_type() == SOAP_TYPE_ns2__PinDebitCreditService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PinDebitCreditService * SOAP_FMAC4 soap_get_ns2__PinDebitCreditService(struct soap*, ns2__PinDebitCreditService *, const char*, const char*);

inline int soap_read_ns2__PinDebitCreditService(struct soap *soap, ns2__PinDebitCreditService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PinDebitCreditService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PinDebitCreditService(struct soap *soap, const char *URL, ns2__PinDebitCreditService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PinDebitCreditService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PinDebitCreditService(struct soap *soap, ns2__PinDebitCreditService *p)
{
	if (::soap_read_ns2__PinDebitCreditService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PinDebitPurchaseService_DEFINED
#define SOAP_TYPE_ns2__PinDebitPurchaseService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PinDebitPurchaseService(struct soap*, const char*, int, const ns2__PinDebitPurchaseService *, const char*);
SOAP_FMAC3 ns2__PinDebitPurchaseService * SOAP_FMAC4 soap_in_ns2__PinDebitPurchaseService(struct soap*, const char*, ns2__PinDebitPurchaseService *, const char*);
SOAP_FMAC1 ns2__PinDebitPurchaseService * SOAP_FMAC2 soap_instantiate_ns2__PinDebitPurchaseService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PinDebitPurchaseService * soap_new_ns2__PinDebitPurchaseService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PinDebitPurchaseService(soap, n, NULL, NULL, NULL);
}

inline ns2__PinDebitPurchaseService * soap_new_req_ns2__PinDebitPurchaseService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PinDebitPurchaseService *_p = ::soap_new_ns2__PinDebitPurchaseService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinDebitPurchaseService::run = run;
	}
	return _p;
}

inline ns2__PinDebitPurchaseService * soap_new_set_ns2__PinDebitPurchaseService(
	struct soap *soap,
	std::string *networkOrder,
	std::string *commerceIndicator,
	std::string *reconciliationID,
	std::string *partialAuthIndicator,
	std::string *overridePaymentMethod,
	std::string *paymentType,
	std::string *ebtCategory,
	std::string *transactionType,
	std::string *ebtVoucherSerialNumber,
	std::string *authorizationCode,
	const std::string& run)
{
	ns2__PinDebitPurchaseService *_p = ::soap_new_ns2__PinDebitPurchaseService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinDebitPurchaseService::networkOrder = networkOrder;
		_p->ns2__PinDebitPurchaseService::commerceIndicator = commerceIndicator;
		_p->ns2__PinDebitPurchaseService::reconciliationID = reconciliationID;
		_p->ns2__PinDebitPurchaseService::partialAuthIndicator = partialAuthIndicator;
		_p->ns2__PinDebitPurchaseService::overridePaymentMethod = overridePaymentMethod;
		_p->ns2__PinDebitPurchaseService::paymentType = paymentType;
		_p->ns2__PinDebitPurchaseService::ebtCategory = ebtCategory;
		_p->ns2__PinDebitPurchaseService::transactionType = transactionType;
		_p->ns2__PinDebitPurchaseService::ebtVoucherSerialNumber = ebtVoucherSerialNumber;
		_p->ns2__PinDebitPurchaseService::authorizationCode = authorizationCode;
		_p->ns2__PinDebitPurchaseService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PinDebitPurchaseService(struct soap *soap, ns2__PinDebitPurchaseService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitPurchaseService", p->soap_type() == SOAP_TYPE_ns2__PinDebitPurchaseService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PinDebitPurchaseService(struct soap *soap, const char *URL, ns2__PinDebitPurchaseService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitPurchaseService", p->soap_type() == SOAP_TYPE_ns2__PinDebitPurchaseService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PinDebitPurchaseService(struct soap *soap, const char *URL, ns2__PinDebitPurchaseService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitPurchaseService", p->soap_type() == SOAP_TYPE_ns2__PinDebitPurchaseService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PinDebitPurchaseService(struct soap *soap, const char *URL, ns2__PinDebitPurchaseService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinDebitPurchaseService", p->soap_type() == SOAP_TYPE_ns2__PinDebitPurchaseService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PinDebitPurchaseService * SOAP_FMAC4 soap_get_ns2__PinDebitPurchaseService(struct soap*, ns2__PinDebitPurchaseService *, const char*, const char*);

inline int soap_read_ns2__PinDebitPurchaseService(struct soap *soap, ns2__PinDebitPurchaseService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PinDebitPurchaseService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PinDebitPurchaseService(struct soap *soap, const char *URL, ns2__PinDebitPurchaseService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PinDebitPurchaseService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PinDebitPurchaseService(struct soap *soap, ns2__PinDebitPurchaseService *p)
{
	if (::soap_read_ns2__PinDebitPurchaseService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PinlessDebitReversalService_DEFINED
#define SOAP_TYPE_ns2__PinlessDebitReversalService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PinlessDebitReversalService(struct soap*, const char*, int, const ns2__PinlessDebitReversalService *, const char*);
SOAP_FMAC3 ns2__PinlessDebitReversalService * SOAP_FMAC4 soap_in_ns2__PinlessDebitReversalService(struct soap*, const char*, ns2__PinlessDebitReversalService *, const char*);
SOAP_FMAC1 ns2__PinlessDebitReversalService * SOAP_FMAC2 soap_instantiate_ns2__PinlessDebitReversalService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PinlessDebitReversalService * soap_new_ns2__PinlessDebitReversalService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PinlessDebitReversalService(soap, n, NULL, NULL, NULL);
}

inline ns2__PinlessDebitReversalService * soap_new_req_ns2__PinlessDebitReversalService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PinlessDebitReversalService *_p = ::soap_new_ns2__PinlessDebitReversalService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinlessDebitReversalService::run = run;
	}
	return _p;
}

inline ns2__PinlessDebitReversalService * soap_new_set_ns2__PinlessDebitReversalService(
	struct soap *soap,
	std::string *pinlessDebitRequestID,
	std::string *pinlessDebitRequestToken,
	std::string *reconciliationID,
	const std::string& run)
{
	ns2__PinlessDebitReversalService *_p = ::soap_new_ns2__PinlessDebitReversalService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinlessDebitReversalService::pinlessDebitRequestID = pinlessDebitRequestID;
		_p->ns2__PinlessDebitReversalService::pinlessDebitRequestToken = pinlessDebitRequestToken;
		_p->ns2__PinlessDebitReversalService::reconciliationID = reconciliationID;
		_p->ns2__PinlessDebitReversalService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PinlessDebitReversalService(struct soap *soap, ns2__PinlessDebitReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitReversalService", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitReversalService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PinlessDebitReversalService(struct soap *soap, const char *URL, ns2__PinlessDebitReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitReversalService", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitReversalService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PinlessDebitReversalService(struct soap *soap, const char *URL, ns2__PinlessDebitReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitReversalService", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitReversalService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PinlessDebitReversalService(struct soap *soap, const char *URL, ns2__PinlessDebitReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitReversalService", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitReversalService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PinlessDebitReversalService * SOAP_FMAC4 soap_get_ns2__PinlessDebitReversalService(struct soap*, ns2__PinlessDebitReversalService *, const char*, const char*);

inline int soap_read_ns2__PinlessDebitReversalService(struct soap *soap, ns2__PinlessDebitReversalService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PinlessDebitReversalService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PinlessDebitReversalService(struct soap *soap, const char *URL, ns2__PinlessDebitReversalService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PinlessDebitReversalService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PinlessDebitReversalService(struct soap *soap, ns2__PinlessDebitReversalService *p)
{
	if (::soap_read_ns2__PinlessDebitReversalService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PinlessDebitValidateService_DEFINED
#define SOAP_TYPE_ns2__PinlessDebitValidateService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PinlessDebitValidateService(struct soap*, const char*, int, const ns2__PinlessDebitValidateService *, const char*);
SOAP_FMAC3 ns2__PinlessDebitValidateService * SOAP_FMAC4 soap_in_ns2__PinlessDebitValidateService(struct soap*, const char*, ns2__PinlessDebitValidateService *, const char*);
SOAP_FMAC1 ns2__PinlessDebitValidateService * SOAP_FMAC2 soap_instantiate_ns2__PinlessDebitValidateService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PinlessDebitValidateService * soap_new_ns2__PinlessDebitValidateService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PinlessDebitValidateService(soap, n, NULL, NULL, NULL);
}

inline ns2__PinlessDebitValidateService * soap_new_req_ns2__PinlessDebitValidateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PinlessDebitValidateService *_p = ::soap_new_ns2__PinlessDebitValidateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinlessDebitValidateService::run = run;
	}
	return _p;
}

inline ns2__PinlessDebitValidateService * soap_new_set_ns2__PinlessDebitValidateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PinlessDebitValidateService *_p = ::soap_new_ns2__PinlessDebitValidateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinlessDebitValidateService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PinlessDebitValidateService(struct soap *soap, ns2__PinlessDebitValidateService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitValidateService", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitValidateService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PinlessDebitValidateService(struct soap *soap, const char *URL, ns2__PinlessDebitValidateService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitValidateService", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitValidateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PinlessDebitValidateService(struct soap *soap, const char *URL, ns2__PinlessDebitValidateService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitValidateService", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitValidateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PinlessDebitValidateService(struct soap *soap, const char *URL, ns2__PinlessDebitValidateService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitValidateService", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitValidateService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PinlessDebitValidateService * SOAP_FMAC4 soap_get_ns2__PinlessDebitValidateService(struct soap*, ns2__PinlessDebitValidateService *, const char*, const char*);

inline int soap_read_ns2__PinlessDebitValidateService(struct soap *soap, ns2__PinlessDebitValidateService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PinlessDebitValidateService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PinlessDebitValidateService(struct soap *soap, const char *URL, ns2__PinlessDebitValidateService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PinlessDebitValidateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PinlessDebitValidateService(struct soap *soap, ns2__PinlessDebitValidateService *p)
{
	if (::soap_read_ns2__PinlessDebitValidateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PinlessDebitService_DEFINED
#define SOAP_TYPE_ns2__PinlessDebitService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PinlessDebitService(struct soap*, const char*, int, const ns2__PinlessDebitService *, const char*);
SOAP_FMAC3 ns2__PinlessDebitService * SOAP_FMAC4 soap_in_ns2__PinlessDebitService(struct soap*, const char*, ns2__PinlessDebitService *, const char*);
SOAP_FMAC1 ns2__PinlessDebitService * SOAP_FMAC2 soap_instantiate_ns2__PinlessDebitService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PinlessDebitService * soap_new_ns2__PinlessDebitService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PinlessDebitService(soap, n, NULL, NULL, NULL);
}

inline ns2__PinlessDebitService * soap_new_req_ns2__PinlessDebitService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PinlessDebitService *_p = ::soap_new_ns2__PinlessDebitService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinlessDebitService::run = run;
	}
	return _p;
}

inline ns2__PinlessDebitService * soap_new_set_ns2__PinlessDebitService(
	struct soap *soap,
	std::string *reconciliationID,
	std::string *commerceIndicator,
	const std::string& run)
{
	ns2__PinlessDebitService *_p = ::soap_new_ns2__PinlessDebitService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PinlessDebitService::reconciliationID = reconciliationID;
		_p->ns2__PinlessDebitService::commerceIndicator = commerceIndicator;
		_p->ns2__PinlessDebitService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PinlessDebitService(struct soap *soap, ns2__PinlessDebitService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitService", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PinlessDebitService(struct soap *soap, const char *URL, ns2__PinlessDebitService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitService", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PinlessDebitService(struct soap *soap, const char *URL, ns2__PinlessDebitService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitService", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PinlessDebitService(struct soap *soap, const char *URL, ns2__PinlessDebitService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PinlessDebitService", p->soap_type() == SOAP_TYPE_ns2__PinlessDebitService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PinlessDebitService * SOAP_FMAC4 soap_get_ns2__PinlessDebitService(struct soap*, ns2__PinlessDebitService *, const char*, const char*);

inline int soap_read_ns2__PinlessDebitService(struct soap *soap, ns2__PinlessDebitService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PinlessDebitService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PinlessDebitService(struct soap *soap, const char *URL, ns2__PinlessDebitService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PinlessDebitService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PinlessDebitService(struct soap *soap, ns2__PinlessDebitService *p)
{
	if (::soap_read_ns2__PinlessDebitService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__VoidService_DEFINED
#define SOAP_TYPE_ns2__VoidService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VoidService(struct soap*, const char*, int, const ns2__VoidService *, const char*);
SOAP_FMAC3 ns2__VoidService * SOAP_FMAC4 soap_in_ns2__VoidService(struct soap*, const char*, ns2__VoidService *, const char*);
SOAP_FMAC1 ns2__VoidService * SOAP_FMAC2 soap_instantiate_ns2__VoidService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VoidService * soap_new_ns2__VoidService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__VoidService(soap, n, NULL, NULL, NULL);
}

inline ns2__VoidService * soap_new_req_ns2__VoidService(
	struct soap *soap,
	const std::string& run)
{
	ns2__VoidService *_p = ::soap_new_ns2__VoidService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__VoidService::run = run;
	}
	return _p;
}

inline ns2__VoidService * soap_new_set_ns2__VoidService(
	struct soap *soap,
	std::string *voidRequestID,
	std::string *voidRequestToken,
	std::string *voidReason,
	const std::string& run)
{
	ns2__VoidService *_p = ::soap_new_ns2__VoidService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__VoidService::voidRequestID = voidRequestID;
		_p->ns2__VoidService::voidRequestToken = voidRequestToken;
		_p->ns2__VoidService::voidReason = voidReason;
		_p->ns2__VoidService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__VoidService(struct soap *soap, ns2__VoidService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VoidService", p->soap_type() == SOAP_TYPE_ns2__VoidService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__VoidService(struct soap *soap, const char *URL, ns2__VoidService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VoidService", p->soap_type() == SOAP_TYPE_ns2__VoidService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__VoidService(struct soap *soap, const char *URL, ns2__VoidService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VoidService", p->soap_type() == SOAP_TYPE_ns2__VoidService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__VoidService(struct soap *soap, const char *URL, ns2__VoidService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VoidService", p->soap_type() == SOAP_TYPE_ns2__VoidService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__VoidService * SOAP_FMAC4 soap_get_ns2__VoidService(struct soap*, ns2__VoidService *, const char*, const char*);

inline int soap_read_ns2__VoidService(struct soap *soap, ns2__VoidService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__VoidService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__VoidService(struct soap *soap, const char *URL, ns2__VoidService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__VoidService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__VoidService(struct soap *soap, ns2__VoidService *p)
{
	if (::soap_read_ns2__VoidService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalDoRefTransactionService_DEFINED
#define SOAP_TYPE_ns2__PayPalDoRefTransactionService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalDoRefTransactionService(struct soap*, const char*, int, const ns2__PayPalDoRefTransactionService *, const char*);
SOAP_FMAC3 ns2__PayPalDoRefTransactionService * SOAP_FMAC4 soap_in_ns2__PayPalDoRefTransactionService(struct soap*, const char*, ns2__PayPalDoRefTransactionService *, const char*);
SOAP_FMAC1 ns2__PayPalDoRefTransactionService * SOAP_FMAC2 soap_instantiate_ns2__PayPalDoRefTransactionService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalDoRefTransactionService * soap_new_ns2__PayPalDoRefTransactionService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalDoRefTransactionService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalDoRefTransactionService * soap_new_req_ns2__PayPalDoRefTransactionService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayPalDoRefTransactionService *_p = ::soap_new_ns2__PayPalDoRefTransactionService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalDoRefTransactionService::run = run;
	}
	return _p;
}

inline ns2__PayPalDoRefTransactionService * soap_new_set_ns2__PayPalDoRefTransactionService(
	struct soap *soap,
	std::string *paypalBillingAgreementId,
	std::string *paypalPaymentType,
	std::string *paypalReqconfirmshipping,
	std::string *paypalReturnFmfDetails,
	std::string *paypalSoftDescriptor,
	std::string *paypalShippingdiscount,
	std::string *paypalDesc,
	std::string *invoiceNumber,
	std::string *paypalEcNotifyUrl,
	const std::string& run)
{
	ns2__PayPalDoRefTransactionService *_p = ::soap_new_ns2__PayPalDoRefTransactionService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalDoRefTransactionService::paypalBillingAgreementId = paypalBillingAgreementId;
		_p->ns2__PayPalDoRefTransactionService::paypalPaymentType = paypalPaymentType;
		_p->ns2__PayPalDoRefTransactionService::paypalReqconfirmshipping = paypalReqconfirmshipping;
		_p->ns2__PayPalDoRefTransactionService::paypalReturnFmfDetails = paypalReturnFmfDetails;
		_p->ns2__PayPalDoRefTransactionService::paypalSoftDescriptor = paypalSoftDescriptor;
		_p->ns2__PayPalDoRefTransactionService::paypalShippingdiscount = paypalShippingdiscount;
		_p->ns2__PayPalDoRefTransactionService::paypalDesc = paypalDesc;
		_p->ns2__PayPalDoRefTransactionService::invoiceNumber = invoiceNumber;
		_p->ns2__PayPalDoRefTransactionService::paypalEcNotifyUrl = paypalEcNotifyUrl;
		_p->ns2__PayPalDoRefTransactionService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayPalDoRefTransactionService(struct soap *soap, ns2__PayPalDoRefTransactionService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalDoRefTransactionService", p->soap_type() == SOAP_TYPE_ns2__PayPalDoRefTransactionService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalDoRefTransactionService(struct soap *soap, const char *URL, ns2__PayPalDoRefTransactionService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalDoRefTransactionService", p->soap_type() == SOAP_TYPE_ns2__PayPalDoRefTransactionService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalDoRefTransactionService(struct soap *soap, const char *URL, ns2__PayPalDoRefTransactionService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalDoRefTransactionService", p->soap_type() == SOAP_TYPE_ns2__PayPalDoRefTransactionService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalDoRefTransactionService(struct soap *soap, const char *URL, ns2__PayPalDoRefTransactionService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalDoRefTransactionService", p->soap_type() == SOAP_TYPE_ns2__PayPalDoRefTransactionService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalDoRefTransactionService * SOAP_FMAC4 soap_get_ns2__PayPalDoRefTransactionService(struct soap*, ns2__PayPalDoRefTransactionService *, const char*, const char*);

inline int soap_read_ns2__PayPalDoRefTransactionService(struct soap *soap, ns2__PayPalDoRefTransactionService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalDoRefTransactionService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalDoRefTransactionService(struct soap *soap, const char *URL, ns2__PayPalDoRefTransactionService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalDoRefTransactionService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalDoRefTransactionService(struct soap *soap, ns2__PayPalDoRefTransactionService *p)
{
	if (::soap_read_ns2__PayPalDoRefTransactionService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalCreateAgreementService_DEFINED
#define SOAP_TYPE_ns2__PayPalCreateAgreementService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalCreateAgreementService(struct soap*, const char*, int, const ns2__PayPalCreateAgreementService *, const char*);
SOAP_FMAC3 ns2__PayPalCreateAgreementService * SOAP_FMAC4 soap_in_ns2__PayPalCreateAgreementService(struct soap*, const char*, ns2__PayPalCreateAgreementService *, const char*);
SOAP_FMAC1 ns2__PayPalCreateAgreementService * SOAP_FMAC2 soap_instantiate_ns2__PayPalCreateAgreementService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalCreateAgreementService * soap_new_ns2__PayPalCreateAgreementService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalCreateAgreementService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalCreateAgreementService * soap_new_req_ns2__PayPalCreateAgreementService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayPalCreateAgreementService *_p = ::soap_new_ns2__PayPalCreateAgreementService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalCreateAgreementService::run = run;
	}
	return _p;
}

inline ns2__PayPalCreateAgreementService * soap_new_set_ns2__PayPalCreateAgreementService(
	struct soap *soap,
	std::string *paypalToken,
	std::string *paypalEcSetRequestID,
	std::string *paypalEcSetRequestToken,
	const std::string& run)
{
	ns2__PayPalCreateAgreementService *_p = ::soap_new_ns2__PayPalCreateAgreementService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalCreateAgreementService::paypalToken = paypalToken;
		_p->ns2__PayPalCreateAgreementService::paypalEcSetRequestID = paypalEcSetRequestID;
		_p->ns2__PayPalCreateAgreementService::paypalEcSetRequestToken = paypalEcSetRequestToken;
		_p->ns2__PayPalCreateAgreementService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayPalCreateAgreementService(struct soap *soap, ns2__PayPalCreateAgreementService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalCreateAgreementService", p->soap_type() == SOAP_TYPE_ns2__PayPalCreateAgreementService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalCreateAgreementService(struct soap *soap, const char *URL, ns2__PayPalCreateAgreementService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalCreateAgreementService", p->soap_type() == SOAP_TYPE_ns2__PayPalCreateAgreementService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalCreateAgreementService(struct soap *soap, const char *URL, ns2__PayPalCreateAgreementService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalCreateAgreementService", p->soap_type() == SOAP_TYPE_ns2__PayPalCreateAgreementService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalCreateAgreementService(struct soap *soap, const char *URL, ns2__PayPalCreateAgreementService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalCreateAgreementService", p->soap_type() == SOAP_TYPE_ns2__PayPalCreateAgreementService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalCreateAgreementService * SOAP_FMAC4 soap_get_ns2__PayPalCreateAgreementService(struct soap*, ns2__PayPalCreateAgreementService *, const char*, const char*);

inline int soap_read_ns2__PayPalCreateAgreementService(struct soap *soap, ns2__PayPalCreateAgreementService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalCreateAgreementService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalCreateAgreementService(struct soap *soap, const char *URL, ns2__PayPalCreateAgreementService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalCreateAgreementService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalCreateAgreementService(struct soap *soap, ns2__PayPalCreateAgreementService *p)
{
	if (::soap_read_ns2__PayPalCreateAgreementService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalUpdateAgreementService_DEFINED
#define SOAP_TYPE_ns2__PayPalUpdateAgreementService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalUpdateAgreementService(struct soap*, const char*, int, const ns2__PayPalUpdateAgreementService *, const char*);
SOAP_FMAC3 ns2__PayPalUpdateAgreementService * SOAP_FMAC4 soap_in_ns2__PayPalUpdateAgreementService(struct soap*, const char*, ns2__PayPalUpdateAgreementService *, const char*);
SOAP_FMAC1 ns2__PayPalUpdateAgreementService * SOAP_FMAC2 soap_instantiate_ns2__PayPalUpdateAgreementService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalUpdateAgreementService * soap_new_ns2__PayPalUpdateAgreementService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalUpdateAgreementService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalUpdateAgreementService * soap_new_req_ns2__PayPalUpdateAgreementService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayPalUpdateAgreementService *_p = ::soap_new_ns2__PayPalUpdateAgreementService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalUpdateAgreementService::run = run;
	}
	return _p;
}

inline ns2__PayPalUpdateAgreementService * soap_new_set_ns2__PayPalUpdateAgreementService(
	struct soap *soap,
	std::string *paypalBillingAgreementId,
	std::string *paypalBillingAgreementStatus,
	std::string *paypalBillingAgreementDesc,
	std::string *paypalBillingAgreementCustom,
	const std::string& run)
{
	ns2__PayPalUpdateAgreementService *_p = ::soap_new_ns2__PayPalUpdateAgreementService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalUpdateAgreementService::paypalBillingAgreementId = paypalBillingAgreementId;
		_p->ns2__PayPalUpdateAgreementService::paypalBillingAgreementStatus = paypalBillingAgreementStatus;
		_p->ns2__PayPalUpdateAgreementService::paypalBillingAgreementDesc = paypalBillingAgreementDesc;
		_p->ns2__PayPalUpdateAgreementService::paypalBillingAgreementCustom = paypalBillingAgreementCustom;
		_p->ns2__PayPalUpdateAgreementService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayPalUpdateAgreementService(struct soap *soap, ns2__PayPalUpdateAgreementService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalUpdateAgreementService", p->soap_type() == SOAP_TYPE_ns2__PayPalUpdateAgreementService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalUpdateAgreementService(struct soap *soap, const char *URL, ns2__PayPalUpdateAgreementService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalUpdateAgreementService", p->soap_type() == SOAP_TYPE_ns2__PayPalUpdateAgreementService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalUpdateAgreementService(struct soap *soap, const char *URL, ns2__PayPalUpdateAgreementService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalUpdateAgreementService", p->soap_type() == SOAP_TYPE_ns2__PayPalUpdateAgreementService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalUpdateAgreementService(struct soap *soap, const char *URL, ns2__PayPalUpdateAgreementService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalUpdateAgreementService", p->soap_type() == SOAP_TYPE_ns2__PayPalUpdateAgreementService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalUpdateAgreementService * SOAP_FMAC4 soap_get_ns2__PayPalUpdateAgreementService(struct soap*, ns2__PayPalUpdateAgreementService *, const char*, const char*);

inline int soap_read_ns2__PayPalUpdateAgreementService(struct soap *soap, ns2__PayPalUpdateAgreementService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalUpdateAgreementService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalUpdateAgreementService(struct soap *soap, const char *URL, ns2__PayPalUpdateAgreementService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalUpdateAgreementService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalUpdateAgreementService(struct soap *soap, ns2__PayPalUpdateAgreementService *p)
{
	if (::soap_read_ns2__PayPalUpdateAgreementService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalAuthorizationService_DEFINED
#define SOAP_TYPE_ns2__PayPalAuthorizationService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalAuthorizationService(struct soap*, const char*, int, const ns2__PayPalAuthorizationService *, const char*);
SOAP_FMAC3 ns2__PayPalAuthorizationService * SOAP_FMAC4 soap_in_ns2__PayPalAuthorizationService(struct soap*, const char*, ns2__PayPalAuthorizationService *, const char*);
SOAP_FMAC1 ns2__PayPalAuthorizationService * SOAP_FMAC2 soap_instantiate_ns2__PayPalAuthorizationService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalAuthorizationService * soap_new_ns2__PayPalAuthorizationService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalAuthorizationService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalAuthorizationService * soap_new_req_ns2__PayPalAuthorizationService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayPalAuthorizationService *_p = ::soap_new_ns2__PayPalAuthorizationService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalAuthorizationService::run = run;
	}
	return _p;
}

inline ns2__PayPalAuthorizationService * soap_new_set_ns2__PayPalAuthorizationService(
	struct soap *soap,
	std::string *paypalOrderId,
	std::string *paypalEcOrderSetupRequestID,
	std::string *paypalEcOrderSetupRequestToken,
	std::string *paypalDoRefTransactionRequestID,
	std::string *paypalDoRefTransactionRequestToken,
	std::string *paypalCustomerEmail,
	const std::string& run)
{
	ns2__PayPalAuthorizationService *_p = ::soap_new_ns2__PayPalAuthorizationService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalAuthorizationService::paypalOrderId = paypalOrderId;
		_p->ns2__PayPalAuthorizationService::paypalEcOrderSetupRequestID = paypalEcOrderSetupRequestID;
		_p->ns2__PayPalAuthorizationService::paypalEcOrderSetupRequestToken = paypalEcOrderSetupRequestToken;
		_p->ns2__PayPalAuthorizationService::paypalDoRefTransactionRequestID = paypalDoRefTransactionRequestID;
		_p->ns2__PayPalAuthorizationService::paypalDoRefTransactionRequestToken = paypalDoRefTransactionRequestToken;
		_p->ns2__PayPalAuthorizationService::paypalCustomerEmail = paypalCustomerEmail;
		_p->ns2__PayPalAuthorizationService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayPalAuthorizationService(struct soap *soap, ns2__PayPalAuthorizationService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalAuthorizationService", p->soap_type() == SOAP_TYPE_ns2__PayPalAuthorizationService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalAuthorizationService(struct soap *soap, const char *URL, ns2__PayPalAuthorizationService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalAuthorizationService", p->soap_type() == SOAP_TYPE_ns2__PayPalAuthorizationService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalAuthorizationService(struct soap *soap, const char *URL, ns2__PayPalAuthorizationService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalAuthorizationService", p->soap_type() == SOAP_TYPE_ns2__PayPalAuthorizationService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalAuthorizationService(struct soap *soap, const char *URL, ns2__PayPalAuthorizationService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalAuthorizationService", p->soap_type() == SOAP_TYPE_ns2__PayPalAuthorizationService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalAuthorizationService * SOAP_FMAC4 soap_get_ns2__PayPalAuthorizationService(struct soap*, ns2__PayPalAuthorizationService *, const char*, const char*);

inline int soap_read_ns2__PayPalAuthorizationService(struct soap *soap, ns2__PayPalAuthorizationService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalAuthorizationService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalAuthorizationService(struct soap *soap, const char *URL, ns2__PayPalAuthorizationService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalAuthorizationService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalAuthorizationService(struct soap *soap, ns2__PayPalAuthorizationService *p)
{
	if (::soap_read_ns2__PayPalAuthorizationService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalEcOrderSetupService_DEFINED
#define SOAP_TYPE_ns2__PayPalEcOrderSetupService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalEcOrderSetupService(struct soap*, const char*, int, const ns2__PayPalEcOrderSetupService *, const char*);
SOAP_FMAC3 ns2__PayPalEcOrderSetupService * SOAP_FMAC4 soap_in_ns2__PayPalEcOrderSetupService(struct soap*, const char*, ns2__PayPalEcOrderSetupService *, const char*);
SOAP_FMAC1 ns2__PayPalEcOrderSetupService * SOAP_FMAC2 soap_instantiate_ns2__PayPalEcOrderSetupService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalEcOrderSetupService * soap_new_ns2__PayPalEcOrderSetupService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalEcOrderSetupService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalEcOrderSetupService * soap_new_req_ns2__PayPalEcOrderSetupService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayPalEcOrderSetupService *_p = ::soap_new_ns2__PayPalEcOrderSetupService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalEcOrderSetupService::run = run;
	}
	return _p;
}

inline ns2__PayPalEcOrderSetupService * soap_new_set_ns2__PayPalEcOrderSetupService(
	struct soap *soap,
	std::string *paypalToken,
	std::string *paypalPayerId,
	std::string *paypalCustomerEmail,
	std::string *paypalDesc,
	std::string *paypalEcSetRequestID,
	std::string *paypalEcSetRequestToken,
	std::string *promoCode0,
	std::string *invoiceNumber,
	const std::string& run)
{
	ns2__PayPalEcOrderSetupService *_p = ::soap_new_ns2__PayPalEcOrderSetupService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalEcOrderSetupService::paypalToken = paypalToken;
		_p->ns2__PayPalEcOrderSetupService::paypalPayerId = paypalPayerId;
		_p->ns2__PayPalEcOrderSetupService::paypalCustomerEmail = paypalCustomerEmail;
		_p->ns2__PayPalEcOrderSetupService::paypalDesc = paypalDesc;
		_p->ns2__PayPalEcOrderSetupService::paypalEcSetRequestID = paypalEcSetRequestID;
		_p->ns2__PayPalEcOrderSetupService::paypalEcSetRequestToken = paypalEcSetRequestToken;
		_p->ns2__PayPalEcOrderSetupService::promoCode0 = promoCode0;
		_p->ns2__PayPalEcOrderSetupService::invoiceNumber = invoiceNumber;
		_p->ns2__PayPalEcOrderSetupService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayPalEcOrderSetupService(struct soap *soap, ns2__PayPalEcOrderSetupService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcOrderSetupService", p->soap_type() == SOAP_TYPE_ns2__PayPalEcOrderSetupService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalEcOrderSetupService(struct soap *soap, const char *URL, ns2__PayPalEcOrderSetupService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcOrderSetupService", p->soap_type() == SOAP_TYPE_ns2__PayPalEcOrderSetupService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalEcOrderSetupService(struct soap *soap, const char *URL, ns2__PayPalEcOrderSetupService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcOrderSetupService", p->soap_type() == SOAP_TYPE_ns2__PayPalEcOrderSetupService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalEcOrderSetupService(struct soap *soap, const char *URL, ns2__PayPalEcOrderSetupService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcOrderSetupService", p->soap_type() == SOAP_TYPE_ns2__PayPalEcOrderSetupService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalEcOrderSetupService * SOAP_FMAC4 soap_get_ns2__PayPalEcOrderSetupService(struct soap*, ns2__PayPalEcOrderSetupService *, const char*, const char*);

inline int soap_read_ns2__PayPalEcOrderSetupService(struct soap *soap, ns2__PayPalEcOrderSetupService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalEcOrderSetupService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalEcOrderSetupService(struct soap *soap, const char *URL, ns2__PayPalEcOrderSetupService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalEcOrderSetupService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalEcOrderSetupService(struct soap *soap, ns2__PayPalEcOrderSetupService *p)
{
	if (::soap_read_ns2__PayPalEcOrderSetupService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalRefundService_DEFINED
#define SOAP_TYPE_ns2__PayPalRefundService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalRefundService(struct soap*, const char*, int, const ns2__PayPalRefundService *, const char*);
SOAP_FMAC3 ns2__PayPalRefundService * SOAP_FMAC4 soap_in_ns2__PayPalRefundService(struct soap*, const char*, ns2__PayPalRefundService *, const char*);
SOAP_FMAC1 ns2__PayPalRefundService * SOAP_FMAC2 soap_instantiate_ns2__PayPalRefundService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalRefundService * soap_new_ns2__PayPalRefundService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalRefundService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalRefundService * soap_new_req_ns2__PayPalRefundService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayPalRefundService *_p = ::soap_new_ns2__PayPalRefundService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalRefundService::run = run;
	}
	return _p;
}

inline ns2__PayPalRefundService * soap_new_set_ns2__PayPalRefundService(
	struct soap *soap,
	std::string *paypalDoCaptureRequestID,
	std::string *paypalDoCaptureRequestToken,
	std::string *paypalCaptureId,
	std::string *paypalNote,
	const std::string& run)
{
	ns2__PayPalRefundService *_p = ::soap_new_ns2__PayPalRefundService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalRefundService::paypalDoCaptureRequestID = paypalDoCaptureRequestID;
		_p->ns2__PayPalRefundService::paypalDoCaptureRequestToken = paypalDoCaptureRequestToken;
		_p->ns2__PayPalRefundService::paypalCaptureId = paypalCaptureId;
		_p->ns2__PayPalRefundService::paypalNote = paypalNote;
		_p->ns2__PayPalRefundService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayPalRefundService(struct soap *soap, ns2__PayPalRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalRefundService", p->soap_type() == SOAP_TYPE_ns2__PayPalRefundService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalRefundService(struct soap *soap, const char *URL, ns2__PayPalRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalRefundService", p->soap_type() == SOAP_TYPE_ns2__PayPalRefundService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalRefundService(struct soap *soap, const char *URL, ns2__PayPalRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalRefundService", p->soap_type() == SOAP_TYPE_ns2__PayPalRefundService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalRefundService(struct soap *soap, const char *URL, ns2__PayPalRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalRefundService", p->soap_type() == SOAP_TYPE_ns2__PayPalRefundService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalRefundService * SOAP_FMAC4 soap_get_ns2__PayPalRefundService(struct soap*, ns2__PayPalRefundService *, const char*, const char*);

inline int soap_read_ns2__PayPalRefundService(struct soap *soap, ns2__PayPalRefundService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalRefundService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalRefundService(struct soap *soap, const char *URL, ns2__PayPalRefundService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalRefundService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalRefundService(struct soap *soap, ns2__PayPalRefundService *p)
{
	if (::soap_read_ns2__PayPalRefundService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalAuthReversalService_DEFINED
#define SOAP_TYPE_ns2__PayPalAuthReversalService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalAuthReversalService(struct soap*, const char*, int, const ns2__PayPalAuthReversalService *, const char*);
SOAP_FMAC3 ns2__PayPalAuthReversalService * SOAP_FMAC4 soap_in_ns2__PayPalAuthReversalService(struct soap*, const char*, ns2__PayPalAuthReversalService *, const char*);
SOAP_FMAC1 ns2__PayPalAuthReversalService * SOAP_FMAC2 soap_instantiate_ns2__PayPalAuthReversalService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalAuthReversalService * soap_new_ns2__PayPalAuthReversalService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalAuthReversalService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalAuthReversalService * soap_new_req_ns2__PayPalAuthReversalService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayPalAuthReversalService *_p = ::soap_new_ns2__PayPalAuthReversalService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalAuthReversalService::run = run;
	}
	return _p;
}

inline ns2__PayPalAuthReversalService * soap_new_set_ns2__PayPalAuthReversalService(
	struct soap *soap,
	std::string *paypalAuthorizationId,
	std::string *paypalEcDoPaymentRequestID,
	std::string *paypalEcDoPaymentRequestToken,
	std::string *paypalAuthorizationRequestID,
	std::string *paypalAuthorizationRequestToken,
	std::string *paypalEcOrderSetupRequestID,
	std::string *paypalEcOrderSetupRequestToken,
	const std::string& run)
{
	ns2__PayPalAuthReversalService *_p = ::soap_new_ns2__PayPalAuthReversalService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalAuthReversalService::paypalAuthorizationId = paypalAuthorizationId;
		_p->ns2__PayPalAuthReversalService::paypalEcDoPaymentRequestID = paypalEcDoPaymentRequestID;
		_p->ns2__PayPalAuthReversalService::paypalEcDoPaymentRequestToken = paypalEcDoPaymentRequestToken;
		_p->ns2__PayPalAuthReversalService::paypalAuthorizationRequestID = paypalAuthorizationRequestID;
		_p->ns2__PayPalAuthReversalService::paypalAuthorizationRequestToken = paypalAuthorizationRequestToken;
		_p->ns2__PayPalAuthReversalService::paypalEcOrderSetupRequestID = paypalEcOrderSetupRequestID;
		_p->ns2__PayPalAuthReversalService::paypalEcOrderSetupRequestToken = paypalEcOrderSetupRequestToken;
		_p->ns2__PayPalAuthReversalService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayPalAuthReversalService(struct soap *soap, ns2__PayPalAuthReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalAuthReversalService", p->soap_type() == SOAP_TYPE_ns2__PayPalAuthReversalService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalAuthReversalService(struct soap *soap, const char *URL, ns2__PayPalAuthReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalAuthReversalService", p->soap_type() == SOAP_TYPE_ns2__PayPalAuthReversalService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalAuthReversalService(struct soap *soap, const char *URL, ns2__PayPalAuthReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalAuthReversalService", p->soap_type() == SOAP_TYPE_ns2__PayPalAuthReversalService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalAuthReversalService(struct soap *soap, const char *URL, ns2__PayPalAuthReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalAuthReversalService", p->soap_type() == SOAP_TYPE_ns2__PayPalAuthReversalService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalAuthReversalService * SOAP_FMAC4 soap_get_ns2__PayPalAuthReversalService(struct soap*, ns2__PayPalAuthReversalService *, const char*, const char*);

inline int soap_read_ns2__PayPalAuthReversalService(struct soap *soap, ns2__PayPalAuthReversalService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalAuthReversalService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalAuthReversalService(struct soap *soap, const char *URL, ns2__PayPalAuthReversalService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalAuthReversalService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalAuthReversalService(struct soap *soap, ns2__PayPalAuthReversalService *p)
{
	if (::soap_read_ns2__PayPalAuthReversalService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalDoCaptureService_DEFINED
#define SOAP_TYPE_ns2__PayPalDoCaptureService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalDoCaptureService(struct soap*, const char*, int, const ns2__PayPalDoCaptureService *, const char*);
SOAP_FMAC3 ns2__PayPalDoCaptureService * SOAP_FMAC4 soap_in_ns2__PayPalDoCaptureService(struct soap*, const char*, ns2__PayPalDoCaptureService *, const char*);
SOAP_FMAC1 ns2__PayPalDoCaptureService * SOAP_FMAC2 soap_instantiate_ns2__PayPalDoCaptureService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalDoCaptureService * soap_new_ns2__PayPalDoCaptureService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalDoCaptureService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalDoCaptureService * soap_new_req_ns2__PayPalDoCaptureService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayPalDoCaptureService *_p = ::soap_new_ns2__PayPalDoCaptureService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalDoCaptureService::run = run;
	}
	return _p;
}

inline ns2__PayPalDoCaptureService * soap_new_set_ns2__PayPalDoCaptureService(
	struct soap *soap,
	std::string *paypalAuthorizationId,
	std::string *completeType,
	std::string *paypalEcDoPaymentRequestID,
	std::string *paypalEcDoPaymentRequestToken,
	std::string *paypalAuthorizationRequestID,
	std::string *paypalAuthorizationRequestToken,
	std::string *invoiceNumber,
	const std::string& run)
{
	ns2__PayPalDoCaptureService *_p = ::soap_new_ns2__PayPalDoCaptureService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalDoCaptureService::paypalAuthorizationId = paypalAuthorizationId;
		_p->ns2__PayPalDoCaptureService::completeType = completeType;
		_p->ns2__PayPalDoCaptureService::paypalEcDoPaymentRequestID = paypalEcDoPaymentRequestID;
		_p->ns2__PayPalDoCaptureService::paypalEcDoPaymentRequestToken = paypalEcDoPaymentRequestToken;
		_p->ns2__PayPalDoCaptureService::paypalAuthorizationRequestID = paypalAuthorizationRequestID;
		_p->ns2__PayPalDoCaptureService::paypalAuthorizationRequestToken = paypalAuthorizationRequestToken;
		_p->ns2__PayPalDoCaptureService::invoiceNumber = invoiceNumber;
		_p->ns2__PayPalDoCaptureService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayPalDoCaptureService(struct soap *soap, ns2__PayPalDoCaptureService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalDoCaptureService", p->soap_type() == SOAP_TYPE_ns2__PayPalDoCaptureService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalDoCaptureService(struct soap *soap, const char *URL, ns2__PayPalDoCaptureService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalDoCaptureService", p->soap_type() == SOAP_TYPE_ns2__PayPalDoCaptureService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalDoCaptureService(struct soap *soap, const char *URL, ns2__PayPalDoCaptureService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalDoCaptureService", p->soap_type() == SOAP_TYPE_ns2__PayPalDoCaptureService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalDoCaptureService(struct soap *soap, const char *URL, ns2__PayPalDoCaptureService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalDoCaptureService", p->soap_type() == SOAP_TYPE_ns2__PayPalDoCaptureService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalDoCaptureService * SOAP_FMAC4 soap_get_ns2__PayPalDoCaptureService(struct soap*, ns2__PayPalDoCaptureService *, const char*, const char*);

inline int soap_read_ns2__PayPalDoCaptureService(struct soap *soap, ns2__PayPalDoCaptureService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalDoCaptureService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalDoCaptureService(struct soap *soap, const char *URL, ns2__PayPalDoCaptureService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalDoCaptureService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalDoCaptureService(struct soap *soap, ns2__PayPalDoCaptureService *p)
{
	if (::soap_read_ns2__PayPalDoCaptureService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalEcDoPaymentService_DEFINED
#define SOAP_TYPE_ns2__PayPalEcDoPaymentService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalEcDoPaymentService(struct soap*, const char*, int, const ns2__PayPalEcDoPaymentService *, const char*);
SOAP_FMAC3 ns2__PayPalEcDoPaymentService * SOAP_FMAC4 soap_in_ns2__PayPalEcDoPaymentService(struct soap*, const char*, ns2__PayPalEcDoPaymentService *, const char*);
SOAP_FMAC1 ns2__PayPalEcDoPaymentService * SOAP_FMAC2 soap_instantiate_ns2__PayPalEcDoPaymentService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalEcDoPaymentService * soap_new_ns2__PayPalEcDoPaymentService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalEcDoPaymentService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalEcDoPaymentService * soap_new_req_ns2__PayPalEcDoPaymentService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayPalEcDoPaymentService *_p = ::soap_new_ns2__PayPalEcDoPaymentService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalEcDoPaymentService::run = run;
	}
	return _p;
}

inline ns2__PayPalEcDoPaymentService * soap_new_set_ns2__PayPalEcDoPaymentService(
	struct soap *soap,
	std::string *paypalToken,
	std::string *paypalPayerId,
	std::string *paypalCustomerEmail,
	std::string *paypalDesc,
	std::string *paypalEcSetRequestID,
	std::string *paypalEcSetRequestToken,
	std::string *promoCode0,
	std::string *invoiceNumber,
	const std::string& run)
{
	ns2__PayPalEcDoPaymentService *_p = ::soap_new_ns2__PayPalEcDoPaymentService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalEcDoPaymentService::paypalToken = paypalToken;
		_p->ns2__PayPalEcDoPaymentService::paypalPayerId = paypalPayerId;
		_p->ns2__PayPalEcDoPaymentService::paypalCustomerEmail = paypalCustomerEmail;
		_p->ns2__PayPalEcDoPaymentService::paypalDesc = paypalDesc;
		_p->ns2__PayPalEcDoPaymentService::paypalEcSetRequestID = paypalEcSetRequestID;
		_p->ns2__PayPalEcDoPaymentService::paypalEcSetRequestToken = paypalEcSetRequestToken;
		_p->ns2__PayPalEcDoPaymentService::promoCode0 = promoCode0;
		_p->ns2__PayPalEcDoPaymentService::invoiceNumber = invoiceNumber;
		_p->ns2__PayPalEcDoPaymentService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayPalEcDoPaymentService(struct soap *soap, ns2__PayPalEcDoPaymentService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcDoPaymentService", p->soap_type() == SOAP_TYPE_ns2__PayPalEcDoPaymentService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalEcDoPaymentService(struct soap *soap, const char *URL, ns2__PayPalEcDoPaymentService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcDoPaymentService", p->soap_type() == SOAP_TYPE_ns2__PayPalEcDoPaymentService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalEcDoPaymentService(struct soap *soap, const char *URL, ns2__PayPalEcDoPaymentService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcDoPaymentService", p->soap_type() == SOAP_TYPE_ns2__PayPalEcDoPaymentService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalEcDoPaymentService(struct soap *soap, const char *URL, ns2__PayPalEcDoPaymentService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcDoPaymentService", p->soap_type() == SOAP_TYPE_ns2__PayPalEcDoPaymentService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalEcDoPaymentService * SOAP_FMAC4 soap_get_ns2__PayPalEcDoPaymentService(struct soap*, ns2__PayPalEcDoPaymentService *, const char*, const char*);

inline int soap_read_ns2__PayPalEcDoPaymentService(struct soap *soap, ns2__PayPalEcDoPaymentService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalEcDoPaymentService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalEcDoPaymentService(struct soap *soap, const char *URL, ns2__PayPalEcDoPaymentService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalEcDoPaymentService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalEcDoPaymentService(struct soap *soap, ns2__PayPalEcDoPaymentService *p)
{
	if (::soap_read_ns2__PayPalEcDoPaymentService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalEcGetDetailsService_DEFINED
#define SOAP_TYPE_ns2__PayPalEcGetDetailsService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalEcGetDetailsService(struct soap*, const char*, int, const ns2__PayPalEcGetDetailsService *, const char*);
SOAP_FMAC3 ns2__PayPalEcGetDetailsService * SOAP_FMAC4 soap_in_ns2__PayPalEcGetDetailsService(struct soap*, const char*, ns2__PayPalEcGetDetailsService *, const char*);
SOAP_FMAC1 ns2__PayPalEcGetDetailsService * SOAP_FMAC2 soap_instantiate_ns2__PayPalEcGetDetailsService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalEcGetDetailsService * soap_new_ns2__PayPalEcGetDetailsService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalEcGetDetailsService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalEcGetDetailsService * soap_new_req_ns2__PayPalEcGetDetailsService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayPalEcGetDetailsService *_p = ::soap_new_ns2__PayPalEcGetDetailsService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalEcGetDetailsService::run = run;
	}
	return _p;
}

inline ns2__PayPalEcGetDetailsService * soap_new_set_ns2__PayPalEcGetDetailsService(
	struct soap *soap,
	std::string *paypalToken,
	std::string *paypalEcSetRequestID,
	std::string *paypalEcSetRequestToken,
	const std::string& run)
{
	ns2__PayPalEcGetDetailsService *_p = ::soap_new_ns2__PayPalEcGetDetailsService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalEcGetDetailsService::paypalToken = paypalToken;
		_p->ns2__PayPalEcGetDetailsService::paypalEcSetRequestID = paypalEcSetRequestID;
		_p->ns2__PayPalEcGetDetailsService::paypalEcSetRequestToken = paypalEcSetRequestToken;
		_p->ns2__PayPalEcGetDetailsService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayPalEcGetDetailsService(struct soap *soap, ns2__PayPalEcGetDetailsService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcGetDetailsService", p->soap_type() == SOAP_TYPE_ns2__PayPalEcGetDetailsService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalEcGetDetailsService(struct soap *soap, const char *URL, ns2__PayPalEcGetDetailsService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcGetDetailsService", p->soap_type() == SOAP_TYPE_ns2__PayPalEcGetDetailsService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalEcGetDetailsService(struct soap *soap, const char *URL, ns2__PayPalEcGetDetailsService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcGetDetailsService", p->soap_type() == SOAP_TYPE_ns2__PayPalEcGetDetailsService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalEcGetDetailsService(struct soap *soap, const char *URL, ns2__PayPalEcGetDetailsService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcGetDetailsService", p->soap_type() == SOAP_TYPE_ns2__PayPalEcGetDetailsService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalEcGetDetailsService * SOAP_FMAC4 soap_get_ns2__PayPalEcGetDetailsService(struct soap*, ns2__PayPalEcGetDetailsService *, const char*, const char*);

inline int soap_read_ns2__PayPalEcGetDetailsService(struct soap *soap, ns2__PayPalEcGetDetailsService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalEcGetDetailsService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalEcGetDetailsService(struct soap *soap, const char *URL, ns2__PayPalEcGetDetailsService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalEcGetDetailsService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalEcGetDetailsService(struct soap *soap, ns2__PayPalEcGetDetailsService *p)
{
	if (::soap_read_ns2__PayPalEcGetDetailsService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalEcSetService_DEFINED
#define SOAP_TYPE_ns2__PayPalEcSetService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalEcSetService(struct soap*, const char*, int, const ns2__PayPalEcSetService *, const char*);
SOAP_FMAC3 ns2__PayPalEcSetService * SOAP_FMAC4 soap_in_ns2__PayPalEcSetService(struct soap*, const char*, ns2__PayPalEcSetService *, const char*);
SOAP_FMAC1 ns2__PayPalEcSetService * SOAP_FMAC2 soap_instantiate_ns2__PayPalEcSetService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalEcSetService * soap_new_ns2__PayPalEcSetService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalEcSetService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalEcSetService * soap_new_req_ns2__PayPalEcSetService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayPalEcSetService *_p = ::soap_new_ns2__PayPalEcSetService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalEcSetService::run = run;
	}
	return _p;
}

inline ns2__PayPalEcSetService * soap_new_set_ns2__PayPalEcSetService(
	struct soap *soap,
	std::string *paypalReturn,
	std::string *paypalCancelReturn,
	std::string *paypalMaxamt,
	std::string *paypalCustomerEmail,
	std::string *paypalDesc,
	std::string *paypalReqconfirmshipping,
	std::string *paypalNoshipping,
	std::string *paypalAddressOverride,
	std::string *paypalToken,
	std::string *paypalLc,
	std::string *paypalPagestyle,
	std::string *paypalHdrimg,
	std::string *paypalHdrbordercolor,
	std::string *paypalHdrbackcolor,
	std::string *paypalPayflowcolor,
	std::string *paypalEcSetRequestID,
	std::string *paypalEcSetRequestToken,
	std::string *promoCode0,
	std::string *requestBillingAddress,
	std::string *invoiceNumber,
	std::string *paypalBillingType,
	std::string *paypalBillingAgreementDesc,
	std::string *paypalPaymentType,
	std::string *paypalBillingAgreementCustom,
	std::string *paypalLogoimg,
	const std::string& run)
{
	ns2__PayPalEcSetService *_p = ::soap_new_ns2__PayPalEcSetService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalEcSetService::paypalReturn = paypalReturn;
		_p->ns2__PayPalEcSetService::paypalCancelReturn = paypalCancelReturn;
		_p->ns2__PayPalEcSetService::paypalMaxamt = paypalMaxamt;
		_p->ns2__PayPalEcSetService::paypalCustomerEmail = paypalCustomerEmail;
		_p->ns2__PayPalEcSetService::paypalDesc = paypalDesc;
		_p->ns2__PayPalEcSetService::paypalReqconfirmshipping = paypalReqconfirmshipping;
		_p->ns2__PayPalEcSetService::paypalNoshipping = paypalNoshipping;
		_p->ns2__PayPalEcSetService::paypalAddressOverride = paypalAddressOverride;
		_p->ns2__PayPalEcSetService::paypalToken = paypalToken;
		_p->ns2__PayPalEcSetService::paypalLc = paypalLc;
		_p->ns2__PayPalEcSetService::paypalPagestyle = paypalPagestyle;
		_p->ns2__PayPalEcSetService::paypalHdrimg = paypalHdrimg;
		_p->ns2__PayPalEcSetService::paypalHdrbordercolor = paypalHdrbordercolor;
		_p->ns2__PayPalEcSetService::paypalHdrbackcolor = paypalHdrbackcolor;
		_p->ns2__PayPalEcSetService::paypalPayflowcolor = paypalPayflowcolor;
		_p->ns2__PayPalEcSetService::paypalEcSetRequestID = paypalEcSetRequestID;
		_p->ns2__PayPalEcSetService::paypalEcSetRequestToken = paypalEcSetRequestToken;
		_p->ns2__PayPalEcSetService::promoCode0 = promoCode0;
		_p->ns2__PayPalEcSetService::requestBillingAddress = requestBillingAddress;
		_p->ns2__PayPalEcSetService::invoiceNumber = invoiceNumber;
		_p->ns2__PayPalEcSetService::paypalBillingType = paypalBillingType;
		_p->ns2__PayPalEcSetService::paypalBillingAgreementDesc = paypalBillingAgreementDesc;
		_p->ns2__PayPalEcSetService::paypalPaymentType = paypalPaymentType;
		_p->ns2__PayPalEcSetService::paypalBillingAgreementCustom = paypalBillingAgreementCustom;
		_p->ns2__PayPalEcSetService::paypalLogoimg = paypalLogoimg;
		_p->ns2__PayPalEcSetService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayPalEcSetService(struct soap *soap, ns2__PayPalEcSetService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcSetService", p->soap_type() == SOAP_TYPE_ns2__PayPalEcSetService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalEcSetService(struct soap *soap, const char *URL, ns2__PayPalEcSetService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcSetService", p->soap_type() == SOAP_TYPE_ns2__PayPalEcSetService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalEcSetService(struct soap *soap, const char *URL, ns2__PayPalEcSetService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcSetService", p->soap_type() == SOAP_TYPE_ns2__PayPalEcSetService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalEcSetService(struct soap *soap, const char *URL, ns2__PayPalEcSetService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalEcSetService", p->soap_type() == SOAP_TYPE_ns2__PayPalEcSetService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalEcSetService * SOAP_FMAC4 soap_get_ns2__PayPalEcSetService(struct soap*, ns2__PayPalEcSetService *, const char*, const char*);

inline int soap_read_ns2__PayPalEcSetService(struct soap *soap, ns2__PayPalEcSetService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalEcSetService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalEcSetService(struct soap *soap, const char *URL, ns2__PayPalEcSetService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalEcSetService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalEcSetService(struct soap *soap, ns2__PayPalEcSetService *p)
{
	if (::soap_read_ns2__PayPalEcSetService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalCreditService_DEFINED
#define SOAP_TYPE_ns2__PayPalCreditService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalCreditService(struct soap*, const char*, int, const ns2__PayPalCreditService *, const char*);
SOAP_FMAC3 ns2__PayPalCreditService * SOAP_FMAC4 soap_in_ns2__PayPalCreditService(struct soap*, const char*, ns2__PayPalCreditService *, const char*);
SOAP_FMAC1 ns2__PayPalCreditService * SOAP_FMAC2 soap_instantiate_ns2__PayPalCreditService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalCreditService * soap_new_ns2__PayPalCreditService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalCreditService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalCreditService * soap_new_req_ns2__PayPalCreditService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayPalCreditService *_p = ::soap_new_ns2__PayPalCreditService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalCreditService::run = run;
	}
	return _p;
}

inline ns2__PayPalCreditService * soap_new_set_ns2__PayPalCreditService(
	struct soap *soap,
	std::string *payPalPaymentRequestID,
	std::string *reconciliationID,
	std::string *payPalPaymentRequestToken,
	const std::string& run)
{
	ns2__PayPalCreditService *_p = ::soap_new_ns2__PayPalCreditService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalCreditService::payPalPaymentRequestID = payPalPaymentRequestID;
		_p->ns2__PayPalCreditService::reconciliationID = reconciliationID;
		_p->ns2__PayPalCreditService::payPalPaymentRequestToken = payPalPaymentRequestToken;
		_p->ns2__PayPalCreditService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayPalCreditService(struct soap *soap, ns2__PayPalCreditService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalCreditService", p->soap_type() == SOAP_TYPE_ns2__PayPalCreditService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalCreditService(struct soap *soap, const char *URL, ns2__PayPalCreditService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalCreditService", p->soap_type() == SOAP_TYPE_ns2__PayPalCreditService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalCreditService(struct soap *soap, const char *URL, ns2__PayPalCreditService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalCreditService", p->soap_type() == SOAP_TYPE_ns2__PayPalCreditService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalCreditService(struct soap *soap, const char *URL, ns2__PayPalCreditService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalCreditService", p->soap_type() == SOAP_TYPE_ns2__PayPalCreditService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalCreditService * SOAP_FMAC4 soap_get_ns2__PayPalCreditService(struct soap*, ns2__PayPalCreditService *, const char*, const char*);

inline int soap_read_ns2__PayPalCreditService(struct soap *soap, ns2__PayPalCreditService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalCreditService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalCreditService(struct soap *soap, const char *URL, ns2__PayPalCreditService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalCreditService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalCreditService(struct soap *soap, ns2__PayPalCreditService *p)
{
	if (::soap_read_ns2__PayPalCreditService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayPalPaymentService_DEFINED
#define SOAP_TYPE_ns2__PayPalPaymentService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayPalPaymentService(struct soap*, const char*, int, const ns2__PayPalPaymentService *, const char*);
SOAP_FMAC3 ns2__PayPalPaymentService * SOAP_FMAC4 soap_in_ns2__PayPalPaymentService(struct soap*, const char*, ns2__PayPalPaymentService *, const char*);
SOAP_FMAC1 ns2__PayPalPaymentService * SOAP_FMAC2 soap_instantiate_ns2__PayPalPaymentService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayPalPaymentService * soap_new_ns2__PayPalPaymentService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayPalPaymentService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayPalPaymentService * soap_new_req_ns2__PayPalPaymentService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayPalPaymentService *_p = ::soap_new_ns2__PayPalPaymentService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalPaymentService::run = run;
	}
	return _p;
}

inline ns2__PayPalPaymentService * soap_new_set_ns2__PayPalPaymentService(
	struct soap *soap,
	std::string *cancelURL,
	std::string *successURL,
	std::string *reconciliationID,
	const std::string& run)
{
	ns2__PayPalPaymentService *_p = ::soap_new_ns2__PayPalPaymentService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayPalPaymentService::cancelURL = cancelURL;
		_p->ns2__PayPalPaymentService::successURL = successURL;
		_p->ns2__PayPalPaymentService::reconciliationID = reconciliationID;
		_p->ns2__PayPalPaymentService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayPalPaymentService(struct soap *soap, ns2__PayPalPaymentService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPaymentService", p->soap_type() == SOAP_TYPE_ns2__PayPalPaymentService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayPalPaymentService(struct soap *soap, const char *URL, ns2__PayPalPaymentService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPaymentService", p->soap_type() == SOAP_TYPE_ns2__PayPalPaymentService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayPalPaymentService(struct soap *soap, const char *URL, ns2__PayPalPaymentService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPaymentService", p->soap_type() == SOAP_TYPE_ns2__PayPalPaymentService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayPalPaymentService(struct soap *soap, const char *URL, ns2__PayPalPaymentService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayPalPaymentService", p->soap_type() == SOAP_TYPE_ns2__PayPalPaymentService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayPalPaymentService * SOAP_FMAC4 soap_get_ns2__PayPalPaymentService(struct soap*, ns2__PayPalPaymentService *, const char*, const char*);

inline int soap_read_ns2__PayPalPaymentService(struct soap *soap, ns2__PayPalPaymentService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayPalPaymentService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayPalPaymentService(struct soap *soap, const char *URL, ns2__PayPalPaymentService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayPalPaymentService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayPalPaymentService(struct soap *soap, ns2__PayPalPaymentService *p)
{
	if (::soap_read_ns2__PayPalPaymentService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PaySubscriptionDeleteService_DEFINED
#define SOAP_TYPE_ns2__PaySubscriptionDeleteService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PaySubscriptionDeleteService(struct soap*, const char*, int, const ns2__PaySubscriptionDeleteService *, const char*);
SOAP_FMAC3 ns2__PaySubscriptionDeleteService * SOAP_FMAC4 soap_in_ns2__PaySubscriptionDeleteService(struct soap*, const char*, ns2__PaySubscriptionDeleteService *, const char*);
SOAP_FMAC1 ns2__PaySubscriptionDeleteService * SOAP_FMAC2 soap_instantiate_ns2__PaySubscriptionDeleteService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PaySubscriptionDeleteService * soap_new_ns2__PaySubscriptionDeleteService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PaySubscriptionDeleteService(soap, n, NULL, NULL, NULL);
}

inline ns2__PaySubscriptionDeleteService * soap_new_req_ns2__PaySubscriptionDeleteService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PaySubscriptionDeleteService *_p = ::soap_new_ns2__PaySubscriptionDeleteService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionDeleteService::run = run;
	}
	return _p;
}

inline ns2__PaySubscriptionDeleteService * soap_new_set_ns2__PaySubscriptionDeleteService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PaySubscriptionDeleteService *_p = ::soap_new_ns2__PaySubscriptionDeleteService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionDeleteService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PaySubscriptionDeleteService(struct soap *soap, ns2__PaySubscriptionDeleteService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionDeleteService", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionDeleteService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PaySubscriptionDeleteService(struct soap *soap, const char *URL, ns2__PaySubscriptionDeleteService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionDeleteService", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionDeleteService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PaySubscriptionDeleteService(struct soap *soap, const char *URL, ns2__PaySubscriptionDeleteService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionDeleteService", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionDeleteService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PaySubscriptionDeleteService(struct soap *soap, const char *URL, ns2__PaySubscriptionDeleteService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionDeleteService", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionDeleteService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PaySubscriptionDeleteService * SOAP_FMAC4 soap_get_ns2__PaySubscriptionDeleteService(struct soap*, ns2__PaySubscriptionDeleteService *, const char*, const char*);

inline int soap_read_ns2__PaySubscriptionDeleteService(struct soap *soap, ns2__PaySubscriptionDeleteService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PaySubscriptionDeleteService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PaySubscriptionDeleteService(struct soap *soap, const char *URL, ns2__PaySubscriptionDeleteService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PaySubscriptionDeleteService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PaySubscriptionDeleteService(struct soap *soap, ns2__PaySubscriptionDeleteService *p)
{
	if (::soap_read_ns2__PaySubscriptionDeleteService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PaySubscriptionRetrieveService_DEFINED
#define SOAP_TYPE_ns2__PaySubscriptionRetrieveService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PaySubscriptionRetrieveService(struct soap*, const char*, int, const ns2__PaySubscriptionRetrieveService *, const char*);
SOAP_FMAC3 ns2__PaySubscriptionRetrieveService * SOAP_FMAC4 soap_in_ns2__PaySubscriptionRetrieveService(struct soap*, const char*, ns2__PaySubscriptionRetrieveService *, const char*);
SOAP_FMAC1 ns2__PaySubscriptionRetrieveService * SOAP_FMAC2 soap_instantiate_ns2__PaySubscriptionRetrieveService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PaySubscriptionRetrieveService * soap_new_ns2__PaySubscriptionRetrieveService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PaySubscriptionRetrieveService(soap, n, NULL, NULL, NULL);
}

inline ns2__PaySubscriptionRetrieveService * soap_new_req_ns2__PaySubscriptionRetrieveService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PaySubscriptionRetrieveService *_p = ::soap_new_ns2__PaySubscriptionRetrieveService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionRetrieveService::run = run;
	}
	return _p;
}

inline ns2__PaySubscriptionRetrieveService * soap_new_set_ns2__PaySubscriptionRetrieveService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PaySubscriptionRetrieveService *_p = ::soap_new_ns2__PaySubscriptionRetrieveService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionRetrieveService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PaySubscriptionRetrieveService(struct soap *soap, ns2__PaySubscriptionRetrieveService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionRetrieveService", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionRetrieveService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PaySubscriptionRetrieveService(struct soap *soap, const char *URL, ns2__PaySubscriptionRetrieveService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionRetrieveService", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionRetrieveService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PaySubscriptionRetrieveService(struct soap *soap, const char *URL, ns2__PaySubscriptionRetrieveService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionRetrieveService", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionRetrieveService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PaySubscriptionRetrieveService(struct soap *soap, const char *URL, ns2__PaySubscriptionRetrieveService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionRetrieveService", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionRetrieveService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PaySubscriptionRetrieveService * SOAP_FMAC4 soap_get_ns2__PaySubscriptionRetrieveService(struct soap*, ns2__PaySubscriptionRetrieveService *, const char*, const char*);

inline int soap_read_ns2__PaySubscriptionRetrieveService(struct soap *soap, ns2__PaySubscriptionRetrieveService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PaySubscriptionRetrieveService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PaySubscriptionRetrieveService(struct soap *soap, const char *URL, ns2__PaySubscriptionRetrieveService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PaySubscriptionRetrieveService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PaySubscriptionRetrieveService(struct soap *soap, ns2__PaySubscriptionRetrieveService *p)
{
	if (::soap_read_ns2__PaySubscriptionRetrieveService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PaySubscriptionEventUpdateService_DEFINED
#define SOAP_TYPE_ns2__PaySubscriptionEventUpdateService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PaySubscriptionEventUpdateService(struct soap*, const char*, int, const ns2__PaySubscriptionEventUpdateService *, const char*);
SOAP_FMAC3 ns2__PaySubscriptionEventUpdateService * SOAP_FMAC4 soap_in_ns2__PaySubscriptionEventUpdateService(struct soap*, const char*, ns2__PaySubscriptionEventUpdateService *, const char*);
SOAP_FMAC1 ns2__PaySubscriptionEventUpdateService * SOAP_FMAC2 soap_instantiate_ns2__PaySubscriptionEventUpdateService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PaySubscriptionEventUpdateService * soap_new_ns2__PaySubscriptionEventUpdateService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PaySubscriptionEventUpdateService(soap, n, NULL, NULL, NULL);
}

inline ns2__PaySubscriptionEventUpdateService * soap_new_req_ns2__PaySubscriptionEventUpdateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PaySubscriptionEventUpdateService *_p = ::soap_new_ns2__PaySubscriptionEventUpdateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionEventUpdateService::run = run;
	}
	return _p;
}

inline ns2__PaySubscriptionEventUpdateService * soap_new_set_ns2__PaySubscriptionEventUpdateService(
	struct soap *soap,
	std::string *action,
	const std::string& run)
{
	ns2__PaySubscriptionEventUpdateService *_p = ::soap_new_ns2__PaySubscriptionEventUpdateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionEventUpdateService::action = action;
		_p->ns2__PaySubscriptionEventUpdateService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PaySubscriptionEventUpdateService(struct soap *soap, ns2__PaySubscriptionEventUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionEventUpdateService", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionEventUpdateService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PaySubscriptionEventUpdateService(struct soap *soap, const char *URL, ns2__PaySubscriptionEventUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionEventUpdateService", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionEventUpdateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PaySubscriptionEventUpdateService(struct soap *soap, const char *URL, ns2__PaySubscriptionEventUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionEventUpdateService", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionEventUpdateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PaySubscriptionEventUpdateService(struct soap *soap, const char *URL, ns2__PaySubscriptionEventUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionEventUpdateService", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionEventUpdateService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PaySubscriptionEventUpdateService * SOAP_FMAC4 soap_get_ns2__PaySubscriptionEventUpdateService(struct soap*, ns2__PaySubscriptionEventUpdateService *, const char*, const char*);

inline int soap_read_ns2__PaySubscriptionEventUpdateService(struct soap *soap, ns2__PaySubscriptionEventUpdateService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PaySubscriptionEventUpdateService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PaySubscriptionEventUpdateService(struct soap *soap, const char *URL, ns2__PaySubscriptionEventUpdateService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PaySubscriptionEventUpdateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PaySubscriptionEventUpdateService(struct soap *soap, ns2__PaySubscriptionEventUpdateService *p)
{
	if (::soap_read_ns2__PaySubscriptionEventUpdateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PaySubscriptionUpdateService_DEFINED
#define SOAP_TYPE_ns2__PaySubscriptionUpdateService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PaySubscriptionUpdateService(struct soap*, const char*, int, const ns2__PaySubscriptionUpdateService *, const char*);
SOAP_FMAC3 ns2__PaySubscriptionUpdateService * SOAP_FMAC4 soap_in_ns2__PaySubscriptionUpdateService(struct soap*, const char*, ns2__PaySubscriptionUpdateService *, const char*);
SOAP_FMAC1 ns2__PaySubscriptionUpdateService * SOAP_FMAC2 soap_instantiate_ns2__PaySubscriptionUpdateService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PaySubscriptionUpdateService * soap_new_ns2__PaySubscriptionUpdateService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PaySubscriptionUpdateService(soap, n, NULL, NULL, NULL);
}

inline ns2__PaySubscriptionUpdateService * soap_new_req_ns2__PaySubscriptionUpdateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PaySubscriptionUpdateService *_p = ::soap_new_ns2__PaySubscriptionUpdateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionUpdateService::run = run;
	}
	return _p;
}

inline ns2__PaySubscriptionUpdateService * soap_new_set_ns2__PaySubscriptionUpdateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PaySubscriptionUpdateService *_p = ::soap_new_ns2__PaySubscriptionUpdateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionUpdateService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PaySubscriptionUpdateService(struct soap *soap, ns2__PaySubscriptionUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionUpdateService", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionUpdateService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PaySubscriptionUpdateService(struct soap *soap, const char *URL, ns2__PaySubscriptionUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionUpdateService", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionUpdateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PaySubscriptionUpdateService(struct soap *soap, const char *URL, ns2__PaySubscriptionUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionUpdateService", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionUpdateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PaySubscriptionUpdateService(struct soap *soap, const char *URL, ns2__PaySubscriptionUpdateService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionUpdateService", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionUpdateService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PaySubscriptionUpdateService * SOAP_FMAC4 soap_get_ns2__PaySubscriptionUpdateService(struct soap*, ns2__PaySubscriptionUpdateService *, const char*, const char*);

inline int soap_read_ns2__PaySubscriptionUpdateService(struct soap *soap, ns2__PaySubscriptionUpdateService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PaySubscriptionUpdateService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PaySubscriptionUpdateService(struct soap *soap, const char *URL, ns2__PaySubscriptionUpdateService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PaySubscriptionUpdateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PaySubscriptionUpdateService(struct soap *soap, ns2__PaySubscriptionUpdateService *p)
{
	if (::soap_read_ns2__PaySubscriptionUpdateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PaySubscriptionCreateService_DEFINED
#define SOAP_TYPE_ns2__PaySubscriptionCreateService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PaySubscriptionCreateService(struct soap*, const char*, int, const ns2__PaySubscriptionCreateService *, const char*);
SOAP_FMAC3 ns2__PaySubscriptionCreateService * SOAP_FMAC4 soap_in_ns2__PaySubscriptionCreateService(struct soap*, const char*, ns2__PaySubscriptionCreateService *, const char*);
SOAP_FMAC1 ns2__PaySubscriptionCreateService * SOAP_FMAC2 soap_instantiate_ns2__PaySubscriptionCreateService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PaySubscriptionCreateService * soap_new_ns2__PaySubscriptionCreateService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PaySubscriptionCreateService(soap, n, NULL, NULL, NULL);
}

inline ns2__PaySubscriptionCreateService * soap_new_req_ns2__PaySubscriptionCreateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PaySubscriptionCreateService *_p = ::soap_new_ns2__PaySubscriptionCreateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionCreateService::run = run;
	}
	return _p;
}

inline ns2__PaySubscriptionCreateService * soap_new_set_ns2__PaySubscriptionCreateService(
	struct soap *soap,
	std::string *paymentRequestID,
	std::string *paymentRequestToken,
	std::string *disableAutoAuth,
	const std::string& run)
{
	ns2__PaySubscriptionCreateService *_p = ::soap_new_ns2__PaySubscriptionCreateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PaySubscriptionCreateService::paymentRequestID = paymentRequestID;
		_p->ns2__PaySubscriptionCreateService::paymentRequestToken = paymentRequestToken;
		_p->ns2__PaySubscriptionCreateService::disableAutoAuth = disableAutoAuth;
		_p->ns2__PaySubscriptionCreateService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PaySubscriptionCreateService(struct soap *soap, ns2__PaySubscriptionCreateService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionCreateService", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionCreateService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PaySubscriptionCreateService(struct soap *soap, const char *URL, ns2__PaySubscriptionCreateService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionCreateService", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionCreateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PaySubscriptionCreateService(struct soap *soap, const char *URL, ns2__PaySubscriptionCreateService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionCreateService", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionCreateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PaySubscriptionCreateService(struct soap *soap, const char *URL, ns2__PaySubscriptionCreateService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PaySubscriptionCreateService", p->soap_type() == SOAP_TYPE_ns2__PaySubscriptionCreateService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PaySubscriptionCreateService * SOAP_FMAC4 soap_get_ns2__PaySubscriptionCreateService(struct soap*, ns2__PaySubscriptionCreateService *, const char*, const char*);

inline int soap_read_ns2__PaySubscriptionCreateService(struct soap *soap, ns2__PaySubscriptionCreateService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PaySubscriptionCreateService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PaySubscriptionCreateService(struct soap *soap, const char *URL, ns2__PaySubscriptionCreateService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PaySubscriptionCreateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PaySubscriptionCreateService(struct soap *soap, ns2__PaySubscriptionCreateService *p)
{
	if (::soap_read_ns2__PaySubscriptionCreateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DeviceFingerprintData_DEFINED
#define SOAP_TYPE_ns2__DeviceFingerprintData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DeviceFingerprintData(struct soap*, const char*, int, const ns2__DeviceFingerprintData *, const char*);
SOAP_FMAC3 ns2__DeviceFingerprintData * SOAP_FMAC4 soap_in_ns2__DeviceFingerprintData(struct soap*, const char*, ns2__DeviceFingerprintData *, const char*);
SOAP_FMAC1 ns2__DeviceFingerprintData * SOAP_FMAC2 soap_instantiate_ns2__DeviceFingerprintData(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DeviceFingerprintData * soap_new_ns2__DeviceFingerprintData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DeviceFingerprintData(soap, n, NULL, NULL, NULL);
}

inline ns2__DeviceFingerprintData * soap_new_req_ns2__DeviceFingerprintData(
	struct soap *soap,
	const std::string& id)
{
	ns2__DeviceFingerprintData *_p = ::soap_new_ns2__DeviceFingerprintData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DeviceFingerprintData::id = id;
	}
	return _p;
}

inline ns2__DeviceFingerprintData * soap_new_set_ns2__DeviceFingerprintData(
	struct soap *soap,
	std::string *data,
	std::string *provider,
	const std::string& id)
{
	ns2__DeviceFingerprintData *_p = ::soap_new_ns2__DeviceFingerprintData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DeviceFingerprintData::data = data;
		_p->ns2__DeviceFingerprintData::provider = provider;
		_p->ns2__DeviceFingerprintData::id = id;
	}
	return _p;
}

inline int soap_write_ns2__DeviceFingerprintData(struct soap *soap, ns2__DeviceFingerprintData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DeviceFingerprintData", p->soap_type() == SOAP_TYPE_ns2__DeviceFingerprintData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DeviceFingerprintData(struct soap *soap, const char *URL, ns2__DeviceFingerprintData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DeviceFingerprintData", p->soap_type() == SOAP_TYPE_ns2__DeviceFingerprintData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DeviceFingerprintData(struct soap *soap, const char *URL, ns2__DeviceFingerprintData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DeviceFingerprintData", p->soap_type() == SOAP_TYPE_ns2__DeviceFingerprintData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DeviceFingerprintData(struct soap *soap, const char *URL, ns2__DeviceFingerprintData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DeviceFingerprintData", p->soap_type() == SOAP_TYPE_ns2__DeviceFingerprintData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DeviceFingerprintData * SOAP_FMAC4 soap_get_ns2__DeviceFingerprintData(struct soap*, ns2__DeviceFingerprintData *, const char*, const char*);

inline int soap_read_ns2__DeviceFingerprintData(struct soap *soap, ns2__DeviceFingerprintData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DeviceFingerprintData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DeviceFingerprintData(struct soap *soap, const char *URL, ns2__DeviceFingerprintData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DeviceFingerprintData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DeviceFingerprintData(struct soap *soap, ns2__DeviceFingerprintData *p)
{
	if (::soap_read_ns2__DeviceFingerprintData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DirectDebitValidateService_DEFINED
#define SOAP_TYPE_ns2__DirectDebitValidateService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DirectDebitValidateService(struct soap*, const char*, int, const ns2__DirectDebitValidateService *, const char*);
SOAP_FMAC3 ns2__DirectDebitValidateService * SOAP_FMAC4 soap_in_ns2__DirectDebitValidateService(struct soap*, const char*, ns2__DirectDebitValidateService *, const char*);
SOAP_FMAC1 ns2__DirectDebitValidateService * SOAP_FMAC2 soap_instantiate_ns2__DirectDebitValidateService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DirectDebitValidateService * soap_new_ns2__DirectDebitValidateService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DirectDebitValidateService(soap, n, NULL, NULL, NULL);
}

inline ns2__DirectDebitValidateService * soap_new_req_ns2__DirectDebitValidateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__DirectDebitValidateService *_p = ::soap_new_ns2__DirectDebitValidateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DirectDebitValidateService::run = run;
	}
	return _p;
}

inline ns2__DirectDebitValidateService * soap_new_set_ns2__DirectDebitValidateService(
	struct soap *soap,
	std::string *directDebitValidateText,
	const std::string& run)
{
	ns2__DirectDebitValidateService *_p = ::soap_new_ns2__DirectDebitValidateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DirectDebitValidateService::directDebitValidateText = directDebitValidateText;
		_p->ns2__DirectDebitValidateService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__DirectDebitValidateService(struct soap *soap, ns2__DirectDebitValidateService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitValidateService", p->soap_type() == SOAP_TYPE_ns2__DirectDebitValidateService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DirectDebitValidateService(struct soap *soap, const char *URL, ns2__DirectDebitValidateService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitValidateService", p->soap_type() == SOAP_TYPE_ns2__DirectDebitValidateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DirectDebitValidateService(struct soap *soap, const char *URL, ns2__DirectDebitValidateService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitValidateService", p->soap_type() == SOAP_TYPE_ns2__DirectDebitValidateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DirectDebitValidateService(struct soap *soap, const char *URL, ns2__DirectDebitValidateService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitValidateService", p->soap_type() == SOAP_TYPE_ns2__DirectDebitValidateService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DirectDebitValidateService * SOAP_FMAC4 soap_get_ns2__DirectDebitValidateService(struct soap*, ns2__DirectDebitValidateService *, const char*, const char*);

inline int soap_read_ns2__DirectDebitValidateService(struct soap *soap, ns2__DirectDebitValidateService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DirectDebitValidateService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DirectDebitValidateService(struct soap *soap, const char *URL, ns2__DirectDebitValidateService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DirectDebitValidateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DirectDebitValidateService(struct soap *soap, ns2__DirectDebitValidateService *p)
{
	if (::soap_read_ns2__DirectDebitValidateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DirectDebitRefundService_DEFINED
#define SOAP_TYPE_ns2__DirectDebitRefundService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DirectDebitRefundService(struct soap*, const char*, int, const ns2__DirectDebitRefundService *, const char*);
SOAP_FMAC3 ns2__DirectDebitRefundService * SOAP_FMAC4 soap_in_ns2__DirectDebitRefundService(struct soap*, const char*, ns2__DirectDebitRefundService *, const char*);
SOAP_FMAC1 ns2__DirectDebitRefundService * SOAP_FMAC2 soap_instantiate_ns2__DirectDebitRefundService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DirectDebitRefundService * soap_new_ns2__DirectDebitRefundService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DirectDebitRefundService(soap, n, NULL, NULL, NULL);
}

inline ns2__DirectDebitRefundService * soap_new_req_ns2__DirectDebitRefundService(
	struct soap *soap,
	const std::string& run)
{
	ns2__DirectDebitRefundService *_p = ::soap_new_ns2__DirectDebitRefundService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DirectDebitRefundService::run = run;
	}
	return _p;
}

inline ns2__DirectDebitRefundService * soap_new_set_ns2__DirectDebitRefundService(
	struct soap *soap,
	std::string *directDebitRequestID,
	std::string *reconciliationID,
	std::string *directDebitRequestToken,
	std::string *directDebitType,
	std::string *recurringType,
	std::string *mandateID,
	std::string *mandateAuthenticationDate,
	const std::string& run)
{
	ns2__DirectDebitRefundService *_p = ::soap_new_ns2__DirectDebitRefundService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DirectDebitRefundService::directDebitRequestID = directDebitRequestID;
		_p->ns2__DirectDebitRefundService::reconciliationID = reconciliationID;
		_p->ns2__DirectDebitRefundService::directDebitRequestToken = directDebitRequestToken;
		_p->ns2__DirectDebitRefundService::directDebitType = directDebitType;
		_p->ns2__DirectDebitRefundService::recurringType = recurringType;
		_p->ns2__DirectDebitRefundService::mandateID = mandateID;
		_p->ns2__DirectDebitRefundService::mandateAuthenticationDate = mandateAuthenticationDate;
		_p->ns2__DirectDebitRefundService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__DirectDebitRefundService(struct soap *soap, ns2__DirectDebitRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitRefundService", p->soap_type() == SOAP_TYPE_ns2__DirectDebitRefundService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DirectDebitRefundService(struct soap *soap, const char *URL, ns2__DirectDebitRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitRefundService", p->soap_type() == SOAP_TYPE_ns2__DirectDebitRefundService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DirectDebitRefundService(struct soap *soap, const char *URL, ns2__DirectDebitRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitRefundService", p->soap_type() == SOAP_TYPE_ns2__DirectDebitRefundService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DirectDebitRefundService(struct soap *soap, const char *URL, ns2__DirectDebitRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitRefundService", p->soap_type() == SOAP_TYPE_ns2__DirectDebitRefundService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DirectDebitRefundService * SOAP_FMAC4 soap_get_ns2__DirectDebitRefundService(struct soap*, ns2__DirectDebitRefundService *, const char*, const char*);

inline int soap_read_ns2__DirectDebitRefundService(struct soap *soap, ns2__DirectDebitRefundService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DirectDebitRefundService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DirectDebitRefundService(struct soap *soap, const char *URL, ns2__DirectDebitRefundService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DirectDebitRefundService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DirectDebitRefundService(struct soap *soap, ns2__DirectDebitRefundService *p)
{
	if (::soap_read_ns2__DirectDebitRefundService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DirectDebitService_DEFINED
#define SOAP_TYPE_ns2__DirectDebitService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DirectDebitService(struct soap*, const char*, int, const ns2__DirectDebitService *, const char*);
SOAP_FMAC3 ns2__DirectDebitService * SOAP_FMAC4 soap_in_ns2__DirectDebitService(struct soap*, const char*, ns2__DirectDebitService *, const char*);
SOAP_FMAC1 ns2__DirectDebitService * SOAP_FMAC2 soap_instantiate_ns2__DirectDebitService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DirectDebitService * soap_new_ns2__DirectDebitService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DirectDebitService(soap, n, NULL, NULL, NULL);
}

inline ns2__DirectDebitService * soap_new_req_ns2__DirectDebitService(
	struct soap *soap,
	const std::string& run)
{
	ns2__DirectDebitService *_p = ::soap_new_ns2__DirectDebitService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DirectDebitService::run = run;
	}
	return _p;
}

inline ns2__DirectDebitService * soap_new_set_ns2__DirectDebitService(
	struct soap *soap,
	std::string *dateCollect,
	std::string *directDebitText,
	std::string *authorizationID,
	std::string *transactionType,
	std::string *directDebitType,
	std::string *validateRequestID,
	std::string *recurringType,
	std::string *mandateID,
	std::string *validateRequestToken,
	std::string *reconciliationID,
	std::string *mandateAuthenticationDate,
	const std::string& run)
{
	ns2__DirectDebitService *_p = ::soap_new_ns2__DirectDebitService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DirectDebitService::dateCollect = dateCollect;
		_p->ns2__DirectDebitService::directDebitText = directDebitText;
		_p->ns2__DirectDebitService::authorizationID = authorizationID;
		_p->ns2__DirectDebitService::transactionType = transactionType;
		_p->ns2__DirectDebitService::directDebitType = directDebitType;
		_p->ns2__DirectDebitService::validateRequestID = validateRequestID;
		_p->ns2__DirectDebitService::recurringType = recurringType;
		_p->ns2__DirectDebitService::mandateID = mandateID;
		_p->ns2__DirectDebitService::validateRequestToken = validateRequestToken;
		_p->ns2__DirectDebitService::reconciliationID = reconciliationID;
		_p->ns2__DirectDebitService::mandateAuthenticationDate = mandateAuthenticationDate;
		_p->ns2__DirectDebitService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__DirectDebitService(struct soap *soap, ns2__DirectDebitService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitService", p->soap_type() == SOAP_TYPE_ns2__DirectDebitService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DirectDebitService(struct soap *soap, const char *URL, ns2__DirectDebitService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitService", p->soap_type() == SOAP_TYPE_ns2__DirectDebitService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DirectDebitService(struct soap *soap, const char *URL, ns2__DirectDebitService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitService", p->soap_type() == SOAP_TYPE_ns2__DirectDebitService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DirectDebitService(struct soap *soap, const char *URL, ns2__DirectDebitService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitService", p->soap_type() == SOAP_TYPE_ns2__DirectDebitService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DirectDebitService * SOAP_FMAC4 soap_get_ns2__DirectDebitService(struct soap*, ns2__DirectDebitService *, const char*, const char*);

inline int soap_read_ns2__DirectDebitService(struct soap *soap, ns2__DirectDebitService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DirectDebitService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DirectDebitService(struct soap *soap, const char *URL, ns2__DirectDebitService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DirectDebitService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DirectDebitService(struct soap *soap, ns2__DirectDebitService *p)
{
	if (::soap_read_ns2__DirectDebitService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DirectDebitMandateService_DEFINED
#define SOAP_TYPE_ns2__DirectDebitMandateService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DirectDebitMandateService(struct soap*, const char*, int, const ns2__DirectDebitMandateService *, const char*);
SOAP_FMAC3 ns2__DirectDebitMandateService * SOAP_FMAC4 soap_in_ns2__DirectDebitMandateService(struct soap*, const char*, ns2__DirectDebitMandateService *, const char*);
SOAP_FMAC1 ns2__DirectDebitMandateService * SOAP_FMAC2 soap_instantiate_ns2__DirectDebitMandateService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DirectDebitMandateService * soap_new_ns2__DirectDebitMandateService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DirectDebitMandateService(soap, n, NULL, NULL, NULL);
}

inline ns2__DirectDebitMandateService * soap_new_req_ns2__DirectDebitMandateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__DirectDebitMandateService *_p = ::soap_new_ns2__DirectDebitMandateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DirectDebitMandateService::run = run;
	}
	return _p;
}

inline ns2__DirectDebitMandateService * soap_new_set_ns2__DirectDebitMandateService(
	struct soap *soap,
	std::string *mandateDescriptor,
	std::string *firstDebitDate,
	const std::string& run)
{
	ns2__DirectDebitMandateService *_p = ::soap_new_ns2__DirectDebitMandateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DirectDebitMandateService::mandateDescriptor = mandateDescriptor;
		_p->ns2__DirectDebitMandateService::firstDebitDate = firstDebitDate;
		_p->ns2__DirectDebitMandateService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__DirectDebitMandateService(struct soap *soap, ns2__DirectDebitMandateService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitMandateService", p->soap_type() == SOAP_TYPE_ns2__DirectDebitMandateService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DirectDebitMandateService(struct soap *soap, const char *URL, ns2__DirectDebitMandateService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitMandateService", p->soap_type() == SOAP_TYPE_ns2__DirectDebitMandateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DirectDebitMandateService(struct soap *soap, const char *URL, ns2__DirectDebitMandateService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitMandateService", p->soap_type() == SOAP_TYPE_ns2__DirectDebitMandateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DirectDebitMandateService(struct soap *soap, const char *URL, ns2__DirectDebitMandateService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DirectDebitMandateService", p->soap_type() == SOAP_TYPE_ns2__DirectDebitMandateService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DirectDebitMandateService * SOAP_FMAC4 soap_get_ns2__DirectDebitMandateService(struct soap*, ns2__DirectDebitMandateService *, const char*, const char*);

inline int soap_read_ns2__DirectDebitMandateService(struct soap *soap, ns2__DirectDebitMandateService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DirectDebitMandateService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DirectDebitMandateService(struct soap *soap, const char *URL, ns2__DirectDebitMandateService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DirectDebitMandateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DirectDebitMandateService(struct soap *soap, ns2__DirectDebitMandateService *p)
{
	if (::soap_read_ns2__DirectDebitMandateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__BankTransferRealTimeService_DEFINED
#define SOAP_TYPE_ns2__BankTransferRealTimeService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BankTransferRealTimeService(struct soap*, const char*, int, const ns2__BankTransferRealTimeService *, const char*);
SOAP_FMAC3 ns2__BankTransferRealTimeService * SOAP_FMAC4 soap_in_ns2__BankTransferRealTimeService(struct soap*, const char*, ns2__BankTransferRealTimeService *, const char*);
SOAP_FMAC1 ns2__BankTransferRealTimeService * SOAP_FMAC2 soap_instantiate_ns2__BankTransferRealTimeService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BankTransferRealTimeService * soap_new_ns2__BankTransferRealTimeService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__BankTransferRealTimeService(soap, n, NULL, NULL, NULL);
}

inline ns2__BankTransferRealTimeService * soap_new_req_ns2__BankTransferRealTimeService(
	struct soap *soap,
	const std::string& run)
{
	ns2__BankTransferRealTimeService *_p = ::soap_new_ns2__BankTransferRealTimeService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BankTransferRealTimeService::run = run;
	}
	return _p;
}

inline ns2__BankTransferRealTimeService * soap_new_set_ns2__BankTransferRealTimeService(
	struct soap *soap,
	std::string *bankTransferRealTimeType,
	const std::string& run)
{
	ns2__BankTransferRealTimeService *_p = ::soap_new_ns2__BankTransferRealTimeService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BankTransferRealTimeService::bankTransferRealTimeType = bankTransferRealTimeType;
		_p->ns2__BankTransferRealTimeService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__BankTransferRealTimeService(struct soap *soap, ns2__BankTransferRealTimeService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferRealTimeService", p->soap_type() == SOAP_TYPE_ns2__BankTransferRealTimeService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__BankTransferRealTimeService(struct soap *soap, const char *URL, ns2__BankTransferRealTimeService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferRealTimeService", p->soap_type() == SOAP_TYPE_ns2__BankTransferRealTimeService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__BankTransferRealTimeService(struct soap *soap, const char *URL, ns2__BankTransferRealTimeService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferRealTimeService", p->soap_type() == SOAP_TYPE_ns2__BankTransferRealTimeService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__BankTransferRealTimeService(struct soap *soap, const char *URL, ns2__BankTransferRealTimeService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferRealTimeService", p->soap_type() == SOAP_TYPE_ns2__BankTransferRealTimeService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__BankTransferRealTimeService * SOAP_FMAC4 soap_get_ns2__BankTransferRealTimeService(struct soap*, ns2__BankTransferRealTimeService *, const char*, const char*);

inline int soap_read_ns2__BankTransferRealTimeService(struct soap *soap, ns2__BankTransferRealTimeService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__BankTransferRealTimeService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__BankTransferRealTimeService(struct soap *soap, const char *URL, ns2__BankTransferRealTimeService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__BankTransferRealTimeService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__BankTransferRealTimeService(struct soap *soap, ns2__BankTransferRealTimeService *p)
{
	if (::soap_read_ns2__BankTransferRealTimeService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__BankTransferRefundService_DEFINED
#define SOAP_TYPE_ns2__BankTransferRefundService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BankTransferRefundService(struct soap*, const char*, int, const ns2__BankTransferRefundService *, const char*);
SOAP_FMAC3 ns2__BankTransferRefundService * SOAP_FMAC4 soap_in_ns2__BankTransferRefundService(struct soap*, const char*, ns2__BankTransferRefundService *, const char*);
SOAP_FMAC1 ns2__BankTransferRefundService * SOAP_FMAC2 soap_instantiate_ns2__BankTransferRefundService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BankTransferRefundService * soap_new_ns2__BankTransferRefundService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__BankTransferRefundService(soap, n, NULL, NULL, NULL);
}

inline ns2__BankTransferRefundService * soap_new_req_ns2__BankTransferRefundService(
	struct soap *soap,
	const std::string& run)
{
	ns2__BankTransferRefundService *_p = ::soap_new_ns2__BankTransferRefundService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BankTransferRefundService::run = run;
	}
	return _p;
}

inline ns2__BankTransferRefundService * soap_new_set_ns2__BankTransferRefundService(
	struct soap *soap,
	std::string *bankTransferRequestID,
	std::string *bankTransferRealTimeRequestID,
	std::string *reconciliationID,
	std::string *bankTransferRealTimeReconciliationID,
	std::string *bankTransferRequestToken,
	std::string *bankTransferRealTimeRequestToken,
	const std::string& run)
{
	ns2__BankTransferRefundService *_p = ::soap_new_ns2__BankTransferRefundService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BankTransferRefundService::bankTransferRequestID = bankTransferRequestID;
		_p->ns2__BankTransferRefundService::bankTransferRealTimeRequestID = bankTransferRealTimeRequestID;
		_p->ns2__BankTransferRefundService::reconciliationID = reconciliationID;
		_p->ns2__BankTransferRefundService::bankTransferRealTimeReconciliationID = bankTransferRealTimeReconciliationID;
		_p->ns2__BankTransferRefundService::bankTransferRequestToken = bankTransferRequestToken;
		_p->ns2__BankTransferRefundService::bankTransferRealTimeRequestToken = bankTransferRealTimeRequestToken;
		_p->ns2__BankTransferRefundService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__BankTransferRefundService(struct soap *soap, ns2__BankTransferRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferRefundService", p->soap_type() == SOAP_TYPE_ns2__BankTransferRefundService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__BankTransferRefundService(struct soap *soap, const char *URL, ns2__BankTransferRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferRefundService", p->soap_type() == SOAP_TYPE_ns2__BankTransferRefundService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__BankTransferRefundService(struct soap *soap, const char *URL, ns2__BankTransferRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferRefundService", p->soap_type() == SOAP_TYPE_ns2__BankTransferRefundService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__BankTransferRefundService(struct soap *soap, const char *URL, ns2__BankTransferRefundService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferRefundService", p->soap_type() == SOAP_TYPE_ns2__BankTransferRefundService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__BankTransferRefundService * SOAP_FMAC4 soap_get_ns2__BankTransferRefundService(struct soap*, ns2__BankTransferRefundService *, const char*, const char*);

inline int soap_read_ns2__BankTransferRefundService(struct soap *soap, ns2__BankTransferRefundService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__BankTransferRefundService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__BankTransferRefundService(struct soap *soap, const char *URL, ns2__BankTransferRefundService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__BankTransferRefundService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__BankTransferRefundService(struct soap *soap, ns2__BankTransferRefundService *p)
{
	if (::soap_read_ns2__BankTransferRefundService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__BankTransferService_DEFINED
#define SOAP_TYPE_ns2__BankTransferService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BankTransferService(struct soap*, const char*, int, const ns2__BankTransferService *, const char*);
SOAP_FMAC3 ns2__BankTransferService * SOAP_FMAC4 soap_in_ns2__BankTransferService(struct soap*, const char*, ns2__BankTransferService *, const char*);
SOAP_FMAC1 ns2__BankTransferService * SOAP_FMAC2 soap_instantiate_ns2__BankTransferService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BankTransferService * soap_new_ns2__BankTransferService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__BankTransferService(soap, n, NULL, NULL, NULL);
}

inline ns2__BankTransferService * soap_new_req_ns2__BankTransferService(
	struct soap *soap,
	const std::string& run)
{
	ns2__BankTransferService *_p = ::soap_new_ns2__BankTransferService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BankTransferService::run = run;
	}
	return _p;
}

inline ns2__BankTransferService * soap_new_set_ns2__BankTransferService(
	struct soap *soap,
	const std::string& run)
{
	ns2__BankTransferService *_p = ::soap_new_ns2__BankTransferService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BankTransferService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__BankTransferService(struct soap *soap, ns2__BankTransferService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferService", p->soap_type() == SOAP_TYPE_ns2__BankTransferService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__BankTransferService(struct soap *soap, const char *URL, ns2__BankTransferService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferService", p->soap_type() == SOAP_TYPE_ns2__BankTransferService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__BankTransferService(struct soap *soap, const char *URL, ns2__BankTransferService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferService", p->soap_type() == SOAP_TYPE_ns2__BankTransferService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__BankTransferService(struct soap *soap, const char *URL, ns2__BankTransferService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BankTransferService", p->soap_type() == SOAP_TYPE_ns2__BankTransferService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__BankTransferService * SOAP_FMAC4 soap_get_ns2__BankTransferService(struct soap*, ns2__BankTransferService *, const char*, const char*);

inline int soap_read_ns2__BankTransferService(struct soap *soap, ns2__BankTransferService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__BankTransferService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__BankTransferService(struct soap *soap, const char *URL, ns2__BankTransferService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__BankTransferService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__BankTransferService(struct soap *soap, ns2__BankTransferService *p)
{
	if (::soap_read_ns2__BankTransferService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__FXRatesService_DEFINED
#define SOAP_TYPE_ns2__FXRatesService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FXRatesService(struct soap*, const char*, int, const ns2__FXRatesService *, const char*);
SOAP_FMAC3 ns2__FXRatesService * SOAP_FMAC4 soap_in_ns2__FXRatesService(struct soap*, const char*, ns2__FXRatesService *, const char*);
SOAP_FMAC1 ns2__FXRatesService * SOAP_FMAC2 soap_instantiate_ns2__FXRatesService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FXRatesService * soap_new_ns2__FXRatesService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__FXRatesService(soap, n, NULL, NULL, NULL);
}

inline ns2__FXRatesService * soap_new_req_ns2__FXRatesService(
	struct soap *soap,
	const std::string& run)
{
	ns2__FXRatesService *_p = ::soap_new_ns2__FXRatesService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__FXRatesService::run = run;
	}
	return _p;
}

inline ns2__FXRatesService * soap_new_set_ns2__FXRatesService(
	struct soap *soap,
	const std::string& run)
{
	ns2__FXRatesService *_p = ::soap_new_ns2__FXRatesService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__FXRatesService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__FXRatesService(struct soap *soap, ns2__FXRatesService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FXRatesService", p->soap_type() == SOAP_TYPE_ns2__FXRatesService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__FXRatesService(struct soap *soap, const char *URL, ns2__FXRatesService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FXRatesService", p->soap_type() == SOAP_TYPE_ns2__FXRatesService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__FXRatesService(struct soap *soap, const char *URL, ns2__FXRatesService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FXRatesService", p->soap_type() == SOAP_TYPE_ns2__FXRatesService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__FXRatesService(struct soap *soap, const char *URL, ns2__FXRatesService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FXRatesService", p->soap_type() == SOAP_TYPE_ns2__FXRatesService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__FXRatesService * SOAP_FMAC4 soap_get_ns2__FXRatesService(struct soap*, ns2__FXRatesService *, const char*, const char*);

inline int soap_read_ns2__FXRatesService(struct soap *soap, ns2__FXRatesService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__FXRatesService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__FXRatesService(struct soap *soap, const char *URL, ns2__FXRatesService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__FXRatesService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__FXRatesService(struct soap *soap, ns2__FXRatesService *p)
{
	if (::soap_read_ns2__FXRatesService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ExportService_DEFINED
#define SOAP_TYPE_ns2__ExportService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ExportService(struct soap*, const char*, int, const ns2__ExportService *, const char*);
SOAP_FMAC3 ns2__ExportService * SOAP_FMAC4 soap_in_ns2__ExportService(struct soap*, const char*, ns2__ExportService *, const char*);
SOAP_FMAC1 ns2__ExportService * SOAP_FMAC2 soap_instantiate_ns2__ExportService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ExportService * soap_new_ns2__ExportService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ExportService(soap, n, NULL, NULL, NULL);
}

inline ns2__ExportService * soap_new_req_ns2__ExportService(
	struct soap *soap,
	const std::string& run)
{
	ns2__ExportService *_p = ::soap_new_ns2__ExportService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ExportService::run = run;
	}
	return _p;
}

inline ns2__ExportService * soap_new_set_ns2__ExportService(
	struct soap *soap,
	std::string *addressOperator,
	std::string *addressWeight,
	std::string *companyWeight,
	std::string *nameWeight,
	std::string *sanctionsLists,
	const std::string& run)
{
	ns2__ExportService *_p = ::soap_new_ns2__ExportService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ExportService::addressOperator = addressOperator;
		_p->ns2__ExportService::addressWeight = addressWeight;
		_p->ns2__ExportService::companyWeight = companyWeight;
		_p->ns2__ExportService::nameWeight = nameWeight;
		_p->ns2__ExportService::sanctionsLists = sanctionsLists;
		_p->ns2__ExportService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__ExportService(struct soap *soap, ns2__ExportService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ExportService", p->soap_type() == SOAP_TYPE_ns2__ExportService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ExportService(struct soap *soap, const char *URL, ns2__ExportService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ExportService", p->soap_type() == SOAP_TYPE_ns2__ExportService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ExportService(struct soap *soap, const char *URL, ns2__ExportService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ExportService", p->soap_type() == SOAP_TYPE_ns2__ExportService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ExportService(struct soap *soap, const char *URL, ns2__ExportService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ExportService", p->soap_type() == SOAP_TYPE_ns2__ExportService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ExportService * SOAP_FMAC4 soap_get_ns2__ExportService(struct soap*, ns2__ExportService *, const char*, const char*);

inline int soap_read_ns2__ExportService(struct soap *soap, ns2__ExportService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ExportService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ExportService(struct soap *soap, const char *URL, ns2__ExportService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ExportService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ExportService(struct soap *soap, ns2__ExportService *p)
{
	if (::soap_read_ns2__ExportService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DAVService_DEFINED
#define SOAP_TYPE_ns2__DAVService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DAVService(struct soap*, const char*, int, const ns2__DAVService *, const char*);
SOAP_FMAC3 ns2__DAVService * SOAP_FMAC4 soap_in_ns2__DAVService(struct soap*, const char*, ns2__DAVService *, const char*);
SOAP_FMAC1 ns2__DAVService * SOAP_FMAC2 soap_instantiate_ns2__DAVService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DAVService * soap_new_ns2__DAVService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DAVService(soap, n, NULL, NULL, NULL);
}

inline ns2__DAVService * soap_new_req_ns2__DAVService(
	struct soap *soap,
	const std::string& run)
{
	ns2__DAVService *_p = ::soap_new_ns2__DAVService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DAVService::run = run;
	}
	return _p;
}

inline ns2__DAVService * soap_new_set_ns2__DAVService(
	struct soap *soap,
	const std::string& run)
{
	ns2__DAVService *_p = ::soap_new_ns2__DAVService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DAVService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__DAVService(struct soap *soap, ns2__DAVService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DAVService", p->soap_type() == SOAP_TYPE_ns2__DAVService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DAVService(struct soap *soap, const char *URL, ns2__DAVService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DAVService", p->soap_type() == SOAP_TYPE_ns2__DAVService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DAVService(struct soap *soap, const char *URL, ns2__DAVService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DAVService", p->soap_type() == SOAP_TYPE_ns2__DAVService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DAVService(struct soap *soap, const char *URL, ns2__DAVService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DAVService", p->soap_type() == SOAP_TYPE_ns2__DAVService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DAVService * SOAP_FMAC4 soap_get_ns2__DAVService(struct soap*, ns2__DAVService *, const char*, const char*);

inline int soap_read_ns2__DAVService(struct soap *soap, ns2__DAVService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DAVService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DAVService(struct soap *soap, const char *URL, ns2__DAVService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DAVService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DAVService(struct soap *soap, ns2__DAVService *p)
{
	if (::soap_read_ns2__DAVService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__AFSService_DEFINED
#define SOAP_TYPE_ns2__AFSService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AFSService(struct soap*, const char*, int, const ns2__AFSService *, const char*);
SOAP_FMAC3 ns2__AFSService * SOAP_FMAC4 soap_in_ns2__AFSService(struct soap*, const char*, ns2__AFSService *, const char*);
SOAP_FMAC1 ns2__AFSService * SOAP_FMAC2 soap_instantiate_ns2__AFSService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AFSService * soap_new_ns2__AFSService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__AFSService(soap, n, NULL, NULL, NULL);
}

inline ns2__AFSService * soap_new_req_ns2__AFSService(
	struct soap *soap,
	const std::string& run)
{
	ns2__AFSService *_p = ::soap_new_ns2__AFSService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AFSService::run = run;
	}
	return _p;
}

inline ns2__AFSService * soap_new_set_ns2__AFSService(
	struct soap *soap,
	std::string *avsCode,
	std::string *cvCode,
	std::string *disableAVSScoring,
	std::string *customRiskModel,
	const std::string& run)
{
	ns2__AFSService *_p = ::soap_new_ns2__AFSService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AFSService::avsCode = avsCode;
		_p->ns2__AFSService::cvCode = cvCode;
		_p->ns2__AFSService::disableAVSScoring = disableAVSScoring;
		_p->ns2__AFSService::customRiskModel = customRiskModel;
		_p->ns2__AFSService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__AFSService(struct soap *soap, ns2__AFSService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AFSService", p->soap_type() == SOAP_TYPE_ns2__AFSService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__AFSService(struct soap *soap, const char *URL, ns2__AFSService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AFSService", p->soap_type() == SOAP_TYPE_ns2__AFSService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__AFSService(struct soap *soap, const char *URL, ns2__AFSService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AFSService", p->soap_type() == SOAP_TYPE_ns2__AFSService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__AFSService(struct soap *soap, const char *URL, ns2__AFSService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AFSService", p->soap_type() == SOAP_TYPE_ns2__AFSService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__AFSService * SOAP_FMAC4 soap_get_ns2__AFSService(struct soap*, ns2__AFSService *, const char*, const char*);

inline int soap_read_ns2__AFSService(struct soap *soap, ns2__AFSService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__AFSService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__AFSService(struct soap *soap, const char *URL, ns2__AFSService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__AFSService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__AFSService(struct soap *soap, ns2__AFSService *p)
{
	if (::soap_read_ns2__AFSService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__DMEService_DEFINED
#define SOAP_TYPE_ns2__DMEService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DMEService(struct soap*, const char*, int, const ns2__DMEService *, const char*);
SOAP_FMAC3 ns2__DMEService * SOAP_FMAC4 soap_in_ns2__DMEService(struct soap*, const char*, ns2__DMEService *, const char*);
SOAP_FMAC1 ns2__DMEService * SOAP_FMAC2 soap_instantiate_ns2__DMEService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DMEService * soap_new_ns2__DMEService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DMEService(soap, n, NULL, NULL, NULL);
}

inline ns2__DMEService * soap_new_req_ns2__DMEService(
	struct soap *soap,
	const std::string& run)
{
	ns2__DMEService *_p = ::soap_new_ns2__DMEService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DMEService::run = run;
	}
	return _p;
}

inline ns2__DMEService * soap_new_set_ns2__DMEService(
	struct soap *soap,
	std::string *eventType,
	std::string *eventPolicy,
	const std::string& run)
{
	ns2__DMEService *_p = ::soap_new_ns2__DMEService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DMEService::eventType = eventType;
		_p->ns2__DMEService::eventPolicy = eventPolicy;
		_p->ns2__DMEService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__DMEService(struct soap *soap, ns2__DMEService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DMEService", p->soap_type() == SOAP_TYPE_ns2__DMEService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DMEService(struct soap *soap, const char *URL, ns2__DMEService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DMEService", p->soap_type() == SOAP_TYPE_ns2__DMEService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__DMEService(struct soap *soap, const char *URL, ns2__DMEService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DMEService", p->soap_type() == SOAP_TYPE_ns2__DMEService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DMEService(struct soap *soap, const char *URL, ns2__DMEService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DMEService", p->soap_type() == SOAP_TYPE_ns2__DMEService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DMEService * SOAP_FMAC4 soap_get_ns2__DMEService(struct soap*, ns2__DMEService *, const char*, const char*);

inline int soap_read_ns2__DMEService(struct soap *soap, ns2__DMEService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__DMEService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DMEService(struct soap *soap, const char *URL, ns2__DMEService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__DMEService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__DMEService(struct soap *soap, ns2__DMEService *p)
{
	if (::soap_read_ns2__DMEService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__TaxService_DEFINED
#define SOAP_TYPE_ns2__TaxService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TaxService(struct soap*, const char*, int, const ns2__TaxService *, const char*);
SOAP_FMAC3 ns2__TaxService * SOAP_FMAC4 soap_in_ns2__TaxService(struct soap*, const char*, ns2__TaxService *, const char*);
SOAP_FMAC1 ns2__TaxService * SOAP_FMAC2 soap_instantiate_ns2__TaxService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TaxService * soap_new_ns2__TaxService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__TaxService(soap, n, NULL, NULL, NULL);
}

inline ns2__TaxService * soap_new_req_ns2__TaxService(
	struct soap *soap,
	const std::string& run)
{
	ns2__TaxService *_p = ::soap_new_ns2__TaxService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__TaxService::run = run;
	}
	return _p;
}

inline ns2__TaxService * soap_new_set_ns2__TaxService(
	struct soap *soap,
	std::string *nexus,
	std::string *noNexus,
	std::string *orderAcceptanceCity,
	std::string *orderAcceptanceCounty,
	std::string *orderAcceptanceCountry,
	std::string *orderAcceptanceState,
	std::string *orderAcceptancePostalCode,
	std::string *orderOriginCity,
	std::string *orderOriginCounty,
	std::string *orderOriginCountry,
	std::string *orderOriginState,
	std::string *orderOriginPostalCode,
	std::string *sellerRegistration,
	std::string *sellerRegistration0,
	std::string *sellerRegistration1,
	std::string *sellerRegistration2,
	std::string *sellerRegistration3,
	std::string *sellerRegistration4,
	std::string *sellerRegistration5,
	std::string *sellerRegistration6,
	std::string *sellerRegistration7,
	std::string *sellerRegistration8,
	std::string *sellerRegistration9,
	std::string *buyerRegistration,
	std::string *middlemanRegistration,
	std::string *pointOfTitleTransfer,
	std::string *commitIndicator,
	std::string *refundIndicator,
	std::string *dateOverrideReason,
	std::string *reportingDate,
	const std::string& run)
{
	ns2__TaxService *_p = ::soap_new_ns2__TaxService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__TaxService::nexus = nexus;
		_p->ns2__TaxService::noNexus = noNexus;
		_p->ns2__TaxService::orderAcceptanceCity = orderAcceptanceCity;
		_p->ns2__TaxService::orderAcceptanceCounty = orderAcceptanceCounty;
		_p->ns2__TaxService::orderAcceptanceCountry = orderAcceptanceCountry;
		_p->ns2__TaxService::orderAcceptanceState = orderAcceptanceState;
		_p->ns2__TaxService::orderAcceptancePostalCode = orderAcceptancePostalCode;
		_p->ns2__TaxService::orderOriginCity = orderOriginCity;
		_p->ns2__TaxService::orderOriginCounty = orderOriginCounty;
		_p->ns2__TaxService::orderOriginCountry = orderOriginCountry;
		_p->ns2__TaxService::orderOriginState = orderOriginState;
		_p->ns2__TaxService::orderOriginPostalCode = orderOriginPostalCode;
		_p->ns2__TaxService::sellerRegistration = sellerRegistration;
		_p->ns2__TaxService::sellerRegistration0 = sellerRegistration0;
		_p->ns2__TaxService::sellerRegistration1 = sellerRegistration1;
		_p->ns2__TaxService::sellerRegistration2 = sellerRegistration2;
		_p->ns2__TaxService::sellerRegistration3 = sellerRegistration3;
		_p->ns2__TaxService::sellerRegistration4 = sellerRegistration4;
		_p->ns2__TaxService::sellerRegistration5 = sellerRegistration5;
		_p->ns2__TaxService::sellerRegistration6 = sellerRegistration6;
		_p->ns2__TaxService::sellerRegistration7 = sellerRegistration7;
		_p->ns2__TaxService::sellerRegistration8 = sellerRegistration8;
		_p->ns2__TaxService::sellerRegistration9 = sellerRegistration9;
		_p->ns2__TaxService::buyerRegistration = buyerRegistration;
		_p->ns2__TaxService::middlemanRegistration = middlemanRegistration;
		_p->ns2__TaxService::pointOfTitleTransfer = pointOfTitleTransfer;
		_p->ns2__TaxService::commitIndicator = commitIndicator;
		_p->ns2__TaxService::refundIndicator = refundIndicator;
		_p->ns2__TaxService::dateOverrideReason = dateOverrideReason;
		_p->ns2__TaxService::reportingDate = reportingDate;
		_p->ns2__TaxService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__TaxService(struct soap *soap, ns2__TaxService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TaxService", p->soap_type() == SOAP_TYPE_ns2__TaxService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__TaxService(struct soap *soap, const char *URL, ns2__TaxService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TaxService", p->soap_type() == SOAP_TYPE_ns2__TaxService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__TaxService(struct soap *soap, const char *URL, ns2__TaxService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TaxService", p->soap_type() == SOAP_TYPE_ns2__TaxService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__TaxService(struct soap *soap, const char *URL, ns2__TaxService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TaxService", p->soap_type() == SOAP_TYPE_ns2__TaxService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__TaxService * SOAP_FMAC4 soap_get_ns2__TaxService(struct soap*, ns2__TaxService *, const char*, const char*);

inline int soap_read_ns2__TaxService(struct soap *soap, ns2__TaxService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__TaxService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__TaxService(struct soap *soap, const char *URL, ns2__TaxService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__TaxService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__TaxService(struct soap *soap, ns2__TaxService *p)
{
	if (::soap_read_ns2__TaxService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayerAuthSetupService_DEFINED
#define SOAP_TYPE_ns2__PayerAuthSetupService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayerAuthSetupService(struct soap*, const char*, int, const ns2__PayerAuthSetupService *, const char*);
SOAP_FMAC3 ns2__PayerAuthSetupService * SOAP_FMAC4 soap_in_ns2__PayerAuthSetupService(struct soap*, const char*, ns2__PayerAuthSetupService *, const char*);
SOAP_FMAC1 ns2__PayerAuthSetupService * SOAP_FMAC2 soap_instantiate_ns2__PayerAuthSetupService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayerAuthSetupService * soap_new_ns2__PayerAuthSetupService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayerAuthSetupService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayerAuthSetupService * soap_new_req_ns2__PayerAuthSetupService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayerAuthSetupService *_p = ::soap_new_ns2__PayerAuthSetupService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayerAuthSetupService::run = run;
	}
	return _p;
}

inline ns2__PayerAuthSetupService * soap_new_set_ns2__PayerAuthSetupService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayerAuthSetupService *_p = ::soap_new_ns2__PayerAuthSetupService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayerAuthSetupService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayerAuthSetupService(struct soap *soap, ns2__PayerAuthSetupService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthSetupService", p->soap_type() == SOAP_TYPE_ns2__PayerAuthSetupService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayerAuthSetupService(struct soap *soap, const char *URL, ns2__PayerAuthSetupService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthSetupService", p->soap_type() == SOAP_TYPE_ns2__PayerAuthSetupService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayerAuthSetupService(struct soap *soap, const char *URL, ns2__PayerAuthSetupService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthSetupService", p->soap_type() == SOAP_TYPE_ns2__PayerAuthSetupService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayerAuthSetupService(struct soap *soap, const char *URL, ns2__PayerAuthSetupService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthSetupService", p->soap_type() == SOAP_TYPE_ns2__PayerAuthSetupService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayerAuthSetupService * SOAP_FMAC4 soap_get_ns2__PayerAuthSetupService(struct soap*, ns2__PayerAuthSetupService *, const char*, const char*);

inline int soap_read_ns2__PayerAuthSetupService(struct soap *soap, ns2__PayerAuthSetupService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayerAuthSetupService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayerAuthSetupService(struct soap *soap, const char *URL, ns2__PayerAuthSetupService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayerAuthSetupService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayerAuthSetupService(struct soap *soap, ns2__PayerAuthSetupService *p)
{
	if (::soap_read_ns2__PayerAuthSetupService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayerAuthValidateService_DEFINED
#define SOAP_TYPE_ns2__PayerAuthValidateService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayerAuthValidateService(struct soap*, const char*, int, const ns2__PayerAuthValidateService *, const char*);
SOAP_FMAC3 ns2__PayerAuthValidateService * SOAP_FMAC4 soap_in_ns2__PayerAuthValidateService(struct soap*, const char*, ns2__PayerAuthValidateService *, const char*);
SOAP_FMAC1 ns2__PayerAuthValidateService * SOAP_FMAC2 soap_instantiate_ns2__PayerAuthValidateService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayerAuthValidateService * soap_new_ns2__PayerAuthValidateService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayerAuthValidateService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayerAuthValidateService * soap_new_req_ns2__PayerAuthValidateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayerAuthValidateService *_p = ::soap_new_ns2__PayerAuthValidateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayerAuthValidateService::run = run;
	}
	return _p;
}

inline ns2__PayerAuthValidateService * soap_new_set_ns2__PayerAuthValidateService(
	struct soap *soap,
	std::string *signedPARes,
	std::string *authenticationTransactionID,
	std::string *responseAccessToken,
	std::string *otpToken,
	const std::string& run)
{
	ns2__PayerAuthValidateService *_p = ::soap_new_ns2__PayerAuthValidateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayerAuthValidateService::signedPARes = signedPARes;
		_p->ns2__PayerAuthValidateService::authenticationTransactionID = authenticationTransactionID;
		_p->ns2__PayerAuthValidateService::responseAccessToken = responseAccessToken;
		_p->ns2__PayerAuthValidateService::otpToken = otpToken;
		_p->ns2__PayerAuthValidateService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayerAuthValidateService(struct soap *soap, ns2__PayerAuthValidateService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthValidateService", p->soap_type() == SOAP_TYPE_ns2__PayerAuthValidateService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayerAuthValidateService(struct soap *soap, const char *URL, ns2__PayerAuthValidateService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthValidateService", p->soap_type() == SOAP_TYPE_ns2__PayerAuthValidateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayerAuthValidateService(struct soap *soap, const char *URL, ns2__PayerAuthValidateService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthValidateService", p->soap_type() == SOAP_TYPE_ns2__PayerAuthValidateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayerAuthValidateService(struct soap *soap, const char *URL, ns2__PayerAuthValidateService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthValidateService", p->soap_type() == SOAP_TYPE_ns2__PayerAuthValidateService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayerAuthValidateService * SOAP_FMAC4 soap_get_ns2__PayerAuthValidateService(struct soap*, ns2__PayerAuthValidateService *, const char*, const char*);

inline int soap_read_ns2__PayerAuthValidateService(struct soap *soap, ns2__PayerAuthValidateService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayerAuthValidateService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayerAuthValidateService(struct soap *soap, const char *URL, ns2__PayerAuthValidateService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayerAuthValidateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayerAuthValidateService(struct soap *soap, ns2__PayerAuthValidateService *p)
{
	if (::soap_read_ns2__PayerAuthValidateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__PayerAuthEnrollService_DEFINED
#define SOAP_TYPE_ns2__PayerAuthEnrollService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayerAuthEnrollService(struct soap*, const char*, int, const ns2__PayerAuthEnrollService *, const char*);
SOAP_FMAC3 ns2__PayerAuthEnrollService * SOAP_FMAC4 soap_in_ns2__PayerAuthEnrollService(struct soap*, const char*, ns2__PayerAuthEnrollService *, const char*);
SOAP_FMAC1 ns2__PayerAuthEnrollService * SOAP_FMAC2 soap_instantiate_ns2__PayerAuthEnrollService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayerAuthEnrollService * soap_new_ns2__PayerAuthEnrollService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PayerAuthEnrollService(soap, n, NULL, NULL, NULL);
}

inline ns2__PayerAuthEnrollService * soap_new_req_ns2__PayerAuthEnrollService(
	struct soap *soap,
	const std::string& run)
{
	ns2__PayerAuthEnrollService *_p = ::soap_new_ns2__PayerAuthEnrollService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayerAuthEnrollService::run = run;
	}
	return _p;
}

inline ns2__PayerAuthEnrollService * soap_new_set_ns2__PayerAuthEnrollService(
	struct soap *soap,
	std::string *httpAccept,
	std::string *httpUserAgent,
	std::string *merchantName,
	std::string *merchantURL,
	std::string *purchaseDescription,
	std::string *purchaseTime,
	std::string *countryCode,
	std::string *acquirerBin,
	std::string *loginID,
	std::string *password,
	std::string *merchantID,
	std::string *overridePaymentMethod,
	std::string *mobilePhone,
	std::string *MCC,
	std::string *productCode,
	std::string *referenceID,
	std::string *marketingOptIn,
	std::string *marketingSource,
	std::string *defaultCard,
	std::string *shipAddressUsageDate,
	std::string *transactionCountDay,
	std::string *transactionCountYear,
	std::string *addCardAttempts,
	std::string *accountPurchases,
	std::string *fraudActivity,
	std::string *paymentAccountDate,
	std::string *alternateAuthenticationMethod,
	std::string *alternateAuthenticationDate,
	std::string *alternateAuthenticationData,
	std::string *challengeRequired,
	std::string *challengeCode,
	std::string *preorder,
	std::string *reorder,
	std::string *preorderDate,
	std::string *giftCardAmount,
	std::string *giftCardCurrency,
	std::string *giftCardCount,
	std::string *messageCategory,
	std::string *npaCode,
	std::string *recurringOriginalPurchaseDate,
	std::string *returnURL,
	std::string *transactionMode,
	std::string *recurringEndDate,
	std::string *recurringFrequency,
	std::string *merchantNewCustomer,
	std::string *customerCCAlias,
	std::string *installmentTotalCount,
	std::string *authenticationTransactionID,
	std::string *httpUserAccept,
	std::string *mobilePhoneDomestic,
	std::string *pareqChannel,
	std::string *shoppingChannel,
	std::string *authenticationChannel,
	std::string *merchantTTPCredential,
	std::string *requestorID,
	std::string *requestorName,
	std::string *acsWindowSize,
	std::string *decoupledAuthenticationIndicator,
	std::string *decoupledAuthenticationMaxTime,
	std::string *deviceChannel,
	std::string *priorAuthenticationReferenceID,
	std::string *priorAuthenticationData,
	std::string *priorAuthenticationMethod,
	std::string *priorAuthenticationTime,
	std::string *requestorInitiatedAuthenticationIndicator,
	std::string *sdkMaxTimeout,
	std::string *authenticationIndicator,
	std::string *whiteListStatus,
	std::string *totalOffersCount,
	std::string *merchantScore,
	std::string *merchantFraudRate,
	std::string *acquirerCountry,
	std::string *secureCorporatePaymentIndicator,
	std::string *resendCount,
	const std::string& run)
{
	ns2__PayerAuthEnrollService *_p = ::soap_new_ns2__PayerAuthEnrollService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PayerAuthEnrollService::httpAccept = httpAccept;
		_p->ns2__PayerAuthEnrollService::httpUserAgent = httpUserAgent;
		_p->ns2__PayerAuthEnrollService::merchantName = merchantName;
		_p->ns2__PayerAuthEnrollService::merchantURL = merchantURL;
		_p->ns2__PayerAuthEnrollService::purchaseDescription = purchaseDescription;
		_p->ns2__PayerAuthEnrollService::purchaseTime = purchaseTime;
		_p->ns2__PayerAuthEnrollService::countryCode = countryCode;
		_p->ns2__PayerAuthEnrollService::acquirerBin = acquirerBin;
		_p->ns2__PayerAuthEnrollService::loginID = loginID;
		_p->ns2__PayerAuthEnrollService::password = password;
		_p->ns2__PayerAuthEnrollService::merchantID = merchantID;
		_p->ns2__PayerAuthEnrollService::overridePaymentMethod = overridePaymentMethod;
		_p->ns2__PayerAuthEnrollService::mobilePhone = mobilePhone;
		_p->ns2__PayerAuthEnrollService::MCC = MCC;
		_p->ns2__PayerAuthEnrollService::productCode = productCode;
		_p->ns2__PayerAuthEnrollService::referenceID = referenceID;
		_p->ns2__PayerAuthEnrollService::marketingOptIn = marketingOptIn;
		_p->ns2__PayerAuthEnrollService::marketingSource = marketingSource;
		_p->ns2__PayerAuthEnrollService::defaultCard = defaultCard;
		_p->ns2__PayerAuthEnrollService::shipAddressUsageDate = shipAddressUsageDate;
		_p->ns2__PayerAuthEnrollService::transactionCountDay = transactionCountDay;
		_p->ns2__PayerAuthEnrollService::transactionCountYear = transactionCountYear;
		_p->ns2__PayerAuthEnrollService::addCardAttempts = addCardAttempts;
		_p->ns2__PayerAuthEnrollService::accountPurchases = accountPurchases;
		_p->ns2__PayerAuthEnrollService::fraudActivity = fraudActivity;
		_p->ns2__PayerAuthEnrollService::paymentAccountDate = paymentAccountDate;
		_p->ns2__PayerAuthEnrollService::alternateAuthenticationMethod = alternateAuthenticationMethod;
		_p->ns2__PayerAuthEnrollService::alternateAuthenticationDate = alternateAuthenticationDate;
		_p->ns2__PayerAuthEnrollService::alternateAuthenticationData = alternateAuthenticationData;
		_p->ns2__PayerAuthEnrollService::challengeRequired = challengeRequired;
		_p->ns2__PayerAuthEnrollService::challengeCode = challengeCode;
		_p->ns2__PayerAuthEnrollService::preorder = preorder;
		_p->ns2__PayerAuthEnrollService::reorder = reorder;
		_p->ns2__PayerAuthEnrollService::preorderDate = preorderDate;
		_p->ns2__PayerAuthEnrollService::giftCardAmount = giftCardAmount;
		_p->ns2__PayerAuthEnrollService::giftCardCurrency = giftCardCurrency;
		_p->ns2__PayerAuthEnrollService::giftCardCount = giftCardCount;
		_p->ns2__PayerAuthEnrollService::messageCategory = messageCategory;
		_p->ns2__PayerAuthEnrollService::npaCode = npaCode;
		_p->ns2__PayerAuthEnrollService::recurringOriginalPurchaseDate = recurringOriginalPurchaseDate;
		_p->ns2__PayerAuthEnrollService::returnURL = returnURL;
		_p->ns2__PayerAuthEnrollService::transactionMode = transactionMode;
		_p->ns2__PayerAuthEnrollService::recurringEndDate = recurringEndDate;
		_p->ns2__PayerAuthEnrollService::recurringFrequency = recurringFrequency;
		_p->ns2__PayerAuthEnrollService::merchantNewCustomer = merchantNewCustomer;
		_p->ns2__PayerAuthEnrollService::customerCCAlias = customerCCAlias;
		_p->ns2__PayerAuthEnrollService::installmentTotalCount = installmentTotalCount;
		_p->ns2__PayerAuthEnrollService::authenticationTransactionID = authenticationTransactionID;
		_p->ns2__PayerAuthEnrollService::httpUserAccept = httpUserAccept;
		_p->ns2__PayerAuthEnrollService::mobilePhoneDomestic = mobilePhoneDomestic;
		_p->ns2__PayerAuthEnrollService::pareqChannel = pareqChannel;
		_p->ns2__PayerAuthEnrollService::shoppingChannel = shoppingChannel;
		_p->ns2__PayerAuthEnrollService::authenticationChannel = authenticationChannel;
		_p->ns2__PayerAuthEnrollService::merchantTTPCredential = merchantTTPCredential;
		_p->ns2__PayerAuthEnrollService::requestorID = requestorID;
		_p->ns2__PayerAuthEnrollService::requestorName = requestorName;
		_p->ns2__PayerAuthEnrollService::acsWindowSize = acsWindowSize;
		_p->ns2__PayerAuthEnrollService::decoupledAuthenticationIndicator = decoupledAuthenticationIndicator;
		_p->ns2__PayerAuthEnrollService::decoupledAuthenticationMaxTime = decoupledAuthenticationMaxTime;
		_p->ns2__PayerAuthEnrollService::deviceChannel = deviceChannel;
		_p->ns2__PayerAuthEnrollService::priorAuthenticationReferenceID = priorAuthenticationReferenceID;
		_p->ns2__PayerAuthEnrollService::priorAuthenticationData = priorAuthenticationData;
		_p->ns2__PayerAuthEnrollService::priorAuthenticationMethod = priorAuthenticationMethod;
		_p->ns2__PayerAuthEnrollService::priorAuthenticationTime = priorAuthenticationTime;
		_p->ns2__PayerAuthEnrollService::requestorInitiatedAuthenticationIndicator = requestorInitiatedAuthenticationIndicator;
		_p->ns2__PayerAuthEnrollService::sdkMaxTimeout = sdkMaxTimeout;
		_p->ns2__PayerAuthEnrollService::authenticationIndicator = authenticationIndicator;
		_p->ns2__PayerAuthEnrollService::whiteListStatus = whiteListStatus;
		_p->ns2__PayerAuthEnrollService::totalOffersCount = totalOffersCount;
		_p->ns2__PayerAuthEnrollService::merchantScore = merchantScore;
		_p->ns2__PayerAuthEnrollService::merchantFraudRate = merchantFraudRate;
		_p->ns2__PayerAuthEnrollService::acquirerCountry = acquirerCountry;
		_p->ns2__PayerAuthEnrollService::secureCorporatePaymentIndicator = secureCorporatePaymentIndicator;
		_p->ns2__PayerAuthEnrollService::resendCount = resendCount;
		_p->ns2__PayerAuthEnrollService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__PayerAuthEnrollService(struct soap *soap, ns2__PayerAuthEnrollService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthEnrollService", p->soap_type() == SOAP_TYPE_ns2__PayerAuthEnrollService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PayerAuthEnrollService(struct soap *soap, const char *URL, ns2__PayerAuthEnrollService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthEnrollService", p->soap_type() == SOAP_TYPE_ns2__PayerAuthEnrollService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__PayerAuthEnrollService(struct soap *soap, const char *URL, ns2__PayerAuthEnrollService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthEnrollService", p->soap_type() == SOAP_TYPE_ns2__PayerAuthEnrollService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PayerAuthEnrollService(struct soap *soap, const char *URL, ns2__PayerAuthEnrollService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PayerAuthEnrollService", p->soap_type() == SOAP_TYPE_ns2__PayerAuthEnrollService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PayerAuthEnrollService * SOAP_FMAC4 soap_get_ns2__PayerAuthEnrollService(struct soap*, ns2__PayerAuthEnrollService *, const char*, const char*);

inline int soap_read_ns2__PayerAuthEnrollService(struct soap *soap, ns2__PayerAuthEnrollService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__PayerAuthEnrollService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PayerAuthEnrollService(struct soap *soap, const char *URL, ns2__PayerAuthEnrollService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__PayerAuthEnrollService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__PayerAuthEnrollService(struct soap *soap, ns2__PayerAuthEnrollService *p)
{
	if (::soap_read_ns2__PayerAuthEnrollService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ECAuthenticateService_DEFINED
#define SOAP_TYPE_ns2__ECAuthenticateService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ECAuthenticateService(struct soap*, const char*, int, const ns2__ECAuthenticateService *, const char*);
SOAP_FMAC3 ns2__ECAuthenticateService * SOAP_FMAC4 soap_in_ns2__ECAuthenticateService(struct soap*, const char*, ns2__ECAuthenticateService *, const char*);
SOAP_FMAC1 ns2__ECAuthenticateService * SOAP_FMAC2 soap_instantiate_ns2__ECAuthenticateService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ECAuthenticateService * soap_new_ns2__ECAuthenticateService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ECAuthenticateService(soap, n, NULL, NULL, NULL);
}

inline ns2__ECAuthenticateService * soap_new_req_ns2__ECAuthenticateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__ECAuthenticateService *_p = ::soap_new_ns2__ECAuthenticateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ECAuthenticateService::run = run;
	}
	return _p;
}

inline ns2__ECAuthenticateService * soap_new_set_ns2__ECAuthenticateService(
	struct soap *soap,
	std::string *referenceNumber,
	const std::string& run)
{
	ns2__ECAuthenticateService *_p = ::soap_new_ns2__ECAuthenticateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ECAuthenticateService::referenceNumber = referenceNumber;
		_p->ns2__ECAuthenticateService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__ECAuthenticateService(struct soap *soap, ns2__ECAuthenticateService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECAuthenticateService", p->soap_type() == SOAP_TYPE_ns2__ECAuthenticateService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ECAuthenticateService(struct soap *soap, const char *URL, ns2__ECAuthenticateService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECAuthenticateService", p->soap_type() == SOAP_TYPE_ns2__ECAuthenticateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ECAuthenticateService(struct soap *soap, const char *URL, ns2__ECAuthenticateService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECAuthenticateService", p->soap_type() == SOAP_TYPE_ns2__ECAuthenticateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ECAuthenticateService(struct soap *soap, const char *URL, ns2__ECAuthenticateService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECAuthenticateService", p->soap_type() == SOAP_TYPE_ns2__ECAuthenticateService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ECAuthenticateService * SOAP_FMAC4 soap_get_ns2__ECAuthenticateService(struct soap*, ns2__ECAuthenticateService *, const char*, const char*);

inline int soap_read_ns2__ECAuthenticateService(struct soap *soap, ns2__ECAuthenticateService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ECAuthenticateService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ECAuthenticateService(struct soap *soap, const char *URL, ns2__ECAuthenticateService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ECAuthenticateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ECAuthenticateService(struct soap *soap, ns2__ECAuthenticateService *p)
{
	if (::soap_read_ns2__ECAuthenticateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ECCreditService_DEFINED
#define SOAP_TYPE_ns2__ECCreditService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ECCreditService(struct soap*, const char*, int, const ns2__ECCreditService *, const char*);
SOAP_FMAC3 ns2__ECCreditService * SOAP_FMAC4 soap_in_ns2__ECCreditService(struct soap*, const char*, ns2__ECCreditService *, const char*);
SOAP_FMAC1 ns2__ECCreditService * SOAP_FMAC2 soap_instantiate_ns2__ECCreditService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ECCreditService * soap_new_ns2__ECCreditService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ECCreditService(soap, n, NULL, NULL, NULL);
}

inline ns2__ECCreditService * soap_new_req_ns2__ECCreditService(
	struct soap *soap,
	const std::string& run)
{
	ns2__ECCreditService *_p = ::soap_new_ns2__ECCreditService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ECCreditService::run = run;
	}
	return _p;
}

inline ns2__ECCreditService * soap_new_set_ns2__ECCreditService(
	struct soap *soap,
	std::string *referenceNumber,
	std::string *settlementMethod,
	std::string *transactionToken,
	std::string *debitRequestID,
	std::string *partialPaymentID,
	std::string *commerceIndicator,
	std::string *debitRequestToken,
	std::string *effectiveDate,
	const std::string& run)
{
	ns2__ECCreditService *_p = ::soap_new_ns2__ECCreditService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ECCreditService::referenceNumber = referenceNumber;
		_p->ns2__ECCreditService::settlementMethod = settlementMethod;
		_p->ns2__ECCreditService::transactionToken = transactionToken;
		_p->ns2__ECCreditService::debitRequestID = debitRequestID;
		_p->ns2__ECCreditService::partialPaymentID = partialPaymentID;
		_p->ns2__ECCreditService::commerceIndicator = commerceIndicator;
		_p->ns2__ECCreditService::debitRequestToken = debitRequestToken;
		_p->ns2__ECCreditService::effectiveDate = effectiveDate;
		_p->ns2__ECCreditService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__ECCreditService(struct soap *soap, ns2__ECCreditService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECCreditService", p->soap_type() == SOAP_TYPE_ns2__ECCreditService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ECCreditService(struct soap *soap, const char *URL, ns2__ECCreditService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECCreditService", p->soap_type() == SOAP_TYPE_ns2__ECCreditService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ECCreditService(struct soap *soap, const char *URL, ns2__ECCreditService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECCreditService", p->soap_type() == SOAP_TYPE_ns2__ECCreditService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ECCreditService(struct soap *soap, const char *URL, ns2__ECCreditService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECCreditService", p->soap_type() == SOAP_TYPE_ns2__ECCreditService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ECCreditService * SOAP_FMAC4 soap_get_ns2__ECCreditService(struct soap*, ns2__ECCreditService *, const char*, const char*);

inline int soap_read_ns2__ECCreditService(struct soap *soap, ns2__ECCreditService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ECCreditService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ECCreditService(struct soap *soap, const char *URL, ns2__ECCreditService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ECCreditService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ECCreditService(struct soap *soap, ns2__ECCreditService *p)
{
	if (::soap_read_ns2__ECCreditService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ECDebitService_DEFINED
#define SOAP_TYPE_ns2__ECDebitService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ECDebitService(struct soap*, const char*, int, const ns2__ECDebitService *, const char*);
SOAP_FMAC3 ns2__ECDebitService * SOAP_FMAC4 soap_in_ns2__ECDebitService(struct soap*, const char*, ns2__ECDebitService *, const char*);
SOAP_FMAC1 ns2__ECDebitService * SOAP_FMAC2 soap_instantiate_ns2__ECDebitService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ECDebitService * soap_new_ns2__ECDebitService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ECDebitService(soap, n, NULL, NULL, NULL);
}

inline ns2__ECDebitService * soap_new_req_ns2__ECDebitService(
	struct soap *soap,
	const std::string& run)
{
	ns2__ECDebitService *_p = ::soap_new_ns2__ECDebitService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ECDebitService::run = run;
	}
	return _p;
}

inline ns2__ECDebitService * soap_new_set_ns2__ECDebitService(
	struct soap *soap,
	std::string *paymentMode,
	std::string *referenceNumber,
	std::string *settlementMethod,
	std::string *transactionToken,
	std::string *verificationLevel,
	std::string *partialPaymentID,
	std::string *commerceIndicator,
	std::string *debitRequestID,
	std::string *effectiveDate,
	const std::string& run)
{
	ns2__ECDebitService *_p = ::soap_new_ns2__ECDebitService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ECDebitService::paymentMode = paymentMode;
		_p->ns2__ECDebitService::referenceNumber = referenceNumber;
		_p->ns2__ECDebitService::settlementMethod = settlementMethod;
		_p->ns2__ECDebitService::transactionToken = transactionToken;
		_p->ns2__ECDebitService::verificationLevel = verificationLevel;
		_p->ns2__ECDebitService::partialPaymentID = partialPaymentID;
		_p->ns2__ECDebitService::commerceIndicator = commerceIndicator;
		_p->ns2__ECDebitService::debitRequestID = debitRequestID;
		_p->ns2__ECDebitService::effectiveDate = effectiveDate;
		_p->ns2__ECDebitService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__ECDebitService(struct soap *soap, ns2__ECDebitService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECDebitService", p->soap_type() == SOAP_TYPE_ns2__ECDebitService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ECDebitService(struct soap *soap, const char *URL, ns2__ECDebitService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECDebitService", p->soap_type() == SOAP_TYPE_ns2__ECDebitService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ECDebitService(struct soap *soap, const char *URL, ns2__ECDebitService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECDebitService", p->soap_type() == SOAP_TYPE_ns2__ECDebitService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ECDebitService(struct soap *soap, const char *URL, ns2__ECDebitService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ECDebitService", p->soap_type() == SOAP_TYPE_ns2__ECDebitService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ECDebitService * SOAP_FMAC4 soap_get_ns2__ECDebitService(struct soap*, ns2__ECDebitService *, const char*, const char*);

inline int soap_read_ns2__ECDebitService(struct soap *soap, ns2__ECDebitService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ECDebitService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ECDebitService(struct soap *soap, const char *URL, ns2__ECDebitService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ECDebitService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ECDebitService(struct soap *soap, ns2__ECDebitService *p)
{
	if (::soap_read_ns2__ECDebitService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ServiceFeeCalculateService_DEFINED
#define SOAP_TYPE_ns2__ServiceFeeCalculateService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ServiceFeeCalculateService(struct soap*, const char*, int, const ns2__ServiceFeeCalculateService *, const char*);
SOAP_FMAC3 ns2__ServiceFeeCalculateService * SOAP_FMAC4 soap_in_ns2__ServiceFeeCalculateService(struct soap*, const char*, ns2__ServiceFeeCalculateService *, const char*);
SOAP_FMAC1 ns2__ServiceFeeCalculateService * SOAP_FMAC2 soap_instantiate_ns2__ServiceFeeCalculateService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ServiceFeeCalculateService * soap_new_ns2__ServiceFeeCalculateService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ServiceFeeCalculateService(soap, n, NULL, NULL, NULL);
}

inline ns2__ServiceFeeCalculateService * soap_new_req_ns2__ServiceFeeCalculateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__ServiceFeeCalculateService *_p = ::soap_new_ns2__ServiceFeeCalculateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ServiceFeeCalculateService::run = run;
	}
	return _p;
}

inline ns2__ServiceFeeCalculateService * soap_new_set_ns2__ServiceFeeCalculateService(
	struct soap *soap,
	const std::string& run)
{
	ns2__ServiceFeeCalculateService *_p = ::soap_new_ns2__ServiceFeeCalculateService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ServiceFeeCalculateService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__ServiceFeeCalculateService(struct soap *soap, ns2__ServiceFeeCalculateService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ServiceFeeCalculateService", p->soap_type() == SOAP_TYPE_ns2__ServiceFeeCalculateService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ServiceFeeCalculateService(struct soap *soap, const char *URL, ns2__ServiceFeeCalculateService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ServiceFeeCalculateService", p->soap_type() == SOAP_TYPE_ns2__ServiceFeeCalculateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ServiceFeeCalculateService(struct soap *soap, const char *URL, ns2__ServiceFeeCalculateService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ServiceFeeCalculateService", p->soap_type() == SOAP_TYPE_ns2__ServiceFeeCalculateService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ServiceFeeCalculateService(struct soap *soap, const char *URL, ns2__ServiceFeeCalculateService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ServiceFeeCalculateService", p->soap_type() == SOAP_TYPE_ns2__ServiceFeeCalculateService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ServiceFeeCalculateService * SOAP_FMAC4 soap_get_ns2__ServiceFeeCalculateService(struct soap*, ns2__ServiceFeeCalculateService *, const char*, const char*);

inline int soap_read_ns2__ServiceFeeCalculateService(struct soap *soap, ns2__ServiceFeeCalculateService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ServiceFeeCalculateService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ServiceFeeCalculateService(struct soap *soap, const char *URL, ns2__ServiceFeeCalculateService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ServiceFeeCalculateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ServiceFeeCalculateService(struct soap *soap, ns2__ServiceFeeCalculateService *p)
{
	if (::soap_read_ns2__ServiceFeeCalculateService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCDCCService_DEFINED
#define SOAP_TYPE_ns2__CCDCCService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCDCCService(struct soap*, const char*, int, const ns2__CCDCCService *, const char*);
SOAP_FMAC3 ns2__CCDCCService * SOAP_FMAC4 soap_in_ns2__CCDCCService(struct soap*, const char*, ns2__CCDCCService *, const char*);
SOAP_FMAC1 ns2__CCDCCService * SOAP_FMAC2 soap_instantiate_ns2__CCDCCService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCDCCService * soap_new_ns2__CCDCCService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCDCCService(soap, n, NULL, NULL, NULL);
}

inline ns2__CCDCCService * soap_new_req_ns2__CCDCCService(
	struct soap *soap,
	const std::string& run)
{
	ns2__CCDCCService *_p = ::soap_new_ns2__CCDCCService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCDCCService::run = run;
	}
	return _p;
}

inline ns2__CCDCCService * soap_new_set_ns2__CCDCCService(
	struct soap *soap,
	const std::string& run)
{
	ns2__CCDCCService *_p = ::soap_new_ns2__CCDCCService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCDCCService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__CCDCCService(struct soap *soap, ns2__CCDCCService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCDCCService", p->soap_type() == SOAP_TYPE_ns2__CCDCCService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCDCCService(struct soap *soap, const char *URL, ns2__CCDCCService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCDCCService", p->soap_type() == SOAP_TYPE_ns2__CCDCCService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCDCCService(struct soap *soap, const char *URL, ns2__CCDCCService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCDCCService", p->soap_type() == SOAP_TYPE_ns2__CCDCCService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCDCCService(struct soap *soap, const char *URL, ns2__CCDCCService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCDCCService", p->soap_type() == SOAP_TYPE_ns2__CCDCCService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCDCCService * SOAP_FMAC4 soap_get_ns2__CCDCCService(struct soap*, ns2__CCDCCService *, const char*, const char*);

inline int soap_read_ns2__CCDCCService(struct soap *soap, ns2__CCDCCService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCDCCService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCDCCService(struct soap *soap, const char *URL, ns2__CCDCCService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCDCCService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCDCCService(struct soap *soap, ns2__CCDCCService *p)
{
	if (::soap_read_ns2__CCDCCService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCAutoAuthReversalService_DEFINED
#define SOAP_TYPE_ns2__CCAutoAuthReversalService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCAutoAuthReversalService(struct soap*, const char*, int, const ns2__CCAutoAuthReversalService *, const char*);
SOAP_FMAC3 ns2__CCAutoAuthReversalService * SOAP_FMAC4 soap_in_ns2__CCAutoAuthReversalService(struct soap*, const char*, ns2__CCAutoAuthReversalService *, const char*);
SOAP_FMAC1 ns2__CCAutoAuthReversalService * SOAP_FMAC2 soap_instantiate_ns2__CCAutoAuthReversalService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCAutoAuthReversalService * soap_new_ns2__CCAutoAuthReversalService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCAutoAuthReversalService(soap, n, NULL, NULL, NULL);
}

inline ns2__CCAutoAuthReversalService * soap_new_req_ns2__CCAutoAuthReversalService(
	struct soap *soap,
	const std::string& run)
{
	ns2__CCAutoAuthReversalService *_p = ::soap_new_ns2__CCAutoAuthReversalService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCAutoAuthReversalService::run = run;
	}
	return _p;
}

inline ns2__CCAutoAuthReversalService * soap_new_set_ns2__CCAutoAuthReversalService(
	struct soap *soap,
	std::string *authPaymentServiceData,
	std::string *reconciliationID,
	std::string *authAmount,
	std::string *commerceIndicator,
	std::string *authRequestID,
	std::string *billAmount,
	std::string *authCode,
	std::string *authType,
	std::string *billPayment,
	std::string *dateAdded,
	const std::string& run)
{
	ns2__CCAutoAuthReversalService *_p = ::soap_new_ns2__CCAutoAuthReversalService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCAutoAuthReversalService::authPaymentServiceData = authPaymentServiceData;
		_p->ns2__CCAutoAuthReversalService::reconciliationID = reconciliationID;
		_p->ns2__CCAutoAuthReversalService::authAmount = authAmount;
		_p->ns2__CCAutoAuthReversalService::commerceIndicator = commerceIndicator;
		_p->ns2__CCAutoAuthReversalService::authRequestID = authRequestID;
		_p->ns2__CCAutoAuthReversalService::billAmount = billAmount;
		_p->ns2__CCAutoAuthReversalService::authCode = authCode;
		_p->ns2__CCAutoAuthReversalService::authType = authType;
		_p->ns2__CCAutoAuthReversalService::billPayment = billPayment;
		_p->ns2__CCAutoAuthReversalService::dateAdded = dateAdded;
		_p->ns2__CCAutoAuthReversalService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__CCAutoAuthReversalService(struct soap *soap, ns2__CCAutoAuthReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAutoAuthReversalService", p->soap_type() == SOAP_TYPE_ns2__CCAutoAuthReversalService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCAutoAuthReversalService(struct soap *soap, const char *URL, ns2__CCAutoAuthReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAutoAuthReversalService", p->soap_type() == SOAP_TYPE_ns2__CCAutoAuthReversalService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCAutoAuthReversalService(struct soap *soap, const char *URL, ns2__CCAutoAuthReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAutoAuthReversalService", p->soap_type() == SOAP_TYPE_ns2__CCAutoAuthReversalService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCAutoAuthReversalService(struct soap *soap, const char *URL, ns2__CCAutoAuthReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAutoAuthReversalService", p->soap_type() == SOAP_TYPE_ns2__CCAutoAuthReversalService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCAutoAuthReversalService * SOAP_FMAC4 soap_get_ns2__CCAutoAuthReversalService(struct soap*, ns2__CCAutoAuthReversalService *, const char*, const char*);

inline int soap_read_ns2__CCAutoAuthReversalService(struct soap *soap, ns2__CCAutoAuthReversalService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCAutoAuthReversalService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCAutoAuthReversalService(struct soap *soap, const char *URL, ns2__CCAutoAuthReversalService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCAutoAuthReversalService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCAutoAuthReversalService(struct soap *soap, ns2__CCAutoAuthReversalService *p)
{
	if (::soap_read_ns2__CCAutoAuthReversalService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCAuthReversalService_DEFINED
#define SOAP_TYPE_ns2__CCAuthReversalService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCAuthReversalService(struct soap*, const char*, int, const ns2__CCAuthReversalService *, const char*);
SOAP_FMAC3 ns2__CCAuthReversalService * SOAP_FMAC4 soap_in_ns2__CCAuthReversalService(struct soap*, const char*, ns2__CCAuthReversalService *, const char*);
SOAP_FMAC1 ns2__CCAuthReversalService * SOAP_FMAC2 soap_instantiate_ns2__CCAuthReversalService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCAuthReversalService * soap_new_ns2__CCAuthReversalService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCAuthReversalService(soap, n, NULL, NULL, NULL);
}

inline ns2__CCAuthReversalService * soap_new_req_ns2__CCAuthReversalService(
	struct soap *soap,
	const std::string& run)
{
	ns2__CCAuthReversalService *_p = ::soap_new_ns2__CCAuthReversalService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCAuthReversalService::run = run;
	}
	return _p;
}

inline ns2__CCAuthReversalService * soap_new_set_ns2__CCAuthReversalService(
	struct soap *soap,
	std::string *authRequestID,
	std::string *authRequestToken,
	std::string *reversalReason,
	const std::string& run)
{
	ns2__CCAuthReversalService *_p = ::soap_new_ns2__CCAuthReversalService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCAuthReversalService::authRequestID = authRequestID;
		_p->ns2__CCAuthReversalService::authRequestToken = authRequestToken;
		_p->ns2__CCAuthReversalService::reversalReason = reversalReason;
		_p->ns2__CCAuthReversalService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__CCAuthReversalService(struct soap *soap, ns2__CCAuthReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAuthReversalService", p->soap_type() == SOAP_TYPE_ns2__CCAuthReversalService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCAuthReversalService(struct soap *soap, const char *URL, ns2__CCAuthReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAuthReversalService", p->soap_type() == SOAP_TYPE_ns2__CCAuthReversalService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCAuthReversalService(struct soap *soap, const char *URL, ns2__CCAuthReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAuthReversalService", p->soap_type() == SOAP_TYPE_ns2__CCAuthReversalService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCAuthReversalService(struct soap *soap, const char *URL, ns2__CCAuthReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAuthReversalService", p->soap_type() == SOAP_TYPE_ns2__CCAuthReversalService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCAuthReversalService * SOAP_FMAC4 soap_get_ns2__CCAuthReversalService(struct soap*, ns2__CCAuthReversalService *, const char*, const char*);

inline int soap_read_ns2__CCAuthReversalService(struct soap *soap, ns2__CCAuthReversalService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCAuthReversalService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCAuthReversalService(struct soap *soap, const char *URL, ns2__CCAuthReversalService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCAuthReversalService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCAuthReversalService(struct soap *soap, ns2__CCAuthReversalService *p)
{
	if (::soap_read_ns2__CCAuthReversalService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCCreditService_DEFINED
#define SOAP_TYPE_ns2__CCCreditService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCCreditService(struct soap*, const char*, int, const ns2__CCCreditService *, const char*);
SOAP_FMAC3 ns2__CCCreditService * SOAP_FMAC4 soap_in_ns2__CCCreditService(struct soap*, const char*, ns2__CCCreditService *, const char*);
SOAP_FMAC1 ns2__CCCreditService * SOAP_FMAC2 soap_instantiate_ns2__CCCreditService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCCreditService * soap_new_ns2__CCCreditService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCCreditService(soap, n, NULL, NULL, NULL);
}

inline ns2__CCCreditService * soap_new_req_ns2__CCCreditService(
	struct soap *soap,
	const std::string& run)
{
	ns2__CCCreditService *_p = ::soap_new_ns2__CCCreditService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCCreditService::run = run;
	}
	return _p;
}

inline ns2__CCCreditService * soap_new_set_ns2__CCCreditService(
	struct soap *soap,
	std::string *captureRequestID,
	std::string *reconciliationID,
	std::string *partialPaymentID,
	std::string *purchasingLevel,
	std::string *industryDatatype,
	std::string *commerceIndicator,
	std::string *billPayment,
	std::string *authorizationXID,
	std::string *occurrenceNumber,
	std::string *authCode,
	std::string *captureRequestToken,
	std::string *merchantReceiptNumber,
	std::string *checksumKey,
	std::string *aggregatorID,
	std::string *aggregatorName,
	std::string *duration,
	std::string *dpdeBillingMonth,
	std::string *reconciliationIDAlternate,
	std::string *refundReason,
	std::string *overridePaymentMethod,
	std::string *overridePaymentDetails,
	const std::string& run)
{
	ns2__CCCreditService *_p = ::soap_new_ns2__CCCreditService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCCreditService::captureRequestID = captureRequestID;
		_p->ns2__CCCreditService::reconciliationID = reconciliationID;
		_p->ns2__CCCreditService::partialPaymentID = partialPaymentID;
		_p->ns2__CCCreditService::purchasingLevel = purchasingLevel;
		_p->ns2__CCCreditService::industryDatatype = industryDatatype;
		_p->ns2__CCCreditService::commerceIndicator = commerceIndicator;
		_p->ns2__CCCreditService::billPayment = billPayment;
		_p->ns2__CCCreditService::authorizationXID = authorizationXID;
		_p->ns2__CCCreditService::occurrenceNumber = occurrenceNumber;
		_p->ns2__CCCreditService::authCode = authCode;
		_p->ns2__CCCreditService::captureRequestToken = captureRequestToken;
		_p->ns2__CCCreditService::merchantReceiptNumber = merchantReceiptNumber;
		_p->ns2__CCCreditService::checksumKey = checksumKey;
		_p->ns2__CCCreditService::aggregatorID = aggregatorID;
		_p->ns2__CCCreditService::aggregatorName = aggregatorName;
		_p->ns2__CCCreditService::duration = duration;
		_p->ns2__CCCreditService::dpdeBillingMonth = dpdeBillingMonth;
		_p->ns2__CCCreditService::reconciliationIDAlternate = reconciliationIDAlternate;
		_p->ns2__CCCreditService::refundReason = refundReason;
		_p->ns2__CCCreditService::overridePaymentMethod = overridePaymentMethod;
		_p->ns2__CCCreditService::overridePaymentDetails = overridePaymentDetails;
		_p->ns2__CCCreditService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__CCCreditService(struct soap *soap, ns2__CCCreditService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCreditService", p->soap_type() == SOAP_TYPE_ns2__CCCreditService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCCreditService(struct soap *soap, const char *URL, ns2__CCCreditService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCreditService", p->soap_type() == SOAP_TYPE_ns2__CCCreditService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCCreditService(struct soap *soap, const char *URL, ns2__CCCreditService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCreditService", p->soap_type() == SOAP_TYPE_ns2__CCCreditService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCCreditService(struct soap *soap, const char *URL, ns2__CCCreditService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCreditService", p->soap_type() == SOAP_TYPE_ns2__CCCreditService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCCreditService * SOAP_FMAC4 soap_get_ns2__CCCreditService(struct soap*, ns2__CCCreditService *, const char*, const char*);

inline int soap_read_ns2__CCCreditService(struct soap *soap, ns2__CCCreditService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCCreditService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCCreditService(struct soap *soap, const char *URL, ns2__CCCreditService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCCreditService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCCreditService(struct soap *soap, ns2__CCCreditService *p)
{
	if (::soap_read_ns2__CCCreditService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCCaptureService_DEFINED
#define SOAP_TYPE_ns2__CCCaptureService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCCaptureService(struct soap*, const char*, int, const ns2__CCCaptureService *, const char*);
SOAP_FMAC3 ns2__CCCaptureService * SOAP_FMAC4 soap_in_ns2__CCCaptureService(struct soap*, const char*, ns2__CCCaptureService *, const char*);
SOAP_FMAC1 ns2__CCCaptureService * SOAP_FMAC2 soap_instantiate_ns2__CCCaptureService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCCaptureService * soap_new_ns2__CCCaptureService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCCaptureService(soap, n, NULL, NULL, NULL);
}

inline ns2__CCCaptureService * soap_new_req_ns2__CCCaptureService(
	struct soap *soap,
	const std::string& run)
{
	ns2__CCCaptureService *_p = ::soap_new_ns2__CCCaptureService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCCaptureService::run = run;
	}
	return _p;
}

inline ns2__CCCaptureService * soap_new_set_ns2__CCCaptureService(
	struct soap *soap,
	std::string *authType,
	std::string *verbalAuthCode,
	std::string *authRequestID,
	std::string *reconciliationID,
	std::string *partialPaymentID,
	std::string *purchasingLevel,
	std::string *industryDatatype,
	std::string *authRequestToken,
	std::string *merchantReceiptNumber,
	std::string *posData,
	std::string *transactionID,
	std::string *checksumKey,
	std::string *gratuityAmount,
	std::string *duration,
	std::string *dpdeBillingMonth,
	std::string *sequence,
	std::string *totalCount,
	std::string *reconciliationIDAlternate,
	std::string *aggregatorID,
	std::string *aggregatorName,
	const std::string& run)
{
	ns2__CCCaptureService *_p = ::soap_new_ns2__CCCaptureService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCCaptureService::authType = authType;
		_p->ns2__CCCaptureService::verbalAuthCode = verbalAuthCode;
		_p->ns2__CCCaptureService::authRequestID = authRequestID;
		_p->ns2__CCCaptureService::reconciliationID = reconciliationID;
		_p->ns2__CCCaptureService::partialPaymentID = partialPaymentID;
		_p->ns2__CCCaptureService::purchasingLevel = purchasingLevel;
		_p->ns2__CCCaptureService::industryDatatype = industryDatatype;
		_p->ns2__CCCaptureService::authRequestToken = authRequestToken;
		_p->ns2__CCCaptureService::merchantReceiptNumber = merchantReceiptNumber;
		_p->ns2__CCCaptureService::posData = posData;
		_p->ns2__CCCaptureService::transactionID = transactionID;
		_p->ns2__CCCaptureService::checksumKey = checksumKey;
		_p->ns2__CCCaptureService::gratuityAmount = gratuityAmount;
		_p->ns2__CCCaptureService::duration = duration;
		_p->ns2__CCCaptureService::dpdeBillingMonth = dpdeBillingMonth;
		_p->ns2__CCCaptureService::sequence = sequence;
		_p->ns2__CCCaptureService::totalCount = totalCount;
		_p->ns2__CCCaptureService::reconciliationIDAlternate = reconciliationIDAlternate;
		_p->ns2__CCCaptureService::aggregatorID = aggregatorID;
		_p->ns2__CCCaptureService::aggregatorName = aggregatorName;
		_p->ns2__CCCaptureService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__CCCaptureService(struct soap *soap, ns2__CCCaptureService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCaptureService", p->soap_type() == SOAP_TYPE_ns2__CCCaptureService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCCaptureService(struct soap *soap, const char *URL, ns2__CCCaptureService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCaptureService", p->soap_type() == SOAP_TYPE_ns2__CCCaptureService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCCaptureService(struct soap *soap, const char *URL, ns2__CCCaptureService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCaptureService", p->soap_type() == SOAP_TYPE_ns2__CCCaptureService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCCaptureService(struct soap *soap, const char *URL, ns2__CCCaptureService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCCaptureService", p->soap_type() == SOAP_TYPE_ns2__CCCaptureService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCCaptureService * SOAP_FMAC4 soap_get_ns2__CCCaptureService(struct soap*, ns2__CCCaptureService *, const char*, const char*);

inline int soap_read_ns2__CCCaptureService(struct soap *soap, ns2__CCCaptureService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCCaptureService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCCaptureService(struct soap *soap, const char *URL, ns2__CCCaptureService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCCaptureService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCCaptureService(struct soap *soap, ns2__CCCaptureService *p)
{
	if (::soap_read_ns2__CCCaptureService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCIncrementalAuthService_DEFINED
#define SOAP_TYPE_ns2__CCIncrementalAuthService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCIncrementalAuthService(struct soap*, const char*, int, const ns2__CCIncrementalAuthService *, const char*);
SOAP_FMAC3 ns2__CCIncrementalAuthService * SOAP_FMAC4 soap_in_ns2__CCIncrementalAuthService(struct soap*, const char*, ns2__CCIncrementalAuthService *, const char*);
SOAP_FMAC1 ns2__CCIncrementalAuthService * SOAP_FMAC2 soap_instantiate_ns2__CCIncrementalAuthService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCIncrementalAuthService * soap_new_ns2__CCIncrementalAuthService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCIncrementalAuthService(soap, n, NULL, NULL, NULL);
}

inline ns2__CCIncrementalAuthService * soap_new_req_ns2__CCIncrementalAuthService(
	struct soap *soap,
	const std::string& run)
{
	ns2__CCIncrementalAuthService *_p = ::soap_new_ns2__CCIncrementalAuthService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCIncrementalAuthService::run = run;
	}
	return _p;
}

inline ns2__CCIncrementalAuthService * soap_new_set_ns2__CCIncrementalAuthService(
	struct soap *soap,
	std::string *authRequestID,
	std::string *duration,
	const std::string& run)
{
	ns2__CCIncrementalAuthService *_p = ::soap_new_ns2__CCIncrementalAuthService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCIncrementalAuthService::authRequestID = authRequestID;
		_p->ns2__CCIncrementalAuthService::duration = duration;
		_p->ns2__CCIncrementalAuthService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__CCIncrementalAuthService(struct soap *soap, ns2__CCIncrementalAuthService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCIncrementalAuthService", p->soap_type() == SOAP_TYPE_ns2__CCIncrementalAuthService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCIncrementalAuthService(struct soap *soap, const char *URL, ns2__CCIncrementalAuthService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCIncrementalAuthService", p->soap_type() == SOAP_TYPE_ns2__CCIncrementalAuthService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCIncrementalAuthService(struct soap *soap, const char *URL, ns2__CCIncrementalAuthService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCIncrementalAuthService", p->soap_type() == SOAP_TYPE_ns2__CCIncrementalAuthService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCIncrementalAuthService(struct soap *soap, const char *URL, ns2__CCIncrementalAuthService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCIncrementalAuthService", p->soap_type() == SOAP_TYPE_ns2__CCIncrementalAuthService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCIncrementalAuthService * SOAP_FMAC4 soap_get_ns2__CCIncrementalAuthService(struct soap*, ns2__CCIncrementalAuthService *, const char*, const char*);

inline int soap_read_ns2__CCIncrementalAuthService(struct soap *soap, ns2__CCIncrementalAuthService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCIncrementalAuthService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCIncrementalAuthService(struct soap *soap, const char *URL, ns2__CCIncrementalAuthService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCIncrementalAuthService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCIncrementalAuthService(struct soap *soap, ns2__CCIncrementalAuthService *p)
{
	if (::soap_read_ns2__CCIncrementalAuthService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCSaleReversalService_DEFINED
#define SOAP_TYPE_ns2__CCSaleReversalService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCSaleReversalService(struct soap*, const char*, int, const ns2__CCSaleReversalService *, const char*);
SOAP_FMAC3 ns2__CCSaleReversalService * SOAP_FMAC4 soap_in_ns2__CCSaleReversalService(struct soap*, const char*, ns2__CCSaleReversalService *, const char*);
SOAP_FMAC1 ns2__CCSaleReversalService * SOAP_FMAC2 soap_instantiate_ns2__CCSaleReversalService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCSaleReversalService * soap_new_ns2__CCSaleReversalService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCSaleReversalService(soap, n, NULL, NULL, NULL);
}

inline ns2__CCSaleReversalService * soap_new_req_ns2__CCSaleReversalService(
	struct soap *soap,
	const std::string& run)
{
	ns2__CCSaleReversalService *_p = ::soap_new_ns2__CCSaleReversalService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCSaleReversalService::run = run;
	}
	return _p;
}

inline ns2__CCSaleReversalService * soap_new_set_ns2__CCSaleReversalService(
	struct soap *soap,
	std::string *saleRequestID,
	const std::string& run)
{
	ns2__CCSaleReversalService *_p = ::soap_new_ns2__CCSaleReversalService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCSaleReversalService::saleRequestID = saleRequestID;
		_p->ns2__CCSaleReversalService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__CCSaleReversalService(struct soap *soap, ns2__CCSaleReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleReversalService", p->soap_type() == SOAP_TYPE_ns2__CCSaleReversalService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCSaleReversalService(struct soap *soap, const char *URL, ns2__CCSaleReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleReversalService", p->soap_type() == SOAP_TYPE_ns2__CCSaleReversalService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCSaleReversalService(struct soap *soap, const char *URL, ns2__CCSaleReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleReversalService", p->soap_type() == SOAP_TYPE_ns2__CCSaleReversalService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCSaleReversalService(struct soap *soap, const char *URL, ns2__CCSaleReversalService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleReversalService", p->soap_type() == SOAP_TYPE_ns2__CCSaleReversalService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCSaleReversalService * SOAP_FMAC4 soap_get_ns2__CCSaleReversalService(struct soap*, ns2__CCSaleReversalService *, const char*, const char*);

inline int soap_read_ns2__CCSaleReversalService(struct soap *soap, ns2__CCSaleReversalService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCSaleReversalService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCSaleReversalService(struct soap *soap, const char *URL, ns2__CCSaleReversalService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCSaleReversalService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCSaleReversalService(struct soap *soap, ns2__CCSaleReversalService *p)
{
	if (::soap_read_ns2__CCSaleReversalService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCSaleCreditService_DEFINED
#define SOAP_TYPE_ns2__CCSaleCreditService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCSaleCreditService(struct soap*, const char*, int, const ns2__CCSaleCreditService *, const char*);
SOAP_FMAC3 ns2__CCSaleCreditService * SOAP_FMAC4 soap_in_ns2__CCSaleCreditService(struct soap*, const char*, ns2__CCSaleCreditService *, const char*);
SOAP_FMAC1 ns2__CCSaleCreditService * SOAP_FMAC2 soap_instantiate_ns2__CCSaleCreditService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCSaleCreditService * soap_new_ns2__CCSaleCreditService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCSaleCreditService(soap, n, NULL, NULL, NULL);
}

inline ns2__CCSaleCreditService * soap_new_req_ns2__CCSaleCreditService(
	struct soap *soap,
	const std::string& run)
{
	ns2__CCSaleCreditService *_p = ::soap_new_ns2__CCSaleCreditService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCSaleCreditService::run = run;
	}
	return _p;
}

inline ns2__CCSaleCreditService * soap_new_set_ns2__CCSaleCreditService(
	struct soap *soap,
	std::string *overridePaymentMethod,
	std::string *commerceIndicator,
	std::string *reconciliationID,
	std::string *refundReason,
	std::string *saleRequestID,
	const std::string& run)
{
	ns2__CCSaleCreditService *_p = ::soap_new_ns2__CCSaleCreditService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCSaleCreditService::overridePaymentMethod = overridePaymentMethod;
		_p->ns2__CCSaleCreditService::commerceIndicator = commerceIndicator;
		_p->ns2__CCSaleCreditService::reconciliationID = reconciliationID;
		_p->ns2__CCSaleCreditService::refundReason = refundReason;
		_p->ns2__CCSaleCreditService::saleRequestID = saleRequestID;
		_p->ns2__CCSaleCreditService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__CCSaleCreditService(struct soap *soap, ns2__CCSaleCreditService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleCreditService", p->soap_type() == SOAP_TYPE_ns2__CCSaleCreditService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCSaleCreditService(struct soap *soap, const char *URL, ns2__CCSaleCreditService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleCreditService", p->soap_type() == SOAP_TYPE_ns2__CCSaleCreditService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCSaleCreditService(struct soap *soap, const char *URL, ns2__CCSaleCreditService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleCreditService", p->soap_type() == SOAP_TYPE_ns2__CCSaleCreditService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCSaleCreditService(struct soap *soap, const char *URL, ns2__CCSaleCreditService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleCreditService", p->soap_type() == SOAP_TYPE_ns2__CCSaleCreditService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCSaleCreditService * SOAP_FMAC4 soap_get_ns2__CCSaleCreditService(struct soap*, ns2__CCSaleCreditService *, const char*, const char*);

inline int soap_read_ns2__CCSaleCreditService(struct soap *soap, ns2__CCSaleCreditService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCSaleCreditService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCSaleCreditService(struct soap *soap, const char *URL, ns2__CCSaleCreditService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCSaleCreditService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCSaleCreditService(struct soap *soap, ns2__CCSaleCreditService *p)
{
	if (::soap_read_ns2__CCSaleCreditService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCSaleService_DEFINED
#define SOAP_TYPE_ns2__CCSaleService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCSaleService(struct soap*, const char*, int, const ns2__CCSaleService *, const char*);
SOAP_FMAC3 ns2__CCSaleService * SOAP_FMAC4 soap_in_ns2__CCSaleService(struct soap*, const char*, ns2__CCSaleService *, const char*);
SOAP_FMAC1 ns2__CCSaleService * SOAP_FMAC2 soap_instantiate_ns2__CCSaleService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCSaleService * soap_new_ns2__CCSaleService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCSaleService(soap, n, NULL, NULL, NULL);
}

inline ns2__CCSaleService * soap_new_req_ns2__CCSaleService(
	struct soap *soap,
	const std::string& run)
{
	ns2__CCSaleService *_p = ::soap_new_ns2__CCSaleService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCSaleService::run = run;
	}
	return _p;
}

inline ns2__CCSaleService * soap_new_set_ns2__CCSaleService(
	struct soap *soap,
	std::string *overridePaymentMethod,
	std::string *commerceIndicator,
	std::string *partialAuthIndicator,
	std::string *cavv,
	std::string *xid,
	std::string *reconciliationID,
	std::string *industryDatatype,
	std::string *networkTokenCryptogram,
	std::string *paSpecificationVersion,
	std::string *directoryServerTransactionID,
	std::string *cryptocurrencyPurchase,
	std::string *lowValueExemptionIndicator,
	std::string *riskAnalysisExemptionIndicator,
	std::string *trustedMerchantExemptionIndicator,
	std::string *secureCorporatePaymentIndicator,
	std::string *deferredAuthIndicator,
	std::string *delegatedAuthenticationExemptionIndicator,
	std::string *transitTransactionType,
	std::string *transportationMode,
	const std::string& run)
{
	ns2__CCSaleService *_p = ::soap_new_ns2__CCSaleService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCSaleService::overridePaymentMethod = overridePaymentMethod;
		_p->ns2__CCSaleService::commerceIndicator = commerceIndicator;
		_p->ns2__CCSaleService::partialAuthIndicator = partialAuthIndicator;
		_p->ns2__CCSaleService::cavv = cavv;
		_p->ns2__CCSaleService::xid = xid;
		_p->ns2__CCSaleService::reconciliationID = reconciliationID;
		_p->ns2__CCSaleService::industryDatatype = industryDatatype;
		_p->ns2__CCSaleService::networkTokenCryptogram = networkTokenCryptogram;
		_p->ns2__CCSaleService::paSpecificationVersion = paSpecificationVersion;
		_p->ns2__CCSaleService::directoryServerTransactionID = directoryServerTransactionID;
		_p->ns2__CCSaleService::cryptocurrencyPurchase = cryptocurrencyPurchase;
		_p->ns2__CCSaleService::lowValueExemptionIndicator = lowValueExemptionIndicator;
		_p->ns2__CCSaleService::riskAnalysisExemptionIndicator = riskAnalysisExemptionIndicator;
		_p->ns2__CCSaleService::trustedMerchantExemptionIndicator = trustedMerchantExemptionIndicator;
		_p->ns2__CCSaleService::secureCorporatePaymentIndicator = secureCorporatePaymentIndicator;
		_p->ns2__CCSaleService::deferredAuthIndicator = deferredAuthIndicator;
		_p->ns2__CCSaleService::delegatedAuthenticationExemptionIndicator = delegatedAuthenticationExemptionIndicator;
		_p->ns2__CCSaleService::transitTransactionType = transitTransactionType;
		_p->ns2__CCSaleService::transportationMode = transportationMode;
		_p->ns2__CCSaleService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__CCSaleService(struct soap *soap, ns2__CCSaleService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleService", p->soap_type() == SOAP_TYPE_ns2__CCSaleService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCSaleService(struct soap *soap, const char *URL, ns2__CCSaleService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleService", p->soap_type() == SOAP_TYPE_ns2__CCSaleService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCSaleService(struct soap *soap, const char *URL, ns2__CCSaleService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleService", p->soap_type() == SOAP_TYPE_ns2__CCSaleService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCSaleService(struct soap *soap, const char *URL, ns2__CCSaleService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCSaleService", p->soap_type() == SOAP_TYPE_ns2__CCSaleService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCSaleService * SOAP_FMAC4 soap_get_ns2__CCSaleService(struct soap*, ns2__CCSaleService *, const char*, const char*);

inline int soap_read_ns2__CCSaleService(struct soap *soap, ns2__CCSaleService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCSaleService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCSaleService(struct soap *soap, const char *URL, ns2__CCSaleService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCSaleService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCSaleService(struct soap *soap, ns2__CCSaleService *p)
{
	if (::soap_read_ns2__CCSaleService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__VerificationService_DEFINED
#define SOAP_TYPE_ns2__VerificationService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VerificationService(struct soap*, const char*, int, const ns2__VerificationService *, const char*);
SOAP_FMAC3 ns2__VerificationService * SOAP_FMAC4 soap_in_ns2__VerificationService(struct soap*, const char*, ns2__VerificationService *, const char*);
SOAP_FMAC1 ns2__VerificationService * SOAP_FMAC2 soap_instantiate_ns2__VerificationService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VerificationService * soap_new_ns2__VerificationService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__VerificationService(soap, n, NULL, NULL, NULL);
}

inline ns2__VerificationService * soap_new_req_ns2__VerificationService(
	struct soap *soap,
	const std::string& run)
{
	ns2__VerificationService *_p = ::soap_new_ns2__VerificationService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__VerificationService::run = run;
	}
	return _p;
}

inline ns2__VerificationService * soap_new_set_ns2__VerificationService(
	struct soap *soap,
	std::string *reconciliationID,
	const std::string& run)
{
	ns2__VerificationService *_p = ::soap_new_ns2__VerificationService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__VerificationService::reconciliationID = reconciliationID;
		_p->ns2__VerificationService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__VerificationService(struct soap *soap, ns2__VerificationService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VerificationService", p->soap_type() == SOAP_TYPE_ns2__VerificationService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__VerificationService(struct soap *soap, const char *URL, ns2__VerificationService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VerificationService", p->soap_type() == SOAP_TYPE_ns2__VerificationService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__VerificationService(struct soap *soap, const char *URL, ns2__VerificationService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VerificationService", p->soap_type() == SOAP_TYPE_ns2__VerificationService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__VerificationService(struct soap *soap, const char *URL, ns2__VerificationService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VerificationService", p->soap_type() == SOAP_TYPE_ns2__VerificationService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__VerificationService * SOAP_FMAC4 soap_get_ns2__VerificationService(struct soap*, ns2__VerificationService *, const char*, const char*);

inline int soap_read_ns2__VerificationService(struct soap *soap, ns2__VerificationService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__VerificationService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__VerificationService(struct soap *soap, const char *URL, ns2__VerificationService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__VerificationService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__VerificationService(struct soap *soap, ns2__VerificationService *p)
{
	if (::soap_read_ns2__VerificationService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__OCTService_DEFINED
#define SOAP_TYPE_ns2__OCTService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OCTService(struct soap*, const char*, int, const ns2__OCTService *, const char*);
SOAP_FMAC3 ns2__OCTService * SOAP_FMAC4 soap_in_ns2__OCTService(struct soap*, const char*, ns2__OCTService *, const char*);
SOAP_FMAC1 ns2__OCTService * SOAP_FMAC2 soap_instantiate_ns2__OCTService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OCTService * soap_new_ns2__OCTService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__OCTService(soap, n, NULL, NULL, NULL);
}

inline ns2__OCTService * soap_new_req_ns2__OCTService(
	struct soap *soap,
	const std::string& run)
{
	ns2__OCTService *_p = ::soap_new_ns2__OCTService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__OCTService::run = run;
	}
	return _p;
}

inline ns2__OCTService * soap_new_set_ns2__OCTService(
	struct soap *soap,
	std::string *commerceIndicator,
	std::string *reconciliationID,
	std::string *networkOrder,
	std::string *overridePaymentMethod,
	const std::string& run)
{
	ns2__OCTService *_p = ::soap_new_ns2__OCTService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__OCTService::commerceIndicator = commerceIndicator;
		_p->ns2__OCTService::reconciliationID = reconciliationID;
		_p->ns2__OCTService::networkOrder = networkOrder;
		_p->ns2__OCTService::overridePaymentMethod = overridePaymentMethod;
		_p->ns2__OCTService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__OCTService(struct soap *soap, ns2__OCTService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:OCTService", p->soap_type() == SOAP_TYPE_ns2__OCTService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__OCTService(struct soap *soap, const char *URL, ns2__OCTService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:OCTService", p->soap_type() == SOAP_TYPE_ns2__OCTService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__OCTService(struct soap *soap, const char *URL, ns2__OCTService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:OCTService", p->soap_type() == SOAP_TYPE_ns2__OCTService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__OCTService(struct soap *soap, const char *URL, ns2__OCTService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:OCTService", p->soap_type() == SOAP_TYPE_ns2__OCTService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__OCTService * SOAP_FMAC4 soap_get_ns2__OCTService(struct soap*, ns2__OCTService *, const char*, const char*);

inline int soap_read_ns2__OCTService(struct soap *soap, ns2__OCTService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__OCTService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__OCTService(struct soap *soap, const char *URL, ns2__OCTService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__OCTService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__OCTService(struct soap *soap, ns2__OCTService *p)
{
	if (::soap_read_ns2__OCTService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__CCAuthService_DEFINED
#define SOAP_TYPE_ns2__CCAuthService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CCAuthService(struct soap*, const char*, int, const ns2__CCAuthService *, const char*);
SOAP_FMAC3 ns2__CCAuthService * SOAP_FMAC4 soap_in_ns2__CCAuthService(struct soap*, const char*, ns2__CCAuthService *, const char*);
SOAP_FMAC1 ns2__CCAuthService * SOAP_FMAC2 soap_instantiate_ns2__CCAuthService(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CCAuthService * soap_new_ns2__CCAuthService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__CCAuthService(soap, n, NULL, NULL, NULL);
}

inline ns2__CCAuthService * soap_new_req_ns2__CCAuthService(
	struct soap *soap,
	const std::string& run)
{
	ns2__CCAuthService *_p = ::soap_new_ns2__CCAuthService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCAuthService::run = run;
	}
	return _p;
}

inline ns2__CCAuthService * soap_new_set_ns2__CCAuthService(
	struct soap *soap,
	std::string *cavv,
	std::string *cavvAlgorithm,
	std::string *networkTokenCryptogram,
	std::string *paSpecificationVersion,
	std::string *directoryServerTransactionID,
	std::string *acsServerTransactionID,
	std::string *commerceIndicator,
	std::string *eciRaw,
	std::string *xid,
	std::string *reconciliationID,
	std::string *avsLevel,
	std::string *fxQuoteID,
	std::string *returnAuthRecord,
	std::string *authType,
	std::string *verbalAuthCode,
	std::string *billPayment,
	std::string *authenticationXID,
	std::string *authorizationXID,
	std::string *industryDatatype,
	std::string *traceNumber,
	std::string *checksumKey,
	std::string *aggregatorID,
	std::string *aggregatorName,
	std::string *splitTenderIndicator,
	std::string *veresEnrolled,
	std::string *paresStatus,
	std::string *partialAuthIndicator,
	std::string *captureDate,
	std::string *firstRecurringPayment,
	std::string *duration,
	std::string *overridePaymentMethod,
	std::string *mobileRemotePaymentType,
	std::string *cardholderVerificationMethod,
	std::string *dccRequestID,
	std::string *overridePaymentDetails,
	std::string *cardholderAuthenticationMethod,
	std::string *leastCostRouting,
	std::string *verificationType,
	std::string *cryptocurrencyPurchase,
	std::string *lowValueExemptionIndicator,
	std::string *riskAnalysisExemptionIndicator,
	std::string *trustedMerchantExemptionIndicator,
	std::string *secureCorporatePaymentIndicator,
	std::string *deferredAuthIndicator,
	std::string *aggregatedAuthIndicator,
	std::string *debtRecoveryIndicator,
	std::string *delegatedAuthenticationExemptionIndicator,
	std::string *transitTransactionType,
	std::string *transportationMode,
	std::string *totaloffersCount,
	std::string *effectiveAuthenticationType,
	std::string *paChallengeCode,
	std::string *paresStatusReason,
	std::string *challengeCancelCode,
	std::string *paNetworkScore,
	std::string *paAuthenticationDate,
	std::string *authenticationOutageExemptionIndicator,
	const std::string& run)
{
	ns2__CCAuthService *_p = ::soap_new_ns2__CCAuthService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__CCAuthService::cavv = cavv;
		_p->ns2__CCAuthService::cavvAlgorithm = cavvAlgorithm;
		_p->ns2__CCAuthService::networkTokenCryptogram = networkTokenCryptogram;
		_p->ns2__CCAuthService::paSpecificationVersion = paSpecificationVersion;
		_p->ns2__CCAuthService::directoryServerTransactionID = directoryServerTransactionID;
		_p->ns2__CCAuthService::acsServerTransactionID = acsServerTransactionID;
		_p->ns2__CCAuthService::commerceIndicator = commerceIndicator;
		_p->ns2__CCAuthService::eciRaw = eciRaw;
		_p->ns2__CCAuthService::xid = xid;
		_p->ns2__CCAuthService::reconciliationID = reconciliationID;
		_p->ns2__CCAuthService::avsLevel = avsLevel;
		_p->ns2__CCAuthService::fxQuoteID = fxQuoteID;
		_p->ns2__CCAuthService::returnAuthRecord = returnAuthRecord;
		_p->ns2__CCAuthService::authType = authType;
		_p->ns2__CCAuthService::verbalAuthCode = verbalAuthCode;
		_p->ns2__CCAuthService::billPayment = billPayment;
		_p->ns2__CCAuthService::authenticationXID = authenticationXID;
		_p->ns2__CCAuthService::authorizationXID = authorizationXID;
		_p->ns2__CCAuthService::industryDatatype = industryDatatype;
		_p->ns2__CCAuthService::traceNumber = traceNumber;
		_p->ns2__CCAuthService::checksumKey = checksumKey;
		_p->ns2__CCAuthService::aggregatorID = aggregatorID;
		_p->ns2__CCAuthService::aggregatorName = aggregatorName;
		_p->ns2__CCAuthService::splitTenderIndicator = splitTenderIndicator;
		_p->ns2__CCAuthService::veresEnrolled = veresEnrolled;
		_p->ns2__CCAuthService::paresStatus = paresStatus;
		_p->ns2__CCAuthService::partialAuthIndicator = partialAuthIndicator;
		_p->ns2__CCAuthService::captureDate = captureDate;
		_p->ns2__CCAuthService::firstRecurringPayment = firstRecurringPayment;
		_p->ns2__CCAuthService::duration = duration;
		_p->ns2__CCAuthService::overridePaymentMethod = overridePaymentMethod;
		_p->ns2__CCAuthService::mobileRemotePaymentType = mobileRemotePaymentType;
		_p->ns2__CCAuthService::cardholderVerificationMethod = cardholderVerificationMethod;
		_p->ns2__CCAuthService::dccRequestID = dccRequestID;
		_p->ns2__CCAuthService::overridePaymentDetails = overridePaymentDetails;
		_p->ns2__CCAuthService::cardholderAuthenticationMethod = cardholderAuthenticationMethod;
		_p->ns2__CCAuthService::leastCostRouting = leastCostRouting;
		_p->ns2__CCAuthService::verificationType = verificationType;
		_p->ns2__CCAuthService::cryptocurrencyPurchase = cryptocurrencyPurchase;
		_p->ns2__CCAuthService::lowValueExemptionIndicator = lowValueExemptionIndicator;
		_p->ns2__CCAuthService::riskAnalysisExemptionIndicator = riskAnalysisExemptionIndicator;
		_p->ns2__CCAuthService::trustedMerchantExemptionIndicator = trustedMerchantExemptionIndicator;
		_p->ns2__CCAuthService::secureCorporatePaymentIndicator = secureCorporatePaymentIndicator;
		_p->ns2__CCAuthService::deferredAuthIndicator = deferredAuthIndicator;
		_p->ns2__CCAuthService::aggregatedAuthIndicator = aggregatedAuthIndicator;
		_p->ns2__CCAuthService::debtRecoveryIndicator = debtRecoveryIndicator;
		_p->ns2__CCAuthService::delegatedAuthenticationExemptionIndicator = delegatedAuthenticationExemptionIndicator;
		_p->ns2__CCAuthService::transitTransactionType = transitTransactionType;
		_p->ns2__CCAuthService::transportationMode = transportationMode;
		_p->ns2__CCAuthService::totaloffersCount = totaloffersCount;
		_p->ns2__CCAuthService::effectiveAuthenticationType = effectiveAuthenticationType;
		_p->ns2__CCAuthService::paChallengeCode = paChallengeCode;
		_p->ns2__CCAuthService::paresStatusReason = paresStatusReason;
		_p->ns2__CCAuthService::challengeCancelCode = challengeCancelCode;
		_p->ns2__CCAuthService::paNetworkScore = paNetworkScore;
		_p->ns2__CCAuthService::paAuthenticationDate = paAuthenticationDate;
		_p->ns2__CCAuthService::authenticationOutageExemptionIndicator = authenticationOutageExemptionIndicator;
		_p->ns2__CCAuthService::run = run;
	}
	return _p;
}

inline int soap_write_ns2__CCAuthService(struct soap *soap, ns2__CCAuthService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAuthService", p->soap_type() == SOAP_TYPE_ns2__CCAuthService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__CCAuthService(struct soap *soap, const char *URL, ns2__CCAuthService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAuthService", p->soap_type() == SOAP_TYPE_ns2__CCAuthService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__CCAuthService(struct soap *soap, const char *URL, ns2__CCAuthService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAuthService", p->soap_type() == SOAP_TYPE_ns2__CCAuthService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__CCAuthService(struct soap *soap, const char *URL, ns2__CCAuthService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:CCAuthService", p->soap_type() == SOAP_TYPE_ns2__CCAuthService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__CCAuthService * SOAP_FMAC4 soap_get_ns2__CCAuthService(struct soap*, ns2__CCAuthService *, const char*, const char*);

inline int soap_read_ns2__CCAuthService(struct soap *soap, ns2__CCAuthService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__CCAuthService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__CCAuthService(struct soap *soap, const char *URL, ns2__CCAuthService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__CCAuthService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__CCAuthService(struct soap *soap, ns2__CCAuthService *p)
{
	if (::soap_read_ns2__CCAuthService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__Item_DEFINED
#define SOAP_TYPE_ns2__Item_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Item(struct soap*, const char*, int, const ns2__Item *, const char*);
SOAP_FMAC3 ns2__Item * SOAP_FMAC4 soap_in_ns2__Item(struct soap*, const char*, ns2__Item *, const char*);
SOAP_FMAC1 ns2__Item * SOAP_FMAC2 soap_instantiate_ns2__Item(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Item * soap_new_ns2__Item(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Item(soap, n, NULL, NULL, NULL);
}

inline ns2__Item * soap_new_req_ns2__Item(
	struct soap *soap)
{
	ns2__Item *_p = ::soap_new_ns2__Item(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Item * soap_new_set_ns2__Item(
	struct soap *soap,
	std::string *unitPrice,
	std::string *quantity,
	std::string *productCode,
	std::string *productName,
	std::string *productSKU,
	std::string *productRisk,
	std::string *taxAmount,
	std::string *cityOverrideAmount,
	std::string *cityOverrideRate,
	std::string *countyOverrideAmount,
	std::string *countyOverrideRate,
	std::string *districtOverrideAmount,
	std::string *districtOverrideRate,
	std::string *stateOverrideAmount,
	std::string *stateOverrideRate,
	std::string *countryOverrideAmount,
	std::string *countryOverrideRate,
	std::string *orderAcceptanceCity,
	std::string *orderAcceptanceCounty,
	std::string *orderAcceptanceCountry,
	std::string *orderAcceptanceState,
	std::string *orderAcceptancePostalCode,
	std::string *orderOriginCity,
	std::string *orderOriginCounty,
	std::string *orderOriginCountry,
	std::string *orderOriginState,
	std::string *orderOriginPostalCode,
	std::string *shipFromCity,
	std::string *shipFromCounty,
	std::string *shipFromCountry,
	std::string *shipFromState,
	std::string *shipFromPostalCode,
	std::string *export_,
	std::string *noExport,
	std::string *nationalTax,
	std::string *vatRate,
	std::string *sellerRegistration,
	std::string *sellerRegistration0,
	std::string *sellerRegistration1,
	std::string *sellerRegistration2,
	std::string *sellerRegistration3,
	std::string *sellerRegistration4,
	std::string *sellerRegistration5,
	std::string *sellerRegistration6,
	std::string *sellerRegistration7,
	std::string *sellerRegistration8,
	std::string *sellerRegistration9,
	std::string *buyerRegistration,
	std::string *middlemanRegistration,
	std::string *pointOfTitleTransfer,
	std::string *giftCategory,
	std::string *timeCategory,
	std::string *hostHedge,
	std::string *timeHedge,
	std::string *velocityHedge,
	std::string *nonsensicalHedge,
	std::string *phoneHedge,
	std::string *obscenitiesHedge,
	std::string *unitOfMeasure,
	std::string *taxRate,
	std::string *totalAmount,
	std::string *discountAmount,
	std::string *discountRate,
	std::string *commodityCode,
	std::string *grossNetIndicator,
	std::string *taxTypeApplied,
	std::string *discountIndicator,
	std::string *alternateTaxID,
	std::string *alternateTaxAmount,
	std::string *alternateTaxTypeApplied,
	std::string *alternateTaxRate,
	std::string *alternateTaxType,
	std::string *localTax,
	std::string *zeroCostToCustomerIndicator,
	std::string *passengerFirstName,
	std::string *passengerLastName,
	std::string *passengerID,
	std::string *passengerStatus,
	std::string *passengerType,
	std::string *passengerEmail,
	std::string *passengerPhone,
	std::string *passengerNationality,
	std::string *invoiceNumber,
	std::string *productDescription,
	std::string *taxStatusIndicator,
	std::string *discountManagementIndicator,
	std::string *typeOfSupply,
	std::string *sign,
	std::string *unitTaxAmount,
	std::string *weightAmount,
	std::string *weightID,
	std::string *weightUnitMeasurement,
	std::string *otherTax_USCORE1_USCOREtype,
	std::string *otherTax_USCORE1_USCOREamount,
	std::string *otherTax_USCORE1_USCORErate,
	std::string *otherTax_USCORE1_USCOREstatusIndicator,
	std::string *otherTax_USCORE2_USCOREtype,
	std::string *otherTax_USCORE2_USCOREamount,
	std::string *otherTax_USCORE2_USCORErate,
	std::string *otherTax_USCORE2_USCOREstatusIndicator,
	std::string *otherTax_USCORE3_USCOREtype,
	std::string *otherTax_USCORE3_USCOREamount,
	std::string *otherTax_USCORE3_USCORErate,
	std::string *otherTax_USCORE3_USCOREstatusIndicator,
	std::string *otherTax_USCORE4_USCOREtype,
	std::string *otherTax_USCORE4_USCOREamount,
	std::string *otherTax_USCORE4_USCORErate,
	std::string *otherTax_USCORE4_USCOREstatusIndicator,
	std::string *otherTax_USCORE5_USCOREtype,
	std::string *otherTax_USCORE5_USCOREamount,
	std::string *otherTax_USCORE5_USCORErate,
	std::string *otherTax_USCORE5_USCOREstatusIndicator,
	std::string *otherTax_USCORE6_USCOREtype,
	std::string *otherTax_USCORE6_USCOREamount,
	std::string *otherTax_USCORE6_USCORErate,
	std::string *otherTax_USCORE6_USCOREstatusIndicator,
	std::string *otherTax_USCORE7_USCOREtype,
	std::string *otherTax_USCORE7_USCOREamount,
	std::string *otherTax_USCORE7_USCORErate,
	std::string *otherTax_USCORE7_USCOREstatusIndicator,
	std::string *referenceData_USCORE1_USCOREnumber,
	std::string *referenceData_USCORE1_USCOREcode,
	std::string *referenceData_USCORE2_USCOREnumber,
	std::string *referenceData_USCORE2_USCOREcode,
	std::string *referenceData_USCORE3_USCOREnumber,
	std::string *referenceData_USCORE3_USCOREcode,
	std::string *referenceData_USCORE4_USCOREnumber,
	std::string *referenceData_USCORE4_USCOREcode,
	std::string *referenceData_USCORE5_USCOREnumber,
	std::string *referenceData_USCORE5_USCOREcode,
	std::string *referenceData_USCORE6_USCOREnumber,
	std::string *referenceData_USCORE6_USCOREcode,
	std::string *referenceData_USCORE7_USCOREnumber,
	std::string *referenceData_USCORE7_USCOREcode,
	std::string *shippingDestinationTypes,
	std::string *id)
{
	ns2__Item *_p = ::soap_new_ns2__Item(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Item::unitPrice = unitPrice;
		_p->ns2__Item::quantity = quantity;
		_p->ns2__Item::productCode = productCode;
		_p->ns2__Item::productName = productName;
		_p->ns2__Item::productSKU = productSKU;
		_p->ns2__Item::productRisk = productRisk;
		_p->ns2__Item::taxAmount = taxAmount;
		_p->ns2__Item::cityOverrideAmount = cityOverrideAmount;
		_p->ns2__Item::cityOverrideRate = cityOverrideRate;
		_p->ns2__Item::countyOverrideAmount = countyOverrideAmount;
		_p->ns2__Item::countyOverrideRate = countyOverrideRate;
		_p->ns2__Item::districtOverrideAmount = districtOverrideAmount;
		_p->ns2__Item::districtOverrideRate = districtOverrideRate;
		_p->ns2__Item::stateOverrideAmount = stateOverrideAmount;
		_p->ns2__Item::stateOverrideRate = stateOverrideRate;
		_p->ns2__Item::countryOverrideAmount = countryOverrideAmount;
		_p->ns2__Item::countryOverrideRate = countryOverrideRate;
		_p->ns2__Item::orderAcceptanceCity = orderAcceptanceCity;
		_p->ns2__Item::orderAcceptanceCounty = orderAcceptanceCounty;
		_p->ns2__Item::orderAcceptanceCountry = orderAcceptanceCountry;
		_p->ns2__Item::orderAcceptanceState = orderAcceptanceState;
		_p->ns2__Item::orderAcceptancePostalCode = orderAcceptancePostalCode;
		_p->ns2__Item::orderOriginCity = orderOriginCity;
		_p->ns2__Item::orderOriginCounty = orderOriginCounty;
		_p->ns2__Item::orderOriginCountry = orderOriginCountry;
		_p->ns2__Item::orderOriginState = orderOriginState;
		_p->ns2__Item::orderOriginPostalCode = orderOriginPostalCode;
		_p->ns2__Item::shipFromCity = shipFromCity;
		_p->ns2__Item::shipFromCounty = shipFromCounty;
		_p->ns2__Item::shipFromCountry = shipFromCountry;
		_p->ns2__Item::shipFromState = shipFromState;
		_p->ns2__Item::shipFromPostalCode = shipFromPostalCode;
		_p->ns2__Item::export_ = export_;
		_p->ns2__Item::noExport = noExport;
		_p->ns2__Item::nationalTax = nationalTax;
		_p->ns2__Item::vatRate = vatRate;
		_p->ns2__Item::sellerRegistration = sellerRegistration;
		_p->ns2__Item::sellerRegistration0 = sellerRegistration0;
		_p->ns2__Item::sellerRegistration1 = sellerRegistration1;
		_p->ns2__Item::sellerRegistration2 = sellerRegistration2;
		_p->ns2__Item::sellerRegistration3 = sellerRegistration3;
		_p->ns2__Item::sellerRegistration4 = sellerRegistration4;
		_p->ns2__Item::sellerRegistration5 = sellerRegistration5;
		_p->ns2__Item::sellerRegistration6 = sellerRegistration6;
		_p->ns2__Item::sellerRegistration7 = sellerRegistration7;
		_p->ns2__Item::sellerRegistration8 = sellerRegistration8;
		_p->ns2__Item::sellerRegistration9 = sellerRegistration9;
		_p->ns2__Item::buyerRegistration = buyerRegistration;
		_p->ns2__Item::middlemanRegistration = middlemanRegistration;
		_p->ns2__Item::pointOfTitleTransfer = pointOfTitleTransfer;
		_p->ns2__Item::giftCategory = giftCategory;
		_p->ns2__Item::timeCategory = timeCategory;
		_p->ns2__Item::hostHedge = hostHedge;
		_p->ns2__Item::timeHedge = timeHedge;
		_p->ns2__Item::velocityHedge = velocityHedge;
		_p->ns2__Item::nonsensicalHedge = nonsensicalHedge;
		_p->ns2__Item::phoneHedge = phoneHedge;
		_p->ns2__Item::obscenitiesHedge = obscenitiesHedge;
		_p->ns2__Item::unitOfMeasure = unitOfMeasure;
		_p->ns2__Item::taxRate = taxRate;
		_p->ns2__Item::totalAmount = totalAmount;
		_p->ns2__Item::discountAmount = discountAmount;
		_p->ns2__Item::discountRate = discountRate;
		_p->ns2__Item::commodityCode = commodityCode;
		_p->ns2__Item::grossNetIndicator = grossNetIndicator;
		_p->ns2__Item::taxTypeApplied = taxTypeApplied;
		_p->ns2__Item::discountIndicator = discountIndicator;
		_p->ns2__Item::alternateTaxID = alternateTaxID;
		_p->ns2__Item::alternateTaxAmount = alternateTaxAmount;
		_p->ns2__Item::alternateTaxTypeApplied = alternateTaxTypeApplied;
		_p->ns2__Item::alternateTaxRate = alternateTaxRate;
		_p->ns2__Item::alternateTaxType = alternateTaxType;
		_p->ns2__Item::localTax = localTax;
		_p->ns2__Item::zeroCostToCustomerIndicator = zeroCostToCustomerIndicator;
		_p->ns2__Item::passengerFirstName = passengerFirstName;
		_p->ns2__Item::passengerLastName = passengerLastName;
		_p->ns2__Item::passengerID = passengerID;
		_p->ns2__Item::passengerStatus = passengerStatus;
		_p->ns2__Item::passengerType = passengerType;
		_p->ns2__Item::passengerEmail = passengerEmail;
		_p->ns2__Item::passengerPhone = passengerPhone;
		_p->ns2__Item::passengerNationality = passengerNationality;
		_p->ns2__Item::invoiceNumber = invoiceNumber;
		_p->ns2__Item::productDescription = productDescription;
		_p->ns2__Item::taxStatusIndicator = taxStatusIndicator;
		_p->ns2__Item::discountManagementIndicator = discountManagementIndicator;
		_p->ns2__Item::typeOfSupply = typeOfSupply;
		_p->ns2__Item::sign = sign;
		_p->ns2__Item::unitTaxAmount = unitTaxAmount;
		_p->ns2__Item::weightAmount = weightAmount;
		_p->ns2__Item::weightID = weightID;
		_p->ns2__Item::weightUnitMeasurement = weightUnitMeasurement;
		_p->ns2__Item::otherTax_USCORE1_USCOREtype = otherTax_USCORE1_USCOREtype;
		_p->ns2__Item::otherTax_USCORE1_USCOREamount = otherTax_USCORE1_USCOREamount;
		_p->ns2__Item::otherTax_USCORE1_USCORErate = otherTax_USCORE1_USCORErate;
		_p->ns2__Item::otherTax_USCORE1_USCOREstatusIndicator = otherTax_USCORE1_USCOREstatusIndicator;
		_p->ns2__Item::otherTax_USCORE2_USCOREtype = otherTax_USCORE2_USCOREtype;
		_p->ns2__Item::otherTax_USCORE2_USCOREamount = otherTax_USCORE2_USCOREamount;
		_p->ns2__Item::otherTax_USCORE2_USCORErate = otherTax_USCORE2_USCORErate;
		_p->ns2__Item::otherTax_USCORE2_USCOREstatusIndicator = otherTax_USCORE2_USCOREstatusIndicator;
		_p->ns2__Item::otherTax_USCORE3_USCOREtype = otherTax_USCORE3_USCOREtype;
		_p->ns2__Item::otherTax_USCORE3_USCOREamount = otherTax_USCORE3_USCOREamount;
		_p->ns2__Item::otherTax_USCORE3_USCORErate = otherTax_USCORE3_USCORErate;
		_p->ns2__Item::otherTax_USCORE3_USCOREstatusIndicator = otherTax_USCORE3_USCOREstatusIndicator;
		_p->ns2__Item::otherTax_USCORE4_USCOREtype = otherTax_USCORE4_USCOREtype;
		_p->ns2__Item::otherTax_USCORE4_USCOREamount = otherTax_USCORE4_USCOREamount;
		_p->ns2__Item::otherTax_USCORE4_USCORErate = otherTax_USCORE4_USCORErate;
		_p->ns2__Item::otherTax_USCORE4_USCOREstatusIndicator = otherTax_USCORE4_USCOREstatusIndicator;
		_p->ns2__Item::otherTax_USCORE5_USCOREtype = otherTax_USCORE5_USCOREtype;
		_p->ns2__Item::otherTax_USCORE5_USCOREamount = otherTax_USCORE5_USCOREamount;
		_p->ns2__Item::otherTax_USCORE5_USCORErate = otherTax_USCORE5_USCORErate;
		_p->ns2__Item::otherTax_USCORE5_USCOREstatusIndicator = otherTax_USCORE5_USCOREstatusIndicator;
		_p->ns2__Item::otherTax_USCORE6_USCOREtype = otherTax_USCORE6_USCOREtype;
		_p->ns2__Item::otherTax_USCORE6_USCOREamount = otherTax_USCORE6_USCOREamount;
		_p->ns2__Item::otherTax_USCORE6_USCORErate = otherTax_USCORE6_USCORErate;
		_p->ns2__Item::otherTax_USCORE6_USCOREstatusIndicator = otherTax_USCORE6_USCOREstatusIndicator;
		_p->ns2__Item::otherTax_USCORE7_USCOREtype = otherTax_USCORE7_USCOREtype;
		_p->ns2__Item::otherTax_USCORE7_USCOREamount = otherTax_USCORE7_USCOREamount;
		_p->ns2__Item::otherTax_USCORE7_USCORErate = otherTax_USCORE7_USCORErate;
		_p->ns2__Item::otherTax_USCORE7_USCOREstatusIndicator = otherTax_USCORE7_USCOREstatusIndicator;
		_p->ns2__Item::referenceData_USCORE1_USCOREnumber = referenceData_USCORE1_USCOREnumber;
		_p->ns2__Item::referenceData_USCORE1_USCOREcode = referenceData_USCORE1_USCOREcode;
		_p->ns2__Item::referenceData_USCORE2_USCOREnumber = referenceData_USCORE2_USCOREnumber;
		_p->ns2__Item::referenceData_USCORE2_USCOREcode = referenceData_USCORE2_USCOREcode;
		_p->ns2__Item::referenceData_USCORE3_USCOREnumber = referenceData_USCORE3_USCOREnumber;
		_p->ns2__Item::referenceData_USCORE3_USCOREcode = referenceData_USCORE3_USCOREcode;
		_p->ns2__Item::referenceData_USCORE4_USCOREnumber = referenceData_USCORE4_USCOREnumber;
		_p->ns2__Item::referenceData_USCORE4_USCOREcode = referenceData_USCORE4_USCOREcode;
		_p->ns2__Item::referenceData_USCORE5_USCOREnumber = referenceData_USCORE5_USCOREnumber;
		_p->ns2__Item::referenceData_USCORE5_USCOREcode = referenceData_USCORE5_USCOREcode;
		_p->ns2__Item::referenceData_USCORE6_USCOREnumber = referenceData_USCORE6_USCOREnumber;
		_p->ns2__Item::referenceData_USCORE6_USCOREcode = referenceData_USCORE6_USCOREcode;
		_p->ns2__Item::referenceData_USCORE7_USCOREnumber = referenceData_USCORE7_USCOREnumber;
		_p->ns2__Item::referenceData_USCORE7_USCOREcode = referenceData_USCORE7_USCOREcode;
		_p->ns2__Item::shippingDestinationTypes = shippingDestinationTypes;
		_p->ns2__Item::id = id;
	}
	return _p;
}

inline int soap_write_ns2__Item(struct soap *soap, ns2__Item const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Item", p->soap_type() == SOAP_TYPE_ns2__Item ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Item(struct soap *soap, const char *URL, ns2__Item const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Item", p->soap_type() == SOAP_TYPE_ns2__Item ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__Item(struct soap *soap, const char *URL, ns2__Item const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Item", p->soap_type() == SOAP_TYPE_ns2__Item ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Item(struct soap *soap, const char *URL, ns2__Item const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Item", p->soap_type() == SOAP_TYPE_ns2__Item ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Item * SOAP_FMAC4 soap_get_ns2__Item(struct soap*, ns2__Item *, const char*, const char*);

inline int soap_read_ns2__Item(struct soap *soap, ns2__Item *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__Item(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Item(struct soap *soap, const char *URL, ns2__Item *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__Item(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__Item(struct soap *soap, ns2__Item *p)
{
	if (::soap_read_ns2__Item(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__integer_DEFINED
#define SOAP_TYPE_xsd__integer_DEFINED

inline void soap_default_xsd__integer(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap*, const std::string *);

#define soap_xsd__integer2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__integer(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__integer soap_instantiate_std__string


#define soap_new_xsd__integer soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__integer(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__integer(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__integer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__integer(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__integer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__integer(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__integer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__decimal_DEFINED
#define SOAP_TYPE_xsd__decimal_DEFINED

inline void soap_default_xsd__decimal(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, const std::string *);

#define soap_xsd__decimal2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__decimal(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__decimal soap_instantiate_std__string


#define soap_new_xsd__decimal soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__decimal(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__decimal(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__decimal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__decimal(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__decimal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__decimal(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__decimal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (::soap_read_xsd__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__runTransaction_DEFINED
#define SOAP_TYPE___ns1__runTransaction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__runTransaction(struct soap*, struct __ns1__runTransaction *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__runTransaction(struct soap*, const struct __ns1__runTransaction *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__runTransaction(struct soap*, const char*, int, const struct __ns1__runTransaction *, const char*);
SOAP_FMAC3 struct __ns1__runTransaction * SOAP_FMAC4 soap_in___ns1__runTransaction(struct soap*, const char*, struct __ns1__runTransaction *, const char*);
SOAP_FMAC1 struct __ns1__runTransaction * SOAP_FMAC2 soap_instantiate___ns1__runTransaction(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__runTransaction * soap_new___ns1__runTransaction(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__runTransaction(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__runTransaction * soap_new_req___ns1__runTransaction(
	struct soap *soap,
	const std::string& ns2__nvpRequest)
{
	struct __ns1__runTransaction *_p = ::soap_new___ns1__runTransaction(soap);
	if (_p)
	{	::soap_default___ns1__runTransaction(soap, _p);
		_p->ns2__nvpRequest = ns2__nvpRequest;
	}
	return _p;
}

inline struct __ns1__runTransaction * soap_new_set___ns1__runTransaction(
	struct soap *soap,
	const std::string& ns2__nvpRequest)
{
	struct __ns1__runTransaction *_p = ::soap_new___ns1__runTransaction(soap);
	if (_p)
	{	::soap_default___ns1__runTransaction(soap, _p);
		_p->ns2__nvpRequest = ns2__nvpRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__runTransaction(struct soap*, const struct __ns1__runTransaction *, const char*, const char*);

inline int soap_write___ns1__runTransaction(struct soap *soap, struct __ns1__runTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__runTransaction(soap, p), 0) || ::soap_put___ns1__runTransaction(soap, p, "-ns1:runTransaction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__runTransaction(struct soap *soap, const char *URL, struct __ns1__runTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__runTransaction(soap, p), 0) || ::soap_put___ns1__runTransaction(soap, p, "-ns1:runTransaction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__runTransaction(struct soap *soap, const char *URL, struct __ns1__runTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__runTransaction(soap, p), 0) || ::soap_put___ns1__runTransaction(soap, p, "-ns1:runTransaction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__runTransaction(struct soap *soap, const char *URL, struct __ns1__runTransaction const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__runTransaction(soap, p), 0) || ::soap_put___ns1__runTransaction(soap, p, "-ns1:runTransaction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__runTransaction * SOAP_FMAC4 soap_get___ns1__runTransaction(struct soap*, struct __ns1__runTransaction *, const char*, const char*);

inline int soap_read___ns1__runTransaction(struct soap *soap, struct __ns1__runTransaction *p)
{
	if (p)
	{	::soap_default___ns1__runTransaction(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__runTransaction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__runTransaction(struct soap *soap, const char *URL, struct __ns1__runTransaction *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__runTransaction(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__runTransaction(struct soap *soap, struct __ns1__runTransaction *p)
{
	if (::soap_read___ns1__runTransaction(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__runTransactionResponse_DEFINED
#define SOAP_TYPE___ns1__runTransactionResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__runTransactionResponse(struct soap*, struct __ns1__runTransactionResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__runTransactionResponse(struct soap*, const struct __ns1__runTransactionResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__runTransactionResponse(struct soap*, const char*, int, const struct __ns1__runTransactionResponse *, const char*);
SOAP_FMAC3 struct __ns1__runTransactionResponse * SOAP_FMAC4 soap_in___ns1__runTransactionResponse(struct soap*, const char*, struct __ns1__runTransactionResponse *, const char*);
SOAP_FMAC1 struct __ns1__runTransactionResponse * SOAP_FMAC2 soap_instantiate___ns1__runTransactionResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__runTransactionResponse * soap_new___ns1__runTransactionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__runTransactionResponse(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__runTransactionResponse * soap_new_req___ns1__runTransactionResponse(
	struct soap *soap,
	const std::string& ns2__nvpReply)
{
	struct __ns1__runTransactionResponse *_p = ::soap_new___ns1__runTransactionResponse(soap);
	if (_p)
	{	::soap_default___ns1__runTransactionResponse(soap, _p);
		_p->ns2__nvpReply = ns2__nvpReply;
	}
	return _p;
}

inline struct __ns1__runTransactionResponse * soap_new_set___ns1__runTransactionResponse(
	struct soap *soap,
	const std::string& ns2__nvpReply)
{
	struct __ns1__runTransactionResponse *_p = ::soap_new___ns1__runTransactionResponse(soap);
	if (_p)
	{	::soap_default___ns1__runTransactionResponse(soap, _p);
		_p->ns2__nvpReply = ns2__nvpReply;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__runTransactionResponse(struct soap*, const struct __ns1__runTransactionResponse *, const char*, const char*);

inline int soap_write___ns1__runTransactionResponse(struct soap *soap, struct __ns1__runTransactionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__runTransactionResponse(soap, p), 0) || ::soap_put___ns1__runTransactionResponse(soap, p, "-ns1:runTransactionResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__runTransactionResponse(struct soap *soap, const char *URL, struct __ns1__runTransactionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__runTransactionResponse(soap, p), 0) || ::soap_put___ns1__runTransactionResponse(soap, p, "-ns1:runTransactionResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__runTransactionResponse(struct soap *soap, const char *URL, struct __ns1__runTransactionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__runTransactionResponse(soap, p), 0) || ::soap_put___ns1__runTransactionResponse(soap, p, "-ns1:runTransactionResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__runTransactionResponse(struct soap *soap, const char *URL, struct __ns1__runTransactionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__runTransactionResponse(soap, p), 0) || ::soap_put___ns1__runTransactionResponse(soap, p, "-ns1:runTransactionResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__runTransactionResponse * SOAP_FMAC4 soap_get___ns1__runTransactionResponse(struct soap*, struct __ns1__runTransactionResponse *, const char*, const char*);

inline int soap_read___ns1__runTransactionResponse(struct soap *soap, struct __ns1__runTransactionResponse *p)
{
	if (p)
	{	::soap_default___ns1__runTransactionResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__runTransactionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__runTransactionResponse(struct soap *soap, const char *URL, struct __ns1__runTransactionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__runTransactionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__runTransactionResponse(struct soap *soap, struct __ns1__runTransactionResponse *p)
{
	if (::soap_read___ns1__runTransactionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons2__PauseRuleResultItem_DEFINED
#define SOAP_TYPE_PointerTons2__PauseRuleResultItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PauseRuleResultItem(struct soap*, ns2__PauseRuleResultItem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PauseRuleResultItem(struct soap*, const char *, int, ns2__PauseRuleResultItem *const*, const char *);
SOAP_FMAC3 ns2__PauseRuleResultItem ** SOAP_FMAC4 soap_in_PointerTons2__PauseRuleResultItem(struct soap*, const char*, ns2__PauseRuleResultItem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PauseRuleResultItem(struct soap*, ns2__PauseRuleResultItem *const*, const char*, const char*);
SOAP_FMAC3 ns2__PauseRuleResultItem ** SOAP_FMAC4 soap_get_PointerTons2__PauseRuleResultItem(struct soap*, ns2__PauseRuleResultItem **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PauseRuleResultItems_DEFINED
#define SOAP_TYPE_PointerTons2__PauseRuleResultItems_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PauseRuleResultItems(struct soap*, ns2__PauseRuleResultItems *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PauseRuleResultItems(struct soap*, const char *, int, ns2__PauseRuleResultItems *const*, const char *);
SOAP_FMAC3 ns2__PauseRuleResultItems ** SOAP_FMAC4 soap_in_PointerTons2__PauseRuleResultItems(struct soap*, const char*, ns2__PauseRuleResultItems **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PauseRuleResultItems(struct soap*, ns2__PauseRuleResultItems *const*, const char*, const char*);
SOAP_FMAC3 ns2__PauseRuleResultItems ** SOAP_FMAC4 soap_get_PointerTons2__PauseRuleResultItems(struct soap*, ns2__PauseRuleResultItems **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ProfileReplyEarly_DEFINED
#define SOAP_TYPE_PointerTons2__ProfileReplyEarly_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ProfileReplyEarly(struct soap*, ns2__ProfileReplyEarly *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ProfileReplyEarly(struct soap*, const char *, int, ns2__ProfileReplyEarly *const*, const char *);
SOAP_FMAC3 ns2__ProfileReplyEarly ** SOAP_FMAC4 soap_in_PointerTons2__ProfileReplyEarly(struct soap*, const char*, ns2__ProfileReplyEarly **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ProfileReplyEarly(struct soap*, ns2__ProfileReplyEarly *const*, const char*, const char*);
SOAP_FMAC3 ns2__ProfileReplyEarly ** SOAP_FMAC4 soap_get_PointerTons2__ProfileReplyEarly(struct soap*, ns2__ProfileReplyEarly **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__VCCustomData_DEFINED
#define SOAP_TYPE_PointerTons2__VCCustomData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VCCustomData(struct soap*, ns2__VCCustomData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VCCustomData(struct soap*, const char *, int, ns2__VCCustomData *const*, const char *);
SOAP_FMAC3 ns2__VCCustomData ** SOAP_FMAC4 soap_in_PointerTons2__VCCustomData(struct soap*, const char*, ns2__VCCustomData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VCCustomData(struct soap*, ns2__VCCustomData *const*, const char*, const char*);
SOAP_FMAC3 ns2__VCCustomData ** SOAP_FMAC4 soap_get_PointerTons2__VCCustomData(struct soap*, ns2__VCCustomData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__VCCardArt_DEFINED
#define SOAP_TYPE_PointerTons2__VCCardArt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VCCardArt(struct soap*, ns2__VCCardArt *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VCCardArt(struct soap*, const char *, int, ns2__VCCardArt *const*, const char *);
SOAP_FMAC3 ns2__VCCardArt ** SOAP_FMAC4 soap_in_PointerTons2__VCCardArt(struct soap*, const char*, ns2__VCCardArt **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VCCardArt(struct soap*, ns2__VCCardArt *const*, const char*, const char*);
SOAP_FMAC3 ns2__VCCardArt ** SOAP_FMAC4 soap_get_PointerTons2__VCCardArt(struct soap*, ns2__VCCardArt **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PaypalTransaction_DEFINED
#define SOAP_TYPE_PointerTons2__PaypalTransaction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PaypalTransaction(struct soap*, ns2__PaypalTransaction *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PaypalTransaction(struct soap*, const char *, int, ns2__PaypalTransaction *const*, const char *);
SOAP_FMAC3 ns2__PaypalTransaction ** SOAP_FMAC4 soap_in_PointerTons2__PaypalTransaction(struct soap*, const char*, ns2__PaypalTransaction **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PaypalTransaction(struct soap*, ns2__PaypalTransaction *const*, const char*, const char*);
SOAP_FMAC3 ns2__PaypalTransaction ** SOAP_FMAC4 soap_get_PointerTons2__PaypalTransaction(struct soap*, ns2__PaypalTransaction **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__AuxiliaryField_DEFINED
#define SOAP_TYPE_PointerTons2__AuxiliaryField_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AuxiliaryField(struct soap*, ns2__AuxiliaryField *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AuxiliaryField(struct soap*, const char *, int, ns2__AuxiliaryField *const*, const char *);
SOAP_FMAC3 ns2__AuxiliaryField ** SOAP_FMAC4 soap_in_PointerTons2__AuxiliaryField(struct soap*, const char*, ns2__AuxiliaryField **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AuxiliaryField(struct soap*, ns2__AuxiliaryField *const*, const char*, const char*);
SOAP_FMAC3 ns2__AuxiliaryField ** SOAP_FMAC4 soap_get_PointerTons2__AuxiliaryField(struct soap*, ns2__AuxiliaryField **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__MDDField_DEFINED
#define SOAP_TYPE_PointerTons2__MDDField_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MDDField(struct soap*, ns2__MDDField *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MDDField(struct soap*, const char *, int, ns2__MDDField *const*, const char *);
SOAP_FMAC3 ns2__MDDField ** SOAP_FMAC4 soap_in_PointerTons2__MDDField(struct soap*, const char*, ns2__MDDField **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MDDField(struct soap*, ns2__MDDField *const*, const char*, const char*);
SOAP_FMAC3 ns2__MDDField ** SOAP_FMAC4 soap_get_PointerTons2__MDDField(struct soap*, ns2__MDDField **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Service_DEFINED
#define SOAP_TYPE_PointerTons2__Service_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Service(struct soap*, ns2__Service *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Service(struct soap*, const char *, int, ns2__Service *const*, const char *);
SOAP_FMAC3 ns2__Service ** SOAP_FMAC4 soap_in_PointerTons2__Service(struct soap*, const char*, ns2__Service **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Service(struct soap*, ns2__Service *const*, const char*, const char*);
SOAP_FMAC3 ns2__Service ** SOAP_FMAC4 soap_get_PointerTons2__Service(struct soap*, ns2__Service **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Leg_DEFINED
#define SOAP_TYPE_PointerTons2__Leg_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Leg(struct soap*, ns2__Leg *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Leg(struct soap*, const char *, int, ns2__Leg *const*, const char *);
SOAP_FMAC3 ns2__Leg ** SOAP_FMAC4 soap_in_PointerTons2__Leg(struct soap*, const char*, ns2__Leg **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Leg(struct soap*, ns2__Leg *const*, const char*, const char*);
SOAP_FMAC3 ns2__Leg ** SOAP_FMAC4 soap_get_PointerTons2__Leg(struct soap*, ns2__Leg **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Passenger_DEFINED
#define SOAP_TYPE_PointerTons2__Passenger_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Passenger(struct soap*, ns2__Passenger *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Passenger(struct soap*, const char *, int, ns2__Passenger *const*, const char *);
SOAP_FMAC3 ns2__Passenger ** SOAP_FMAC4 soap_in_PointerTons2__Passenger(struct soap*, const char*, ns2__Passenger **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Passenger(struct soap*, ns2__Passenger *const*, const char*, const char*);
SOAP_FMAC3 ns2__Passenger ** SOAP_FMAC4 soap_get_PointerTons2__Passenger(struct soap*, ns2__Passenger **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ReplyReserved_DEFINED
#define SOAP_TYPE_PointerTons2__ReplyReserved_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ReplyReserved(struct soap*, ns2__ReplyReserved *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ReplyReserved(struct soap*, const char *, int, ns2__ReplyReserved *const*, const char *);
SOAP_FMAC3 ns2__ReplyReserved ** SOAP_FMAC4 soap_in_PointerTons2__ReplyReserved(struct soap*, const char*, ns2__ReplyReserved **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ReplyReserved(struct soap*, ns2__ReplyReserved *const*, const char*, const char*);
SOAP_FMAC3 ns2__ReplyReserved ** SOAP_FMAC4 soap_get_PointerTons2__ReplyReserved(struct soap*, ns2__ReplyReserved **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__AbortReply_DEFINED
#define SOAP_TYPE_PointerTons2__AbortReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AbortReply(struct soap*, ns2__AbortReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AbortReply(struct soap*, const char *, int, ns2__AbortReply *const*, const char *);
SOAP_FMAC3 ns2__AbortReply ** SOAP_FMAC4 soap_in_PointerTons2__AbortReply(struct soap*, const char*, ns2__AbortReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AbortReply(struct soap*, ns2__AbortReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__AbortReply ** SOAP_FMAC4 soap_get_PointerTons2__AbortReply(struct soap*, ns2__AbortReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ECAVSReply_DEFINED
#define SOAP_TYPE_PointerTons2__ECAVSReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ECAVSReply(struct soap*, ns2__ECAVSReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ECAVSReply(struct soap*, const char *, int, ns2__ECAVSReply *const*, const char *);
SOAP_FMAC3 ns2__ECAVSReply ** SOAP_FMAC4 soap_in_PointerTons2__ECAVSReply(struct soap*, const char*, ns2__ECAVSReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ECAVSReply(struct soap*, ns2__ECAVSReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__ECAVSReply ** SOAP_FMAC4 soap_get_PointerTons2__ECAVSReply(struct soap*, ns2__ECAVSReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCCheckStatusReply_DEFINED
#define SOAP_TYPE_PointerTons2__CCCheckStatusReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCCheckStatusReply(struct soap*, ns2__CCCheckStatusReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCCheckStatusReply(struct soap*, const char *, int, ns2__CCCheckStatusReply *const*, const char *);
SOAP_FMAC3 ns2__CCCheckStatusReply ** SOAP_FMAC4 soap_in_PointerTons2__CCCheckStatusReply(struct soap*, const char*, ns2__CCCheckStatusReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCCheckStatusReply(struct soap*, ns2__CCCheckStatusReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCCheckStatusReply ** SOAP_FMAC4 soap_get_PointerTons2__CCCheckStatusReply(struct soap*, ns2__CCCheckStatusReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__GiftCardRefundReply_DEFINED
#define SOAP_TYPE_PointerTons2__GiftCardRefundReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GiftCardRefundReply(struct soap*, ns2__GiftCardRefundReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GiftCardRefundReply(struct soap*, const char *, int, ns2__GiftCardRefundReply *const*, const char *);
SOAP_FMAC3 ns2__GiftCardRefundReply ** SOAP_FMAC4 soap_in_PointerTons2__GiftCardRefundReply(struct soap*, const char*, ns2__GiftCardRefundReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GiftCardRefundReply(struct soap*, ns2__GiftCardRefundReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__GiftCardRefundReply ** SOAP_FMAC4 soap_get_PointerTons2__GiftCardRefundReply(struct soap*, ns2__GiftCardRefundReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__GiftCardReloadReply_DEFINED
#define SOAP_TYPE_PointerTons2__GiftCardReloadReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GiftCardReloadReply(struct soap*, ns2__GiftCardReloadReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GiftCardReloadReply(struct soap*, const char *, int, ns2__GiftCardReloadReply *const*, const char *);
SOAP_FMAC3 ns2__GiftCardReloadReply ** SOAP_FMAC4 soap_in_PointerTons2__GiftCardReloadReply(struct soap*, const char*, ns2__GiftCardReloadReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GiftCardReloadReply(struct soap*, ns2__GiftCardReloadReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__GiftCardReloadReply ** SOAP_FMAC4 soap_get_PointerTons2__GiftCardReloadReply(struct soap*, ns2__GiftCardReloadReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__GiftCardReversalReply_DEFINED
#define SOAP_TYPE_PointerTons2__GiftCardReversalReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GiftCardReversalReply(struct soap*, ns2__GiftCardReversalReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GiftCardReversalReply(struct soap*, const char *, int, ns2__GiftCardReversalReply *const*, const char *);
SOAP_FMAC3 ns2__GiftCardReversalReply ** SOAP_FMAC4 soap_in_PointerTons2__GiftCardReversalReply(struct soap*, const char*, ns2__GiftCardReversalReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GiftCardReversalReply(struct soap*, ns2__GiftCardReversalReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__GiftCardReversalReply ** SOAP_FMAC4 soap_get_PointerTons2__GiftCardReversalReply(struct soap*, ns2__GiftCardReversalReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__GiftCardVoidReply_DEFINED
#define SOAP_TYPE_PointerTons2__GiftCardVoidReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GiftCardVoidReply(struct soap*, ns2__GiftCardVoidReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GiftCardVoidReply(struct soap*, const char *, int, ns2__GiftCardVoidReply *const*, const char *);
SOAP_FMAC3 ns2__GiftCardVoidReply ** SOAP_FMAC4 soap_in_PointerTons2__GiftCardVoidReply(struct soap*, const char*, ns2__GiftCardVoidReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GiftCardVoidReply(struct soap*, ns2__GiftCardVoidReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__GiftCardVoidReply ** SOAP_FMAC4 soap_get_PointerTons2__GiftCardVoidReply(struct soap*, ns2__GiftCardVoidReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__GiftCardRedemptionReply_DEFINED
#define SOAP_TYPE_PointerTons2__GiftCardRedemptionReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GiftCardRedemptionReply(struct soap*, ns2__GiftCardRedemptionReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GiftCardRedemptionReply(struct soap*, const char *, int, ns2__GiftCardRedemptionReply *const*, const char *);
SOAP_FMAC3 ns2__GiftCardRedemptionReply ** SOAP_FMAC4 soap_in_PointerTons2__GiftCardRedemptionReply(struct soap*, const char*, ns2__GiftCardRedemptionReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GiftCardRedemptionReply(struct soap*, ns2__GiftCardRedemptionReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__GiftCardRedemptionReply ** SOAP_FMAC4 soap_get_PointerTons2__GiftCardRedemptionReply(struct soap*, ns2__GiftCardRedemptionReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__GiftCardBalanceInquiryReply_DEFINED
#define SOAP_TYPE_PointerTons2__GiftCardBalanceInquiryReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GiftCardBalanceInquiryReply(struct soap*, ns2__GiftCardBalanceInquiryReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GiftCardBalanceInquiryReply(struct soap*, const char *, int, ns2__GiftCardBalanceInquiryReply *const*, const char *);
SOAP_FMAC3 ns2__GiftCardBalanceInquiryReply ** SOAP_FMAC4 soap_in_PointerTons2__GiftCardBalanceInquiryReply(struct soap*, const char*, ns2__GiftCardBalanceInquiryReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GiftCardBalanceInquiryReply(struct soap*, ns2__GiftCardBalanceInquiryReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__GiftCardBalanceInquiryReply ** SOAP_FMAC4 soap_get_PointerTons2__GiftCardBalanceInquiryReply(struct soap*, ns2__GiftCardBalanceInquiryReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__GiftCardActivationReply_DEFINED
#define SOAP_TYPE_PointerTons2__GiftCardActivationReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GiftCardActivationReply(struct soap*, ns2__GiftCardActivationReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GiftCardActivationReply(struct soap*, const char *, int, ns2__GiftCardActivationReply *const*, const char *);
SOAP_FMAC3 ns2__GiftCardActivationReply ** SOAP_FMAC4 soap_in_PointerTons2__GiftCardActivationReply(struct soap*, const char*, ns2__GiftCardActivationReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GiftCardActivationReply(struct soap*, ns2__GiftCardActivationReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__GiftCardActivationReply ** SOAP_FMAC4 soap_get_PointerTons2__GiftCardActivationReply(struct soap*, ns2__GiftCardActivationReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__GetMasterpassDataReply_DEFINED
#define SOAP_TYPE_PointerTons2__GetMasterpassDataReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GetMasterpassDataReply(struct soap*, ns2__GetMasterpassDataReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GetMasterpassDataReply(struct soap*, const char *, int, ns2__GetMasterpassDataReply *const*, const char *);
SOAP_FMAC3 ns2__GetMasterpassDataReply ** SOAP_FMAC4 soap_in_PointerTons2__GetMasterpassDataReply(struct soap*, const char*, ns2__GetMasterpassDataReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GetMasterpassDataReply(struct soap*, ns2__GetMasterpassDataReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__GetMasterpassDataReply ** SOAP_FMAC4 soap_get_PointerTons2__GetMasterpassDataReply(struct soap*, ns2__GetMasterpassDataReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APRevokeMandateReply_DEFINED
#define SOAP_TYPE_PointerTons2__APRevokeMandateReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APRevokeMandateReply(struct soap*, ns2__APRevokeMandateReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APRevokeMandateReply(struct soap*, const char *, int, ns2__APRevokeMandateReply *const*, const char *);
SOAP_FMAC3 ns2__APRevokeMandateReply ** SOAP_FMAC4 soap_in_PointerTons2__APRevokeMandateReply(struct soap*, const char*, ns2__APRevokeMandateReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APRevokeMandateReply(struct soap*, ns2__APRevokeMandateReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APRevokeMandateReply ** SOAP_FMAC4 soap_get_PointerTons2__APRevokeMandateReply(struct soap*, ns2__APRevokeMandateReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APImportMandateReply_DEFINED
#define SOAP_TYPE_PointerTons2__APImportMandateReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APImportMandateReply(struct soap*, ns2__APImportMandateReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APImportMandateReply(struct soap*, const char *, int, ns2__APImportMandateReply *const*, const char *);
SOAP_FMAC3 ns2__APImportMandateReply ** SOAP_FMAC4 soap_in_PointerTons2__APImportMandateReply(struct soap*, const char*, ns2__APImportMandateReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APImportMandateReply(struct soap*, ns2__APImportMandateReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APImportMandateReply ** SOAP_FMAC4 soap_get_PointerTons2__APImportMandateReply(struct soap*, ns2__APImportMandateReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APUpdateMandateReply_DEFINED
#define SOAP_TYPE_PointerTons2__APUpdateMandateReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APUpdateMandateReply(struct soap*, ns2__APUpdateMandateReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APUpdateMandateReply(struct soap*, const char *, int, ns2__APUpdateMandateReply *const*, const char *);
SOAP_FMAC3 ns2__APUpdateMandateReply ** SOAP_FMAC4 soap_in_PointerTons2__APUpdateMandateReply(struct soap*, const char*, ns2__APUpdateMandateReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APUpdateMandateReply(struct soap*, ns2__APUpdateMandateReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APUpdateMandateReply ** SOAP_FMAC4 soap_get_PointerTons2__APUpdateMandateReply(struct soap*, ns2__APUpdateMandateReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APMandateStatusReply_DEFINED
#define SOAP_TYPE_PointerTons2__APMandateStatusReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APMandateStatusReply(struct soap*, ns2__APMandateStatusReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APMandateStatusReply(struct soap*, const char *, int, ns2__APMandateStatusReply *const*, const char *);
SOAP_FMAC3 ns2__APMandateStatusReply ** SOAP_FMAC4 soap_in_PointerTons2__APMandateStatusReply(struct soap*, const char*, ns2__APMandateStatusReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APMandateStatusReply(struct soap*, ns2__APMandateStatusReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APMandateStatusReply ** SOAP_FMAC4 soap_get_PointerTons2__APMandateStatusReply(struct soap*, ns2__APMandateStatusReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APCreateMandateReply_DEFINED
#define SOAP_TYPE_PointerTons2__APCreateMandateReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APCreateMandateReply(struct soap*, ns2__APCreateMandateReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APCreateMandateReply(struct soap*, const char *, int, ns2__APCreateMandateReply *const*, const char *);
SOAP_FMAC3 ns2__APCreateMandateReply ** SOAP_FMAC4 soap_in_PointerTons2__APCreateMandateReply(struct soap*, const char*, ns2__APCreateMandateReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APCreateMandateReply(struct soap*, ns2__APCreateMandateReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APCreateMandateReply ** SOAP_FMAC4 soap_get_PointerTons2__APCreateMandateReply(struct soap*, ns2__APCreateMandateReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Routing_DEFINED
#define SOAP_TYPE_PointerTons2__Routing_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Routing(struct soap*, ns2__Routing *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Routing(struct soap*, const char *, int, ns2__Routing *const*, const char *);
SOAP_FMAC3 ns2__Routing ** SOAP_FMAC4 soap_in_PointerTons2__Routing(struct soap*, const char*, ns2__Routing **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Routing(struct soap*, ns2__Routing *const*, const char*, const char*);
SOAP_FMAC3 ns2__Routing ** SOAP_FMAC4 soap_get_PointerTons2__Routing(struct soap*, ns2__Routing **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__BalanceInfo_DEFINED
#define SOAP_TYPE_PointerTons2__BalanceInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BalanceInfo(struct soap*, ns2__BalanceInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BalanceInfo(struct soap*, const char *, int, ns2__BalanceInfo *const*, const char *);
SOAP_FMAC3 ns2__BalanceInfo ** SOAP_FMAC4 soap_in_PointerTons2__BalanceInfo(struct soap*, const char*, ns2__BalanceInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BalanceInfo(struct soap*, ns2__BalanceInfo *const*, const char*, const char*);
SOAP_FMAC3 ns2__BalanceInfo ** SOAP_FMAC4 soap_get_PointerTons2__BalanceInfo(struct soap*, ns2__BalanceInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APBillingAgreementReply_DEFINED
#define SOAP_TYPE_PointerTons2__APBillingAgreementReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APBillingAgreementReply(struct soap*, ns2__APBillingAgreementReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APBillingAgreementReply(struct soap*, const char *, int, ns2__APBillingAgreementReply *const*, const char *);
SOAP_FMAC3 ns2__APBillingAgreementReply ** SOAP_FMAC4 soap_in_PointerTons2__APBillingAgreementReply(struct soap*, const char*, ns2__APBillingAgreementReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APBillingAgreementReply(struct soap*, ns2__APBillingAgreementReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APBillingAgreementReply ** SOAP_FMAC4 soap_get_PointerTons2__APBillingAgreementReply(struct soap*, ns2__APBillingAgreementReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APCancelReply_DEFINED
#define SOAP_TYPE_PointerTons2__APCancelReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APCancelReply(struct soap*, ns2__APCancelReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APCancelReply(struct soap*, const char *, int, ns2__APCancelReply *const*, const char *);
SOAP_FMAC3 ns2__APCancelReply ** SOAP_FMAC4 soap_in_PointerTons2__APCancelReply(struct soap*, const char*, ns2__APCancelReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APCancelReply(struct soap*, ns2__APCancelReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APCancelReply ** SOAP_FMAC4 soap_get_PointerTons2__APCancelReply(struct soap*, ns2__APCancelReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APOrderReply_DEFINED
#define SOAP_TYPE_PointerTons2__APOrderReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APOrderReply(struct soap*, ns2__APOrderReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APOrderReply(struct soap*, const char *, int, ns2__APOrderReply *const*, const char *);
SOAP_FMAC3 ns2__APOrderReply ** SOAP_FMAC4 soap_in_PointerTons2__APOrderReply(struct soap*, const char*, ns2__APOrderReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APOrderReply(struct soap*, ns2__APOrderReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APOrderReply ** SOAP_FMAC4 soap_get_PointerTons2__APOrderReply(struct soap*, ns2__APOrderReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Network_DEFINED
#define SOAP_TYPE_PointerTons2__Network_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Network(struct soap*, ns2__Network *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Network(struct soap*, const char *, int, ns2__Network *const*, const char *);
SOAP_FMAC3 ns2__Network ** SOAP_FMAC4 soap_in_PointerTons2__Network(struct soap*, const char*, ns2__Network **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Network(struct soap*, ns2__Network *const*, const char*, const char*);
SOAP_FMAC3 ns2__Network ** SOAP_FMAC4 soap_get_PointerTons2__Network(struct soap*, ns2__Network **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Token_DEFINED
#define SOAP_TYPE_PointerTons2__Token_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Token(struct soap*, ns2__Token *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Token(struct soap*, const char *, int, ns2__Token *const*, const char *);
SOAP_FMAC3 ns2__Token ** SOAP_FMAC4 soap_in_PointerTons2__Token(struct soap*, const char*, ns2__Token **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Token(struct soap*, ns2__Token *const*, const char*, const char*);
SOAP_FMAC3 ns2__Token ** SOAP_FMAC4 soap_get_PointerTons2__Token(struct soap*, ns2__Token **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__BinLookupReply_DEFINED
#define SOAP_TYPE_PointerTons2__BinLookupReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BinLookupReply(struct soap*, ns2__BinLookupReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BinLookupReply(struct soap*, const char *, int, ns2__BinLookupReply *const*, const char *);
SOAP_FMAC3 ns2__BinLookupReply ** SOAP_FMAC4 soap_in_PointerTons2__BinLookupReply(struct soap*, const char*, ns2__BinLookupReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BinLookupReply(struct soap*, ns2__BinLookupReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__BinLookupReply ** SOAP_FMAC4 soap_get_PointerTons2__BinLookupReply(struct soap*, ns2__BinLookupReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__GetVisaCheckoutDataReply_DEFINED
#define SOAP_TYPE_PointerTons2__GetVisaCheckoutDataReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GetVisaCheckoutDataReply(struct soap*, ns2__GetVisaCheckoutDataReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GetVisaCheckoutDataReply(struct soap*, const char *, int, ns2__GetVisaCheckoutDataReply *const*, const char *);
SOAP_FMAC3 ns2__GetVisaCheckoutDataReply ** SOAP_FMAC4 soap_in_PointerTons2__GetVisaCheckoutDataReply(struct soap*, const char*, ns2__GetVisaCheckoutDataReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GetVisaCheckoutDataReply(struct soap*, ns2__GetVisaCheckoutDataReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__GetVisaCheckoutDataReply ** SOAP_FMAC4 soap_get_PointerTons2__GetVisaCheckoutDataReply(struct soap*, ns2__GetVisaCheckoutDataReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DecryptVisaCheckoutDataReply_DEFINED
#define SOAP_TYPE_PointerTons2__DecryptVisaCheckoutDataReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DecryptVisaCheckoutDataReply(struct soap*, ns2__DecryptVisaCheckoutDataReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DecryptVisaCheckoutDataReply(struct soap*, const char *, int, ns2__DecryptVisaCheckoutDataReply *const*, const char *);
SOAP_FMAC3 ns2__DecryptVisaCheckoutDataReply ** SOAP_FMAC4 soap_in_PointerTons2__DecryptVisaCheckoutDataReply(struct soap*, const char*, ns2__DecryptVisaCheckoutDataReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DecryptVisaCheckoutDataReply(struct soap*, ns2__DecryptVisaCheckoutDataReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__DecryptVisaCheckoutDataReply ** SOAP_FMAC4 soap_get_PointerTons2__DecryptVisaCheckoutDataReply(struct soap*, ns2__DecryptVisaCheckoutDataReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__VCReply_DEFINED
#define SOAP_TYPE_PointerTons2__VCReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VCReply(struct soap*, ns2__VCReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VCReply(struct soap*, const char *, int, ns2__VCReply *const*, const char *);
SOAP_FMAC3 ns2__VCReply ** SOAP_FMAC4 soap_in_PointerTons2__VCReply(struct soap*, const char*, ns2__VCReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VCReply(struct soap*, ns2__VCReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__VCReply ** SOAP_FMAC4 soap_get_PointerTons2__VCReply(struct soap*, ns2__VCReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__HostedDataRetrieveReply_DEFINED
#define SOAP_TYPE_PointerTons2__HostedDataRetrieveReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__HostedDataRetrieveReply(struct soap*, ns2__HostedDataRetrieveReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__HostedDataRetrieveReply(struct soap*, const char *, int, ns2__HostedDataRetrieveReply *const*, const char *);
SOAP_FMAC3 ns2__HostedDataRetrieveReply ** SOAP_FMAC4 soap_in_PointerTons2__HostedDataRetrieveReply(struct soap*, const char*, ns2__HostedDataRetrieveReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__HostedDataRetrieveReply(struct soap*, ns2__HostedDataRetrieveReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__HostedDataRetrieveReply ** SOAP_FMAC4 soap_get_PointerTons2__HostedDataRetrieveReply(struct soap*, ns2__HostedDataRetrieveReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__HostedDataCreateReply_DEFINED
#define SOAP_TYPE_PointerTons2__HostedDataCreateReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__HostedDataCreateReply(struct soap*, ns2__HostedDataCreateReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__HostedDataCreateReply(struct soap*, const char *, int, ns2__HostedDataCreateReply *const*, const char *);
SOAP_FMAC3 ns2__HostedDataCreateReply ** SOAP_FMAC4 soap_in_PointerTons2__HostedDataCreateReply(struct soap*, const char*, ns2__HostedDataCreateReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__HostedDataCreateReply(struct soap*, ns2__HostedDataCreateReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__HostedDataCreateReply ** SOAP_FMAC4 soap_get_PointerTons2__HostedDataCreateReply(struct soap*, ns2__HostedDataCreateReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__OriginalTransaction_DEFINED
#define SOAP_TYPE_PointerTons2__OriginalTransaction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OriginalTransaction(struct soap*, ns2__OriginalTransaction *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OriginalTransaction(struct soap*, const char *, int, ns2__OriginalTransaction *const*, const char *);
SOAP_FMAC3 ns2__OriginalTransaction ** SOAP_FMAC4 soap_in_PointerTons2__OriginalTransaction(struct soap*, const char*, ns2__OriginalTransaction **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OriginalTransaction(struct soap*, ns2__OriginalTransaction *const*, const char*, const char*);
SOAP_FMAC3 ns2__OriginalTransaction ** SOAP_FMAC4 soap_get_PointerTons2__OriginalTransaction(struct soap*, ns2__OriginalTransaction **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__EmvReply_DEFINED
#define SOAP_TYPE_PointerTons2__EmvReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__EmvReply(struct soap*, ns2__EmvReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__EmvReply(struct soap*, const char *, int, ns2__EmvReply *const*, const char *);
SOAP_FMAC3 ns2__EmvReply ** SOAP_FMAC4 soap_in_PointerTons2__EmvReply(struct soap*, const char*, ns2__EmvReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__EmvReply(struct soap*, ns2__EmvReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__EmvReply ** SOAP_FMAC4 soap_get_PointerTons2__EmvReply(struct soap*, ns2__EmvReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalTransactionSearchReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalTransactionSearchReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalTransactionSearchReply(struct soap*, ns2__PayPalTransactionSearchReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalTransactionSearchReply(struct soap*, const char *, int, ns2__PayPalTransactionSearchReply *const*, const char *);
SOAP_FMAC3 ns2__PayPalTransactionSearchReply ** SOAP_FMAC4 soap_in_PointerTons2__PayPalTransactionSearchReply(struct soap*, const char*, ns2__PayPalTransactionSearchReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalTransactionSearchReply(struct soap*, ns2__PayPalTransactionSearchReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalTransactionSearchReply ** SOAP_FMAC4 soap_get_PointerTons2__PayPalTransactionSearchReply(struct soap*, ns2__PayPalTransactionSearchReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalGetTxnDetailsReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalGetTxnDetailsReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalGetTxnDetailsReply(struct soap*, ns2__PayPalGetTxnDetailsReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalGetTxnDetailsReply(struct soap*, const char *, int, ns2__PayPalGetTxnDetailsReply *const*, const char *);
SOAP_FMAC3 ns2__PayPalGetTxnDetailsReply ** SOAP_FMAC4 soap_in_PointerTons2__PayPalGetTxnDetailsReply(struct soap*, const char*, ns2__PayPalGetTxnDetailsReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalGetTxnDetailsReply(struct soap*, ns2__PayPalGetTxnDetailsReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalGetTxnDetailsReply ** SOAP_FMAC4 soap_get_PointerTons2__PayPalGetTxnDetailsReply(struct soap*, ns2__PayPalGetTxnDetailsReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PromotionGroupReply_DEFINED
#define SOAP_TYPE_PointerTons2__PromotionGroupReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PromotionGroupReply(struct soap*, ns2__PromotionGroupReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PromotionGroupReply(struct soap*, const char *, int, ns2__PromotionGroupReply *const*, const char *);
SOAP_FMAC3 ns2__PromotionGroupReply ** SOAP_FMAC4 soap_in_PointerTons2__PromotionGroupReply(struct soap*, const char*, ns2__PromotionGroupReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PromotionGroupReply(struct soap*, ns2__PromotionGroupReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PromotionGroupReply ** SOAP_FMAC4 soap_get_PointerTons2__PromotionGroupReply(struct soap*, ns2__PromotionGroupReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Promotion_DEFINED
#define SOAP_TYPE_PointerTons2__Promotion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Promotion(struct soap*, ns2__Promotion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Promotion(struct soap*, const char *, int, ns2__Promotion *const*, const char *);
SOAP_FMAC3 ns2__Promotion ** SOAP_FMAC4 soap_in_PointerTons2__Promotion(struct soap*, const char*, ns2__Promotion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Promotion(struct soap*, ns2__Promotion *const*, const char*, const char*);
SOAP_FMAC3 ns2__Promotion ** SOAP_FMAC4 soap_get_PointerTons2__Promotion(struct soap*, ns2__Promotion **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APConfirmPurchaseReply_DEFINED
#define SOAP_TYPE_PointerTons2__APConfirmPurchaseReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APConfirmPurchaseReply(struct soap*, ns2__APConfirmPurchaseReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APConfirmPurchaseReply(struct soap*, const char *, int, ns2__APConfirmPurchaseReply *const*, const char *);
SOAP_FMAC3 ns2__APConfirmPurchaseReply ** SOAP_FMAC4 soap_in_PointerTons2__APConfirmPurchaseReply(struct soap*, const char*, ns2__APConfirmPurchaseReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APConfirmPurchaseReply(struct soap*, ns2__APConfirmPurchaseReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APConfirmPurchaseReply ** SOAP_FMAC4 soap_get_PointerTons2__APConfirmPurchaseReply(struct soap*, ns2__APConfirmPurchaseReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APTransactionDetailsReply_DEFINED
#define SOAP_TYPE_PointerTons2__APTransactionDetailsReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APTransactionDetailsReply(struct soap*, ns2__APTransactionDetailsReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APTransactionDetailsReply(struct soap*, const char *, int, ns2__APTransactionDetailsReply *const*, const char *);
SOAP_FMAC3 ns2__APTransactionDetailsReply ** SOAP_FMAC4 soap_in_PointerTons2__APTransactionDetailsReply(struct soap*, const char*, ns2__APTransactionDetailsReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APTransactionDetailsReply(struct soap*, ns2__APTransactionDetailsReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APTransactionDetailsReply ** SOAP_FMAC4 soap_get_PointerTons2__APTransactionDetailsReply(struct soap*, ns2__APTransactionDetailsReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APCheckOutDetailsReply_DEFINED
#define SOAP_TYPE_PointerTons2__APCheckOutDetailsReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APCheckOutDetailsReply(struct soap*, ns2__APCheckOutDetailsReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APCheckOutDetailsReply(struct soap*, const char *, int, ns2__APCheckOutDetailsReply *const*, const char *);
SOAP_FMAC3 ns2__APCheckOutDetailsReply ** SOAP_FMAC4 soap_in_PointerTons2__APCheckOutDetailsReply(struct soap*, const char*, ns2__APCheckOutDetailsReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APCheckOutDetailsReply(struct soap*, ns2__APCheckOutDetailsReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APCheckOutDetailsReply ** SOAP_FMAC4 soap_get_PointerTons2__APCheckOutDetailsReply(struct soap*, ns2__APCheckOutDetailsReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APSaleReply_DEFINED
#define SOAP_TYPE_PointerTons2__APSaleReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APSaleReply(struct soap*, ns2__APSaleReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APSaleReply(struct soap*, const char *, int, ns2__APSaleReply *const*, const char *);
SOAP_FMAC3 ns2__APSaleReply ** SOAP_FMAC4 soap_in_PointerTons2__APSaleReply(struct soap*, const char*, ns2__APSaleReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APSaleReply(struct soap*, ns2__APSaleReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APSaleReply ** SOAP_FMAC4 soap_get_PointerTons2__APSaleReply(struct soap*, ns2__APSaleReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APRefundReply_DEFINED
#define SOAP_TYPE_PointerTons2__APRefundReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APRefundReply(struct soap*, ns2__APRefundReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APRefundReply(struct soap*, const char *, int, ns2__APRefundReply *const*, const char *);
SOAP_FMAC3 ns2__APRefundReply ** SOAP_FMAC4 soap_in_PointerTons2__APRefundReply(struct soap*, const char*, ns2__APRefundReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APRefundReply(struct soap*, ns2__APRefundReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APRefundReply ** SOAP_FMAC4 soap_get_PointerTons2__APRefundReply(struct soap*, ns2__APRefundReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APOptionsReply_DEFINED
#define SOAP_TYPE_PointerTons2__APOptionsReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APOptionsReply(struct soap*, ns2__APOptionsReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APOptionsReply(struct soap*, const char *, int, ns2__APOptionsReply *const*, const char *);
SOAP_FMAC3 ns2__APOptionsReply ** SOAP_FMAC4 soap_in_PointerTons2__APOptionsReply(struct soap*, const char*, ns2__APOptionsReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APOptionsReply(struct soap*, ns2__APOptionsReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APOptionsReply ** SOAP_FMAC4 soap_get_PointerTons2__APOptionsReply(struct soap*, ns2__APOptionsReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APCaptureReply_DEFINED
#define SOAP_TYPE_PointerTons2__APCaptureReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APCaptureReply(struct soap*, ns2__APCaptureReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APCaptureReply(struct soap*, const char *, int, ns2__APCaptureReply *const*, const char *);
SOAP_FMAC3 ns2__APCaptureReply ** SOAP_FMAC4 soap_in_PointerTons2__APCaptureReply(struct soap*, const char*, ns2__APCaptureReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APCaptureReply(struct soap*, ns2__APCaptureReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APCaptureReply ** SOAP_FMAC4 soap_get_PointerTons2__APCaptureReply(struct soap*, ns2__APCaptureReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APAuthReversalReply_DEFINED
#define SOAP_TYPE_PointerTons2__APAuthReversalReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APAuthReversalReply(struct soap*, ns2__APAuthReversalReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APAuthReversalReply(struct soap*, const char *, int, ns2__APAuthReversalReply *const*, const char *);
SOAP_FMAC3 ns2__APAuthReversalReply ** SOAP_FMAC4 soap_in_PointerTons2__APAuthReversalReply(struct soap*, const char*, ns2__APAuthReversalReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APAuthReversalReply(struct soap*, ns2__APAuthReversalReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APAuthReversalReply ** SOAP_FMAC4 soap_get_PointerTons2__APAuthReversalReply(struct soap*, ns2__APAuthReversalReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APSessionsReply_DEFINED
#define SOAP_TYPE_PointerTons2__APSessionsReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APSessionsReply(struct soap*, ns2__APSessionsReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APSessionsReply(struct soap*, const char *, int, ns2__APSessionsReply *const*, const char *);
SOAP_FMAC3 ns2__APSessionsReply ** SOAP_FMAC4 soap_in_PointerTons2__APSessionsReply(struct soap*, const char*, ns2__APSessionsReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APSessionsReply(struct soap*, ns2__APSessionsReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APSessionsReply ** SOAP_FMAC4 soap_get_PointerTons2__APSessionsReply(struct soap*, ns2__APSessionsReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APAuthReply_DEFINED
#define SOAP_TYPE_PointerTons2__APAuthReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APAuthReply(struct soap*, ns2__APAuthReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APAuthReply(struct soap*, const char *, int, ns2__APAuthReply *const*, const char *);
SOAP_FMAC3 ns2__APAuthReply ** SOAP_FMAC4 soap_in_PointerTons2__APAuthReply(struct soap*, const char*, ns2__APAuthReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APAuthReply(struct soap*, ns2__APAuthReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APAuthReply ** SOAP_FMAC4 soap_get_PointerTons2__APAuthReply(struct soap*, ns2__APAuthReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APReply_DEFINED
#define SOAP_TYPE_PointerTons2__APReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APReply(struct soap*, ns2__APReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APReply(struct soap*, const char *, int, ns2__APReply *const*, const char *);
SOAP_FMAC3 ns2__APReply ** SOAP_FMAC4 soap_in_PointerTons2__APReply(struct soap*, const char*, ns2__APReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APReply(struct soap*, ns2__APReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APReply ** SOAP_FMAC4 soap_get_PointerTons2__APReply(struct soap*, ns2__APReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APCheckStatusReply_DEFINED
#define SOAP_TYPE_PointerTons2__APCheckStatusReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APCheckStatusReply(struct soap*, ns2__APCheckStatusReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APCheckStatusReply(struct soap*, const char *, int, ns2__APCheckStatusReply *const*, const char *);
SOAP_FMAC3 ns2__APCheckStatusReply ** SOAP_FMAC4 soap_in_PointerTons2__APCheckStatusReply(struct soap*, const char*, ns2__APCheckStatusReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APCheckStatusReply(struct soap*, ns2__APCheckStatusReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APCheckStatusReply ** SOAP_FMAC4 soap_get_PointerTons2__APCheckStatusReply(struct soap*, ns2__APCheckStatusReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APInitiateReply_DEFINED
#define SOAP_TYPE_PointerTons2__APInitiateReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APInitiateReply(struct soap*, ns2__APInitiateReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APInitiateReply(struct soap*, const char *, int, ns2__APInitiateReply *const*, const char *);
SOAP_FMAC3 ns2__APInitiateReply ** SOAP_FMAC4 soap_in_PointerTons2__APInitiateReply(struct soap*, const char*, ns2__APInitiateReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APInitiateReply(struct soap*, ns2__APInitiateReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__APInitiateReply ** SOAP_FMAC4 soap_get_PointerTons2__APInitiateReply(struct soap*, ns2__APInitiateReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PinDebitReversalReply_DEFINED
#define SOAP_TYPE_PointerTons2__PinDebitReversalReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PinDebitReversalReply(struct soap*, ns2__PinDebitReversalReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PinDebitReversalReply(struct soap*, const char *, int, ns2__PinDebitReversalReply *const*, const char *);
SOAP_FMAC3 ns2__PinDebitReversalReply ** SOAP_FMAC4 soap_in_PointerTons2__PinDebitReversalReply(struct soap*, const char*, ns2__PinDebitReversalReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PinDebitReversalReply(struct soap*, ns2__PinDebitReversalReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PinDebitReversalReply ** SOAP_FMAC4 soap_get_PointerTons2__PinDebitReversalReply(struct soap*, ns2__PinDebitReversalReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PinDebitCreditReply_DEFINED
#define SOAP_TYPE_PointerTons2__PinDebitCreditReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PinDebitCreditReply(struct soap*, ns2__PinDebitCreditReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PinDebitCreditReply(struct soap*, const char *, int, ns2__PinDebitCreditReply *const*, const char *);
SOAP_FMAC3 ns2__PinDebitCreditReply ** SOAP_FMAC4 soap_in_PointerTons2__PinDebitCreditReply(struct soap*, const char*, ns2__PinDebitCreditReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PinDebitCreditReply(struct soap*, ns2__PinDebitCreditReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PinDebitCreditReply ** SOAP_FMAC4 soap_get_PointerTons2__PinDebitCreditReply(struct soap*, ns2__PinDebitCreditReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PinDebitPurchaseReply_DEFINED
#define SOAP_TYPE_PointerTons2__PinDebitPurchaseReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PinDebitPurchaseReply(struct soap*, ns2__PinDebitPurchaseReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PinDebitPurchaseReply(struct soap*, const char *, int, ns2__PinDebitPurchaseReply *const*, const char *);
SOAP_FMAC3 ns2__PinDebitPurchaseReply ** SOAP_FMAC4 soap_in_PointerTons2__PinDebitPurchaseReply(struct soap*, const char*, ns2__PinDebitPurchaseReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PinDebitPurchaseReply(struct soap*, ns2__PinDebitPurchaseReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PinDebitPurchaseReply ** SOAP_FMAC4 soap_get_PointerTons2__PinDebitPurchaseReply(struct soap*, ns2__PinDebitPurchaseReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__BoletoPaymentReply_DEFINED
#define SOAP_TYPE_PointerTons2__BoletoPaymentReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BoletoPaymentReply(struct soap*, ns2__BoletoPaymentReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BoletoPaymentReply(struct soap*, const char *, int, ns2__BoletoPaymentReply *const*, const char *);
SOAP_FMAC3 ns2__BoletoPaymentReply ** SOAP_FMAC4 soap_in_PointerTons2__BoletoPaymentReply(struct soap*, const char*, ns2__BoletoPaymentReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BoletoPaymentReply(struct soap*, ns2__BoletoPaymentReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__BoletoPaymentReply ** SOAP_FMAC4 soap_get_PointerTons2__BoletoPaymentReply(struct soap*, ns2__BoletoPaymentReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ChinaRefundReply_DEFINED
#define SOAP_TYPE_PointerTons2__ChinaRefundReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ChinaRefundReply(struct soap*, ns2__ChinaRefundReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ChinaRefundReply(struct soap*, const char *, int, ns2__ChinaRefundReply *const*, const char *);
SOAP_FMAC3 ns2__ChinaRefundReply ** SOAP_FMAC4 soap_in_PointerTons2__ChinaRefundReply(struct soap*, const char*, ns2__ChinaRefundReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ChinaRefundReply(struct soap*, ns2__ChinaRefundReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__ChinaRefundReply ** SOAP_FMAC4 soap_get_PointerTons2__ChinaRefundReply(struct soap*, ns2__ChinaRefundReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ChinaPaymentReply_DEFINED
#define SOAP_TYPE_PointerTons2__ChinaPaymentReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ChinaPaymentReply(struct soap*, ns2__ChinaPaymentReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ChinaPaymentReply(struct soap*, const char *, int, ns2__ChinaPaymentReply *const*, const char *);
SOAP_FMAC3 ns2__ChinaPaymentReply ** SOAP_FMAC4 soap_in_PointerTons2__ChinaPaymentReply(struct soap*, const char*, ns2__ChinaPaymentReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ChinaPaymentReply(struct soap*, ns2__ChinaPaymentReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__ChinaPaymentReply ** SOAP_FMAC4 soap_get_PointerTons2__ChinaPaymentReply(struct soap*, ns2__ChinaPaymentReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalDoRefTransactionReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalDoRefTransactionReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalDoRefTransactionReply(struct soap*, ns2__PayPalDoRefTransactionReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalDoRefTransactionReply(struct soap*, const char *, int, ns2__PayPalDoRefTransactionReply *const*, const char *);
SOAP_FMAC3 ns2__PayPalDoRefTransactionReply ** SOAP_FMAC4 soap_in_PointerTons2__PayPalDoRefTransactionReply(struct soap*, const char*, ns2__PayPalDoRefTransactionReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalDoRefTransactionReply(struct soap*, ns2__PayPalDoRefTransactionReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalDoRefTransactionReply ** SOAP_FMAC4 soap_get_PointerTons2__PayPalDoRefTransactionReply(struct soap*, ns2__PayPalDoRefTransactionReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalCreateAgreementReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalCreateAgreementReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalCreateAgreementReply(struct soap*, ns2__PayPalCreateAgreementReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalCreateAgreementReply(struct soap*, const char *, int, ns2__PayPalCreateAgreementReply *const*, const char *);
SOAP_FMAC3 ns2__PayPalCreateAgreementReply ** SOAP_FMAC4 soap_in_PointerTons2__PayPalCreateAgreementReply(struct soap*, const char*, ns2__PayPalCreateAgreementReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalCreateAgreementReply(struct soap*, ns2__PayPalCreateAgreementReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalCreateAgreementReply ** SOAP_FMAC4 soap_get_PointerTons2__PayPalCreateAgreementReply(struct soap*, ns2__PayPalCreateAgreementReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalUpdateAgreementReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalUpdateAgreementReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalUpdateAgreementReply(struct soap*, ns2__PayPalUpdateAgreementReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalUpdateAgreementReply(struct soap*, const char *, int, ns2__PayPalUpdateAgreementReply *const*, const char *);
SOAP_FMAC3 ns2__PayPalUpdateAgreementReply ** SOAP_FMAC4 soap_in_PointerTons2__PayPalUpdateAgreementReply(struct soap*, const char*, ns2__PayPalUpdateAgreementReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalUpdateAgreementReply(struct soap*, ns2__PayPalUpdateAgreementReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalUpdateAgreementReply ** SOAP_FMAC4 soap_get_PointerTons2__PayPalUpdateAgreementReply(struct soap*, ns2__PayPalUpdateAgreementReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalEcOrderSetupReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalEcOrderSetupReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalEcOrderSetupReply(struct soap*, ns2__PayPalEcOrderSetupReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalEcOrderSetupReply(struct soap*, const char *, int, ns2__PayPalEcOrderSetupReply *const*, const char *);
SOAP_FMAC3 ns2__PayPalEcOrderSetupReply ** SOAP_FMAC4 soap_in_PointerTons2__PayPalEcOrderSetupReply(struct soap*, const char*, ns2__PayPalEcOrderSetupReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalEcOrderSetupReply(struct soap*, ns2__PayPalEcOrderSetupReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalEcOrderSetupReply ** SOAP_FMAC4 soap_get_PointerTons2__PayPalEcOrderSetupReply(struct soap*, ns2__PayPalEcOrderSetupReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalAuthorizationReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalAuthorizationReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalAuthorizationReply(struct soap*, ns2__PayPalAuthorizationReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalAuthorizationReply(struct soap*, const char *, int, ns2__PayPalAuthorizationReply *const*, const char *);
SOAP_FMAC3 ns2__PayPalAuthorizationReply ** SOAP_FMAC4 soap_in_PointerTons2__PayPalAuthorizationReply(struct soap*, const char*, ns2__PayPalAuthorizationReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalAuthorizationReply(struct soap*, ns2__PayPalAuthorizationReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalAuthorizationReply ** SOAP_FMAC4 soap_get_PointerTons2__PayPalAuthorizationReply(struct soap*, ns2__PayPalAuthorizationReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalEcSetReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalEcSetReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalEcSetReply(struct soap*, ns2__PayPalEcSetReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalEcSetReply(struct soap*, const char *, int, ns2__PayPalEcSetReply *const*, const char *);
SOAP_FMAC3 ns2__PayPalEcSetReply ** SOAP_FMAC4 soap_in_PointerTons2__PayPalEcSetReply(struct soap*, const char*, ns2__PayPalEcSetReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalEcSetReply(struct soap*, ns2__PayPalEcSetReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalEcSetReply ** SOAP_FMAC4 soap_get_PointerTons2__PayPalEcSetReply(struct soap*, ns2__PayPalEcSetReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalEcGetDetailsReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalEcGetDetailsReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalEcGetDetailsReply(struct soap*, ns2__PayPalEcGetDetailsReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalEcGetDetailsReply(struct soap*, const char *, int, ns2__PayPalEcGetDetailsReply *const*, const char *);
SOAP_FMAC3 ns2__PayPalEcGetDetailsReply ** SOAP_FMAC4 soap_in_PointerTons2__PayPalEcGetDetailsReply(struct soap*, const char*, ns2__PayPalEcGetDetailsReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalEcGetDetailsReply(struct soap*, ns2__PayPalEcGetDetailsReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalEcGetDetailsReply ** SOAP_FMAC4 soap_get_PointerTons2__PayPalEcGetDetailsReply(struct soap*, ns2__PayPalEcGetDetailsReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalEcDoPaymentReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalEcDoPaymentReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalEcDoPaymentReply(struct soap*, ns2__PayPalEcDoPaymentReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalEcDoPaymentReply(struct soap*, const char *, int, ns2__PayPalEcDoPaymentReply *const*, const char *);
SOAP_FMAC3 ns2__PayPalEcDoPaymentReply ** SOAP_FMAC4 soap_in_PointerTons2__PayPalEcDoPaymentReply(struct soap*, const char*, ns2__PayPalEcDoPaymentReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalEcDoPaymentReply(struct soap*, ns2__PayPalEcDoPaymentReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalEcDoPaymentReply ** SOAP_FMAC4 soap_get_PointerTons2__PayPalEcDoPaymentReply(struct soap*, ns2__PayPalEcDoPaymentReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalDoCaptureReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalDoCaptureReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalDoCaptureReply(struct soap*, ns2__PayPalDoCaptureReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalDoCaptureReply(struct soap*, const char *, int, ns2__PayPalDoCaptureReply *const*, const char *);
SOAP_FMAC3 ns2__PayPalDoCaptureReply ** SOAP_FMAC4 soap_in_PointerTons2__PayPalDoCaptureReply(struct soap*, const char*, ns2__PayPalDoCaptureReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalDoCaptureReply(struct soap*, ns2__PayPalDoCaptureReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalDoCaptureReply ** SOAP_FMAC4 soap_get_PointerTons2__PayPalDoCaptureReply(struct soap*, ns2__PayPalDoCaptureReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalAuthReversalReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalAuthReversalReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalAuthReversalReply(struct soap*, ns2__PayPalAuthReversalReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalAuthReversalReply(struct soap*, const char *, int, ns2__PayPalAuthReversalReply *const*, const char *);
SOAP_FMAC3 ns2__PayPalAuthReversalReply ** SOAP_FMAC4 soap_in_PointerTons2__PayPalAuthReversalReply(struct soap*, const char*, ns2__PayPalAuthReversalReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalAuthReversalReply(struct soap*, ns2__PayPalAuthReversalReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalAuthReversalReply ** SOAP_FMAC4 soap_get_PointerTons2__PayPalAuthReversalReply(struct soap*, ns2__PayPalAuthReversalReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalRefundReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalRefundReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalRefundReply(struct soap*, ns2__PayPalRefundReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalRefundReply(struct soap*, const char *, int, ns2__PayPalRefundReply *const*, const char *);
SOAP_FMAC3 ns2__PayPalRefundReply ** SOAP_FMAC4 soap_in_PointerTons2__PayPalRefundReply(struct soap*, const char*, ns2__PayPalRefundReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalRefundReply(struct soap*, ns2__PayPalRefundReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalRefundReply ** SOAP_FMAC4 soap_get_PointerTons2__PayPalRefundReply(struct soap*, ns2__PayPalRefundReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DecisionReply_DEFINED
#define SOAP_TYPE_PointerTons2__DecisionReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DecisionReply(struct soap*, ns2__DecisionReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DecisionReply(struct soap*, const char *, int, ns2__DecisionReply *const*, const char *);
SOAP_FMAC3 ns2__DecisionReply ** SOAP_FMAC4 soap_in_PointerTons2__DecisionReply(struct soap*, const char*, ns2__DecisionReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DecisionReply(struct soap*, ns2__DecisionReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__DecisionReply ** SOAP_FMAC4 soap_get_PointerTons2__DecisionReply(struct soap*, ns2__DecisionReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DecisionEarlyReply_DEFINED
#define SOAP_TYPE_PointerTons2__DecisionEarlyReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DecisionEarlyReply(struct soap*, ns2__DecisionEarlyReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DecisionEarlyReply(struct soap*, const char *, int, ns2__DecisionEarlyReply *const*, const char *);
SOAP_FMAC3 ns2__DecisionEarlyReply ** SOAP_FMAC4 soap_in_PointerTons2__DecisionEarlyReply(struct soap*, const char*, ns2__DecisionEarlyReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DecisionEarlyReply(struct soap*, ns2__DecisionEarlyReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__DecisionEarlyReply ** SOAP_FMAC4 soap_get_PointerTons2__DecisionEarlyReply(struct soap*, ns2__DecisionEarlyReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CaseManagementActionReply_DEFINED
#define SOAP_TYPE_PointerTons2__CaseManagementActionReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CaseManagementActionReply(struct soap*, ns2__CaseManagementActionReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CaseManagementActionReply(struct soap*, const char *, int, ns2__CaseManagementActionReply *const*, const char *);
SOAP_FMAC3 ns2__CaseManagementActionReply ** SOAP_FMAC4 soap_in_PointerTons2__CaseManagementActionReply(struct soap*, const char*, ns2__CaseManagementActionReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CaseManagementActionReply(struct soap*, ns2__CaseManagementActionReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__CaseManagementActionReply ** SOAP_FMAC4 soap_get_PointerTons2__CaseManagementActionReply(struct soap*, ns2__CaseManagementActionReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__FraudUpdateReply_DEFINED
#define SOAP_TYPE_PointerTons2__FraudUpdateReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FraudUpdateReply(struct soap*, ns2__FraudUpdateReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FraudUpdateReply(struct soap*, const char *, int, ns2__FraudUpdateReply *const*, const char *);
SOAP_FMAC3 ns2__FraudUpdateReply ** SOAP_FMAC4 soap_in_PointerTons2__FraudUpdateReply(struct soap*, const char*, ns2__FraudUpdateReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FraudUpdateReply(struct soap*, ns2__FraudUpdateReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__FraudUpdateReply ** SOAP_FMAC4 soap_get_PointerTons2__FraudUpdateReply(struct soap*, ns2__FraudUpdateReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__RiskUpdateReply_DEFINED
#define SOAP_TYPE_PointerTons2__RiskUpdateReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RiskUpdateReply(struct soap*, ns2__RiskUpdateReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RiskUpdateReply(struct soap*, const char *, int, ns2__RiskUpdateReply *const*, const char *);
SOAP_FMAC3 ns2__RiskUpdateReply ** SOAP_FMAC4 soap_in_PointerTons2__RiskUpdateReply(struct soap*, const char*, ns2__RiskUpdateReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RiskUpdateReply(struct soap*, ns2__RiskUpdateReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__RiskUpdateReply ** SOAP_FMAC4 soap_get_PointerTons2__RiskUpdateReply(struct soap*, ns2__RiskUpdateReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalPreapprovedUpdateReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalPreapprovedUpdateReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalPreapprovedUpdateReply(struct soap*, ns2__PayPalPreapprovedUpdateReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalPreapprovedUpdateReply(struct soap*, const char *, int, ns2__PayPalPreapprovedUpdateReply *const*, const char *);
SOAP_FMAC3 ns2__PayPalPreapprovedUpdateReply ** SOAP_FMAC4 soap_in_PointerTons2__PayPalPreapprovedUpdateReply(struct soap*, const char*, ns2__PayPalPreapprovedUpdateReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalPreapprovedUpdateReply(struct soap*, ns2__PayPalPreapprovedUpdateReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalPreapprovedUpdateReply ** SOAP_FMAC4 soap_get_PointerTons2__PayPalPreapprovedUpdateReply(struct soap*, ns2__PayPalPreapprovedUpdateReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalPreapprovedPaymentReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalPreapprovedPaymentReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalPreapprovedPaymentReply(struct soap*, ns2__PayPalPreapprovedPaymentReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalPreapprovedPaymentReply(struct soap*, const char *, int, ns2__PayPalPreapprovedPaymentReply *const*, const char *);
SOAP_FMAC3 ns2__PayPalPreapprovedPaymentReply ** SOAP_FMAC4 soap_in_PointerTons2__PayPalPreapprovedPaymentReply(struct soap*, const char*, ns2__PayPalPreapprovedPaymentReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalPreapprovedPaymentReply(struct soap*, ns2__PayPalPreapprovedPaymentReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalPreapprovedPaymentReply ** SOAP_FMAC4 soap_get_PointerTons2__PayPalPreapprovedPaymentReply(struct soap*, ns2__PayPalPreapprovedPaymentReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalButtonCreateReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalButtonCreateReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalButtonCreateReply(struct soap*, ns2__PayPalButtonCreateReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalButtonCreateReply(struct soap*, const char *, int, ns2__PayPalButtonCreateReply *const*, const char *);
SOAP_FMAC3 ns2__PayPalButtonCreateReply ** SOAP_FMAC4 soap_in_PointerTons2__PayPalButtonCreateReply(struct soap*, const char*, ns2__PayPalButtonCreateReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalButtonCreateReply(struct soap*, ns2__PayPalButtonCreateReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalButtonCreateReply ** SOAP_FMAC4 soap_get_PointerTons2__PayPalButtonCreateReply(struct soap*, ns2__PayPalButtonCreateReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PinlessDebitReversalReply_DEFINED
#define SOAP_TYPE_PointerTons2__PinlessDebitReversalReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PinlessDebitReversalReply(struct soap*, ns2__PinlessDebitReversalReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PinlessDebitReversalReply(struct soap*, const char *, int, ns2__PinlessDebitReversalReply *const*, const char *);
SOAP_FMAC3 ns2__PinlessDebitReversalReply ** SOAP_FMAC4 soap_in_PointerTons2__PinlessDebitReversalReply(struct soap*, const char*, ns2__PinlessDebitReversalReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PinlessDebitReversalReply(struct soap*, ns2__PinlessDebitReversalReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PinlessDebitReversalReply ** SOAP_FMAC4 soap_get_PointerTons2__PinlessDebitReversalReply(struct soap*, ns2__PinlessDebitReversalReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PinlessDebitValidateReply_DEFINED
#define SOAP_TYPE_PointerTons2__PinlessDebitValidateReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PinlessDebitValidateReply(struct soap*, ns2__PinlessDebitValidateReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PinlessDebitValidateReply(struct soap*, const char *, int, ns2__PinlessDebitValidateReply *const*, const char *);
SOAP_FMAC3 ns2__PinlessDebitValidateReply ** SOAP_FMAC4 soap_in_PointerTons2__PinlessDebitValidateReply(struct soap*, const char*, ns2__PinlessDebitValidateReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PinlessDebitValidateReply(struct soap*, ns2__PinlessDebitValidateReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PinlessDebitValidateReply ** SOAP_FMAC4 soap_get_PointerTons2__PinlessDebitValidateReply(struct soap*, ns2__PinlessDebitValidateReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PinlessDebitReply_DEFINED
#define SOAP_TYPE_PointerTons2__PinlessDebitReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PinlessDebitReply(struct soap*, ns2__PinlessDebitReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PinlessDebitReply(struct soap*, const char *, int, ns2__PinlessDebitReply *const*, const char *);
SOAP_FMAC3 ns2__PinlessDebitReply ** SOAP_FMAC4 soap_in_PointerTons2__PinlessDebitReply(struct soap*, const char*, ns2__PinlessDebitReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PinlessDebitReply(struct soap*, ns2__PinlessDebitReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PinlessDebitReply ** SOAP_FMAC4 soap_get_PointerTons2__PinlessDebitReply(struct soap*, ns2__PinlessDebitReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__VoidReply_DEFINED
#define SOAP_TYPE_PointerTons2__VoidReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VoidReply(struct soap*, ns2__VoidReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VoidReply(struct soap*, const char *, int, ns2__VoidReply *const*, const char *);
SOAP_FMAC3 ns2__VoidReply ** SOAP_FMAC4 soap_in_PointerTons2__VoidReply(struct soap*, const char*, ns2__VoidReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VoidReply(struct soap*, ns2__VoidReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__VoidReply ** SOAP_FMAC4 soap_get_PointerTons2__VoidReply(struct soap*, ns2__VoidReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalCreditReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalCreditReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalCreditReply(struct soap*, ns2__PayPalCreditReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalCreditReply(struct soap*, const char *, int, ns2__PayPalCreditReply *const*, const char *);
SOAP_FMAC3 ns2__PayPalCreditReply ** SOAP_FMAC4 soap_in_PointerTons2__PayPalCreditReply(struct soap*, const char*, ns2__PayPalCreditReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalCreditReply(struct soap*, ns2__PayPalCreditReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalCreditReply ** SOAP_FMAC4 soap_get_PointerTons2__PayPalCreditReply(struct soap*, ns2__PayPalCreditReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalPaymentReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalPaymentReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalPaymentReply(struct soap*, ns2__PayPalPaymentReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalPaymentReply(struct soap*, const char *, int, ns2__PayPalPaymentReply *const*, const char *);
SOAP_FMAC3 ns2__PayPalPaymentReply ** SOAP_FMAC4 soap_in_PointerTons2__PayPalPaymentReply(struct soap*, const char*, ns2__PayPalPaymentReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalPaymentReply(struct soap*, ns2__PayPalPaymentReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalPaymentReply ** SOAP_FMAC4 soap_get_PointerTons2__PayPalPaymentReply(struct soap*, ns2__PayPalPaymentReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PaySubscriptionDeleteReply_DEFINED
#define SOAP_TYPE_PointerTons2__PaySubscriptionDeleteReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PaySubscriptionDeleteReply(struct soap*, ns2__PaySubscriptionDeleteReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PaySubscriptionDeleteReply(struct soap*, const char *, int, ns2__PaySubscriptionDeleteReply *const*, const char *);
SOAP_FMAC3 ns2__PaySubscriptionDeleteReply ** SOAP_FMAC4 soap_in_PointerTons2__PaySubscriptionDeleteReply(struct soap*, const char*, ns2__PaySubscriptionDeleteReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PaySubscriptionDeleteReply(struct soap*, ns2__PaySubscriptionDeleteReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PaySubscriptionDeleteReply ** SOAP_FMAC4 soap_get_PointerTons2__PaySubscriptionDeleteReply(struct soap*, ns2__PaySubscriptionDeleteReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PaySubscriptionRetrieveReply_DEFINED
#define SOAP_TYPE_PointerTons2__PaySubscriptionRetrieveReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PaySubscriptionRetrieveReply(struct soap*, ns2__PaySubscriptionRetrieveReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PaySubscriptionRetrieveReply(struct soap*, const char *, int, ns2__PaySubscriptionRetrieveReply *const*, const char *);
SOAP_FMAC3 ns2__PaySubscriptionRetrieveReply ** SOAP_FMAC4 soap_in_PointerTons2__PaySubscriptionRetrieveReply(struct soap*, const char*, ns2__PaySubscriptionRetrieveReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PaySubscriptionRetrieveReply(struct soap*, ns2__PaySubscriptionRetrieveReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PaySubscriptionRetrieveReply ** SOAP_FMAC4 soap_get_PointerTons2__PaySubscriptionRetrieveReply(struct soap*, ns2__PaySubscriptionRetrieveReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PaySubscriptionEventUpdateReply_DEFINED
#define SOAP_TYPE_PointerTons2__PaySubscriptionEventUpdateReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PaySubscriptionEventUpdateReply(struct soap*, ns2__PaySubscriptionEventUpdateReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PaySubscriptionEventUpdateReply(struct soap*, const char *, int, ns2__PaySubscriptionEventUpdateReply *const*, const char *);
SOAP_FMAC3 ns2__PaySubscriptionEventUpdateReply ** SOAP_FMAC4 soap_in_PointerTons2__PaySubscriptionEventUpdateReply(struct soap*, const char*, ns2__PaySubscriptionEventUpdateReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PaySubscriptionEventUpdateReply(struct soap*, ns2__PaySubscriptionEventUpdateReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PaySubscriptionEventUpdateReply ** SOAP_FMAC4 soap_get_PointerTons2__PaySubscriptionEventUpdateReply(struct soap*, ns2__PaySubscriptionEventUpdateReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PaySubscriptionUpdateReply_DEFINED
#define SOAP_TYPE_PointerTons2__PaySubscriptionUpdateReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PaySubscriptionUpdateReply(struct soap*, ns2__PaySubscriptionUpdateReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PaySubscriptionUpdateReply(struct soap*, const char *, int, ns2__PaySubscriptionUpdateReply *const*, const char *);
SOAP_FMAC3 ns2__PaySubscriptionUpdateReply ** SOAP_FMAC4 soap_in_PointerTons2__PaySubscriptionUpdateReply(struct soap*, const char*, ns2__PaySubscriptionUpdateReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PaySubscriptionUpdateReply(struct soap*, ns2__PaySubscriptionUpdateReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PaySubscriptionUpdateReply ** SOAP_FMAC4 soap_get_PointerTons2__PaySubscriptionUpdateReply(struct soap*, ns2__PaySubscriptionUpdateReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PaySubscriptionCreateReply_DEFINED
#define SOAP_TYPE_PointerTons2__PaySubscriptionCreateReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PaySubscriptionCreateReply(struct soap*, ns2__PaySubscriptionCreateReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PaySubscriptionCreateReply(struct soap*, const char *, int, ns2__PaySubscriptionCreateReply *const*, const char *);
SOAP_FMAC3 ns2__PaySubscriptionCreateReply ** SOAP_FMAC4 soap_in_PointerTons2__PaySubscriptionCreateReply(struct soap*, const char*, ns2__PaySubscriptionCreateReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PaySubscriptionCreateReply(struct soap*, ns2__PaySubscriptionCreateReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PaySubscriptionCreateReply ** SOAP_FMAC4 soap_get_PointerTons2__PaySubscriptionCreateReply(struct soap*, ns2__PaySubscriptionCreateReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DirectDebitRefundReply_DEFINED
#define SOAP_TYPE_PointerTons2__DirectDebitRefundReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DirectDebitRefundReply(struct soap*, ns2__DirectDebitRefundReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DirectDebitRefundReply(struct soap*, const char *, int, ns2__DirectDebitRefundReply *const*, const char *);
SOAP_FMAC3 ns2__DirectDebitRefundReply ** SOAP_FMAC4 soap_in_PointerTons2__DirectDebitRefundReply(struct soap*, const char*, ns2__DirectDebitRefundReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DirectDebitRefundReply(struct soap*, ns2__DirectDebitRefundReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__DirectDebitRefundReply ** SOAP_FMAC4 soap_get_PointerTons2__DirectDebitRefundReply(struct soap*, ns2__DirectDebitRefundReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DirectDebitValidateReply_DEFINED
#define SOAP_TYPE_PointerTons2__DirectDebitValidateReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DirectDebitValidateReply(struct soap*, ns2__DirectDebitValidateReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DirectDebitValidateReply(struct soap*, const char *, int, ns2__DirectDebitValidateReply *const*, const char *);
SOAP_FMAC3 ns2__DirectDebitValidateReply ** SOAP_FMAC4 soap_in_PointerTons2__DirectDebitValidateReply(struct soap*, const char*, ns2__DirectDebitValidateReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DirectDebitValidateReply(struct soap*, ns2__DirectDebitValidateReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__DirectDebitValidateReply ** SOAP_FMAC4 soap_get_PointerTons2__DirectDebitValidateReply(struct soap*, ns2__DirectDebitValidateReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DirectDebitReply_DEFINED
#define SOAP_TYPE_PointerTons2__DirectDebitReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DirectDebitReply(struct soap*, ns2__DirectDebitReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DirectDebitReply(struct soap*, const char *, int, ns2__DirectDebitReply *const*, const char *);
SOAP_FMAC3 ns2__DirectDebitReply ** SOAP_FMAC4 soap_in_PointerTons2__DirectDebitReply(struct soap*, const char*, ns2__DirectDebitReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DirectDebitReply(struct soap*, ns2__DirectDebitReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__DirectDebitReply ** SOAP_FMAC4 soap_get_PointerTons2__DirectDebitReply(struct soap*, ns2__DirectDebitReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DirectDebitMandateReply_DEFINED
#define SOAP_TYPE_PointerTons2__DirectDebitMandateReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DirectDebitMandateReply(struct soap*, ns2__DirectDebitMandateReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DirectDebitMandateReply(struct soap*, const char *, int, ns2__DirectDebitMandateReply *const*, const char *);
SOAP_FMAC3 ns2__DirectDebitMandateReply ** SOAP_FMAC4 soap_in_PointerTons2__DirectDebitMandateReply(struct soap*, const char*, ns2__DirectDebitMandateReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DirectDebitMandateReply(struct soap*, ns2__DirectDebitMandateReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__DirectDebitMandateReply ** SOAP_FMAC4 soap_get_PointerTons2__DirectDebitMandateReply(struct soap*, ns2__DirectDebitMandateReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__BankTransferRealTimeReply_DEFINED
#define SOAP_TYPE_PointerTons2__BankTransferRealTimeReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BankTransferRealTimeReply(struct soap*, ns2__BankTransferRealTimeReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BankTransferRealTimeReply(struct soap*, const char *, int, ns2__BankTransferRealTimeReply *const*, const char *);
SOAP_FMAC3 ns2__BankTransferRealTimeReply ** SOAP_FMAC4 soap_in_PointerTons2__BankTransferRealTimeReply(struct soap*, const char*, ns2__BankTransferRealTimeReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BankTransferRealTimeReply(struct soap*, ns2__BankTransferRealTimeReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__BankTransferRealTimeReply ** SOAP_FMAC4 soap_get_PointerTons2__BankTransferRealTimeReply(struct soap*, ns2__BankTransferRealTimeReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__BankTransferRefundReply_DEFINED
#define SOAP_TYPE_PointerTons2__BankTransferRefundReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BankTransferRefundReply(struct soap*, ns2__BankTransferRefundReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BankTransferRefundReply(struct soap*, const char *, int, ns2__BankTransferRefundReply *const*, const char *);
SOAP_FMAC3 ns2__BankTransferRefundReply ** SOAP_FMAC4 soap_in_PointerTons2__BankTransferRefundReply(struct soap*, const char*, ns2__BankTransferRefundReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BankTransferRefundReply(struct soap*, ns2__BankTransferRefundReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__BankTransferRefundReply ** SOAP_FMAC4 soap_get_PointerTons2__BankTransferRefundReply(struct soap*, ns2__BankTransferRefundReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__BankTransferReply_DEFINED
#define SOAP_TYPE_PointerTons2__BankTransferReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BankTransferReply(struct soap*, ns2__BankTransferReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BankTransferReply(struct soap*, const char *, int, ns2__BankTransferReply *const*, const char *);
SOAP_FMAC3 ns2__BankTransferReply ** SOAP_FMAC4 soap_in_PointerTons2__BankTransferReply(struct soap*, const char*, ns2__BankTransferReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BankTransferReply(struct soap*, ns2__BankTransferReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__BankTransferReply ** SOAP_FMAC4 soap_get_PointerTons2__BankTransferReply(struct soap*, ns2__BankTransferReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__FXRatesReply_DEFINED
#define SOAP_TYPE_PointerTons2__FXRatesReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FXRatesReply(struct soap*, ns2__FXRatesReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FXRatesReply(struct soap*, const char *, int, ns2__FXRatesReply *const*, const char *);
SOAP_FMAC3 ns2__FXRatesReply ** SOAP_FMAC4 soap_in_PointerTons2__FXRatesReply(struct soap*, const char*, ns2__FXRatesReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FXRatesReply(struct soap*, ns2__FXRatesReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__FXRatesReply ** SOAP_FMAC4 soap_get_PointerTons2__FXRatesReply(struct soap*, ns2__FXRatesReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ExportReply_DEFINED
#define SOAP_TYPE_PointerTons2__ExportReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ExportReply(struct soap*, ns2__ExportReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ExportReply(struct soap*, const char *, int, ns2__ExportReply *const*, const char *);
SOAP_FMAC3 ns2__ExportReply ** SOAP_FMAC4 soap_in_PointerTons2__ExportReply(struct soap*, const char*, ns2__ExportReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ExportReply(struct soap*, ns2__ExportReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__ExportReply ** SOAP_FMAC4 soap_get_PointerTons2__ExportReply(struct soap*, ns2__ExportReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DAVReply_DEFINED
#define SOAP_TYPE_PointerTons2__DAVReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DAVReply(struct soap*, ns2__DAVReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DAVReply(struct soap*, const char *, int, ns2__DAVReply *const*, const char *);
SOAP_FMAC3 ns2__DAVReply ** SOAP_FMAC4 soap_in_PointerTons2__DAVReply(struct soap*, const char*, ns2__DAVReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DAVReply(struct soap*, ns2__DAVReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__DAVReply ** SOAP_FMAC4 soap_get_PointerTons2__DAVReply(struct soap*, ns2__DAVReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__AFSReply_DEFINED
#define SOAP_TYPE_PointerTons2__AFSReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AFSReply(struct soap*, ns2__AFSReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AFSReply(struct soap*, const char *, int, ns2__AFSReply *const*, const char *);
SOAP_FMAC3 ns2__AFSReply ** SOAP_FMAC4 soap_in_PointerTons2__AFSReply(struct soap*, const char*, ns2__AFSReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AFSReply(struct soap*, ns2__AFSReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__AFSReply ** SOAP_FMAC4 soap_get_PointerTons2__AFSReply(struct soap*, ns2__AFSReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DMEReply_DEFINED
#define SOAP_TYPE_PointerTons2__DMEReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DMEReply(struct soap*, ns2__DMEReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DMEReply(struct soap*, const char *, int, ns2__DMEReply *const*, const char *);
SOAP_FMAC3 ns2__DMEReply ** SOAP_FMAC4 soap_in_PointerTons2__DMEReply(struct soap*, const char*, ns2__DMEReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DMEReply(struct soap*, ns2__DMEReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__DMEReply ** SOAP_FMAC4 soap_get_PointerTons2__DMEReply(struct soap*, ns2__DMEReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__EncryptPaymentDataReply_DEFINED
#define SOAP_TYPE_PointerTons2__EncryptPaymentDataReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__EncryptPaymentDataReply(struct soap*, ns2__EncryptPaymentDataReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__EncryptPaymentDataReply(struct soap*, const char *, int, ns2__EncryptPaymentDataReply *const*, const char *);
SOAP_FMAC3 ns2__EncryptPaymentDataReply ** SOAP_FMAC4 soap_in_PointerTons2__EncryptPaymentDataReply(struct soap*, const char*, ns2__EncryptPaymentDataReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__EncryptPaymentDataReply(struct soap*, ns2__EncryptPaymentDataReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__EncryptPaymentDataReply ** SOAP_FMAC4 soap_get_PointerTons2__EncryptPaymentDataReply(struct soap*, ns2__EncryptPaymentDataReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__TaxReply_DEFINED
#define SOAP_TYPE_PointerTons2__TaxReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TaxReply(struct soap*, ns2__TaxReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TaxReply(struct soap*, const char *, int, ns2__TaxReply *const*, const char *);
SOAP_FMAC3 ns2__TaxReply ** SOAP_FMAC4 soap_in_PointerTons2__TaxReply(struct soap*, const char*, ns2__TaxReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TaxReply(struct soap*, ns2__TaxReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__TaxReply ** SOAP_FMAC4 soap_get_PointerTons2__TaxReply(struct soap*, ns2__TaxReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayerAuthValidateReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayerAuthValidateReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayerAuthValidateReply(struct soap*, ns2__PayerAuthValidateReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayerAuthValidateReply(struct soap*, const char *, int, ns2__PayerAuthValidateReply *const*, const char *);
SOAP_FMAC3 ns2__PayerAuthValidateReply ** SOAP_FMAC4 soap_in_PointerTons2__PayerAuthValidateReply(struct soap*, const char*, ns2__PayerAuthValidateReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayerAuthValidateReply(struct soap*, ns2__PayerAuthValidateReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayerAuthValidateReply ** SOAP_FMAC4 soap_get_PointerTons2__PayerAuthValidateReply(struct soap*, ns2__PayerAuthValidateReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayerAuthEnrollReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayerAuthEnrollReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayerAuthEnrollReply(struct soap*, ns2__PayerAuthEnrollReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayerAuthEnrollReply(struct soap*, const char *, int, ns2__PayerAuthEnrollReply *const*, const char *);
SOAP_FMAC3 ns2__PayerAuthEnrollReply ** SOAP_FMAC4 soap_in_PointerTons2__PayerAuthEnrollReply(struct soap*, const char*, ns2__PayerAuthEnrollReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayerAuthEnrollReply(struct soap*, ns2__PayerAuthEnrollReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayerAuthEnrollReply ** SOAP_FMAC4 soap_get_PointerTons2__PayerAuthEnrollReply(struct soap*, ns2__PayerAuthEnrollReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayerAuthSetupReply_DEFINED
#define SOAP_TYPE_PointerTons2__PayerAuthSetupReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayerAuthSetupReply(struct soap*, ns2__PayerAuthSetupReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayerAuthSetupReply(struct soap*, const char *, int, ns2__PayerAuthSetupReply *const*, const char *);
SOAP_FMAC3 ns2__PayerAuthSetupReply ** SOAP_FMAC4 soap_in_PointerTons2__PayerAuthSetupReply(struct soap*, const char*, ns2__PayerAuthSetupReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayerAuthSetupReply(struct soap*, ns2__PayerAuthSetupReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayerAuthSetupReply ** SOAP_FMAC4 soap_get_PointerTons2__PayerAuthSetupReply(struct soap*, ns2__PayerAuthSetupReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ECAuthenticateReply_DEFINED
#define SOAP_TYPE_PointerTons2__ECAuthenticateReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ECAuthenticateReply(struct soap*, ns2__ECAuthenticateReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ECAuthenticateReply(struct soap*, const char *, int, ns2__ECAuthenticateReply *const*, const char *);
SOAP_FMAC3 ns2__ECAuthenticateReply ** SOAP_FMAC4 soap_in_PointerTons2__ECAuthenticateReply(struct soap*, const char*, ns2__ECAuthenticateReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ECAuthenticateReply(struct soap*, ns2__ECAuthenticateReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__ECAuthenticateReply ** SOAP_FMAC4 soap_get_PointerTons2__ECAuthenticateReply(struct soap*, ns2__ECAuthenticateReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ECCreditReply_DEFINED
#define SOAP_TYPE_PointerTons2__ECCreditReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ECCreditReply(struct soap*, ns2__ECCreditReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ECCreditReply(struct soap*, const char *, int, ns2__ECCreditReply *const*, const char *);
SOAP_FMAC3 ns2__ECCreditReply ** SOAP_FMAC4 soap_in_PointerTons2__ECCreditReply(struct soap*, const char*, ns2__ECCreditReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ECCreditReply(struct soap*, ns2__ECCreditReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__ECCreditReply ** SOAP_FMAC4 soap_get_PointerTons2__ECCreditReply(struct soap*, ns2__ECCreditReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ECDebitReply_DEFINED
#define SOAP_TYPE_PointerTons2__ECDebitReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ECDebitReply(struct soap*, ns2__ECDebitReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ECDebitReply(struct soap*, const char *, int, ns2__ECDebitReply *const*, const char *);
SOAP_FMAC3 ns2__ECDebitReply ** SOAP_FMAC4 soap_in_PointerTons2__ECDebitReply(struct soap*, const char*, ns2__ECDebitReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ECDebitReply(struct soap*, ns2__ECDebitReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__ECDebitReply ** SOAP_FMAC4 soap_get_PointerTons2__ECDebitReply(struct soap*, ns2__ECDebitReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCDCCUpdateReply_DEFINED
#define SOAP_TYPE_PointerTons2__CCDCCUpdateReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCDCCUpdateReply(struct soap*, ns2__CCDCCUpdateReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCDCCUpdateReply(struct soap*, const char *, int, ns2__CCDCCUpdateReply *const*, const char *);
SOAP_FMAC3 ns2__CCDCCUpdateReply ** SOAP_FMAC4 soap_in_PointerTons2__CCDCCUpdateReply(struct soap*, const char*, ns2__CCDCCUpdateReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCDCCUpdateReply(struct soap*, ns2__CCDCCUpdateReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCDCCUpdateReply ** SOAP_FMAC4 soap_get_PointerTons2__CCDCCUpdateReply(struct soap*, ns2__CCDCCUpdateReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCDCCReply_DEFINED
#define SOAP_TYPE_PointerTons2__CCDCCReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCDCCReply(struct soap*, ns2__CCDCCReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCDCCReply(struct soap*, const char *, int, ns2__CCDCCReply *const*, const char *);
SOAP_FMAC3 ns2__CCDCCReply ** SOAP_FMAC4 soap_in_PointerTons2__CCDCCReply(struct soap*, const char*, ns2__CCDCCReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCDCCReply(struct soap*, ns2__CCDCCReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCDCCReply ** SOAP_FMAC4 soap_get_PointerTons2__CCDCCReply(struct soap*, ns2__CCDCCReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCAutoAuthReversalReply_DEFINED
#define SOAP_TYPE_PointerTons2__CCAutoAuthReversalReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCAutoAuthReversalReply(struct soap*, ns2__CCAutoAuthReversalReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCAutoAuthReversalReply(struct soap*, const char *, int, ns2__CCAutoAuthReversalReply *const*, const char *);
SOAP_FMAC3 ns2__CCAutoAuthReversalReply ** SOAP_FMAC4 soap_in_PointerTons2__CCAutoAuthReversalReply(struct soap*, const char*, ns2__CCAutoAuthReversalReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCAutoAuthReversalReply(struct soap*, ns2__CCAutoAuthReversalReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCAutoAuthReversalReply ** SOAP_FMAC4 soap_get_PointerTons2__CCAutoAuthReversalReply(struct soap*, ns2__CCAutoAuthReversalReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCAuthReversalReply_DEFINED
#define SOAP_TYPE_PointerTons2__CCAuthReversalReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCAuthReversalReply(struct soap*, ns2__CCAuthReversalReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCAuthReversalReply(struct soap*, const char *, int, ns2__CCAuthReversalReply *const*, const char *);
SOAP_FMAC3 ns2__CCAuthReversalReply ** SOAP_FMAC4 soap_in_PointerTons2__CCAuthReversalReply(struct soap*, const char*, ns2__CCAuthReversalReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCAuthReversalReply(struct soap*, ns2__CCAuthReversalReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCAuthReversalReply ** SOAP_FMAC4 soap_get_PointerTons2__CCAuthReversalReply(struct soap*, ns2__CCAuthReversalReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCCreditReply_DEFINED
#define SOAP_TYPE_PointerTons2__CCCreditReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCCreditReply(struct soap*, ns2__CCCreditReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCCreditReply(struct soap*, const char *, int, ns2__CCCreditReply *const*, const char *);
SOAP_FMAC3 ns2__CCCreditReply ** SOAP_FMAC4 soap_in_PointerTons2__CCCreditReply(struct soap*, const char*, ns2__CCCreditReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCCreditReply(struct soap*, ns2__CCCreditReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCCreditReply ** SOAP_FMAC4 soap_get_PointerTons2__CCCreditReply(struct soap*, ns2__CCCreditReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCCaptureReply_DEFINED
#define SOAP_TYPE_PointerTons2__CCCaptureReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCCaptureReply(struct soap*, ns2__CCCaptureReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCCaptureReply(struct soap*, const char *, int, ns2__CCCaptureReply *const*, const char *);
SOAP_FMAC3 ns2__CCCaptureReply ** SOAP_FMAC4 soap_in_PointerTons2__CCCaptureReply(struct soap*, const char*, ns2__CCCaptureReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCCaptureReply(struct soap*, ns2__CCCaptureReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCCaptureReply ** SOAP_FMAC4 soap_get_PointerTons2__CCCaptureReply(struct soap*, ns2__CCCaptureReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ServiceFeeCalculateReply_DEFINED
#define SOAP_TYPE_PointerTons2__ServiceFeeCalculateReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ServiceFeeCalculateReply(struct soap*, ns2__ServiceFeeCalculateReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ServiceFeeCalculateReply(struct soap*, const char *, int, ns2__ServiceFeeCalculateReply *const*, const char *);
SOAP_FMAC3 ns2__ServiceFeeCalculateReply ** SOAP_FMAC4 soap_in_PointerTons2__ServiceFeeCalculateReply(struct soap*, const char*, ns2__ServiceFeeCalculateReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ServiceFeeCalculateReply(struct soap*, ns2__ServiceFeeCalculateReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__ServiceFeeCalculateReply ** SOAP_FMAC4 soap_get_PointerTons2__ServiceFeeCalculateReply(struct soap*, ns2__ServiceFeeCalculateReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCIncrementalAuthReply_DEFINED
#define SOAP_TYPE_PointerTons2__CCIncrementalAuthReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCIncrementalAuthReply(struct soap*, ns2__CCIncrementalAuthReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCIncrementalAuthReply(struct soap*, const char *, int, ns2__CCIncrementalAuthReply *const*, const char *);
SOAP_FMAC3 ns2__CCIncrementalAuthReply ** SOAP_FMAC4 soap_in_PointerTons2__CCIncrementalAuthReply(struct soap*, const char*, ns2__CCIncrementalAuthReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCIncrementalAuthReply(struct soap*, ns2__CCIncrementalAuthReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCIncrementalAuthReply ** SOAP_FMAC4 soap_get_PointerTons2__CCIncrementalAuthReply(struct soap*, ns2__CCIncrementalAuthReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCSaleReversalReply_DEFINED
#define SOAP_TYPE_PointerTons2__CCSaleReversalReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCSaleReversalReply(struct soap*, ns2__CCSaleReversalReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCSaleReversalReply(struct soap*, const char *, int, ns2__CCSaleReversalReply *const*, const char *);
SOAP_FMAC3 ns2__CCSaleReversalReply ** SOAP_FMAC4 soap_in_PointerTons2__CCSaleReversalReply(struct soap*, const char*, ns2__CCSaleReversalReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCSaleReversalReply(struct soap*, ns2__CCSaleReversalReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCSaleReversalReply ** SOAP_FMAC4 soap_get_PointerTons2__CCSaleReversalReply(struct soap*, ns2__CCSaleReversalReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCSaleCreditReply_DEFINED
#define SOAP_TYPE_PointerTons2__CCSaleCreditReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCSaleCreditReply(struct soap*, ns2__CCSaleCreditReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCSaleCreditReply(struct soap*, const char *, int, ns2__CCSaleCreditReply *const*, const char *);
SOAP_FMAC3 ns2__CCSaleCreditReply ** SOAP_FMAC4 soap_in_PointerTons2__CCSaleCreditReply(struct soap*, const char*, ns2__CCSaleCreditReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCSaleCreditReply(struct soap*, ns2__CCSaleCreditReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCSaleCreditReply ** SOAP_FMAC4 soap_get_PointerTons2__CCSaleCreditReply(struct soap*, ns2__CCSaleCreditReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCSaleReply_DEFINED
#define SOAP_TYPE_PointerTons2__CCSaleReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCSaleReply(struct soap*, ns2__CCSaleReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCSaleReply(struct soap*, const char *, int, ns2__CCSaleReply *const*, const char *);
SOAP_FMAC3 ns2__CCSaleReply ** SOAP_FMAC4 soap_in_PointerTons2__CCSaleReply(struct soap*, const char*, ns2__CCSaleReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCSaleReply(struct soap*, ns2__CCSaleReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCSaleReply ** SOAP_FMAC4 soap_get_PointerTons2__CCSaleReply(struct soap*, ns2__CCSaleReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__VerificationReply_DEFINED
#define SOAP_TYPE_PointerTons2__VerificationReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VerificationReply(struct soap*, ns2__VerificationReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VerificationReply(struct soap*, const char *, int, ns2__VerificationReply *const*, const char *);
SOAP_FMAC3 ns2__VerificationReply ** SOAP_FMAC4 soap_in_PointerTons2__VerificationReply(struct soap*, const char*, ns2__VerificationReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VerificationReply(struct soap*, ns2__VerificationReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__VerificationReply ** SOAP_FMAC4 soap_get_PointerTons2__VerificationReply(struct soap*, ns2__VerificationReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__OCTReply_DEFINED
#define SOAP_TYPE_PointerTons2__OCTReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OCTReply(struct soap*, ns2__OCTReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OCTReply(struct soap*, const char *, int, ns2__OCTReply *const*, const char *);
SOAP_FMAC3 ns2__OCTReply ** SOAP_FMAC4 soap_in_PointerTons2__OCTReply(struct soap*, const char*, ns2__OCTReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OCTReply(struct soap*, ns2__OCTReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__OCTReply ** SOAP_FMAC4 soap_get_PointerTons2__OCTReply(struct soap*, ns2__OCTReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCAuthReply_DEFINED
#define SOAP_TYPE_PointerTons2__CCAuthReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCAuthReply(struct soap*, ns2__CCAuthReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCAuthReply(struct soap*, const char *, int, ns2__CCAuthReply *const*, const char *);
SOAP_FMAC3 ns2__CCAuthReply ** SOAP_FMAC4 soap_in_PointerTons2__CCAuthReply(struct soap*, const char*, ns2__CCAuthReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCAuthReply(struct soap*, ns2__CCAuthReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCAuthReply ** SOAP_FMAC4 soap_get_PointerTons2__CCAuthReply(struct soap*, ns2__CCAuthReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DeniedPartiesMatch_DEFINED
#define SOAP_TYPE_PointerTons2__DeniedPartiesMatch_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DeniedPartiesMatch(struct soap*, ns2__DeniedPartiesMatch *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DeniedPartiesMatch(struct soap*, const char *, int, ns2__DeniedPartiesMatch *const*, const char *);
SOAP_FMAC3 ns2__DeniedPartiesMatch ** SOAP_FMAC4 soap_in_PointerTons2__DeniedPartiesMatch(struct soap*, const char*, ns2__DeniedPartiesMatch **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DeniedPartiesMatch(struct soap*, ns2__DeniedPartiesMatch *const*, const char*, const char*);
SOAP_FMAC3 ns2__DeniedPartiesMatch ** SOAP_FMAC4 soap_get_PointerTons2__DeniedPartiesMatch(struct soap*, ns2__DeniedPartiesMatch **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APOptionsOption_DEFINED
#define SOAP_TYPE_PointerTons2__APOptionsOption_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APOptionsOption(struct soap*, ns2__APOptionsOption *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APOptionsOption(struct soap*, const char *, int, ns2__APOptionsOption *const*, const char *);
SOAP_FMAC3 ns2__APOptionsOption ** SOAP_FMAC4 soap_in_PointerTons2__APOptionsOption(struct soap*, const char*, ns2__APOptionsOption **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APOptionsOption(struct soap*, ns2__APOptionsOption *const*, const char*, const char*);
SOAP_FMAC3 ns2__APOptionsOption ** SOAP_FMAC4 soap_get_PointerTons2__APOptionsOption(struct soap*, ns2__APOptionsOption **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__SellerProtection_DEFINED
#define SOAP_TYPE_PointerTons2__SellerProtection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__SellerProtection(struct soap*, ns2__SellerProtection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__SellerProtection(struct soap*, const char *, int, ns2__SellerProtection *const*, const char *);
SOAP_FMAC3 ns2__SellerProtection ** SOAP_FMAC4 soap_in_PointerTons2__SellerProtection(struct soap*, const char*, ns2__SellerProtection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__SellerProtection(struct soap*, ns2__SellerProtection *const*, const char*, const char*);
SOAP_FMAC3 ns2__SellerProtection ** SOAP_FMAC4 soap_get_PointerTons2__SellerProtection(struct soap*, ns2__SellerProtection **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__paymentCurrencyOffer_DEFINED
#define SOAP_TYPE_PointerTons2__paymentCurrencyOffer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__paymentCurrencyOffer(struct soap*, ns2__paymentCurrencyOffer *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__paymentCurrencyOffer(struct soap*, const char *, int, ns2__paymentCurrencyOffer *const*, const char *);
SOAP_FMAC3 ns2__paymentCurrencyOffer ** SOAP_FMAC4 soap_in_PointerTons2__paymentCurrencyOffer(struct soap*, const char*, ns2__paymentCurrencyOffer **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__paymentCurrencyOffer(struct soap*, ns2__paymentCurrencyOffer *const*, const char*, const char*);
SOAP_FMAC3 ns2__paymentCurrencyOffer ** SOAP_FMAC4 soap_get_PointerTons2__paymentCurrencyOffer(struct soap*, ns2__paymentCurrencyOffer **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__RuleResultItems_DEFINED
#define SOAP_TYPE_PointerTons2__RuleResultItems_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RuleResultItems(struct soap*, ns2__RuleResultItems *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RuleResultItems(struct soap*, const char *, int, ns2__RuleResultItems *const*, const char *);
SOAP_FMAC3 ns2__RuleResultItems ** SOAP_FMAC4 soap_in_PointerTons2__RuleResultItems(struct soap*, const char*, ns2__RuleResultItems **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RuleResultItems(struct soap*, ns2__RuleResultItems *const*, const char*, const char*);
SOAP_FMAC3 ns2__RuleResultItems ** SOAP_FMAC4 soap_get_PointerTons2__RuleResultItems(struct soap*, ns2__RuleResultItems **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__RestrictedDecimal_DEFINED
#define SOAP_TYPE_PointerTons2__RestrictedDecimal_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RestrictedDecimal(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RestrictedDecimal(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons2__RestrictedDecimal(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RestrictedDecimal(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons2__RestrictedDecimal(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__RestrictedString_DEFINED
#define SOAP_TYPE_PointerTons2__RestrictedString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RestrictedString(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RestrictedString(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons2__RestrictedString(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RestrictedString(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons2__RestrictedString(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Element_DEFINED
#define SOAP_TYPE_PointerTons2__Element_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Element(struct soap*, ns2__Element *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Element(struct soap*, const char *, int, ns2__Element *const*, const char *);
SOAP_FMAC3 ns2__Element ** SOAP_FMAC4 soap_in_PointerTons2__Element(struct soap*, const char*, ns2__Element **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Element(struct soap*, ns2__Element *const*, const char*, const char*);
SOAP_FMAC3 ns2__Element ** SOAP_FMAC4 soap_get_PointerTons2__Element(struct soap*, ns2__Element **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Field_DEFINED
#define SOAP_TYPE_PointerTons2__Field_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Field(struct soap*, ns2__Field *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Field(struct soap*, const char *, int, ns2__Field *const*, const char *);
SOAP_FMAC3 ns2__Field ** SOAP_FMAC4 soap_in_PointerTons2__Field(struct soap*, const char*, ns2__Field **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Field(struct soap*, ns2__Field *const*, const char*, const char*);
SOAP_FMAC3 ns2__Field ** SOAP_FMAC4 soap_get_PointerTons2__Field(struct soap*, ns2__Field **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ProviderField_DEFINED
#define SOAP_TYPE_PointerTons2__ProviderField_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ProviderField(struct soap*, ns2__ProviderField *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ProviderField(struct soap*, const char *, int, ns2__ProviderField *const*, const char *);
SOAP_FMAC3 ns2__ProviderField ** SOAP_FMAC4 soap_in_PointerTons2__ProviderField(struct soap*, const char*, ns2__ProviderField **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ProviderField(struct soap*, ns2__ProviderField *const*, const char*, const char*);
SOAP_FMAC3 ns2__ProviderField ** SOAP_FMAC4 soap_get_PointerTons2__ProviderField(struct soap*, ns2__ProviderField **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Provider_DEFINED
#define SOAP_TYPE_PointerTons2__Provider_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Provider(struct soap*, ns2__Provider *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Provider(struct soap*, const char *, int, ns2__Provider *const*, const char *);
SOAP_FMAC3 ns2__Provider ** SOAP_FMAC4 soap_in_PointerTons2__Provider(struct soap*, const char*, ns2__Provider **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Provider(struct soap*, ns2__Provider *const*, const char*, const char*);
SOAP_FMAC3 ns2__Provider ** SOAP_FMAC4 soap_get_PointerTons2__Provider(struct soap*, ns2__Provider **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Travel_DEFINED
#define SOAP_TYPE_PointerTons2__Travel_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Travel(struct soap*, ns2__Travel *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Travel(struct soap*, const char *, int, ns2__Travel *const*, const char *);
SOAP_FMAC3 ns2__Travel ** SOAP_FMAC4 soap_in_PointerTons2__Travel(struct soap*, const char*, ns2__Travel **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Travel(struct soap*, ns2__Travel *const*, const char*, const char*);
SOAP_FMAC3 ns2__Travel ** SOAP_FMAC4 soap_get_PointerTons2__Travel(struct soap*, ns2__Travel **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ProviderFields_DEFINED
#define SOAP_TYPE_PointerTons2__ProviderFields_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ProviderFields(struct soap*, ns2__ProviderFields *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ProviderFields(struct soap*, const char *, int, ns2__ProviderFields *const*, const char *);
SOAP_FMAC3 ns2__ProviderFields ** SOAP_FMAC4 soap_in_PointerTons2__ProviderFields(struct soap*, const char*, ns2__ProviderFields **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ProviderFields(struct soap*, ns2__ProviderFields *const*, const char*, const char*);
SOAP_FMAC3 ns2__ProviderFields ** SOAP_FMAC4 soap_get_PointerTons2__ProviderFields(struct soap*, ns2__ProviderFields **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__MorphingElement_DEFINED
#define SOAP_TYPE_PointerTons2__MorphingElement_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MorphingElement(struct soap*, ns2__MorphingElement *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MorphingElement(struct soap*, const char *, int, ns2__MorphingElement *const*, const char *);
SOAP_FMAC3 ns2__MorphingElement ** SOAP_FMAC4 soap_in_PointerTons2__MorphingElement(struct soap*, const char*, ns2__MorphingElement **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MorphingElement(struct soap*, ns2__MorphingElement *const*, const char*, const char*);
SOAP_FMAC3 ns2__MorphingElement ** SOAP_FMAC4 soap_get_PointerTons2__MorphingElement(struct soap*, ns2__MorphingElement **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__AdditionalFields_DEFINED
#define SOAP_TYPE_PointerTons2__AdditionalFields_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AdditionalFields(struct soap*, ns2__AdditionalFields *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AdditionalFields(struct soap*, const char *, int, ns2__AdditionalFields *const*, const char *);
SOAP_FMAC3 ns2__AdditionalFields ** SOAP_FMAC4 soap_in_PointerTons2__AdditionalFields(struct soap*, const char*, ns2__AdditionalFields **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AdditionalFields(struct soap*, ns2__AdditionalFields *const*, const char*, const char*);
SOAP_FMAC3 ns2__AdditionalFields ** SOAP_FMAC4 soap_get_PointerTons2__AdditionalFields(struct soap*, ns2__AdditionalFields **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ProfileReply_DEFINED
#define SOAP_TYPE_PointerTons2__ProfileReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ProfileReply(struct soap*, ns2__ProfileReply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ProfileReply(struct soap*, const char *, int, ns2__ProfileReply *const*, const char *);
SOAP_FMAC3 ns2__ProfileReply ** SOAP_FMAC4 soap_in_PointerTons2__ProfileReply(struct soap*, const char*, ns2__ProfileReply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ProfileReply(struct soap*, ns2__ProfileReply *const*, const char*, const char*);
SOAP_FMAC3 ns2__ProfileReply ** SOAP_FMAC4 soap_get_PointerTons2__ProfileReply(struct soap*, ns2__ProfileReply **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__RuleResultItem_DEFINED
#define SOAP_TYPE_PointerTons2__RuleResultItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RuleResultItem(struct soap*, ns2__RuleResultItem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RuleResultItem(struct soap*, const char *, int, ns2__RuleResultItem *const*, const char *);
SOAP_FMAC3 ns2__RuleResultItem ** SOAP_FMAC4 soap_in_PointerTons2__RuleResultItem(struct soap*, const char*, ns2__RuleResultItem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RuleResultItem(struct soap*, ns2__RuleResultItem *const*, const char*, const char*);
SOAP_FMAC3 ns2__RuleResultItem ** SOAP_FMAC4 soap_get_PointerTons2__RuleResultItem(struct soap*, ns2__RuleResultItem **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__FXQuote_DEFINED
#define SOAP_TYPE_PointerTons2__FXQuote_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FXQuote(struct soap*, ns2__FXQuote *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FXQuote(struct soap*, const char *, int, ns2__FXQuote *const*, const char *);
SOAP_FMAC3 ns2__FXQuote ** SOAP_FMAC4 soap_in_PointerTons2__FXQuote(struct soap*, const char*, ns2__FXQuote **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FXQuote(struct soap*, ns2__FXQuote *const*, const char*, const char*);
SOAP_FMAC3 ns2__FXQuote ** SOAP_FMAC4 soap_get_PointerTons2__FXQuote(struct soap*, ns2__FXQuote **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DeviceFingerprint_DEFINED
#define SOAP_TYPE_PointerTons2__DeviceFingerprint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DeviceFingerprint(struct soap*, ns2__DeviceFingerprint *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DeviceFingerprint(struct soap*, const char *, int, ns2__DeviceFingerprint *const*, const char *);
SOAP_FMAC3 ns2__DeviceFingerprint ** SOAP_FMAC4 soap_in_PointerTons2__DeviceFingerprint(struct soap*, const char*, ns2__DeviceFingerprint **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DeviceFingerprint(struct soap*, ns2__DeviceFingerprint *const*, const char*, const char*);
SOAP_FMAC3 ns2__DeviceFingerprint ** SOAP_FMAC4 soap_get_PointerTons2__DeviceFingerprint(struct soap*, ns2__DeviceFingerprint **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__TaxReplyItem_DEFINED
#define SOAP_TYPE_PointerTons2__TaxReplyItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TaxReplyItem(struct soap*, ns2__TaxReplyItem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TaxReplyItem(struct soap*, const char *, int, ns2__TaxReplyItem *const*, const char *);
SOAP_FMAC3 ns2__TaxReplyItem ** SOAP_FMAC4 soap_in_PointerTons2__TaxReplyItem(struct soap*, const char*, ns2__TaxReplyItem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TaxReplyItem(struct soap*, ns2__TaxReplyItem *const*, const char*, const char*);
SOAP_FMAC3 ns2__TaxReplyItem ** SOAP_FMAC4 soap_get_PointerTons2__TaxReplyItem(struct soap*, ns2__TaxReplyItem **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__TaxReplyItemJurisdiction_DEFINED
#define SOAP_TYPE_PointerTons2__TaxReplyItemJurisdiction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TaxReplyItemJurisdiction(struct soap*, ns2__TaxReplyItemJurisdiction *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TaxReplyItemJurisdiction(struct soap*, const char *, int, ns2__TaxReplyItemJurisdiction *const*, const char *);
SOAP_FMAC3 ns2__TaxReplyItemJurisdiction ** SOAP_FMAC4 soap_in_PointerTons2__TaxReplyItemJurisdiction(struct soap*, const char*, ns2__TaxReplyItemJurisdiction **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TaxReplyItemJurisdiction(struct soap*, ns2__TaxReplyItemJurisdiction *const*, const char*, const char*);
SOAP_FMAC3 ns2__TaxReplyItemJurisdiction ** SOAP_FMAC4 soap_get_PointerTons2__TaxReplyItemJurisdiction(struct soap*, ns2__TaxReplyItemJurisdiction **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
#define SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap*, const char *, int, xsd__base64Binary *const*, const char *);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap*, const char*, xsd__base64Binary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*, const char*, const char*);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__payByPoints_DEFINED
#define SOAP_TYPE_PointerTons2__payByPoints_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__payByPoints(struct soap*, ns2__payByPoints *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__payByPoints(struct soap*, const char *, int, ns2__payByPoints *const*, const char *);
SOAP_FMAC3 ns2__payByPoints ** SOAP_FMAC4 soap_in_PointerTons2__payByPoints(struct soap*, const char*, ns2__payByPoints **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__payByPoints(struct soap*, ns2__payByPoints *const*, const char*, const char*);
SOAP_FMAC3 ns2__payByPoints ** SOAP_FMAC4 soap_get_PointerTons2__payByPoints(struct soap*, ns2__payByPoints **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__HealthCare_DEFINED
#define SOAP_TYPE_PointerTons2__HealthCare_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__HealthCare(struct soap*, ns2__HealthCare *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__HealthCare(struct soap*, const char *, int, ns2__HealthCare *const*, const char *);
SOAP_FMAC3 ns2__HealthCare ** SOAP_FMAC4 soap_in_PointerTons2__HealthCare(struct soap*, const char*, ns2__HealthCare **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__HealthCare(struct soap*, ns2__HealthCare *const*, const char*, const char*);
SOAP_FMAC3 ns2__HealthCare ** SOAP_FMAC4 soap_get_PointerTons2__HealthCare(struct soap*, ns2__HealthCare **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__AutoRental_DEFINED
#define SOAP_TYPE_PointerTons2__AutoRental_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AutoRental(struct soap*, ns2__AutoRental *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AutoRental(struct soap*, const char *, int, ns2__AutoRental *const*, const char *);
SOAP_FMAC3 ns2__AutoRental ** SOAP_FMAC4 soap_in_PointerTons2__AutoRental(struct soap*, const char*, ns2__AutoRental **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AutoRental(struct soap*, ns2__AutoRental *const*, const char*, const char*);
SOAP_FMAC3 ns2__AutoRental ** SOAP_FMAC4 soap_get_PointerTons2__AutoRental(struct soap*, ns2__AutoRental **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__AgencyInformation_DEFINED
#define SOAP_TYPE_PointerTons2__AgencyInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AgencyInformation(struct soap*, ns2__AgencyInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AgencyInformation(struct soap*, const char *, int, ns2__AgencyInformation *const*, const char *);
SOAP_FMAC3 ns2__AgencyInformation ** SOAP_FMAC4 soap_in_PointerTons2__AgencyInformation(struct soap*, const char*, ns2__AgencyInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AgencyInformation(struct soap*, ns2__AgencyInformation *const*, const char*, const char*);
SOAP_FMAC3 ns2__AgencyInformation ** SOAP_FMAC4 soap_get_PointerTons2__AgencyInformation(struct soap*, ns2__AgencyInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__AbortService_DEFINED
#define SOAP_TYPE_PointerTons2__AbortService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AbortService(struct soap*, ns2__AbortService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AbortService(struct soap*, const char *, int, ns2__AbortService *const*, const char *);
SOAP_FMAC3 ns2__AbortService ** SOAP_FMAC4 soap_in_PointerTons2__AbortService(struct soap*, const char*, ns2__AbortService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AbortService(struct soap*, ns2__AbortService *const*, const char*, const char*);
SOAP_FMAC3 ns2__AbortService ** SOAP_FMAC4 soap_get_PointerTons2__AbortService(struct soap*, ns2__AbortService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__mPOS_DEFINED
#define SOAP_TYPE_PointerTons2__mPOS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__mPOS(struct soap*, ns2__mPOS *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__mPOS(struct soap*, const char *, int, ns2__mPOS *const*, const char *);
SOAP_FMAC3 ns2__mPOS ** SOAP_FMAC4 soap_in_PointerTons2__mPOS(struct soap*, const char*, ns2__mPOS **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__mPOS(struct soap*, ns2__mPOS *const*, const char*, const char*);
SOAP_FMAC3 ns2__mPOS ** SOAP_FMAC4 soap_get_PointerTons2__mPOS(struct soap*, ns2__mPOS **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCCheckStatusService_DEFINED
#define SOAP_TYPE_PointerTons2__CCCheckStatusService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCCheckStatusService(struct soap*, ns2__CCCheckStatusService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCCheckStatusService(struct soap*, const char *, int, ns2__CCCheckStatusService *const*, const char *);
SOAP_FMAC3 ns2__CCCheckStatusService ** SOAP_FMAC4 soap_in_PointerTons2__CCCheckStatusService(struct soap*, const char*, ns2__CCCheckStatusService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCCheckStatusService(struct soap*, ns2__CCCheckStatusService *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCCheckStatusService ** SOAP_FMAC4 soap_get_PointerTons2__CCCheckStatusService(struct soap*, ns2__CCCheckStatusService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__GetMasterpassDataService_DEFINED
#define SOAP_TYPE_PointerTons2__GetMasterpassDataService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GetMasterpassDataService(struct soap*, ns2__GetMasterpassDataService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GetMasterpassDataService(struct soap*, const char *, int, ns2__GetMasterpassDataService *const*, const char *);
SOAP_FMAC3 ns2__GetMasterpassDataService ** SOAP_FMAC4 soap_in_PointerTons2__GetMasterpassDataService(struct soap*, const char*, ns2__GetMasterpassDataService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GetMasterpassDataService(struct soap*, ns2__GetMasterpassDataService *const*, const char*, const char*);
SOAP_FMAC3 ns2__GetMasterpassDataService ** SOAP_FMAC4 soap_get_PointerTons2__GetMasterpassDataService(struct soap*, ns2__GetMasterpassDataService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PostdatedTransaction_DEFINED
#define SOAP_TYPE_PointerTons2__PostdatedTransaction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PostdatedTransaction(struct soap*, ns2__PostdatedTransaction *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PostdatedTransaction(struct soap*, const char *, int, ns2__PostdatedTransaction *const*, const char *);
SOAP_FMAC3 ns2__PostdatedTransaction ** SOAP_FMAC4 soap_in_PointerTons2__PostdatedTransaction(struct soap*, const char*, ns2__PostdatedTransaction **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PostdatedTransaction(struct soap*, ns2__PostdatedTransaction *const*, const char*, const char*);
SOAP_FMAC3 ns2__PostdatedTransaction ** SOAP_FMAC4 soap_get_PointerTons2__PostdatedTransaction(struct soap*, ns2__PostdatedTransaction **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APRevokeMandateService_DEFINED
#define SOAP_TYPE_PointerTons2__APRevokeMandateService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APRevokeMandateService(struct soap*, ns2__APRevokeMandateService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APRevokeMandateService(struct soap*, const char *, int, ns2__APRevokeMandateService *const*, const char *);
SOAP_FMAC3 ns2__APRevokeMandateService ** SOAP_FMAC4 soap_in_PointerTons2__APRevokeMandateService(struct soap*, const char*, ns2__APRevokeMandateService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APRevokeMandateService(struct soap*, ns2__APRevokeMandateService *const*, const char*, const char*);
SOAP_FMAC3 ns2__APRevokeMandateService ** SOAP_FMAC4 soap_get_PointerTons2__APRevokeMandateService(struct soap*, ns2__APRevokeMandateService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APImportMandateService_DEFINED
#define SOAP_TYPE_PointerTons2__APImportMandateService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APImportMandateService(struct soap*, ns2__APImportMandateService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APImportMandateService(struct soap*, const char *, int, ns2__APImportMandateService *const*, const char *);
SOAP_FMAC3 ns2__APImportMandateService ** SOAP_FMAC4 soap_in_PointerTons2__APImportMandateService(struct soap*, const char*, ns2__APImportMandateService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APImportMandateService(struct soap*, ns2__APImportMandateService *const*, const char*, const char*);
SOAP_FMAC3 ns2__APImportMandateService ** SOAP_FMAC4 soap_get_PointerTons2__APImportMandateService(struct soap*, ns2__APImportMandateService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APUpdateMandateService_DEFINED
#define SOAP_TYPE_PointerTons2__APUpdateMandateService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APUpdateMandateService(struct soap*, ns2__APUpdateMandateService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APUpdateMandateService(struct soap*, const char *, int, ns2__APUpdateMandateService *const*, const char *);
SOAP_FMAC3 ns2__APUpdateMandateService ** SOAP_FMAC4 soap_in_PointerTons2__APUpdateMandateService(struct soap*, const char*, ns2__APUpdateMandateService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APUpdateMandateService(struct soap*, ns2__APUpdateMandateService *const*, const char*, const char*);
SOAP_FMAC3 ns2__APUpdateMandateService ** SOAP_FMAC4 soap_get_PointerTons2__APUpdateMandateService(struct soap*, ns2__APUpdateMandateService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APMandateStatusService_DEFINED
#define SOAP_TYPE_PointerTons2__APMandateStatusService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APMandateStatusService(struct soap*, ns2__APMandateStatusService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APMandateStatusService(struct soap*, const char *, int, ns2__APMandateStatusService *const*, const char *);
SOAP_FMAC3 ns2__APMandateStatusService ** SOAP_FMAC4 soap_in_PointerTons2__APMandateStatusService(struct soap*, const char*, ns2__APMandateStatusService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APMandateStatusService(struct soap*, ns2__APMandateStatusService *const*, const char*, const char*);
SOAP_FMAC3 ns2__APMandateStatusService ** SOAP_FMAC4 soap_get_PointerTons2__APMandateStatusService(struct soap*, ns2__APMandateStatusService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APCreateMandateService_DEFINED
#define SOAP_TYPE_PointerTons2__APCreateMandateService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APCreateMandateService(struct soap*, ns2__APCreateMandateService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APCreateMandateService(struct soap*, const char *, int, ns2__APCreateMandateService *const*, const char *);
SOAP_FMAC3 ns2__APCreateMandateService ** SOAP_FMAC4 soap_in_PointerTons2__APCreateMandateService(struct soap*, const char*, ns2__APCreateMandateService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APCreateMandateService(struct soap*, ns2__APCreateMandateService *const*, const char*, const char*);
SOAP_FMAC3 ns2__APCreateMandateService ** SOAP_FMAC4 soap_get_PointerTons2__APCreateMandateService(struct soap*, ns2__APCreateMandateService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APBillingAgreementService_DEFINED
#define SOAP_TYPE_PointerTons2__APBillingAgreementService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APBillingAgreementService(struct soap*, ns2__APBillingAgreementService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APBillingAgreementService(struct soap*, const char *, int, ns2__APBillingAgreementService *const*, const char *);
SOAP_FMAC3 ns2__APBillingAgreementService ** SOAP_FMAC4 soap_in_PointerTons2__APBillingAgreementService(struct soap*, const char*, ns2__APBillingAgreementService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APBillingAgreementService(struct soap*, ns2__APBillingAgreementService *const*, const char*, const char*);
SOAP_FMAC3 ns2__APBillingAgreementService ** SOAP_FMAC4 soap_get_PointerTons2__APBillingAgreementService(struct soap*, ns2__APBillingAgreementService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APCancelService_DEFINED
#define SOAP_TYPE_PointerTons2__APCancelService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APCancelService(struct soap*, ns2__APCancelService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APCancelService(struct soap*, const char *, int, ns2__APCancelService *const*, const char *);
SOAP_FMAC3 ns2__APCancelService ** SOAP_FMAC4 soap_in_PointerTons2__APCancelService(struct soap*, const char*, ns2__APCancelService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APCancelService(struct soap*, ns2__APCancelService *const*, const char*, const char*);
SOAP_FMAC3 ns2__APCancelService ** SOAP_FMAC4 soap_get_PointerTons2__APCancelService(struct soap*, ns2__APCancelService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APOrderService_DEFINED
#define SOAP_TYPE_PointerTons2__APOrderService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APOrderService(struct soap*, ns2__APOrderService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APOrderService(struct soap*, const char *, int, ns2__APOrderService *const*, const char *);
SOAP_FMAC3 ns2__APOrderService ** SOAP_FMAC4 soap_in_PointerTons2__APOrderService(struct soap*, const char*, ns2__APOrderService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APOrderService(struct soap*, ns2__APOrderService *const*, const char*, const char*);
SOAP_FMAC3 ns2__APOrderService ** SOAP_FMAC4 soap_get_PointerTons2__APOrderService(struct soap*, ns2__APOrderService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Loan_DEFINED
#define SOAP_TYPE_PointerTons2__Loan_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Loan(struct soap*, ns2__Loan *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Loan(struct soap*, const char *, int, ns2__Loan *const*, const char *);
SOAP_FMAC3 ns2__Loan ** SOAP_FMAC4 soap_in_PointerTons2__Loan(struct soap*, const char*, ns2__Loan **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Loan(struct soap*, ns2__Loan *const*, const char*, const char*);
SOAP_FMAC3 ns2__Loan ** SOAP_FMAC4 soap_get_PointerTons2__Loan(struct soap*, ns2__Loan **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__TransactionMetadataService_DEFINED
#define SOAP_TYPE_PointerTons2__TransactionMetadataService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TransactionMetadataService(struct soap*, ns2__TransactionMetadataService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TransactionMetadataService(struct soap*, const char *, int, ns2__TransactionMetadataService *const*, const char *);
SOAP_FMAC3 ns2__TransactionMetadataService ** SOAP_FMAC4 soap_in_PointerTons2__TransactionMetadataService(struct soap*, const char*, ns2__TransactionMetadataService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TransactionMetadataService(struct soap*, ns2__TransactionMetadataService *const*, const char*, const char*);
SOAP_FMAC3 ns2__TransactionMetadataService ** SOAP_FMAC4 soap_get_PointerTons2__TransactionMetadataService(struct soap*, ns2__TransactionMetadataService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__GETVisaCheckoutDataService_DEFINED
#define SOAP_TYPE_PointerTons2__GETVisaCheckoutDataService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GETVisaCheckoutDataService(struct soap*, ns2__GETVisaCheckoutDataService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GETVisaCheckoutDataService(struct soap*, const char *, int, ns2__GETVisaCheckoutDataService *const*, const char *);
SOAP_FMAC3 ns2__GETVisaCheckoutDataService ** SOAP_FMAC4 soap_in_PointerTons2__GETVisaCheckoutDataService(struct soap*, const char*, ns2__GETVisaCheckoutDataService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GETVisaCheckoutDataService(struct soap*, ns2__GETVisaCheckoutDataService *const*, const char*, const char*);
SOAP_FMAC3 ns2__GETVisaCheckoutDataService ** SOAP_FMAC4 soap_get_PointerTons2__GETVisaCheckoutDataService(struct soap*, ns2__GETVisaCheckoutDataService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__issuer_DEFINED
#define SOAP_TYPE_PointerTons2__issuer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__issuer(struct soap*, ns2__issuer *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__issuer(struct soap*, const char *, int, ns2__issuer *const*, const char *);
SOAP_FMAC3 ns2__issuer ** SOAP_FMAC4 soap_in_PointerTons2__issuer(struct soap*, const char*, ns2__issuer **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__issuer(struct soap*, ns2__issuer *const*, const char*, const char*);
SOAP_FMAC3 ns2__issuer ** SOAP_FMAC4 soap_get_PointerTons2__issuer(struct soap*, ns2__issuer **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__BinLookupService_DEFINED
#define SOAP_TYPE_PointerTons2__BinLookupService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BinLookupService(struct soap*, ns2__BinLookupService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BinLookupService(struct soap*, const char *, int, ns2__BinLookupService *const*, const char *);
SOAP_FMAC3 ns2__BinLookupService ** SOAP_FMAC4 soap_in_PointerTons2__BinLookupService(struct soap*, const char*, ns2__BinLookupService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BinLookupService(struct soap*, ns2__BinLookupService *const*, const char*, const char*);
SOAP_FMAC3 ns2__BinLookupService ** SOAP_FMAC4 soap_get_PointerTons2__BinLookupService(struct soap*, ns2__BinLookupService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__EncryptPaymentDataService_DEFINED
#define SOAP_TYPE_PointerTons2__EncryptPaymentDataService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__EncryptPaymentDataService(struct soap*, ns2__EncryptPaymentDataService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__EncryptPaymentDataService(struct soap*, const char *, int, ns2__EncryptPaymentDataService *const*, const char *);
SOAP_FMAC3 ns2__EncryptPaymentDataService ** SOAP_FMAC4 soap_in_PointerTons2__EncryptPaymentDataService(struct soap*, const char*, ns2__EncryptPaymentDataService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__EncryptPaymentDataService(struct soap*, ns2__EncryptPaymentDataService *const*, const char*, const char*);
SOAP_FMAC3 ns2__EncryptPaymentDataService ** SOAP_FMAC4 soap_get_PointerTons2__EncryptPaymentDataService(struct soap*, ns2__EncryptPaymentDataService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Aft_DEFINED
#define SOAP_TYPE_PointerTons2__Aft_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Aft(struct soap*, ns2__Aft *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Aft(struct soap*, const char *, int, ns2__Aft *const*, const char *);
SOAP_FMAC3 ns2__Aft ** SOAP_FMAC4 soap_in_PointerTons2__Aft(struct soap*, const char*, ns2__Aft **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Aft(struct soap*, ns2__Aft *const*, const char*, const char*);
SOAP_FMAC3 ns2__Aft ** SOAP_FMAC4 soap_get_PointerTons2__Aft(struct soap*, ns2__Aft **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Wallet_DEFINED
#define SOAP_TYPE_PointerTons2__Wallet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Wallet(struct soap*, ns2__Wallet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Wallet(struct soap*, const char *, int, ns2__Wallet *const*, const char *);
SOAP_FMAC3 ns2__Wallet ** SOAP_FMAC4 soap_in_PointerTons2__Wallet(struct soap*, const char*, ns2__Wallet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Wallet(struct soap*, ns2__Wallet *const*, const char*, const char*);
SOAP_FMAC3 ns2__Wallet ** SOAP_FMAC4 soap_get_PointerTons2__Wallet(struct soap*, ns2__Wallet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PromotionGroup_DEFINED
#define SOAP_TYPE_PointerTons2__PromotionGroup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PromotionGroup(struct soap*, ns2__PromotionGroup *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PromotionGroup(struct soap*, const char *, int, ns2__PromotionGroup *const*, const char *);
SOAP_FMAC3 ns2__PromotionGroup ** SOAP_FMAC4 soap_in_PointerTons2__PromotionGroup(struct soap*, const char*, ns2__PromotionGroup **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PromotionGroup(struct soap*, ns2__PromotionGroup *const*, const char*, const char*);
SOAP_FMAC3 ns2__PromotionGroup ** SOAP_FMAC4 soap_get_PointerTons2__PromotionGroup(struct soap*, ns2__PromotionGroup **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DecryptVisaCheckoutDataService_DEFINED
#define SOAP_TYPE_PointerTons2__DecryptVisaCheckoutDataService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DecryptVisaCheckoutDataService(struct soap*, ns2__DecryptVisaCheckoutDataService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DecryptVisaCheckoutDataService(struct soap*, const char *, int, ns2__DecryptVisaCheckoutDataService *const*, const char *);
SOAP_FMAC3 ns2__DecryptVisaCheckoutDataService ** SOAP_FMAC4 soap_in_PointerTons2__DecryptVisaCheckoutDataService(struct soap*, const char*, ns2__DecryptVisaCheckoutDataService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DecryptVisaCheckoutDataService(struct soap*, ns2__DecryptVisaCheckoutDataService *const*, const char*, const char*);
SOAP_FMAC3 ns2__DecryptVisaCheckoutDataService ** SOAP_FMAC4 soap_get_PointerTons2__DecryptVisaCheckoutDataService(struct soap*, ns2__DecryptVisaCheckoutDataService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__VC_DEFINED
#define SOAP_TYPE_PointerTons2__VC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VC(struct soap*, ns2__VC *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VC(struct soap*, const char *, int, ns2__VC *const*, const char *);
SOAP_FMAC3 ns2__VC ** SOAP_FMAC4 soap_in_PointerTons2__VC(struct soap*, const char*, ns2__VC **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VC(struct soap*, ns2__VC *const*, const char*, const char*);
SOAP_FMAC3 ns2__VC ** SOAP_FMAC4 soap_get_PointerTons2__VC(struct soap*, ns2__VC **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__AutoRentalData_DEFINED
#define SOAP_TYPE_PointerTons2__AutoRentalData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AutoRentalData(struct soap*, ns2__AutoRentalData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AutoRentalData(struct soap*, const char *, int, ns2__AutoRentalData *const*, const char *);
SOAP_FMAC3 ns2__AutoRentalData ** SOAP_FMAC4 soap_in_PointerTons2__AutoRentalData(struct soap*, const char*, ns2__AutoRentalData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AutoRentalData(struct soap*, ns2__AutoRentalData *const*, const char*, const char*);
SOAP_FMAC3 ns2__AutoRentalData ** SOAP_FMAC4 soap_get_PointerTons2__AutoRentalData(struct soap*, ns2__AutoRentalData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Sender_DEFINED
#define SOAP_TYPE_PointerTons2__Sender_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Sender(struct soap*, ns2__Sender *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Sender(struct soap*, const char *, int, ns2__Sender *const*, const char *);
SOAP_FMAC3 ns2__Sender ** SOAP_FMAC4 soap_in_PointerTons2__Sender(struct soap*, const char*, ns2__Sender **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Sender(struct soap*, ns2__Sender *const*, const char*, const char*);
SOAP_FMAC3 ns2__Sender ** SOAP_FMAC4 soap_get_PointerTons2__Sender(struct soap*, ns2__Sender **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Recipient_DEFINED
#define SOAP_TYPE_PointerTons2__Recipient_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Recipient(struct soap*, ns2__Recipient *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Recipient(struct soap*, const char *, int, ns2__Recipient *const*, const char *);
SOAP_FMAC3 ns2__Recipient ** SOAP_FMAC4 soap_in_PointerTons2__Recipient(struct soap*, const char*, ns2__Recipient **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Recipient(struct soap*, ns2__Recipient *const*, const char*, const char*);
SOAP_FMAC3 ns2__Recipient ** SOAP_FMAC4 soap_get_PointerTons2__Recipient(struct soap*, ns2__Recipient **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PaymentNetworkToken_DEFINED
#define SOAP_TYPE_PointerTons2__PaymentNetworkToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PaymentNetworkToken(struct soap*, ns2__PaymentNetworkToken *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PaymentNetworkToken(struct soap*, const char *, int, ns2__PaymentNetworkToken *const*, const char *);
SOAP_FMAC3 ns2__PaymentNetworkToken ** SOAP_FMAC4 soap_in_PointerTons2__PaymentNetworkToken(struct soap*, const char*, ns2__PaymentNetworkToken **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PaymentNetworkToken(struct soap*, ns2__PaymentNetworkToken *const*, const char*, const char*);
SOAP_FMAC3 ns2__PaymentNetworkToken ** SOAP_FMAC4 soap_get_PointerTons2__PaymentNetworkToken(struct soap*, ns2__PaymentNetworkToken **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__HostedDataRetrieveService_DEFINED
#define SOAP_TYPE_PointerTons2__HostedDataRetrieveService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__HostedDataRetrieveService(struct soap*, ns2__HostedDataRetrieveService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__HostedDataRetrieveService(struct soap*, const char *, int, ns2__HostedDataRetrieveService *const*, const char *);
SOAP_FMAC3 ns2__HostedDataRetrieveService ** SOAP_FMAC4 soap_in_PointerTons2__HostedDataRetrieveService(struct soap*, const char*, ns2__HostedDataRetrieveService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__HostedDataRetrieveService(struct soap*, ns2__HostedDataRetrieveService *const*, const char*, const char*);
SOAP_FMAC3 ns2__HostedDataRetrieveService ** SOAP_FMAC4 soap_get_PointerTons2__HostedDataRetrieveService(struct soap*, ns2__HostedDataRetrieveService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__HostedDataCreateService_DEFINED
#define SOAP_TYPE_PointerTons2__HostedDataCreateService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__HostedDataCreateService(struct soap*, ns2__HostedDataCreateService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__HostedDataCreateService(struct soap*, const char *, int, ns2__HostedDataCreateService *const*, const char *);
SOAP_FMAC3 ns2__HostedDataCreateService ** SOAP_FMAC4 soap_in_PointerTons2__HostedDataCreateService(struct soap*, const char*, ns2__HostedDataCreateService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__HostedDataCreateService(struct soap*, ns2__HostedDataCreateService *const*, const char*, const char*);
SOAP_FMAC3 ns2__HostedDataCreateService ** SOAP_FMAC4 soap_get_PointerTons2__HostedDataCreateService(struct soap*, ns2__HostedDataCreateService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__merchant_DEFINED
#define SOAP_TYPE_PointerTons2__merchant_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__merchant(struct soap*, ns2__merchant *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__merchant(struct soap*, const char *, int, ns2__merchant *const*, const char *);
SOAP_FMAC3 ns2__merchant ** SOAP_FMAC4 soap_in_PointerTons2__merchant(struct soap*, const char*, ns2__merchant **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__merchant(struct soap*, ns2__merchant *const*, const char*, const char*);
SOAP_FMAC3 ns2__merchant ** SOAP_FMAC4 soap_get_PointerTons2__merchant(struct soap*, ns2__merchant **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__EmvRequest_DEFINED
#define SOAP_TYPE_PointerTons2__EmvRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__EmvRequest(struct soap*, ns2__EmvRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__EmvRequest(struct soap*, const char *, int, ns2__EmvRequest *const*, const char *);
SOAP_FMAC3 ns2__EmvRequest ** SOAP_FMAC4 soap_in_PointerTons2__EmvRequest(struct soap*, const char*, ns2__EmvRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__EmvRequest(struct soap*, ns2__EmvRequest *const*, const char*, const char*);
SOAP_FMAC3 ns2__EmvRequest ** SOAP_FMAC4 soap_get_PointerTons2__EmvRequest(struct soap*, ns2__EmvRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCDCCUpdateService_DEFINED
#define SOAP_TYPE_PointerTons2__CCDCCUpdateService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCDCCUpdateService(struct soap*, ns2__CCDCCUpdateService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCDCCUpdateService(struct soap*, const char *, int, ns2__CCDCCUpdateService *const*, const char *);
SOAP_FMAC3 ns2__CCDCCUpdateService ** SOAP_FMAC4 soap_in_PointerTons2__CCDCCUpdateService(struct soap*, const char*, ns2__CCDCCUpdateService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCDCCUpdateService(struct soap*, ns2__CCDCCUpdateService *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCDCCUpdateService ** SOAP_FMAC4 soap_get_PointerTons2__CCDCCUpdateService(struct soap*, ns2__CCDCCUpdateService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalTransactionSearchService_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalTransactionSearchService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalTransactionSearchService(struct soap*, ns2__PayPalTransactionSearchService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalTransactionSearchService(struct soap*, const char *, int, ns2__PayPalTransactionSearchService *const*, const char *);
SOAP_FMAC3 ns2__PayPalTransactionSearchService ** SOAP_FMAC4 soap_in_PointerTons2__PayPalTransactionSearchService(struct soap*, const char*, ns2__PayPalTransactionSearchService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalTransactionSearchService(struct soap*, ns2__PayPalTransactionSearchService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalTransactionSearchService ** SOAP_FMAC4 soap_get_PointerTons2__PayPalTransactionSearchService(struct soap*, ns2__PayPalTransactionSearchService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalGetTxnDetailsService_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalGetTxnDetailsService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalGetTxnDetailsService(struct soap*, ns2__PayPalGetTxnDetailsService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalGetTxnDetailsService(struct soap*, const char *, int, ns2__PayPalGetTxnDetailsService *const*, const char *);
SOAP_FMAC3 ns2__PayPalGetTxnDetailsService ** SOAP_FMAC4 soap_in_PointerTons2__PayPalGetTxnDetailsService(struct soap*, const char*, ns2__PayPalGetTxnDetailsService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalGetTxnDetailsService(struct soap*, ns2__PayPalGetTxnDetailsService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalGetTxnDetailsService ** SOAP_FMAC4 soap_get_PointerTons2__PayPalGetTxnDetailsService(struct soap*, ns2__PayPalGetTxnDetailsService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APConfirmPurchaseService_DEFINED
#define SOAP_TYPE_PointerTons2__APConfirmPurchaseService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APConfirmPurchaseService(struct soap*, ns2__APConfirmPurchaseService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APConfirmPurchaseService(struct soap*, const char *, int, ns2__APConfirmPurchaseService *const*, const char *);
SOAP_FMAC3 ns2__APConfirmPurchaseService ** SOAP_FMAC4 soap_in_PointerTons2__APConfirmPurchaseService(struct soap*, const char*, ns2__APConfirmPurchaseService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APConfirmPurchaseService(struct soap*, ns2__APConfirmPurchaseService *const*, const char*, const char*);
SOAP_FMAC3 ns2__APConfirmPurchaseService ** SOAP_FMAC4 soap_get_PointerTons2__APConfirmPurchaseService(struct soap*, ns2__APConfirmPurchaseService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APTransactionDetailsService_DEFINED
#define SOAP_TYPE_PointerTons2__APTransactionDetailsService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APTransactionDetailsService(struct soap*, ns2__APTransactionDetailsService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APTransactionDetailsService(struct soap*, const char *, int, ns2__APTransactionDetailsService *const*, const char *);
SOAP_FMAC3 ns2__APTransactionDetailsService ** SOAP_FMAC4 soap_in_PointerTons2__APTransactionDetailsService(struct soap*, const char*, ns2__APTransactionDetailsService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APTransactionDetailsService(struct soap*, ns2__APTransactionDetailsService *const*, const char*, const char*);
SOAP_FMAC3 ns2__APTransactionDetailsService ** SOAP_FMAC4 soap_get_PointerTons2__APTransactionDetailsService(struct soap*, ns2__APTransactionDetailsService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APUI_DEFINED
#define SOAP_TYPE_PointerTons2__APUI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APUI(struct soap*, ns2__APUI *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APUI(struct soap*, const char *, int, ns2__APUI *const*, const char *);
SOAP_FMAC3 ns2__APUI ** SOAP_FMAC4 soap_in_PointerTons2__APUI(struct soap*, const char*, ns2__APUI **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APUI(struct soap*, ns2__APUI *const*, const char*, const char*);
SOAP_FMAC3 ns2__APUI ** SOAP_FMAC4 soap_get_PointerTons2__APUI(struct soap*, ns2__APUI **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APSessionsService_DEFINED
#define SOAP_TYPE_PointerTons2__APSessionsService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APSessionsService(struct soap*, ns2__APSessionsService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APSessionsService(struct soap*, const char *, int, ns2__APSessionsService *const*, const char *);
SOAP_FMAC3 ns2__APSessionsService ** SOAP_FMAC4 soap_in_PointerTons2__APSessionsService(struct soap*, const char*, ns2__APSessionsService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APSessionsService(struct soap*, ns2__APSessionsService *const*, const char*, const char*);
SOAP_FMAC3 ns2__APSessionsService ** SOAP_FMAC4 soap_get_PointerTons2__APSessionsService(struct soap*, ns2__APSessionsService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APCheckOutDetailsService_DEFINED
#define SOAP_TYPE_PointerTons2__APCheckOutDetailsService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APCheckOutDetailsService(struct soap*, ns2__APCheckOutDetailsService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APCheckOutDetailsService(struct soap*, const char *, int, ns2__APCheckOutDetailsService *const*, const char *);
SOAP_FMAC3 ns2__APCheckOutDetailsService ** SOAP_FMAC4 soap_in_PointerTons2__APCheckOutDetailsService(struct soap*, const char*, ns2__APCheckOutDetailsService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APCheckOutDetailsService(struct soap*, ns2__APCheckOutDetailsService *const*, const char*, const char*);
SOAP_FMAC3 ns2__APCheckOutDetailsService ** SOAP_FMAC4 soap_get_PointerTons2__APCheckOutDetailsService(struct soap*, ns2__APCheckOutDetailsService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APSaleService_DEFINED
#define SOAP_TYPE_PointerTons2__APSaleService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APSaleService(struct soap*, ns2__APSaleService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APSaleService(struct soap*, const char *, int, ns2__APSaleService *const*, const char *);
SOAP_FMAC3 ns2__APSaleService ** SOAP_FMAC4 soap_in_PointerTons2__APSaleService(struct soap*, const char*, ns2__APSaleService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APSaleService(struct soap*, ns2__APSaleService *const*, const char*, const char*);
SOAP_FMAC3 ns2__APSaleService ** SOAP_FMAC4 soap_get_PointerTons2__APSaleService(struct soap*, ns2__APSaleService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APRefundService_DEFINED
#define SOAP_TYPE_PointerTons2__APRefundService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APRefundService(struct soap*, ns2__APRefundService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APRefundService(struct soap*, const char *, int, ns2__APRefundService *const*, const char *);
SOAP_FMAC3 ns2__APRefundService ** SOAP_FMAC4 soap_in_PointerTons2__APRefundService(struct soap*, const char*, ns2__APRefundService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APRefundService(struct soap*, ns2__APRefundService *const*, const char*, const char*);
SOAP_FMAC3 ns2__APRefundService ** SOAP_FMAC4 soap_get_PointerTons2__APRefundService(struct soap*, ns2__APRefundService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APOptionsService_DEFINED
#define SOAP_TYPE_PointerTons2__APOptionsService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APOptionsService(struct soap*, ns2__APOptionsService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APOptionsService(struct soap*, const char *, int, ns2__APOptionsService *const*, const char *);
SOAP_FMAC3 ns2__APOptionsService ** SOAP_FMAC4 soap_in_PointerTons2__APOptionsService(struct soap*, const char*, ns2__APOptionsService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APOptionsService(struct soap*, ns2__APOptionsService *const*, const char*, const char*);
SOAP_FMAC3 ns2__APOptionsService ** SOAP_FMAC4 soap_get_PointerTons2__APOptionsService(struct soap*, ns2__APOptionsService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APCaptureService_DEFINED
#define SOAP_TYPE_PointerTons2__APCaptureService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APCaptureService(struct soap*, ns2__APCaptureService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APCaptureService(struct soap*, const char *, int, ns2__APCaptureService *const*, const char *);
SOAP_FMAC3 ns2__APCaptureService ** SOAP_FMAC4 soap_in_PointerTons2__APCaptureService(struct soap*, const char*, ns2__APCaptureService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APCaptureService(struct soap*, ns2__APCaptureService *const*, const char*, const char*);
SOAP_FMAC3 ns2__APCaptureService ** SOAP_FMAC4 soap_get_PointerTons2__APCaptureService(struct soap*, ns2__APCaptureService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APAuthReversalService_DEFINED
#define SOAP_TYPE_PointerTons2__APAuthReversalService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APAuthReversalService(struct soap*, ns2__APAuthReversalService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APAuthReversalService(struct soap*, const char *, int, ns2__APAuthReversalService *const*, const char *);
SOAP_FMAC3 ns2__APAuthReversalService ** SOAP_FMAC4 soap_in_PointerTons2__APAuthReversalService(struct soap*, const char*, ns2__APAuthReversalService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APAuthReversalService(struct soap*, ns2__APAuthReversalService *const*, const char*, const char*);
SOAP_FMAC3 ns2__APAuthReversalService ** SOAP_FMAC4 soap_get_PointerTons2__APAuthReversalService(struct soap*, ns2__APAuthReversalService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APAuthService_DEFINED
#define SOAP_TYPE_PointerTons2__APAuthService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APAuthService(struct soap*, ns2__APAuthService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APAuthService(struct soap*, const char *, int, ns2__APAuthService *const*, const char *);
SOAP_FMAC3 ns2__APAuthService ** SOAP_FMAC4 soap_in_PointerTons2__APAuthService(struct soap*, const char*, ns2__APAuthService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APAuthService(struct soap*, ns2__APAuthService *const*, const char*, const char*);
SOAP_FMAC3 ns2__APAuthService ** SOAP_FMAC4 soap_get_PointerTons2__APAuthService(struct soap*, ns2__APAuthService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__AP_DEFINED
#define SOAP_TYPE_PointerTons2__AP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AP(struct soap*, ns2__AP *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AP(struct soap*, const char *, int, ns2__AP *const*, const char *);
SOAP_FMAC3 ns2__AP ** SOAP_FMAC4 soap_in_PointerTons2__AP(struct soap*, const char*, ns2__AP **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AP(struct soap*, ns2__AP *const*, const char*, const char*);
SOAP_FMAC3 ns2__AP ** SOAP_FMAC4 soap_get_PointerTons2__AP(struct soap*, ns2__AP **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PinDebitReversalService_DEFINED
#define SOAP_TYPE_PointerTons2__PinDebitReversalService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PinDebitReversalService(struct soap*, ns2__PinDebitReversalService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PinDebitReversalService(struct soap*, const char *, int, ns2__PinDebitReversalService *const*, const char *);
SOAP_FMAC3 ns2__PinDebitReversalService ** SOAP_FMAC4 soap_in_PointerTons2__PinDebitReversalService(struct soap*, const char*, ns2__PinDebitReversalService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PinDebitReversalService(struct soap*, ns2__PinDebitReversalService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PinDebitReversalService ** SOAP_FMAC4 soap_get_PointerTons2__PinDebitReversalService(struct soap*, ns2__PinDebitReversalService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PinDebitCreditService_DEFINED
#define SOAP_TYPE_PointerTons2__PinDebitCreditService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PinDebitCreditService(struct soap*, ns2__PinDebitCreditService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PinDebitCreditService(struct soap*, const char *, int, ns2__PinDebitCreditService *const*, const char *);
SOAP_FMAC3 ns2__PinDebitCreditService ** SOAP_FMAC4 soap_in_PointerTons2__PinDebitCreditService(struct soap*, const char*, ns2__PinDebitCreditService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PinDebitCreditService(struct soap*, ns2__PinDebitCreditService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PinDebitCreditService ** SOAP_FMAC4 soap_get_PointerTons2__PinDebitCreditService(struct soap*, ns2__PinDebitCreditService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PinDebitPurchaseService_DEFINED
#define SOAP_TYPE_PointerTons2__PinDebitPurchaseService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PinDebitPurchaseService(struct soap*, ns2__PinDebitPurchaseService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PinDebitPurchaseService(struct soap*, const char *, int, ns2__PinDebitPurchaseService *const*, const char *);
SOAP_FMAC3 ns2__PinDebitPurchaseService ** SOAP_FMAC4 soap_in_PointerTons2__PinDebitPurchaseService(struct soap*, const char*, ns2__PinDebitPurchaseService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PinDebitPurchaseService(struct soap*, ns2__PinDebitPurchaseService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PinDebitPurchaseService ** SOAP_FMAC4 soap_get_PointerTons2__PinDebitPurchaseService(struct soap*, ns2__PinDebitPurchaseService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APCheckStatusService_DEFINED
#define SOAP_TYPE_PointerTons2__APCheckStatusService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APCheckStatusService(struct soap*, ns2__APCheckStatusService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APCheckStatusService(struct soap*, const char *, int, ns2__APCheckStatusService *const*, const char *);
SOAP_FMAC3 ns2__APCheckStatusService ** SOAP_FMAC4 soap_in_PointerTons2__APCheckStatusService(struct soap*, const char*, ns2__APCheckStatusService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APCheckStatusService(struct soap*, ns2__APCheckStatusService *const*, const char*, const char*);
SOAP_FMAC3 ns2__APCheckStatusService ** SOAP_FMAC4 soap_get_PointerTons2__APCheckStatusService(struct soap*, ns2__APCheckStatusService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APInitiateService_DEFINED
#define SOAP_TYPE_PointerTons2__APInitiateService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APInitiateService(struct soap*, ns2__APInitiateService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APInitiateService(struct soap*, const char *, int, ns2__APInitiateService *const*, const char *);
SOAP_FMAC3 ns2__APInitiateService ** SOAP_FMAC4 soap_in_PointerTons2__APInitiateService(struct soap*, const char*, ns2__APInitiateService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APInitiateService(struct soap*, ns2__APInitiateService *const*, const char*, const char*);
SOAP_FMAC3 ns2__APInitiateService ** SOAP_FMAC4 soap_get_PointerTons2__APInitiateService(struct soap*, ns2__APInitiateService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__BoletoPaymentService_DEFINED
#define SOAP_TYPE_PointerTons2__BoletoPaymentService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BoletoPaymentService(struct soap*, ns2__BoletoPaymentService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BoletoPaymentService(struct soap*, const char *, int, ns2__BoletoPaymentService *const*, const char *);
SOAP_FMAC3 ns2__BoletoPaymentService ** SOAP_FMAC4 soap_in_PointerTons2__BoletoPaymentService(struct soap*, const char*, ns2__BoletoPaymentService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BoletoPaymentService(struct soap*, ns2__BoletoPaymentService *const*, const char*, const char*);
SOAP_FMAC3 ns2__BoletoPaymentService ** SOAP_FMAC4 soap_get_PointerTons2__BoletoPaymentService(struct soap*, ns2__BoletoPaymentService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ChinaRefundService_DEFINED
#define SOAP_TYPE_PointerTons2__ChinaRefundService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ChinaRefundService(struct soap*, ns2__ChinaRefundService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ChinaRefundService(struct soap*, const char *, int, ns2__ChinaRefundService *const*, const char *);
SOAP_FMAC3 ns2__ChinaRefundService ** SOAP_FMAC4 soap_in_PointerTons2__ChinaRefundService(struct soap*, const char*, ns2__ChinaRefundService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ChinaRefundService(struct soap*, ns2__ChinaRefundService *const*, const char*, const char*);
SOAP_FMAC3 ns2__ChinaRefundService ** SOAP_FMAC4 soap_get_PointerTons2__ChinaRefundService(struct soap*, ns2__ChinaRefundService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ChinaPaymentService_DEFINED
#define SOAP_TYPE_PointerTons2__ChinaPaymentService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ChinaPaymentService(struct soap*, ns2__ChinaPaymentService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ChinaPaymentService(struct soap*, const char *, int, ns2__ChinaPaymentService *const*, const char *);
SOAP_FMAC3 ns2__ChinaPaymentService ** SOAP_FMAC4 soap_in_PointerTons2__ChinaPaymentService(struct soap*, const char*, ns2__ChinaPaymentService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ChinaPaymentService(struct soap*, ns2__ChinaPaymentService *const*, const char*, const char*);
SOAP_FMAC3 ns2__ChinaPaymentService ** SOAP_FMAC4 soap_get_PointerTons2__ChinaPaymentService(struct soap*, ns2__ChinaPaymentService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalDoRefTransactionService_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalDoRefTransactionService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalDoRefTransactionService(struct soap*, ns2__PayPalDoRefTransactionService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalDoRefTransactionService(struct soap*, const char *, int, ns2__PayPalDoRefTransactionService *const*, const char *);
SOAP_FMAC3 ns2__PayPalDoRefTransactionService ** SOAP_FMAC4 soap_in_PointerTons2__PayPalDoRefTransactionService(struct soap*, const char*, ns2__PayPalDoRefTransactionService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalDoRefTransactionService(struct soap*, ns2__PayPalDoRefTransactionService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalDoRefTransactionService ** SOAP_FMAC4 soap_get_PointerTons2__PayPalDoRefTransactionService(struct soap*, ns2__PayPalDoRefTransactionService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalCreateAgreementService_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalCreateAgreementService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalCreateAgreementService(struct soap*, ns2__PayPalCreateAgreementService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalCreateAgreementService(struct soap*, const char *, int, ns2__PayPalCreateAgreementService *const*, const char *);
SOAP_FMAC3 ns2__PayPalCreateAgreementService ** SOAP_FMAC4 soap_in_PointerTons2__PayPalCreateAgreementService(struct soap*, const char*, ns2__PayPalCreateAgreementService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalCreateAgreementService(struct soap*, ns2__PayPalCreateAgreementService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalCreateAgreementService ** SOAP_FMAC4 soap_get_PointerTons2__PayPalCreateAgreementService(struct soap*, ns2__PayPalCreateAgreementService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalUpdateAgreementService_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalUpdateAgreementService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalUpdateAgreementService(struct soap*, ns2__PayPalUpdateAgreementService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalUpdateAgreementService(struct soap*, const char *, int, ns2__PayPalUpdateAgreementService *const*, const char *);
SOAP_FMAC3 ns2__PayPalUpdateAgreementService ** SOAP_FMAC4 soap_in_PointerTons2__PayPalUpdateAgreementService(struct soap*, const char*, ns2__PayPalUpdateAgreementService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalUpdateAgreementService(struct soap*, ns2__PayPalUpdateAgreementService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalUpdateAgreementService ** SOAP_FMAC4 soap_get_PointerTons2__PayPalUpdateAgreementService(struct soap*, ns2__PayPalUpdateAgreementService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalAuthorizationService_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalAuthorizationService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalAuthorizationService(struct soap*, ns2__PayPalAuthorizationService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalAuthorizationService(struct soap*, const char *, int, ns2__PayPalAuthorizationService *const*, const char *);
SOAP_FMAC3 ns2__PayPalAuthorizationService ** SOAP_FMAC4 soap_in_PointerTons2__PayPalAuthorizationService(struct soap*, const char*, ns2__PayPalAuthorizationService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalAuthorizationService(struct soap*, ns2__PayPalAuthorizationService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalAuthorizationService ** SOAP_FMAC4 soap_get_PointerTons2__PayPalAuthorizationService(struct soap*, ns2__PayPalAuthorizationService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalEcOrderSetupService_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalEcOrderSetupService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalEcOrderSetupService(struct soap*, ns2__PayPalEcOrderSetupService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalEcOrderSetupService(struct soap*, const char *, int, ns2__PayPalEcOrderSetupService *const*, const char *);
SOAP_FMAC3 ns2__PayPalEcOrderSetupService ** SOAP_FMAC4 soap_in_PointerTons2__PayPalEcOrderSetupService(struct soap*, const char*, ns2__PayPalEcOrderSetupService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalEcOrderSetupService(struct soap*, ns2__PayPalEcOrderSetupService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalEcOrderSetupService ** SOAP_FMAC4 soap_get_PointerTons2__PayPalEcOrderSetupService(struct soap*, ns2__PayPalEcOrderSetupService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalEcSetService_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalEcSetService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalEcSetService(struct soap*, ns2__PayPalEcSetService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalEcSetService(struct soap*, const char *, int, ns2__PayPalEcSetService *const*, const char *);
SOAP_FMAC3 ns2__PayPalEcSetService ** SOAP_FMAC4 soap_in_PointerTons2__PayPalEcSetService(struct soap*, const char*, ns2__PayPalEcSetService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalEcSetService(struct soap*, ns2__PayPalEcSetService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalEcSetService ** SOAP_FMAC4 soap_get_PointerTons2__PayPalEcSetService(struct soap*, ns2__PayPalEcSetService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalEcGetDetailsService_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalEcGetDetailsService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalEcGetDetailsService(struct soap*, ns2__PayPalEcGetDetailsService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalEcGetDetailsService(struct soap*, const char *, int, ns2__PayPalEcGetDetailsService *const*, const char *);
SOAP_FMAC3 ns2__PayPalEcGetDetailsService ** SOAP_FMAC4 soap_in_PointerTons2__PayPalEcGetDetailsService(struct soap*, const char*, ns2__PayPalEcGetDetailsService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalEcGetDetailsService(struct soap*, ns2__PayPalEcGetDetailsService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalEcGetDetailsService ** SOAP_FMAC4 soap_get_PointerTons2__PayPalEcGetDetailsService(struct soap*, ns2__PayPalEcGetDetailsService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalEcDoPaymentService_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalEcDoPaymentService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalEcDoPaymentService(struct soap*, ns2__PayPalEcDoPaymentService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalEcDoPaymentService(struct soap*, const char *, int, ns2__PayPalEcDoPaymentService *const*, const char *);
SOAP_FMAC3 ns2__PayPalEcDoPaymentService ** SOAP_FMAC4 soap_in_PointerTons2__PayPalEcDoPaymentService(struct soap*, const char*, ns2__PayPalEcDoPaymentService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalEcDoPaymentService(struct soap*, ns2__PayPalEcDoPaymentService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalEcDoPaymentService ** SOAP_FMAC4 soap_get_PointerTons2__PayPalEcDoPaymentService(struct soap*, ns2__PayPalEcDoPaymentService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalDoCaptureService_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalDoCaptureService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalDoCaptureService(struct soap*, ns2__PayPalDoCaptureService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalDoCaptureService(struct soap*, const char *, int, ns2__PayPalDoCaptureService *const*, const char *);
SOAP_FMAC3 ns2__PayPalDoCaptureService ** SOAP_FMAC4 soap_in_PointerTons2__PayPalDoCaptureService(struct soap*, const char*, ns2__PayPalDoCaptureService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalDoCaptureService(struct soap*, ns2__PayPalDoCaptureService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalDoCaptureService ** SOAP_FMAC4 soap_get_PointerTons2__PayPalDoCaptureService(struct soap*, ns2__PayPalDoCaptureService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalAuthReversalService_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalAuthReversalService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalAuthReversalService(struct soap*, ns2__PayPalAuthReversalService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalAuthReversalService(struct soap*, const char *, int, ns2__PayPalAuthReversalService *const*, const char *);
SOAP_FMAC3 ns2__PayPalAuthReversalService ** SOAP_FMAC4 soap_in_PointerTons2__PayPalAuthReversalService(struct soap*, const char*, ns2__PayPalAuthReversalService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalAuthReversalService(struct soap*, ns2__PayPalAuthReversalService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalAuthReversalService ** SOAP_FMAC4 soap_get_PointerTons2__PayPalAuthReversalService(struct soap*, ns2__PayPalAuthReversalService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalRefundService_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalRefundService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalRefundService(struct soap*, ns2__PayPalRefundService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalRefundService(struct soap*, const char *, int, ns2__PayPalRefundService *const*, const char *);
SOAP_FMAC3 ns2__PayPalRefundService ** SOAP_FMAC4 soap_in_PointerTons2__PayPalRefundService(struct soap*, const char*, ns2__PayPalRefundService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalRefundService(struct soap*, ns2__PayPalRefundService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalRefundService ** SOAP_FMAC4 soap_get_PointerTons2__PayPalRefundService(struct soap*, ns2__PayPalRefundService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__RequestReserved_DEFINED
#define SOAP_TYPE_PointerTons2__RequestReserved_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RequestReserved(struct soap*, ns2__RequestReserved *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RequestReserved(struct soap*, const char *, int, ns2__RequestReserved *const*, const char *);
SOAP_FMAC3 ns2__RequestReserved ** SOAP_FMAC4 soap_in_PointerTons2__RequestReserved(struct soap*, const char*, ns2__RequestReserved **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RequestReserved(struct soap*, ns2__RequestReserved *const*, const char*, const char*);
SOAP_FMAC3 ns2__RequestReserved ** SOAP_FMAC4 soap_get_PointerTons2__RequestReserved(struct soap*, ns2__RequestReserved **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CaseManagementActionService_DEFINED
#define SOAP_TYPE_PointerTons2__CaseManagementActionService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CaseManagementActionService(struct soap*, ns2__CaseManagementActionService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CaseManagementActionService(struct soap*, const char *, int, ns2__CaseManagementActionService *const*, const char *);
SOAP_FMAC3 ns2__CaseManagementActionService ** SOAP_FMAC4 soap_in_PointerTons2__CaseManagementActionService(struct soap*, const char*, ns2__CaseManagementActionService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CaseManagementActionService(struct soap*, ns2__CaseManagementActionService *const*, const char*, const char*);
SOAP_FMAC3 ns2__CaseManagementActionService ** SOAP_FMAC4 soap_get_PointerTons2__CaseManagementActionService(struct soap*, ns2__CaseManagementActionService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__FraudUpdateService_DEFINED
#define SOAP_TYPE_PointerTons2__FraudUpdateService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FraudUpdateService(struct soap*, ns2__FraudUpdateService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FraudUpdateService(struct soap*, const char *, int, ns2__FraudUpdateService *const*, const char *);
SOAP_FMAC3 ns2__FraudUpdateService ** SOAP_FMAC4 soap_in_PointerTons2__FraudUpdateService(struct soap*, const char*, ns2__FraudUpdateService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FraudUpdateService(struct soap*, ns2__FraudUpdateService *const*, const char*, const char*);
SOAP_FMAC3 ns2__FraudUpdateService ** SOAP_FMAC4 soap_get_PointerTons2__FraudUpdateService(struct soap*, ns2__FraudUpdateService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__RiskUpdateService_DEFINED
#define SOAP_TYPE_PointerTons2__RiskUpdateService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RiskUpdateService(struct soap*, ns2__RiskUpdateService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RiskUpdateService(struct soap*, const char *, int, ns2__RiskUpdateService *const*, const char *);
SOAP_FMAC3 ns2__RiskUpdateService ** SOAP_FMAC4 soap_in_PointerTons2__RiskUpdateService(struct soap*, const char*, ns2__RiskUpdateService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RiskUpdateService(struct soap*, ns2__RiskUpdateService *const*, const char*, const char*);
SOAP_FMAC3 ns2__RiskUpdateService ** SOAP_FMAC4 soap_get_PointerTons2__RiskUpdateService(struct soap*, ns2__RiskUpdateService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalPreapprovedUpdateService_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalPreapprovedUpdateService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalPreapprovedUpdateService(struct soap*, ns2__PayPalPreapprovedUpdateService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalPreapprovedUpdateService(struct soap*, const char *, int, ns2__PayPalPreapprovedUpdateService *const*, const char *);
SOAP_FMAC3 ns2__PayPalPreapprovedUpdateService ** SOAP_FMAC4 soap_in_PointerTons2__PayPalPreapprovedUpdateService(struct soap*, const char*, ns2__PayPalPreapprovedUpdateService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalPreapprovedUpdateService(struct soap*, ns2__PayPalPreapprovedUpdateService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalPreapprovedUpdateService ** SOAP_FMAC4 soap_get_PointerTons2__PayPalPreapprovedUpdateService(struct soap*, ns2__PayPalPreapprovedUpdateService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalPreapprovedPaymentService_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalPreapprovedPaymentService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalPreapprovedPaymentService(struct soap*, ns2__PayPalPreapprovedPaymentService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalPreapprovedPaymentService(struct soap*, const char *, int, ns2__PayPalPreapprovedPaymentService *const*, const char *);
SOAP_FMAC3 ns2__PayPalPreapprovedPaymentService ** SOAP_FMAC4 soap_in_PointerTons2__PayPalPreapprovedPaymentService(struct soap*, const char*, ns2__PayPalPreapprovedPaymentService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalPreapprovedPaymentService(struct soap*, ns2__PayPalPreapprovedPaymentService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalPreapprovedPaymentService ** SOAP_FMAC4 soap_get_PointerTons2__PayPalPreapprovedPaymentService(struct soap*, ns2__PayPalPreapprovedPaymentService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalButtonCreateService_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalButtonCreateService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalButtonCreateService(struct soap*, ns2__PayPalButtonCreateService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalButtonCreateService(struct soap*, const char *, int, ns2__PayPalButtonCreateService *const*, const char *);
SOAP_FMAC3 ns2__PayPalButtonCreateService ** SOAP_FMAC4 soap_in_PointerTons2__PayPalButtonCreateService(struct soap*, const char*, ns2__PayPalButtonCreateService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalButtonCreateService(struct soap*, ns2__PayPalButtonCreateService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalButtonCreateService ** SOAP_FMAC4 soap_get_PointerTons2__PayPalButtonCreateService(struct soap*, ns2__PayPalButtonCreateService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__LodgingData_DEFINED
#define SOAP_TYPE_PointerTons2__LodgingData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__LodgingData(struct soap*, ns2__LodgingData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__LodgingData(struct soap*, const char *, int, ns2__LodgingData *const*, const char *);
SOAP_FMAC3 ns2__LodgingData ** SOAP_FMAC4 soap_in_PointerTons2__LodgingData(struct soap*, const char*, ns2__LodgingData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__LodgingData(struct soap*, ns2__LodgingData *const*, const char*, const char*);
SOAP_FMAC3 ns2__LodgingData ** SOAP_FMAC4 soap_get_PointerTons2__LodgingData(struct soap*, ns2__LodgingData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__AncillaryData_DEFINED
#define SOAP_TYPE_PointerTons2__AncillaryData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AncillaryData(struct soap*, ns2__AncillaryData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AncillaryData(struct soap*, const char *, int, ns2__AncillaryData *const*, const char *);
SOAP_FMAC3 ns2__AncillaryData ** SOAP_FMAC4 soap_in_PointerTons2__AncillaryData(struct soap*, const char*, ns2__AncillaryData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AncillaryData(struct soap*, ns2__AncillaryData *const*, const char*, const char*);
SOAP_FMAC3 ns2__AncillaryData ** SOAP_FMAC4 soap_get_PointerTons2__AncillaryData(struct soap*, ns2__AncillaryData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__AirlineData_DEFINED
#define SOAP_TYPE_PointerTons2__AirlineData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AirlineData(struct soap*, ns2__AirlineData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AirlineData(struct soap*, const char *, int, ns2__AirlineData *const*, const char *);
SOAP_FMAC3 ns2__AirlineData ** SOAP_FMAC4 soap_in_PointerTons2__AirlineData(struct soap*, const char*, ns2__AirlineData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AirlineData(struct soap*, ns2__AirlineData *const*, const char*, const char*);
SOAP_FMAC3 ns2__AirlineData ** SOAP_FMAC4 soap_get_PointerTons2__AirlineData(struct soap*, ns2__AirlineData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Batch_DEFINED
#define SOAP_TYPE_PointerTons2__Batch_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Batch(struct soap*, ns2__Batch *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Batch(struct soap*, const char *, int, ns2__Batch *const*, const char *);
SOAP_FMAC3 ns2__Batch ** SOAP_FMAC4 soap_in_PointerTons2__Batch(struct soap*, const char*, ns2__Batch **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Batch(struct soap*, ns2__Batch *const*, const char*, const char*);
SOAP_FMAC3 ns2__Batch ** SOAP_FMAC4 soap_get_PointerTons2__Batch(struct soap*, ns2__Batch **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PinlessDebitReversalService_DEFINED
#define SOAP_TYPE_PointerTons2__PinlessDebitReversalService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PinlessDebitReversalService(struct soap*, ns2__PinlessDebitReversalService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PinlessDebitReversalService(struct soap*, const char *, int, ns2__PinlessDebitReversalService *const*, const char *);
SOAP_FMAC3 ns2__PinlessDebitReversalService ** SOAP_FMAC4 soap_in_PointerTons2__PinlessDebitReversalService(struct soap*, const char*, ns2__PinlessDebitReversalService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PinlessDebitReversalService(struct soap*, ns2__PinlessDebitReversalService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PinlessDebitReversalService ** SOAP_FMAC4 soap_get_PointerTons2__PinlessDebitReversalService(struct soap*, ns2__PinlessDebitReversalService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PinlessDebitValidateService_DEFINED
#define SOAP_TYPE_PointerTons2__PinlessDebitValidateService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PinlessDebitValidateService(struct soap*, ns2__PinlessDebitValidateService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PinlessDebitValidateService(struct soap*, const char *, int, ns2__PinlessDebitValidateService *const*, const char *);
SOAP_FMAC3 ns2__PinlessDebitValidateService ** SOAP_FMAC4 soap_in_PointerTons2__PinlessDebitValidateService(struct soap*, const char*, ns2__PinlessDebitValidateService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PinlessDebitValidateService(struct soap*, ns2__PinlessDebitValidateService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PinlessDebitValidateService ** SOAP_FMAC4 soap_get_PointerTons2__PinlessDebitValidateService(struct soap*, ns2__PinlessDebitValidateService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PinlessDebitService_DEFINED
#define SOAP_TYPE_PointerTons2__PinlessDebitService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PinlessDebitService(struct soap*, ns2__PinlessDebitService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PinlessDebitService(struct soap*, const char *, int, ns2__PinlessDebitService *const*, const char *);
SOAP_FMAC3 ns2__PinlessDebitService ** SOAP_FMAC4 soap_in_PointerTons2__PinlessDebitService(struct soap*, const char*, ns2__PinlessDebitService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PinlessDebitService(struct soap*, ns2__PinlessDebitService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PinlessDebitService ** SOAP_FMAC4 soap_get_PointerTons2__PinlessDebitService(struct soap*, ns2__PinlessDebitService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__BusinessRules_DEFINED
#define SOAP_TYPE_PointerTons2__BusinessRules_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BusinessRules(struct soap*, ns2__BusinessRules *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BusinessRules(struct soap*, const char *, int, ns2__BusinessRules *const*, const char *);
SOAP_FMAC3 ns2__BusinessRules ** SOAP_FMAC4 soap_in_PointerTons2__BusinessRules(struct soap*, const char*, ns2__BusinessRules **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BusinessRules(struct soap*, ns2__BusinessRules *const*, const char*, const char*);
SOAP_FMAC3 ns2__BusinessRules ** SOAP_FMAC4 soap_get_PointerTons2__BusinessRules(struct soap*, ns2__BusinessRules **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__VoidService_DEFINED
#define SOAP_TYPE_PointerTons2__VoidService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VoidService(struct soap*, ns2__VoidService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VoidService(struct soap*, const char *, int, ns2__VoidService *const*, const char *);
SOAP_FMAC3 ns2__VoidService ** SOAP_FMAC4 soap_in_PointerTons2__VoidService(struct soap*, const char*, ns2__VoidService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VoidService(struct soap*, ns2__VoidService *const*, const char*, const char*);
SOAP_FMAC3 ns2__VoidService ** SOAP_FMAC4 soap_get_PointerTons2__VoidService(struct soap*, ns2__VoidService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalCreditService_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalCreditService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalCreditService(struct soap*, ns2__PayPalCreditService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalCreditService(struct soap*, const char *, int, ns2__PayPalCreditService *const*, const char *);
SOAP_FMAC3 ns2__PayPalCreditService ** SOAP_FMAC4 soap_in_PointerTons2__PayPalCreditService(struct soap*, const char*, ns2__PayPalCreditService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalCreditService(struct soap*, ns2__PayPalCreditService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalCreditService ** SOAP_FMAC4 soap_get_PointerTons2__PayPalCreditService(struct soap*, ns2__PayPalCreditService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPalPaymentService_DEFINED
#define SOAP_TYPE_PointerTons2__PayPalPaymentService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPalPaymentService(struct soap*, ns2__PayPalPaymentService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPalPaymentService(struct soap*, const char *, int, ns2__PayPalPaymentService *const*, const char *);
SOAP_FMAC3 ns2__PayPalPaymentService ** SOAP_FMAC4 soap_in_PointerTons2__PayPalPaymentService(struct soap*, const char*, ns2__PayPalPaymentService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPalPaymentService(struct soap*, ns2__PayPalPaymentService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPalPaymentService ** SOAP_FMAC4 soap_get_PointerTons2__PayPalPaymentService(struct soap*, ns2__PayPalPaymentService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PaySubscriptionDeleteService_DEFINED
#define SOAP_TYPE_PointerTons2__PaySubscriptionDeleteService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PaySubscriptionDeleteService(struct soap*, ns2__PaySubscriptionDeleteService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PaySubscriptionDeleteService(struct soap*, const char *, int, ns2__PaySubscriptionDeleteService *const*, const char *);
SOAP_FMAC3 ns2__PaySubscriptionDeleteService ** SOAP_FMAC4 soap_in_PointerTons2__PaySubscriptionDeleteService(struct soap*, const char*, ns2__PaySubscriptionDeleteService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PaySubscriptionDeleteService(struct soap*, ns2__PaySubscriptionDeleteService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PaySubscriptionDeleteService ** SOAP_FMAC4 soap_get_PointerTons2__PaySubscriptionDeleteService(struct soap*, ns2__PaySubscriptionDeleteService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PaySubscriptionRetrieveService_DEFINED
#define SOAP_TYPE_PointerTons2__PaySubscriptionRetrieveService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PaySubscriptionRetrieveService(struct soap*, ns2__PaySubscriptionRetrieveService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PaySubscriptionRetrieveService(struct soap*, const char *, int, ns2__PaySubscriptionRetrieveService *const*, const char *);
SOAP_FMAC3 ns2__PaySubscriptionRetrieveService ** SOAP_FMAC4 soap_in_PointerTons2__PaySubscriptionRetrieveService(struct soap*, const char*, ns2__PaySubscriptionRetrieveService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PaySubscriptionRetrieveService(struct soap*, ns2__PaySubscriptionRetrieveService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PaySubscriptionRetrieveService ** SOAP_FMAC4 soap_get_PointerTons2__PaySubscriptionRetrieveService(struct soap*, ns2__PaySubscriptionRetrieveService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PaySubscriptionEventUpdateService_DEFINED
#define SOAP_TYPE_PointerTons2__PaySubscriptionEventUpdateService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PaySubscriptionEventUpdateService(struct soap*, ns2__PaySubscriptionEventUpdateService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PaySubscriptionEventUpdateService(struct soap*, const char *, int, ns2__PaySubscriptionEventUpdateService *const*, const char *);
SOAP_FMAC3 ns2__PaySubscriptionEventUpdateService ** SOAP_FMAC4 soap_in_PointerTons2__PaySubscriptionEventUpdateService(struct soap*, const char*, ns2__PaySubscriptionEventUpdateService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PaySubscriptionEventUpdateService(struct soap*, ns2__PaySubscriptionEventUpdateService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PaySubscriptionEventUpdateService ** SOAP_FMAC4 soap_get_PointerTons2__PaySubscriptionEventUpdateService(struct soap*, ns2__PaySubscriptionEventUpdateService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PaySubscriptionUpdateService_DEFINED
#define SOAP_TYPE_PointerTons2__PaySubscriptionUpdateService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PaySubscriptionUpdateService(struct soap*, ns2__PaySubscriptionUpdateService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PaySubscriptionUpdateService(struct soap*, const char *, int, ns2__PaySubscriptionUpdateService *const*, const char *);
SOAP_FMAC3 ns2__PaySubscriptionUpdateService ** SOAP_FMAC4 soap_in_PointerTons2__PaySubscriptionUpdateService(struct soap*, const char*, ns2__PaySubscriptionUpdateService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PaySubscriptionUpdateService(struct soap*, ns2__PaySubscriptionUpdateService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PaySubscriptionUpdateService ** SOAP_FMAC4 soap_get_PointerTons2__PaySubscriptionUpdateService(struct soap*, ns2__PaySubscriptionUpdateService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PaySubscriptionCreateService_DEFINED
#define SOAP_TYPE_PointerTons2__PaySubscriptionCreateService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PaySubscriptionCreateService(struct soap*, ns2__PaySubscriptionCreateService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PaySubscriptionCreateService(struct soap*, const char *, int, ns2__PaySubscriptionCreateService *const*, const char *);
SOAP_FMAC3 ns2__PaySubscriptionCreateService ** SOAP_FMAC4 soap_in_PointerTons2__PaySubscriptionCreateService(struct soap*, const char*, ns2__PaySubscriptionCreateService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PaySubscriptionCreateService(struct soap*, ns2__PaySubscriptionCreateService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PaySubscriptionCreateService ** SOAP_FMAC4 soap_get_PointerTons2__PaySubscriptionCreateService(struct soap*, ns2__PaySubscriptionCreateService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DeviceFingerprintData_DEFINED
#define SOAP_TYPE_PointerTons2__DeviceFingerprintData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DeviceFingerprintData(struct soap*, ns2__DeviceFingerprintData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DeviceFingerprintData(struct soap*, const char *, int, ns2__DeviceFingerprintData *const*, const char *);
SOAP_FMAC3 ns2__DeviceFingerprintData ** SOAP_FMAC4 soap_in_PointerTons2__DeviceFingerprintData(struct soap*, const char*, ns2__DeviceFingerprintData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DeviceFingerprintData(struct soap*, ns2__DeviceFingerprintData *const*, const char*, const char*);
SOAP_FMAC3 ns2__DeviceFingerprintData ** SOAP_FMAC4 soap_get_PointerTons2__DeviceFingerprintData(struct soap*, ns2__DeviceFingerprintData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DirectDebitValidateService_DEFINED
#define SOAP_TYPE_PointerTons2__DirectDebitValidateService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DirectDebitValidateService(struct soap*, ns2__DirectDebitValidateService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DirectDebitValidateService(struct soap*, const char *, int, ns2__DirectDebitValidateService *const*, const char *);
SOAP_FMAC3 ns2__DirectDebitValidateService ** SOAP_FMAC4 soap_in_PointerTons2__DirectDebitValidateService(struct soap*, const char*, ns2__DirectDebitValidateService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DirectDebitValidateService(struct soap*, ns2__DirectDebitValidateService *const*, const char*, const char*);
SOAP_FMAC3 ns2__DirectDebitValidateService ** SOAP_FMAC4 soap_get_PointerTons2__DirectDebitValidateService(struct soap*, ns2__DirectDebitValidateService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DirectDebitRefundService_DEFINED
#define SOAP_TYPE_PointerTons2__DirectDebitRefundService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DirectDebitRefundService(struct soap*, ns2__DirectDebitRefundService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DirectDebitRefundService(struct soap*, const char *, int, ns2__DirectDebitRefundService *const*, const char *);
SOAP_FMAC3 ns2__DirectDebitRefundService ** SOAP_FMAC4 soap_in_PointerTons2__DirectDebitRefundService(struct soap*, const char*, ns2__DirectDebitRefundService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DirectDebitRefundService(struct soap*, ns2__DirectDebitRefundService *const*, const char*, const char*);
SOAP_FMAC3 ns2__DirectDebitRefundService ** SOAP_FMAC4 soap_get_PointerTons2__DirectDebitRefundService(struct soap*, ns2__DirectDebitRefundService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DirectDebitService_DEFINED
#define SOAP_TYPE_PointerTons2__DirectDebitService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DirectDebitService(struct soap*, ns2__DirectDebitService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DirectDebitService(struct soap*, const char *, int, ns2__DirectDebitService *const*, const char *);
SOAP_FMAC3 ns2__DirectDebitService ** SOAP_FMAC4 soap_in_PointerTons2__DirectDebitService(struct soap*, const char*, ns2__DirectDebitService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DirectDebitService(struct soap*, ns2__DirectDebitService *const*, const char*, const char*);
SOAP_FMAC3 ns2__DirectDebitService ** SOAP_FMAC4 soap_get_PointerTons2__DirectDebitService(struct soap*, ns2__DirectDebitService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DirectDebitMandateService_DEFINED
#define SOAP_TYPE_PointerTons2__DirectDebitMandateService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DirectDebitMandateService(struct soap*, ns2__DirectDebitMandateService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DirectDebitMandateService(struct soap*, const char *, int, ns2__DirectDebitMandateService *const*, const char *);
SOAP_FMAC3 ns2__DirectDebitMandateService ** SOAP_FMAC4 soap_in_PointerTons2__DirectDebitMandateService(struct soap*, const char*, ns2__DirectDebitMandateService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DirectDebitMandateService(struct soap*, ns2__DirectDebitMandateService *const*, const char*, const char*);
SOAP_FMAC3 ns2__DirectDebitMandateService ** SOAP_FMAC4 soap_get_PointerTons2__DirectDebitMandateService(struct soap*, ns2__DirectDebitMandateService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__BankTransferRealTimeService_DEFINED
#define SOAP_TYPE_PointerTons2__BankTransferRealTimeService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BankTransferRealTimeService(struct soap*, ns2__BankTransferRealTimeService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BankTransferRealTimeService(struct soap*, const char *, int, ns2__BankTransferRealTimeService *const*, const char *);
SOAP_FMAC3 ns2__BankTransferRealTimeService ** SOAP_FMAC4 soap_in_PointerTons2__BankTransferRealTimeService(struct soap*, const char*, ns2__BankTransferRealTimeService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BankTransferRealTimeService(struct soap*, ns2__BankTransferRealTimeService *const*, const char*, const char*);
SOAP_FMAC3 ns2__BankTransferRealTimeService ** SOAP_FMAC4 soap_get_PointerTons2__BankTransferRealTimeService(struct soap*, ns2__BankTransferRealTimeService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__BankTransferRefundService_DEFINED
#define SOAP_TYPE_PointerTons2__BankTransferRefundService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BankTransferRefundService(struct soap*, ns2__BankTransferRefundService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BankTransferRefundService(struct soap*, const char *, int, ns2__BankTransferRefundService *const*, const char *);
SOAP_FMAC3 ns2__BankTransferRefundService ** SOAP_FMAC4 soap_in_PointerTons2__BankTransferRefundService(struct soap*, const char*, ns2__BankTransferRefundService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BankTransferRefundService(struct soap*, ns2__BankTransferRefundService *const*, const char*, const char*);
SOAP_FMAC3 ns2__BankTransferRefundService ** SOAP_FMAC4 soap_get_PointerTons2__BankTransferRefundService(struct soap*, ns2__BankTransferRefundService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__BankTransferService_DEFINED
#define SOAP_TYPE_PointerTons2__BankTransferService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BankTransferService(struct soap*, ns2__BankTransferService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BankTransferService(struct soap*, const char *, int, ns2__BankTransferService *const*, const char *);
SOAP_FMAC3 ns2__BankTransferService ** SOAP_FMAC4 soap_in_PointerTons2__BankTransferService(struct soap*, const char*, ns2__BankTransferService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BankTransferService(struct soap*, ns2__BankTransferService *const*, const char*, const char*);
SOAP_FMAC3 ns2__BankTransferService ** SOAP_FMAC4 soap_get_PointerTons2__BankTransferService(struct soap*, ns2__BankTransferService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__FXRatesService_DEFINED
#define SOAP_TYPE_PointerTons2__FXRatesService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FXRatesService(struct soap*, ns2__FXRatesService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FXRatesService(struct soap*, const char *, int, ns2__FXRatesService *const*, const char *);
SOAP_FMAC3 ns2__FXRatesService ** SOAP_FMAC4 soap_in_PointerTons2__FXRatesService(struct soap*, const char*, ns2__FXRatesService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FXRatesService(struct soap*, ns2__FXRatesService *const*, const char*, const char*);
SOAP_FMAC3 ns2__FXRatesService ** SOAP_FMAC4 soap_get_PointerTons2__FXRatesService(struct soap*, ns2__FXRatesService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ExportService_DEFINED
#define SOAP_TYPE_PointerTons2__ExportService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ExportService(struct soap*, ns2__ExportService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ExportService(struct soap*, const char *, int, ns2__ExportService *const*, const char *);
SOAP_FMAC3 ns2__ExportService ** SOAP_FMAC4 soap_in_PointerTons2__ExportService(struct soap*, const char*, ns2__ExportService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ExportService(struct soap*, ns2__ExportService *const*, const char*, const char*);
SOAP_FMAC3 ns2__ExportService ** SOAP_FMAC4 soap_get_PointerTons2__ExportService(struct soap*, ns2__ExportService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DAVService_DEFINED
#define SOAP_TYPE_PointerTons2__DAVService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DAVService(struct soap*, ns2__DAVService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DAVService(struct soap*, const char *, int, ns2__DAVService *const*, const char *);
SOAP_FMAC3 ns2__DAVService ** SOAP_FMAC4 soap_in_PointerTons2__DAVService(struct soap*, const char*, ns2__DAVService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DAVService(struct soap*, ns2__DAVService *const*, const char*, const char*);
SOAP_FMAC3 ns2__DAVService ** SOAP_FMAC4 soap_get_PointerTons2__DAVService(struct soap*, ns2__DAVService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__AFSService_DEFINED
#define SOAP_TYPE_PointerTons2__AFSService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AFSService(struct soap*, ns2__AFSService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AFSService(struct soap*, const char *, int, ns2__AFSService *const*, const char *);
SOAP_FMAC3 ns2__AFSService ** SOAP_FMAC4 soap_in_PointerTons2__AFSService(struct soap*, const char*, ns2__AFSService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AFSService(struct soap*, ns2__AFSService *const*, const char*, const char*);
SOAP_FMAC3 ns2__AFSService ** SOAP_FMAC4 soap_get_PointerTons2__AFSService(struct soap*, ns2__AFSService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DMEService_DEFINED
#define SOAP_TYPE_PointerTons2__DMEService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DMEService(struct soap*, ns2__DMEService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DMEService(struct soap*, const char *, int, ns2__DMEService *const*, const char *);
SOAP_FMAC3 ns2__DMEService ** SOAP_FMAC4 soap_in_PointerTons2__DMEService(struct soap*, const char*, ns2__DMEService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DMEService(struct soap*, ns2__DMEService *const*, const char*, const char*);
SOAP_FMAC3 ns2__DMEService ** SOAP_FMAC4 soap_get_PointerTons2__DMEService(struct soap*, ns2__DMEService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__TaxService_DEFINED
#define SOAP_TYPE_PointerTons2__TaxService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TaxService(struct soap*, ns2__TaxService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TaxService(struct soap*, const char *, int, ns2__TaxService *const*, const char *);
SOAP_FMAC3 ns2__TaxService ** SOAP_FMAC4 soap_in_PointerTons2__TaxService(struct soap*, const char*, ns2__TaxService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TaxService(struct soap*, ns2__TaxService *const*, const char*, const char*);
SOAP_FMAC3 ns2__TaxService ** SOAP_FMAC4 soap_get_PointerTons2__TaxService(struct soap*, ns2__TaxService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayerAuthValidateService_DEFINED
#define SOAP_TYPE_PointerTons2__PayerAuthValidateService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayerAuthValidateService(struct soap*, ns2__PayerAuthValidateService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayerAuthValidateService(struct soap*, const char *, int, ns2__PayerAuthValidateService *const*, const char *);
SOAP_FMAC3 ns2__PayerAuthValidateService ** SOAP_FMAC4 soap_in_PointerTons2__PayerAuthValidateService(struct soap*, const char*, ns2__PayerAuthValidateService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayerAuthValidateService(struct soap*, ns2__PayerAuthValidateService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayerAuthValidateService ** SOAP_FMAC4 soap_get_PointerTons2__PayerAuthValidateService(struct soap*, ns2__PayerAuthValidateService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayerAuthEnrollService_DEFINED
#define SOAP_TYPE_PointerTons2__PayerAuthEnrollService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayerAuthEnrollService(struct soap*, ns2__PayerAuthEnrollService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayerAuthEnrollService(struct soap*, const char *, int, ns2__PayerAuthEnrollService *const*, const char *);
SOAP_FMAC3 ns2__PayerAuthEnrollService ** SOAP_FMAC4 soap_in_PointerTons2__PayerAuthEnrollService(struct soap*, const char*, ns2__PayerAuthEnrollService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayerAuthEnrollService(struct soap*, ns2__PayerAuthEnrollService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayerAuthEnrollService ** SOAP_FMAC4 soap_get_PointerTons2__PayerAuthEnrollService(struct soap*, ns2__PayerAuthEnrollService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayerAuthSetupService_DEFINED
#define SOAP_TYPE_PointerTons2__PayerAuthSetupService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayerAuthSetupService(struct soap*, ns2__PayerAuthSetupService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayerAuthSetupService(struct soap*, const char *, int, ns2__PayerAuthSetupService *const*, const char *);
SOAP_FMAC3 ns2__PayerAuthSetupService ** SOAP_FMAC4 soap_in_PointerTons2__PayerAuthSetupService(struct soap*, const char*, ns2__PayerAuthSetupService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayerAuthSetupService(struct soap*, ns2__PayerAuthSetupService *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayerAuthSetupService ** SOAP_FMAC4 soap_get_PointerTons2__PayerAuthSetupService(struct soap*, ns2__PayerAuthSetupService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ECAuthenticateService_DEFINED
#define SOAP_TYPE_PointerTons2__ECAuthenticateService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ECAuthenticateService(struct soap*, ns2__ECAuthenticateService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ECAuthenticateService(struct soap*, const char *, int, ns2__ECAuthenticateService *const*, const char *);
SOAP_FMAC3 ns2__ECAuthenticateService ** SOAP_FMAC4 soap_in_PointerTons2__ECAuthenticateService(struct soap*, const char*, ns2__ECAuthenticateService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ECAuthenticateService(struct soap*, ns2__ECAuthenticateService *const*, const char*, const char*);
SOAP_FMAC3 ns2__ECAuthenticateService ** SOAP_FMAC4 soap_get_PointerTons2__ECAuthenticateService(struct soap*, ns2__ECAuthenticateService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ECCreditService_DEFINED
#define SOAP_TYPE_PointerTons2__ECCreditService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ECCreditService(struct soap*, ns2__ECCreditService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ECCreditService(struct soap*, const char *, int, ns2__ECCreditService *const*, const char *);
SOAP_FMAC3 ns2__ECCreditService ** SOAP_FMAC4 soap_in_PointerTons2__ECCreditService(struct soap*, const char*, ns2__ECCreditService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ECCreditService(struct soap*, ns2__ECCreditService *const*, const char*, const char*);
SOAP_FMAC3 ns2__ECCreditService ** SOAP_FMAC4 soap_get_PointerTons2__ECCreditService(struct soap*, ns2__ECCreditService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ECDebitService_DEFINED
#define SOAP_TYPE_PointerTons2__ECDebitService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ECDebitService(struct soap*, ns2__ECDebitService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ECDebitService(struct soap*, const char *, int, ns2__ECDebitService *const*, const char *);
SOAP_FMAC3 ns2__ECDebitService ** SOAP_FMAC4 soap_in_PointerTons2__ECDebitService(struct soap*, const char*, ns2__ECDebitService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ECDebitService(struct soap*, ns2__ECDebitService *const*, const char*, const char*);
SOAP_FMAC3 ns2__ECDebitService ** SOAP_FMAC4 soap_get_PointerTons2__ECDebitService(struct soap*, ns2__ECDebitService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ServiceFeeCalculateService_DEFINED
#define SOAP_TYPE_PointerTons2__ServiceFeeCalculateService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ServiceFeeCalculateService(struct soap*, ns2__ServiceFeeCalculateService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ServiceFeeCalculateService(struct soap*, const char *, int, ns2__ServiceFeeCalculateService *const*, const char *);
SOAP_FMAC3 ns2__ServiceFeeCalculateService ** SOAP_FMAC4 soap_in_PointerTons2__ServiceFeeCalculateService(struct soap*, const char*, ns2__ServiceFeeCalculateService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ServiceFeeCalculateService(struct soap*, ns2__ServiceFeeCalculateService *const*, const char*, const char*);
SOAP_FMAC3 ns2__ServiceFeeCalculateService ** SOAP_FMAC4 soap_get_PointerTons2__ServiceFeeCalculateService(struct soap*, ns2__ServiceFeeCalculateService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCDCCService_DEFINED
#define SOAP_TYPE_PointerTons2__CCDCCService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCDCCService(struct soap*, ns2__CCDCCService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCDCCService(struct soap*, const char *, int, ns2__CCDCCService *const*, const char *);
SOAP_FMAC3 ns2__CCDCCService ** SOAP_FMAC4 soap_in_PointerTons2__CCDCCService(struct soap*, const char*, ns2__CCDCCService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCDCCService(struct soap*, ns2__CCDCCService *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCDCCService ** SOAP_FMAC4 soap_get_PointerTons2__CCDCCService(struct soap*, ns2__CCDCCService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCAutoAuthReversalService_DEFINED
#define SOAP_TYPE_PointerTons2__CCAutoAuthReversalService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCAutoAuthReversalService(struct soap*, ns2__CCAutoAuthReversalService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCAutoAuthReversalService(struct soap*, const char *, int, ns2__CCAutoAuthReversalService *const*, const char *);
SOAP_FMAC3 ns2__CCAutoAuthReversalService ** SOAP_FMAC4 soap_in_PointerTons2__CCAutoAuthReversalService(struct soap*, const char*, ns2__CCAutoAuthReversalService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCAutoAuthReversalService(struct soap*, ns2__CCAutoAuthReversalService *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCAutoAuthReversalService ** SOAP_FMAC4 soap_get_PointerTons2__CCAutoAuthReversalService(struct soap*, ns2__CCAutoAuthReversalService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCAuthReversalService_DEFINED
#define SOAP_TYPE_PointerTons2__CCAuthReversalService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCAuthReversalService(struct soap*, ns2__CCAuthReversalService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCAuthReversalService(struct soap*, const char *, int, ns2__CCAuthReversalService *const*, const char *);
SOAP_FMAC3 ns2__CCAuthReversalService ** SOAP_FMAC4 soap_in_PointerTons2__CCAuthReversalService(struct soap*, const char*, ns2__CCAuthReversalService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCAuthReversalService(struct soap*, ns2__CCAuthReversalService *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCAuthReversalService ** SOAP_FMAC4 soap_get_PointerTons2__CCAuthReversalService(struct soap*, ns2__CCAuthReversalService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCCreditService_DEFINED
#define SOAP_TYPE_PointerTons2__CCCreditService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCCreditService(struct soap*, ns2__CCCreditService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCCreditService(struct soap*, const char *, int, ns2__CCCreditService *const*, const char *);
SOAP_FMAC3 ns2__CCCreditService ** SOAP_FMAC4 soap_in_PointerTons2__CCCreditService(struct soap*, const char*, ns2__CCCreditService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCCreditService(struct soap*, ns2__CCCreditService *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCCreditService ** SOAP_FMAC4 soap_get_PointerTons2__CCCreditService(struct soap*, ns2__CCCreditService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCCaptureService_DEFINED
#define SOAP_TYPE_PointerTons2__CCCaptureService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCCaptureService(struct soap*, ns2__CCCaptureService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCCaptureService(struct soap*, const char *, int, ns2__CCCaptureService *const*, const char *);
SOAP_FMAC3 ns2__CCCaptureService ** SOAP_FMAC4 soap_in_PointerTons2__CCCaptureService(struct soap*, const char*, ns2__CCCaptureService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCCaptureService(struct soap*, ns2__CCCaptureService *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCCaptureService ** SOAP_FMAC4 soap_get_PointerTons2__CCCaptureService(struct soap*, ns2__CCCaptureService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCIncrementalAuthService_DEFINED
#define SOAP_TYPE_PointerTons2__CCIncrementalAuthService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCIncrementalAuthService(struct soap*, ns2__CCIncrementalAuthService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCIncrementalAuthService(struct soap*, const char *, int, ns2__CCIncrementalAuthService *const*, const char *);
SOAP_FMAC3 ns2__CCIncrementalAuthService ** SOAP_FMAC4 soap_in_PointerTons2__CCIncrementalAuthService(struct soap*, const char*, ns2__CCIncrementalAuthService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCIncrementalAuthService(struct soap*, ns2__CCIncrementalAuthService *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCIncrementalAuthService ** SOAP_FMAC4 soap_get_PointerTons2__CCIncrementalAuthService(struct soap*, ns2__CCIncrementalAuthService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCSaleReversalService_DEFINED
#define SOAP_TYPE_PointerTons2__CCSaleReversalService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCSaleReversalService(struct soap*, ns2__CCSaleReversalService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCSaleReversalService(struct soap*, const char *, int, ns2__CCSaleReversalService *const*, const char *);
SOAP_FMAC3 ns2__CCSaleReversalService ** SOAP_FMAC4 soap_in_PointerTons2__CCSaleReversalService(struct soap*, const char*, ns2__CCSaleReversalService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCSaleReversalService(struct soap*, ns2__CCSaleReversalService *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCSaleReversalService ** SOAP_FMAC4 soap_get_PointerTons2__CCSaleReversalService(struct soap*, ns2__CCSaleReversalService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCSaleCreditService_DEFINED
#define SOAP_TYPE_PointerTons2__CCSaleCreditService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCSaleCreditService(struct soap*, ns2__CCSaleCreditService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCSaleCreditService(struct soap*, const char *, int, ns2__CCSaleCreditService *const*, const char *);
SOAP_FMAC3 ns2__CCSaleCreditService ** SOAP_FMAC4 soap_in_PointerTons2__CCSaleCreditService(struct soap*, const char*, ns2__CCSaleCreditService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCSaleCreditService(struct soap*, ns2__CCSaleCreditService *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCSaleCreditService ** SOAP_FMAC4 soap_get_PointerTons2__CCSaleCreditService(struct soap*, ns2__CCSaleCreditService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCSaleService_DEFINED
#define SOAP_TYPE_PointerTons2__CCSaleService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCSaleService(struct soap*, ns2__CCSaleService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCSaleService(struct soap*, const char *, int, ns2__CCSaleService *const*, const char *);
SOAP_FMAC3 ns2__CCSaleService ** SOAP_FMAC4 soap_in_PointerTons2__CCSaleService(struct soap*, const char*, ns2__CCSaleService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCSaleService(struct soap*, ns2__CCSaleService *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCSaleService ** SOAP_FMAC4 soap_get_PointerTons2__CCSaleService(struct soap*, ns2__CCSaleService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__VerificationService_DEFINED
#define SOAP_TYPE_PointerTons2__VerificationService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VerificationService(struct soap*, ns2__VerificationService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VerificationService(struct soap*, const char *, int, ns2__VerificationService *const*, const char *);
SOAP_FMAC3 ns2__VerificationService ** SOAP_FMAC4 soap_in_PointerTons2__VerificationService(struct soap*, const char*, ns2__VerificationService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VerificationService(struct soap*, ns2__VerificationService *const*, const char*, const char*);
SOAP_FMAC3 ns2__VerificationService ** SOAP_FMAC4 soap_get_PointerTons2__VerificationService(struct soap*, ns2__VerificationService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__GiftCardRefundService_DEFINED
#define SOAP_TYPE_PointerTons2__GiftCardRefundService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GiftCardRefundService(struct soap*, ns2__GiftCardRefundService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GiftCardRefundService(struct soap*, const char *, int, ns2__GiftCardRefundService *const*, const char *);
SOAP_FMAC3 ns2__GiftCardRefundService ** SOAP_FMAC4 soap_in_PointerTons2__GiftCardRefundService(struct soap*, const char*, ns2__GiftCardRefundService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GiftCardRefundService(struct soap*, ns2__GiftCardRefundService *const*, const char*, const char*);
SOAP_FMAC3 ns2__GiftCardRefundService ** SOAP_FMAC4 soap_get_PointerTons2__GiftCardRefundService(struct soap*, ns2__GiftCardRefundService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__GiftCardReloadService_DEFINED
#define SOAP_TYPE_PointerTons2__GiftCardReloadService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GiftCardReloadService(struct soap*, ns2__GiftCardReloadService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GiftCardReloadService(struct soap*, const char *, int, ns2__GiftCardReloadService *const*, const char *);
SOAP_FMAC3 ns2__GiftCardReloadService ** SOAP_FMAC4 soap_in_PointerTons2__GiftCardReloadService(struct soap*, const char*, ns2__GiftCardReloadService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GiftCardReloadService(struct soap*, ns2__GiftCardReloadService *const*, const char*, const char*);
SOAP_FMAC3 ns2__GiftCardReloadService ** SOAP_FMAC4 soap_get_PointerTons2__GiftCardReloadService(struct soap*, ns2__GiftCardReloadService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__GiftCardReversalService_DEFINED
#define SOAP_TYPE_PointerTons2__GiftCardReversalService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GiftCardReversalService(struct soap*, ns2__GiftCardReversalService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GiftCardReversalService(struct soap*, const char *, int, ns2__GiftCardReversalService *const*, const char *);
SOAP_FMAC3 ns2__GiftCardReversalService ** SOAP_FMAC4 soap_in_PointerTons2__GiftCardReversalService(struct soap*, const char*, ns2__GiftCardReversalService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GiftCardReversalService(struct soap*, ns2__GiftCardReversalService *const*, const char*, const char*);
SOAP_FMAC3 ns2__GiftCardReversalService ** SOAP_FMAC4 soap_get_PointerTons2__GiftCardReversalService(struct soap*, ns2__GiftCardReversalService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__GiftCardVoidService_DEFINED
#define SOAP_TYPE_PointerTons2__GiftCardVoidService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GiftCardVoidService(struct soap*, ns2__GiftCardVoidService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GiftCardVoidService(struct soap*, const char *, int, ns2__GiftCardVoidService *const*, const char *);
SOAP_FMAC3 ns2__GiftCardVoidService ** SOAP_FMAC4 soap_in_PointerTons2__GiftCardVoidService(struct soap*, const char*, ns2__GiftCardVoidService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GiftCardVoidService(struct soap*, ns2__GiftCardVoidService *const*, const char*, const char*);
SOAP_FMAC3 ns2__GiftCardVoidService ** SOAP_FMAC4 soap_get_PointerTons2__GiftCardVoidService(struct soap*, ns2__GiftCardVoidService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__GiftCardRedemptionService_DEFINED
#define SOAP_TYPE_PointerTons2__GiftCardRedemptionService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GiftCardRedemptionService(struct soap*, ns2__GiftCardRedemptionService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GiftCardRedemptionService(struct soap*, const char *, int, ns2__GiftCardRedemptionService *const*, const char *);
SOAP_FMAC3 ns2__GiftCardRedemptionService ** SOAP_FMAC4 soap_in_PointerTons2__GiftCardRedemptionService(struct soap*, const char*, ns2__GiftCardRedemptionService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GiftCardRedemptionService(struct soap*, ns2__GiftCardRedemptionService *const*, const char*, const char*);
SOAP_FMAC3 ns2__GiftCardRedemptionService ** SOAP_FMAC4 soap_get_PointerTons2__GiftCardRedemptionService(struct soap*, ns2__GiftCardRedemptionService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__GiftCardBalanceInquiryService_DEFINED
#define SOAP_TYPE_PointerTons2__GiftCardBalanceInquiryService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GiftCardBalanceInquiryService(struct soap*, ns2__GiftCardBalanceInquiryService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GiftCardBalanceInquiryService(struct soap*, const char *, int, ns2__GiftCardBalanceInquiryService *const*, const char *);
SOAP_FMAC3 ns2__GiftCardBalanceInquiryService ** SOAP_FMAC4 soap_in_PointerTons2__GiftCardBalanceInquiryService(struct soap*, const char*, ns2__GiftCardBalanceInquiryService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GiftCardBalanceInquiryService(struct soap*, ns2__GiftCardBalanceInquiryService *const*, const char*, const char*);
SOAP_FMAC3 ns2__GiftCardBalanceInquiryService ** SOAP_FMAC4 soap_get_PointerTons2__GiftCardBalanceInquiryService(struct soap*, ns2__GiftCardBalanceInquiryService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__GiftCardActivationService_DEFINED
#define SOAP_TYPE_PointerTons2__GiftCardActivationService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GiftCardActivationService(struct soap*, ns2__GiftCardActivationService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GiftCardActivationService(struct soap*, const char *, int, ns2__GiftCardActivationService *const*, const char *);
SOAP_FMAC3 ns2__GiftCardActivationService ** SOAP_FMAC4 soap_in_PointerTons2__GiftCardActivationService(struct soap*, const char*, ns2__GiftCardActivationService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GiftCardActivationService(struct soap*, ns2__GiftCardActivationService *const*, const char*, const char*);
SOAP_FMAC3 ns2__GiftCardActivationService ** SOAP_FMAC4 soap_get_PointerTons2__GiftCardActivationService(struct soap*, ns2__GiftCardActivationService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ECAVSService_DEFINED
#define SOAP_TYPE_PointerTons2__ECAVSService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ECAVSService(struct soap*, ns2__ECAVSService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ECAVSService(struct soap*, const char *, int, ns2__ECAVSService *const*, const char *);
SOAP_FMAC3 ns2__ECAVSService ** SOAP_FMAC4 soap_in_PointerTons2__ECAVSService(struct soap*, const char*, ns2__ECAVSService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ECAVSService(struct soap*, ns2__ECAVSService *const*, const char*, const char*);
SOAP_FMAC3 ns2__ECAVSService ** SOAP_FMAC4 soap_get_PointerTons2__ECAVSService(struct soap*, ns2__ECAVSService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__OCTService_DEFINED
#define SOAP_TYPE_PointerTons2__OCTService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OCTService(struct soap*, ns2__OCTService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OCTService(struct soap*, const char *, int, ns2__OCTService *const*, const char *);
SOAP_FMAC3 ns2__OCTService ** SOAP_FMAC4 soap_in_PointerTons2__OCTService(struct soap*, const char*, ns2__OCTService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OCTService(struct soap*, ns2__OCTService *const*, const char*, const char*);
SOAP_FMAC3 ns2__OCTService ** SOAP_FMAC4 soap_get_PointerTons2__OCTService(struct soap*, ns2__OCTService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__CCAuthService_DEFINED
#define SOAP_TYPE_PointerTons2__CCAuthService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CCAuthService(struct soap*, ns2__CCAuthService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CCAuthService(struct soap*, const char *, int, ns2__CCAuthService *const*, const char *);
SOAP_FMAC3 ns2__CCAuthService ** SOAP_FMAC4 soap_in_PointerTons2__CCAuthService(struct soap*, const char*, ns2__CCAuthService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CCAuthService(struct soap*, ns2__CCAuthService *const*, const char*, const char*);
SOAP_FMAC3 ns2__CCAuthService ** SOAP_FMAC4 soap_get_PointerTons2__CCAuthService(struct soap*, ns2__CCAuthService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__GiftCard_DEFINED
#define SOAP_TYPE_PointerTons2__GiftCard_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GiftCard(struct soap*, ns2__GiftCard *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GiftCard(struct soap*, const char *, int, ns2__GiftCard *const*, const char *);
SOAP_FMAC3 ns2__GiftCard ** SOAP_FMAC4 soap_in_PointerTons2__GiftCard(struct soap*, const char*, ns2__GiftCard **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GiftCard(struct soap*, ns2__GiftCard *const*, const char*, const char*);
SOAP_FMAC3 ns2__GiftCard ** SOAP_FMAC4 soap_get_PointerTons2__GiftCard(struct soap*, ns2__GiftCard **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ServiceFee_DEFINED
#define SOAP_TYPE_PointerTons2__ServiceFee_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ServiceFee(struct soap*, ns2__ServiceFee *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ServiceFee(struct soap*, const char *, int, ns2__ServiceFee *const*, const char *);
SOAP_FMAC3 ns2__ServiceFee ** SOAP_FMAC4 soap_in_PointerTons2__ServiceFee(struct soap*, const char*, ns2__ServiceFee **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ServiceFee(struct soap*, ns2__ServiceFee *const*, const char*, const char*);
SOAP_FMAC3 ns2__ServiceFee ** SOAP_FMAC4 soap_get_PointerTons2__ServiceFee(struct soap*, ns2__ServiceFee **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__JPO_DEFINED
#define SOAP_TYPE_PointerTons2__JPO_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__JPO(struct soap*, ns2__JPO *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__JPO(struct soap*, const char *, int, ns2__JPO *const*, const char *);
SOAP_FMAC3 ns2__JPO ** SOAP_FMAC4 soap_in_PointerTons2__JPO(struct soap*, const char*, ns2__JPO **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__JPO(struct soap*, ns2__JPO *const*, const char*, const char*);
SOAP_FMAC3 ns2__JPO ** SOAP_FMAC4 soap_get_PointerTons2__JPO(struct soap*, ns2__JPO **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__MerchantSecureData_DEFINED
#define SOAP_TYPE_PointerTons2__MerchantSecureData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MerchantSecureData(struct soap*, ns2__MerchantSecureData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MerchantSecureData(struct soap*, const char *, int, ns2__MerchantSecureData *const*, const char *);
SOAP_FMAC3 ns2__MerchantSecureData ** SOAP_FMAC4 soap_in_PointerTons2__MerchantSecureData(struct soap*, const char*, ns2__MerchantSecureData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MerchantSecureData(struct soap*, ns2__MerchantSecureData *const*, const char*, const char*);
SOAP_FMAC3 ns2__MerchantSecureData ** SOAP_FMAC4 soap_get_PointerTons2__MerchantSecureData(struct soap*, ns2__MerchantSecureData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__AuxiliaryData_DEFINED
#define SOAP_TYPE_PointerTons2__AuxiliaryData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AuxiliaryData(struct soap*, ns2__AuxiliaryData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AuxiliaryData(struct soap*, const char *, int, ns2__AuxiliaryData *const*, const char *);
SOAP_FMAC3 ns2__AuxiliaryData ** SOAP_FMAC4 soap_in_PointerTons2__AuxiliaryData(struct soap*, const char*, ns2__AuxiliaryData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AuxiliaryData(struct soap*, ns2__AuxiliaryData *const*, const char*, const char*);
SOAP_FMAC3 ns2__AuxiliaryData ** SOAP_FMAC4 soap_get_PointerTons2__AuxiliaryData(struct soap*, ns2__AuxiliaryData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__MerchantDefinedData_DEFINED
#define SOAP_TYPE_PointerTons2__MerchantDefinedData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MerchantDefinedData(struct soap*, ns2__MerchantDefinedData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MerchantDefinedData(struct soap*, const char *, int, ns2__MerchantDefinedData *const*, const char *);
SOAP_FMAC3 ns2__MerchantDefinedData ** SOAP_FMAC4 soap_in_PointerTons2__MerchantDefinedData(struct soap*, const char*, ns2__MerchantDefinedData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MerchantDefinedData(struct soap*, ns2__MerchantDefinedData *const*, const char*, const char*);
SOAP_FMAC3 ns2__MerchantDefinedData ** SOAP_FMAC4 soap_get_PointerTons2__MerchantDefinedData(struct soap*, ns2__MerchantDefinedData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PayPal_DEFINED
#define SOAP_TYPE_PointerTons2__PayPal_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayPal(struct soap*, ns2__PayPal *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayPal(struct soap*, const char *, int, ns2__PayPal *const*, const char *);
SOAP_FMAC3 ns2__PayPal ** SOAP_FMAC4 soap_in_PointerTons2__PayPal(struct soap*, const char*, ns2__PayPal **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayPal(struct soap*, ns2__PayPal *const*, const char*, const char*);
SOAP_FMAC3 ns2__PayPal ** SOAP_FMAC4 soap_get_PointerTons2__PayPal(struct soap*, ns2__PayPal **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__OtherTax_DEFINED
#define SOAP_TYPE_PointerTons2__OtherTax_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OtherTax(struct soap*, ns2__OtherTax *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OtherTax(struct soap*, const char *, int, ns2__OtherTax *const*, const char *);
SOAP_FMAC3 ns2__OtherTax ** SOAP_FMAC4 soap_in_PointerTons2__OtherTax(struct soap*, const char*, ns2__OtherTax **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OtherTax(struct soap*, ns2__OtherTax *const*, const char*, const char*);
SOAP_FMAC3 ns2__OtherTax ** SOAP_FMAC4 soap_get_PointerTons2__OtherTax(struct soap*, ns2__OtherTax **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DecisionManager_DEFINED
#define SOAP_TYPE_PointerTons2__DecisionManager_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DecisionManager(struct soap*, ns2__DecisionManager *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DecisionManager(struct soap*, const char *, int, ns2__DecisionManager *const*, const char *);
SOAP_FMAC3 ns2__DecisionManager ** SOAP_FMAC4 soap_in_PointerTons2__DecisionManager(struct soap*, const char*, ns2__DecisionManager **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DecisionManager(struct soap*, ns2__DecisionManager *const*, const char*, const char*);
SOAP_FMAC3 ns2__DecisionManager ** SOAP_FMAC4 soap_get_PointerTons2__DecisionManager(struct soap*, ns2__DecisionManager **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__TokenSource_DEFINED
#define SOAP_TYPE_PointerTons2__TokenSource_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TokenSource(struct soap*, ns2__TokenSource *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TokenSource(struct soap*, const char *, int, ns2__TokenSource *const*, const char *);
SOAP_FMAC3 ns2__TokenSource ** SOAP_FMAC4 soap_in_PointerTons2__TokenSource(struct soap*, const char*, ns2__TokenSource **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TokenSource(struct soap*, ns2__TokenSource *const*, const char*, const char*);
SOAP_FMAC3 ns2__TokenSource ** SOAP_FMAC4 soap_get_PointerTons2__TokenSource(struct soap*, ns2__TokenSource **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__RecurringSubscriptionInfo_DEFINED
#define SOAP_TYPE_PointerTons2__RecurringSubscriptionInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RecurringSubscriptionInfo(struct soap*, ns2__RecurringSubscriptionInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RecurringSubscriptionInfo(struct soap*, const char *, int, ns2__RecurringSubscriptionInfo *const*, const char *);
SOAP_FMAC3 ns2__RecurringSubscriptionInfo ** SOAP_FMAC4 soap_in_PointerTons2__RecurringSubscriptionInfo(struct soap*, const char*, ns2__RecurringSubscriptionInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RecurringSubscriptionInfo(struct soap*, ns2__RecurringSubscriptionInfo *const*, const char*, const char*);
SOAP_FMAC3 ns2__RecurringSubscriptionInfo ** SOAP_FMAC4 soap_get_PointerTons2__RecurringSubscriptionInfo(struct soap*, ns2__RecurringSubscriptionInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Subscription_DEFINED
#define SOAP_TYPE_PointerTons2__Subscription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Subscription(struct soap*, ns2__Subscription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Subscription(struct soap*, const char *, int, ns2__Subscription *const*, const char *);
SOAP_FMAC3 ns2__Subscription ** SOAP_FMAC4 soap_in_PointerTons2__Subscription(struct soap*, const char*, ns2__Subscription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Subscription(struct soap*, ns2__Subscription *const*, const char*, const char*);
SOAP_FMAC3 ns2__Subscription ** SOAP_FMAC4 soap_get_PointerTons2__Subscription(struct soap*, ns2__Subscription **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__BankInfo_DEFINED
#define SOAP_TYPE_PointerTons2__BankInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BankInfo(struct soap*, ns2__BankInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BankInfo(struct soap*, const char *, int, ns2__BankInfo *const*, const char *);
SOAP_FMAC3 ns2__BankInfo ** SOAP_FMAC4 soap_in_PointerTons2__BankInfo(struct soap*, const char*, ns2__BankInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BankInfo(struct soap*, ns2__BankInfo *const*, const char*, const char*);
SOAP_FMAC3 ns2__BankInfo ** SOAP_FMAC4 soap_get_PointerTons2__BankInfo(struct soap*, ns2__BankInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__FundTransfer_DEFINED
#define SOAP_TYPE_PointerTons2__FundTransfer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FundTransfer(struct soap*, ns2__FundTransfer *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FundTransfer(struct soap*, const char *, int, ns2__FundTransfer *const*, const char *);
SOAP_FMAC3 ns2__FundTransfer ** SOAP_FMAC4 soap_in_PointerTons2__FundTransfer(struct soap*, const char*, ns2__FundTransfer **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FundTransfer(struct soap*, ns2__FundTransfer *const*, const char*, const char*);
SOAP_FMAC3 ns2__FundTransfer ** SOAP_FMAC4 soap_get_PointerTons2__FundTransfer(struct soap*, ns2__FundTransfer **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__UCAF_DEFINED
#define SOAP_TYPE_PointerTons2__UCAF_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__UCAF(struct soap*, ns2__UCAF *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__UCAF(struct soap*, const char *, int, ns2__UCAF *const*, const char *);
SOAP_FMAC3 ns2__UCAF ** SOAP_FMAC4 soap_in_PointerTons2__UCAF(struct soap*, const char*, ns2__UCAF **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__UCAF(struct soap*, ns2__UCAF *const*, const char*, const char*);
SOAP_FMAC3 ns2__UCAF ** SOAP_FMAC4 soap_get_PointerTons2__UCAF(struct soap*, ns2__UCAF **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__GECC_DEFINED
#define SOAP_TYPE_PointerTons2__GECC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GECC(struct soap*, ns2__GECC *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GECC(struct soap*, const char *, int, ns2__GECC *const*, const char *);
SOAP_FMAC3 ns2__GECC ** SOAP_FMAC4 soap_in_PointerTons2__GECC(struct soap*, const char*, ns2__GECC **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GECC(struct soap*, ns2__GECC *const*, const char*, const char*);
SOAP_FMAC3 ns2__GECC ** SOAP_FMAC4 soap_get_PointerTons2__GECC(struct soap*, ns2__GECC **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__BML_DEFINED
#define SOAP_TYPE_PointerTons2__BML_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BML(struct soap*, ns2__BML *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BML(struct soap*, const char *, int, ns2__BML *const*, const char *);
SOAP_FMAC3 ns2__BML ** SOAP_FMAC4 soap_in_PointerTons2__BML(struct soap*, const char*, ns2__BML **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BML(struct soap*, ns2__BML *const*, const char*, const char*);
SOAP_FMAC3 ns2__BML ** SOAP_FMAC4 soap_get_PointerTons2__BML(struct soap*, ns2__BML **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Check_DEFINED
#define SOAP_TYPE_PointerTons2__Check_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Check(struct soap*, ns2__Check *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Check(struct soap*, const char *, int, ns2__Check *const*, const char *);
SOAP_FMAC3 ns2__Check ** SOAP_FMAC4 soap_in_PointerTons2__Check(struct soap*, const char*, ns2__Check **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Check(struct soap*, ns2__Check *const*, const char*, const char*);
SOAP_FMAC3 ns2__Check ** SOAP_FMAC4 soap_get_PointerTons2__Check(struct soap*, ns2__Check **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Category_DEFINED
#define SOAP_TYPE_PointerTons2__Category_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Category(struct soap*, ns2__Category *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Category(struct soap*, const char *, int, ns2__Category *const*, const char *);
SOAP_FMAC3 ns2__Category ** SOAP_FMAC4 soap_in_PointerTons2__Category(struct soap*, const char*, ns2__Category **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Category(struct soap*, ns2__Category *const*, const char*, const char*);
SOAP_FMAC3 ns2__Category ** SOAP_FMAC4 soap_get_PointerTons2__Category(struct soap*, ns2__Category **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Card_DEFINED
#define SOAP_TYPE_PointerTons2__Card_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Card(struct soap*, ns2__Card *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Card(struct soap*, const char *, int, ns2__Card *const*, const char *);
SOAP_FMAC3 ns2__Card ** SOAP_FMAC4 soap_in_PointerTons2__Card(struct soap*, const char*, ns2__Card **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Card(struct soap*, ns2__Card *const*, const char*, const char*);
SOAP_FMAC3 ns2__Card ** SOAP_FMAC4 soap_get_PointerTons2__Card(struct soap*, ns2__Card **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Installment_DEFINED
#define SOAP_TYPE_PointerTons2__Installment_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Installment(struct soap*, ns2__Installment *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Installment(struct soap*, const char *, int, ns2__Installment *const*, const char *);
SOAP_FMAC3 ns2__Installment ** SOAP_FMAC4 soap_in_PointerTons2__Installment(struct soap*, const char*, ns2__Installment **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Installment(struct soap*, ns2__Installment *const*, const char*, const char*);
SOAP_FMAC3 ns2__Installment ** SOAP_FMAC4 soap_get_PointerTons2__Installment(struct soap*, ns2__Installment **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__EncryptedPayment_DEFINED
#define SOAP_TYPE_PointerTons2__EncryptedPayment_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__EncryptedPayment(struct soap*, ns2__EncryptedPayment *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__EncryptedPayment(struct soap*, const char *, int, ns2__EncryptedPayment *const*, const char *);
SOAP_FMAC3 ns2__EncryptedPayment ** SOAP_FMAC4 soap_in_PointerTons2__EncryptedPayment(struct soap*, const char*, ns2__EncryptedPayment **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__EncryptedPayment(struct soap*, ns2__EncryptedPayment *const*, const char*, const char*);
SOAP_FMAC3 ns2__EncryptedPayment ** SOAP_FMAC4 soap_get_PointerTons2__EncryptedPayment(struct soap*, ns2__EncryptedPayment **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Pin_DEFINED
#define SOAP_TYPE_PointerTons2__Pin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Pin(struct soap*, ns2__Pin *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Pin(struct soap*, const char *, int, ns2__Pin *const*, const char *);
SOAP_FMAC3 ns2__Pin ** SOAP_FMAC4 soap_in_PointerTons2__Pin(struct soap*, const char*, ns2__Pin **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Pin(struct soap*, ns2__Pin *const*, const char*, const char*);
SOAP_FMAC3 ns2__Pin ** SOAP_FMAC4 soap_get_PointerTons2__Pin(struct soap*, ns2__Pin **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Pos_DEFINED
#define SOAP_TYPE_PointerTons2__Pos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Pos(struct soap*, ns2__Pos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Pos(struct soap*, const char *, int, ns2__Pos *const*, const char *);
SOAP_FMAC3 ns2__Pos ** SOAP_FMAC4 soap_in_PointerTons2__Pos(struct soap*, const char*, ns2__Pos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Pos(struct soap*, ns2__Pos *const*, const char*, const char*);
SOAP_FMAC3 ns2__Pos ** SOAP_FMAC4 soap_get_PointerTons2__Pos(struct soap*, ns2__Pos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DCC_DEFINED
#define SOAP_TYPE_PointerTons2__DCC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DCC(struct soap*, ns2__DCC *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DCC(struct soap*, const char *, int, ns2__DCC *const*, const char *);
SOAP_FMAC3 ns2__DCC ** SOAP_FMAC4 soap_in_PointerTons2__DCC(struct soap*, const char*, ns2__DCC **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DCC(struct soap*, ns2__DCC *const*, const char*, const char*);
SOAP_FMAC3 ns2__DCC ** SOAP_FMAC4 soap_get_PointerTons2__DCC(struct soap*, ns2__DCC **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__FundingTotals_DEFINED
#define SOAP_TYPE_PointerTons2__FundingTotals_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FundingTotals(struct soap*, ns2__FundingTotals *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FundingTotals(struct soap*, const char *, int, ns2__FundingTotals *const*, const char *);
SOAP_FMAC3 ns2__FundingTotals ** SOAP_FMAC4 soap_in_PointerTons2__FundingTotals(struct soap*, const char*, ns2__FundingTotals **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FundingTotals(struct soap*, ns2__FundingTotals *const*, const char*, const char*);
SOAP_FMAC3 ns2__FundingTotals ** SOAP_FMAC4 soap_get_PointerTons2__FundingTotals(struct soap*, ns2__FundingTotals **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PurchaseTotals_DEFINED
#define SOAP_TYPE_PointerTons2__PurchaseTotals_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PurchaseTotals(struct soap*, ns2__PurchaseTotals *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PurchaseTotals(struct soap*, const char *, int, ns2__PurchaseTotals *const*, const char *);
SOAP_FMAC3 ns2__PurchaseTotals ** SOAP_FMAC4 soap_in_PointerTons2__PurchaseTotals(struct soap*, const char*, ns2__PurchaseTotals **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PurchaseTotals(struct soap*, ns2__PurchaseTotals *const*, const char*, const char*);
SOAP_FMAC3 ns2__PurchaseTotals ** SOAP_FMAC4 soap_get_PointerTons2__PurchaseTotals(struct soap*, ns2__PurchaseTotals **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Item_DEFINED
#define SOAP_TYPE_PointerTons2__Item_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Item(struct soap*, ns2__Item *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Item(struct soap*, const char *, int, ns2__Item *const*, const char *);
SOAP_FMAC3 ns2__Item ** SOAP_FMAC4 soap_in_PointerTons2__Item(struct soap*, const char*, ns2__Item **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Item(struct soap*, ns2__Item *const*, const char*, const char*);
SOAP_FMAC3 ns2__Item ** SOAP_FMAC4 soap_get_PointerTons2__Item(struct soap*, ns2__Item **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ShipFrom_DEFINED
#define SOAP_TYPE_PointerTons2__ShipFrom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ShipFrom(struct soap*, ns2__ShipFrom *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ShipFrom(struct soap*, const char *, int, ns2__ShipFrom *const*, const char *);
SOAP_FMAC3 ns2__ShipFrom ** SOAP_FMAC4 soap_in_PointerTons2__ShipFrom(struct soap*, const char*, ns2__ShipFrom **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ShipFrom(struct soap*, ns2__ShipFrom *const*, const char*, const char*);
SOAP_FMAC3 ns2__ShipFrom ** SOAP_FMAC4 soap_get_PointerTons2__ShipFrom(struct soap*, ns2__ShipFrom **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PersonalID_DEFINED
#define SOAP_TYPE_PointerTons2__PersonalID_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PersonalID(struct soap*, ns2__PersonalID *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PersonalID(struct soap*, const char *, int, ns2__PersonalID *const*, const char *);
SOAP_FMAC3 ns2__PersonalID ** SOAP_FMAC4 soap_in_PointerTons2__PersonalID(struct soap*, const char*, ns2__PersonalID **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PersonalID(struct soap*, ns2__PersonalID *const*, const char*, const char*);
SOAP_FMAC3 ns2__PersonalID ** SOAP_FMAC4 soap_get_PointerTons2__PersonalID(struct soap*, ns2__PersonalID **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ShipTo_DEFINED
#define SOAP_TYPE_PointerTons2__ShipTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ShipTo(struct soap*, ns2__ShipTo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ShipTo(struct soap*, const char *, int, ns2__ShipTo *const*, const char *);
SOAP_FMAC3 ns2__ShipTo ** SOAP_FMAC4 soap_in_PointerTons2__ShipTo(struct soap*, const char*, ns2__ShipTo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ShipTo(struct soap*, ns2__ShipTo *const*, const char*, const char*);
SOAP_FMAC3 ns2__ShipTo ** SOAP_FMAC4 soap_get_PointerTons2__ShipTo(struct soap*, ns2__ShipTo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__BillTo_DEFINED
#define SOAP_TYPE_PointerTons2__BillTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BillTo(struct soap*, ns2__BillTo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BillTo(struct soap*, const char *, int, ns2__BillTo *const*, const char *);
SOAP_FMAC3 ns2__BillTo ** SOAP_FMAC4 soap_in_PointerTons2__BillTo(struct soap*, const char*, ns2__BillTo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BillTo(struct soap*, ns2__BillTo *const*, const char*, const char*);
SOAP_FMAC3 ns2__BillTo ** SOAP_FMAC4 soap_get_PointerTons2__BillTo(struct soap*, ns2__BillTo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__InvoiceHeader_DEFINED
#define SOAP_TYPE_PointerTons2__InvoiceHeader_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__InvoiceHeader(struct soap*, ns2__InvoiceHeader *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__InvoiceHeader(struct soap*, const char *, int, ns2__InvoiceHeader *const*, const char *);
SOAP_FMAC3 ns2__InvoiceHeader ** SOAP_FMAC4 soap_in_PointerTons2__InvoiceHeader(struct soap*, const char*, ns2__InvoiceHeader **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__InvoiceHeader(struct soap*, ns2__InvoiceHeader *const*, const char*, const char*);
SOAP_FMAC3 ns2__InvoiceHeader ** SOAP_FMAC4 soap_get_PointerTons2__InvoiceHeader(struct soap*, ns2__InvoiceHeader **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__APDevice_DEFINED
#define SOAP_TYPE_PointerTons2__APDevice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__APDevice(struct soap*, ns2__APDevice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__APDevice(struct soap*, const char *, int, ns2__APDevice *const*, const char *);
SOAP_FMAC3 ns2__APDevice ** SOAP_FMAC4 soap_in_PointerTons2__APDevice(struct soap*, const char*, ns2__APDevice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__APDevice(struct soap*, ns2__APDevice *const*, const char*, const char*);
SOAP_FMAC3 ns2__APDevice ** SOAP_FMAC4 soap_get_PointerTons2__APDevice(struct soap*, ns2__APDevice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DecisionManagerTravelLeg_DEFINED
#define SOAP_TYPE_PointerTons2__DecisionManagerTravelLeg_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DecisionManagerTravelLeg(struct soap*, ns2__DecisionManagerTravelLeg *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DecisionManagerTravelLeg(struct soap*, const char *, int, ns2__DecisionManagerTravelLeg *const*, const char *);
SOAP_FMAC3 ns2__DecisionManagerTravelLeg ** SOAP_FMAC4 soap_in_PointerTons2__DecisionManagerTravelLeg(struct soap*, const char*, ns2__DecisionManagerTravelLeg **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DecisionManagerTravelLeg(struct soap*, ns2__DecisionManagerTravelLeg *const*, const char*, const char*);
SOAP_FMAC3 ns2__DecisionManagerTravelLeg ** SOAP_FMAC4 soap_get_PointerTons2__DecisionManagerTravelLeg(struct soap*, ns2__DecisionManagerTravelLeg **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DecisionManagerTravelData_DEFINED
#define SOAP_TYPE_PointerTons2__DecisionManagerTravelData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DecisionManagerTravelData(struct soap*, ns2__DecisionManagerTravelData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DecisionManagerTravelData(struct soap*, const char *, int, ns2__DecisionManagerTravelData *const*, const char *);
SOAP_FMAC3 ns2__DecisionManagerTravelData ** SOAP_FMAC4 soap_in_PointerTons2__DecisionManagerTravelData(struct soap*, const char*, ns2__DecisionManagerTravelData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DecisionManagerTravelData(struct soap*, ns2__DecisionManagerTravelData *const*, const char*, const char*);
SOAP_FMAC3 ns2__DecisionManagerTravelData ** SOAP_FMAC4 soap_get_PointerTons2__DecisionManagerTravelData(struct soap*, ns2__DecisionManagerTravelData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Authentication_DEFINED
#define SOAP_TYPE_PointerTons2__Authentication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Authentication(struct soap*, ns2__Authentication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Authentication(struct soap*, const char *, int, ns2__Authentication *const*, const char *);
SOAP_FMAC3 ns2__Authentication ** SOAP_FMAC4 soap_in_PointerTons2__Authentication(struct soap*, const char*, ns2__Authentication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Authentication(struct soap*, ns2__Authentication *const*, const char*, const char*);
SOAP_FMAC3 ns2__Authentication ** SOAP_FMAC4 soap_get_PointerTons2__Authentication(struct soap*, ns2__Authentication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PaySubscriptionEvent_DEFINED
#define SOAP_TYPE_PointerTons2__PaySubscriptionEvent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PaySubscriptionEvent(struct soap*, ns2__PaySubscriptionEvent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PaySubscriptionEvent(struct soap*, const char *, int, ns2__PaySubscriptionEvent *const*, const char *);
SOAP_FMAC3 ns2__PaySubscriptionEvent ** SOAP_FMAC4 soap_in_PointerTons2__PaySubscriptionEvent(struct soap*, const char*, ns2__PaySubscriptionEvent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PaySubscriptionEvent(struct soap*, ns2__PaySubscriptionEvent *const*, const char*, const char*);
SOAP_FMAC3 ns2__PaySubscriptionEvent ** SOAP_FMAC4 soap_get_PointerTons2__PaySubscriptionEvent(struct soap*, ns2__PaySubscriptionEvent **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Brands_DEFINED
#define SOAP_TYPE_PointerTons2__Brands_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Brands(struct soap*, ns2__Brands *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Brands(struct soap*, const char *, int, ns2__Brands *const*, const char *);
SOAP_FMAC3 ns2__Brands ** SOAP_FMAC4 soap_in_PointerTons2__Brands(struct soap*, const char*, ns2__Brands **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Brands(struct soap*, ns2__Brands *const*, const char*, const char*);
SOAP_FMAC3 ns2__Brands ** SOAP_FMAC4 soap_get_PointerTons2__Brands(struct soap*, ns2__Brands **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Address_DEFINED
#define SOAP_TYPE_PointerTons2__Address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Address(struct soap*, ns2__Address *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Address(struct soap*, const char *, int, ns2__Address *const*, const char *);
SOAP_FMAC3 ns2__Address ** SOAP_FMAC4 soap_in_PointerTons2__Address(struct soap*, const char*, ns2__Address **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Address(struct soap*, ns2__Address *const*, const char*, const char*);
SOAP_FMAC3 ns2__Address ** SOAP_FMAC4 soap_get_PointerTons2__Address(struct soap*, ns2__Address **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__dateTime_DEFINED
#define SOAP_TYPE_PointerTons2__dateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__dateTime(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__dateTime(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons2__dateTime(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__dateTime(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons2__dateTime(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__integer_DEFINED
#define SOAP_TYPE_PointerToxsd__integer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__integer(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__integer(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__integer(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__integer(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__integer(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__boolean_DEFINED
#define SOAP_TYPE_PointerTons2__boolean_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__boolean(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__boolean(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons2__boolean(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__boolean(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons2__boolean(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__amount_DEFINED
#define SOAP_TYPE_PointerTons2__amount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__amount(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__amount(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons2__amount(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__amount(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons2__amount(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__PauseRuleResultItem_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__PauseRuleResultItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__PauseRuleResultItem(struct soap*, std::vector<ns2__PauseRuleResultItem *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__PauseRuleResultItem(struct soap*, const std::vector<ns2__PauseRuleResultItem *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__PauseRuleResultItem(struct soap*, const char*, int, const std::vector<ns2__PauseRuleResultItem *> *, const char*);
SOAP_FMAC3 std::vector<ns2__PauseRuleResultItem *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__PauseRuleResultItem(struct soap*, const char*, std::vector<ns2__PauseRuleResultItem *> *, const char*);
SOAP_FMAC1 std::vector<ns2__PauseRuleResultItem *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__PauseRuleResultItem(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__PauseRuleResultItem *>  * soap_new_std__vectorTemplateOfPointerTons2__PauseRuleResultItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__PauseRuleResultItem(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__PaypalTransaction_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__PaypalTransaction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__PaypalTransaction(struct soap*, std::vector<ns2__PaypalTransaction *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__PaypalTransaction(struct soap*, const std::vector<ns2__PaypalTransaction *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__PaypalTransaction(struct soap*, const char*, int, const std::vector<ns2__PaypalTransaction *> *, const char*);
SOAP_FMAC3 std::vector<ns2__PaypalTransaction *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__PaypalTransaction(struct soap*, const char*, std::vector<ns2__PaypalTransaction *> *, const char*);
SOAP_FMAC1 std::vector<ns2__PaypalTransaction *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__PaypalTransaction(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__PaypalTransaction *>  * soap_new_std__vectorTemplateOfPointerTons2__PaypalTransaction(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__PaypalTransaction(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__AuxiliaryField_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__AuxiliaryField_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__AuxiliaryField(struct soap*, std::vector<ns2__AuxiliaryField *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__AuxiliaryField(struct soap*, const std::vector<ns2__AuxiliaryField *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__AuxiliaryField(struct soap*, const char*, int, const std::vector<ns2__AuxiliaryField *> *, const char*);
SOAP_FMAC3 std::vector<ns2__AuxiliaryField *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__AuxiliaryField(struct soap*, const char*, std::vector<ns2__AuxiliaryField *> *, const char*);
SOAP_FMAC1 std::vector<ns2__AuxiliaryField *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__AuxiliaryField(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__AuxiliaryField *>  * soap_new_std__vectorTemplateOfPointerTons2__AuxiliaryField(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__AuxiliaryField(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__MDDField_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__MDDField_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__MDDField(struct soap*, std::vector<ns2__MDDField *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__MDDField(struct soap*, const std::vector<ns2__MDDField *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__MDDField(struct soap*, const char*, int, const std::vector<ns2__MDDField *> *, const char*);
SOAP_FMAC3 std::vector<ns2__MDDField *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__MDDField(struct soap*, const char*, std::vector<ns2__MDDField *> *, const char*);
SOAP_FMAC1 std::vector<ns2__MDDField *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__MDDField(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__MDDField *>  * soap_new_std__vectorTemplateOfPointerTons2__MDDField(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__MDDField(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Service_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Service_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Service(struct soap*, std::vector<ns2__Service *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Service(struct soap*, const std::vector<ns2__Service *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Service(struct soap*, const char*, int, const std::vector<ns2__Service *> *, const char*);
SOAP_FMAC3 std::vector<ns2__Service *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Service(struct soap*, const char*, std::vector<ns2__Service *> *, const char*);
SOAP_FMAC1 std::vector<ns2__Service *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Service(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Service *>  * soap_new_std__vectorTemplateOfPointerTons2__Service(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__Service(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Leg_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Leg_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Leg(struct soap*, std::vector<ns2__Leg *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Leg(struct soap*, const std::vector<ns2__Leg *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Leg(struct soap*, const char*, int, const std::vector<ns2__Leg *> *, const char*);
SOAP_FMAC3 std::vector<ns2__Leg *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Leg(struct soap*, const char*, std::vector<ns2__Leg *> *, const char*);
SOAP_FMAC1 std::vector<ns2__Leg *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Leg(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Leg *>  * soap_new_std__vectorTemplateOfPointerTons2__Leg(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__Leg(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Passenger_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Passenger_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Passenger(struct soap*, std::vector<ns2__Passenger *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Passenger(struct soap*, const std::vector<ns2__Passenger *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Passenger(struct soap*, const char*, int, const std::vector<ns2__Passenger *> *, const char*);
SOAP_FMAC3 std::vector<ns2__Passenger *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Passenger(struct soap*, const char*, std::vector<ns2__Passenger *> *, const char*);
SOAP_FMAC1 std::vector<ns2__Passenger *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Passenger(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Passenger *>  * soap_new_std__vectorTemplateOfPointerTons2__Passenger(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__Passenger(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__BalanceInfo_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__BalanceInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__BalanceInfo(struct soap*, std::vector<ns2__BalanceInfo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__BalanceInfo(struct soap*, const std::vector<ns2__BalanceInfo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__BalanceInfo(struct soap*, const char*, int, const std::vector<ns2__BalanceInfo *> *, const char*);
SOAP_FMAC3 std::vector<ns2__BalanceInfo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__BalanceInfo(struct soap*, const char*, std::vector<ns2__BalanceInfo *> *, const char*);
SOAP_FMAC1 std::vector<ns2__BalanceInfo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__BalanceInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__BalanceInfo *>  * soap_new_std__vectorTemplateOfPointerTons2__BalanceInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__BalanceInfo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Network_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Network_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Network(struct soap*, std::vector<ns2__Network *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Network(struct soap*, const std::vector<ns2__Network *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Network(struct soap*, const char*, int, const std::vector<ns2__Network *> *, const char*);
SOAP_FMAC3 std::vector<ns2__Network *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Network(struct soap*, const char*, std::vector<ns2__Network *> *, const char*);
SOAP_FMAC1 std::vector<ns2__Network *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Network(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Network *>  * soap_new_std__vectorTemplateOfPointerTons2__Network(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__Network(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__PromotionGroupReply_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__PromotionGroupReply_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__PromotionGroupReply(struct soap*, std::vector<ns2__PromotionGroupReply *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__PromotionGroupReply(struct soap*, const std::vector<ns2__PromotionGroupReply *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__PromotionGroupReply(struct soap*, const char*, int, const std::vector<ns2__PromotionGroupReply *> *, const char*);
SOAP_FMAC3 std::vector<ns2__PromotionGroupReply *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__PromotionGroupReply(struct soap*, const char*, std::vector<ns2__PromotionGroupReply *> *, const char*);
SOAP_FMAC1 std::vector<ns2__PromotionGroupReply *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__PromotionGroupReply(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__PromotionGroupReply *>  * soap_new_std__vectorTemplateOfPointerTons2__PromotionGroupReply(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__PromotionGroupReply(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__DeniedPartiesMatch_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__DeniedPartiesMatch_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__DeniedPartiesMatch(struct soap*, std::vector<ns2__DeniedPartiesMatch *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__DeniedPartiesMatch(struct soap*, const std::vector<ns2__DeniedPartiesMatch *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__DeniedPartiesMatch(struct soap*, const char*, int, const std::vector<ns2__DeniedPartiesMatch *> *, const char*);
SOAP_FMAC3 std::vector<ns2__DeniedPartiesMatch *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__DeniedPartiesMatch(struct soap*, const char*, std::vector<ns2__DeniedPartiesMatch *> *, const char*);
SOAP_FMAC1 std::vector<ns2__DeniedPartiesMatch *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__DeniedPartiesMatch(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__DeniedPartiesMatch *>  * soap_new_std__vectorTemplateOfPointerTons2__DeniedPartiesMatch(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__DeniedPartiesMatch(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__APOptionsOption_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__APOptionsOption_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__APOptionsOption(struct soap*, std::vector<ns2__APOptionsOption *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__APOptionsOption(struct soap*, const std::vector<ns2__APOptionsOption *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__APOptionsOption(struct soap*, const char*, int, const std::vector<ns2__APOptionsOption *> *, const char*);
SOAP_FMAC3 std::vector<ns2__APOptionsOption *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__APOptionsOption(struct soap*, const char*, std::vector<ns2__APOptionsOption *> *, const char*);
SOAP_FMAC1 std::vector<ns2__APOptionsOption *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__APOptionsOption(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__APOptionsOption *>  * soap_new_std__vectorTemplateOfPointerTons2__APOptionsOption(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__APOptionsOption(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__paymentCurrencyOffer_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__paymentCurrencyOffer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__paymentCurrencyOffer(struct soap*, std::vector<ns2__paymentCurrencyOffer *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__paymentCurrencyOffer(struct soap*, const std::vector<ns2__paymentCurrencyOffer *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__paymentCurrencyOffer(struct soap*, const char*, int, const std::vector<ns2__paymentCurrencyOffer *> *, const char*);
SOAP_FMAC3 std::vector<ns2__paymentCurrencyOffer *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__paymentCurrencyOffer(struct soap*, const char*, std::vector<ns2__paymentCurrencyOffer *> *, const char*);
SOAP_FMAC1 std::vector<ns2__paymentCurrencyOffer *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__paymentCurrencyOffer(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__paymentCurrencyOffer *>  * soap_new_std__vectorTemplateOfPointerTons2__paymentCurrencyOffer(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__paymentCurrencyOffer(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Element_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Element_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Element(struct soap*, std::vector<ns2__Element *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Element(struct soap*, const std::vector<ns2__Element *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Element(struct soap*, const char*, int, const std::vector<ns2__Element *> *, const char*);
SOAP_FMAC3 std::vector<ns2__Element *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Element(struct soap*, const char*, std::vector<ns2__Element *> *, const char*);
SOAP_FMAC1 std::vector<ns2__Element *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Element(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Element *>  * soap_new_std__vectorTemplateOfPointerTons2__Element(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__Element(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Field_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Field_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Field(struct soap*, std::vector<ns2__Field *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Field(struct soap*, const std::vector<ns2__Field *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Field(struct soap*, const char*, int, const std::vector<ns2__Field *> *, const char*);
SOAP_FMAC3 std::vector<ns2__Field *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Field(struct soap*, const char*, std::vector<ns2__Field *> *, const char*);
SOAP_FMAC1 std::vector<ns2__Field *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Field(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Field *>  * soap_new_std__vectorTemplateOfPointerTons2__Field(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__Field(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__ProviderField_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__ProviderField_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__ProviderField(struct soap*, std::vector<ns2__ProviderField *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__ProviderField(struct soap*, const std::vector<ns2__ProviderField *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__ProviderField(struct soap*, const char*, int, const std::vector<ns2__ProviderField *> *, const char*);
SOAP_FMAC3 std::vector<ns2__ProviderField *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__ProviderField(struct soap*, const char*, std::vector<ns2__ProviderField *> *, const char*);
SOAP_FMAC1 std::vector<ns2__ProviderField *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__ProviderField(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__ProviderField *>  * soap_new_std__vectorTemplateOfPointerTons2__ProviderField(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__ProviderField(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Provider_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Provider_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Provider(struct soap*, std::vector<ns2__Provider *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Provider(struct soap*, const std::vector<ns2__Provider *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Provider(struct soap*, const char*, int, const std::vector<ns2__Provider *> *, const char*);
SOAP_FMAC3 std::vector<ns2__Provider *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Provider(struct soap*, const char*, std::vector<ns2__Provider *> *, const char*);
SOAP_FMAC1 std::vector<ns2__Provider *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Provider(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Provider *>  * soap_new_std__vectorTemplateOfPointerTons2__Provider(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__Provider(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__RuleResultItem_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__RuleResultItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__RuleResultItem(struct soap*, std::vector<ns2__RuleResultItem *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__RuleResultItem(struct soap*, const std::vector<ns2__RuleResultItem *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__RuleResultItem(struct soap*, const char*, int, const std::vector<ns2__RuleResultItem *> *, const char*);
SOAP_FMAC3 std::vector<ns2__RuleResultItem *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__RuleResultItem(struct soap*, const char*, std::vector<ns2__RuleResultItem *> *, const char*);
SOAP_FMAC1 std::vector<ns2__RuleResultItem *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__RuleResultItem(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__RuleResultItem *>  * soap_new_std__vectorTemplateOfPointerTons2__RuleResultItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__RuleResultItem(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__FXQuote_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__FXQuote_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__FXQuote(struct soap*, std::vector<ns2__FXQuote *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__FXQuote(struct soap*, const std::vector<ns2__FXQuote *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__FXQuote(struct soap*, const char*, int, const std::vector<ns2__FXQuote *> *, const char*);
SOAP_FMAC3 std::vector<ns2__FXQuote *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__FXQuote(struct soap*, const char*, std::vector<ns2__FXQuote *> *, const char*);
SOAP_FMAC1 std::vector<ns2__FXQuote *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__FXQuote(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__FXQuote *>  * soap_new_std__vectorTemplateOfPointerTons2__FXQuote(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__FXQuote(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__TaxReplyItem_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__TaxReplyItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__TaxReplyItem(struct soap*, std::vector<ns2__TaxReplyItem *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__TaxReplyItem(struct soap*, const std::vector<ns2__TaxReplyItem *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__TaxReplyItem(struct soap*, const char*, int, const std::vector<ns2__TaxReplyItem *> *, const char*);
SOAP_FMAC3 std::vector<ns2__TaxReplyItem *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__TaxReplyItem(struct soap*, const char*, std::vector<ns2__TaxReplyItem *> *, const char*);
SOAP_FMAC1 std::vector<ns2__TaxReplyItem *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__TaxReplyItem(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__TaxReplyItem *>  * soap_new_std__vectorTemplateOfPointerTons2__TaxReplyItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__TaxReplyItem(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__TaxReplyItemJurisdiction_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__TaxReplyItemJurisdiction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__TaxReplyItemJurisdiction(struct soap*, std::vector<ns2__TaxReplyItemJurisdiction *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__TaxReplyItemJurisdiction(struct soap*, const std::vector<ns2__TaxReplyItemJurisdiction *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__TaxReplyItemJurisdiction(struct soap*, const char*, int, const std::vector<ns2__TaxReplyItemJurisdiction *> *, const char*);
SOAP_FMAC3 std::vector<ns2__TaxReplyItemJurisdiction *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__TaxReplyItemJurisdiction(struct soap*, const char*, std::vector<ns2__TaxReplyItemJurisdiction *> *, const char*);
SOAP_FMAC1 std::vector<ns2__TaxReplyItemJurisdiction *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__TaxReplyItemJurisdiction(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__TaxReplyItemJurisdiction *>  * soap_new_std__vectorTemplateOfPointerTons2__TaxReplyItemJurisdiction(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__TaxReplyItemJurisdiction(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__HealthCare_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__HealthCare_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__HealthCare(struct soap*, std::vector<ns2__HealthCare *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__HealthCare(struct soap*, const std::vector<ns2__HealthCare *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__HealthCare(struct soap*, const char*, int, const std::vector<ns2__HealthCare *> *, const char*);
SOAP_FMAC3 std::vector<ns2__HealthCare *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__HealthCare(struct soap*, const char*, std::vector<ns2__HealthCare *> *, const char*);
SOAP_FMAC1 std::vector<ns2__HealthCare *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__HealthCare(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__HealthCare *>  * soap_new_std__vectorTemplateOfPointerTons2__HealthCare(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__HealthCare(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__PromotionGroup_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__PromotionGroup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__PromotionGroup(struct soap*, std::vector<ns2__PromotionGroup *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__PromotionGroup(struct soap*, const std::vector<ns2__PromotionGroup *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__PromotionGroup(struct soap*, const char*, int, const std::vector<ns2__PromotionGroup *> *, const char*);
SOAP_FMAC3 std::vector<ns2__PromotionGroup *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__PromotionGroup(struct soap*, const char*, std::vector<ns2__PromotionGroup *> *, const char*);
SOAP_FMAC1 std::vector<ns2__PromotionGroup *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__PromotionGroup(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__PromotionGroup *>  * soap_new_std__vectorTemplateOfPointerTons2__PromotionGroup(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__PromotionGroup(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__RequestReserved_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__RequestReserved_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__RequestReserved(struct soap*, std::vector<ns2__RequestReserved *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__RequestReserved(struct soap*, const std::vector<ns2__RequestReserved *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__RequestReserved(struct soap*, const char*, int, const std::vector<ns2__RequestReserved *> *, const char*);
SOAP_FMAC3 std::vector<ns2__RequestReserved *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__RequestReserved(struct soap*, const char*, std::vector<ns2__RequestReserved *> *, const char*);
SOAP_FMAC1 std::vector<ns2__RequestReserved *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__RequestReserved(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__RequestReserved *>  * soap_new_std__vectorTemplateOfPointerTons2__RequestReserved(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__RequestReserved(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__DeviceFingerprintData_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__DeviceFingerprintData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__DeviceFingerprintData(struct soap*, std::vector<ns2__DeviceFingerprintData *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__DeviceFingerprintData(struct soap*, const std::vector<ns2__DeviceFingerprintData *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__DeviceFingerprintData(struct soap*, const char*, int, const std::vector<ns2__DeviceFingerprintData *> *, const char*);
SOAP_FMAC3 std::vector<ns2__DeviceFingerprintData *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__DeviceFingerprintData(struct soap*, const char*, std::vector<ns2__DeviceFingerprintData *> *, const char*);
SOAP_FMAC1 std::vector<ns2__DeviceFingerprintData *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__DeviceFingerprintData(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__DeviceFingerprintData *>  * soap_new_std__vectorTemplateOfPointerTons2__DeviceFingerprintData(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__DeviceFingerprintData(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Item_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Item_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Item(struct soap*, std::vector<ns2__Item *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Item(struct soap*, const std::vector<ns2__Item *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Item(struct soap*, const char*, int, const std::vector<ns2__Item *> *, const char*);
SOAP_FMAC3 std::vector<ns2__Item *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Item(struct soap*, const char*, std::vector<ns2__Item *> *, const char*);
SOAP_FMAC1 std::vector<ns2__Item *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Item(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Item *>  * soap_new_std__vectorTemplateOfPointerTons2__Item(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__Item(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap*, std::vector<char *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap*, const std::vector<char *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap*, const char*, int, const std::vector<char *> *, const char*);
SOAP_FMAC3 std::vector<char *> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap*, const char*, std::vector<char *> *, const char*);
SOAP_FMAC1 std::vector<char *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char *>  * soap_new_std__vectorTemplateOf_XML(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_XML(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__DecisionManagerTravelLeg_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__DecisionManagerTravelLeg_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__DecisionManagerTravelLeg(struct soap*, std::vector<ns2__DecisionManagerTravelLeg *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__DecisionManagerTravelLeg(struct soap*, const std::vector<ns2__DecisionManagerTravelLeg *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__DecisionManagerTravelLeg(struct soap*, const char*, int, const std::vector<ns2__DecisionManagerTravelLeg *> *, const char*);
SOAP_FMAC3 std::vector<ns2__DecisionManagerTravelLeg *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__DecisionManagerTravelLeg(struct soap*, const char*, std::vector<ns2__DecisionManagerTravelLeg *> *, const char*);
SOAP_FMAC1 std::vector<ns2__DecisionManagerTravelLeg *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__DecisionManagerTravelLeg(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__DecisionManagerTravelLeg *>  * soap_new_std__vectorTemplateOfPointerTons2__DecisionManagerTravelLeg(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__DecisionManagerTravelLeg(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Brands_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Brands_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Brands(struct soap*, std::vector<ns2__Brands *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Brands(struct soap*, const std::vector<ns2__Brands *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Brands(struct soap*, const char*, int, const std::vector<ns2__Brands *> *, const char*);
SOAP_FMAC3 std::vector<ns2__Brands *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Brands(struct soap*, const char*, std::vector<ns2__Brands *> *, const char*);
SOAP_FMAC1 std::vector<ns2__Brands *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Brands(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Brands *>  * soap_new_std__vectorTemplateOfPointerTons2__Brands(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__Brands(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
