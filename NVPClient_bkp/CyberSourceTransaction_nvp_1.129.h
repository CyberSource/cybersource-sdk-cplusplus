// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
#import "wsse.h"
/* CyberSourceTransaction_nvp_1.129.h
   Generated by wsdl2h 2.8.32 from CyberSourceTransaction_NVP_1.129.wsdl and typemap.dat
   2016-10-25 09:00:29 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on CyberSourceTransaction_nvp_1.129.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stl.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   urn:schemas-cybersource-com:transaction-data:TransactionProcessor        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "stl.h"	// enable STL containers when used (option -s removes STL dependency)

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "urn:schemas-cybersource-com:transaction-data:TransactionProcessor"
ns2 = "urn:schemas-cybersource-com:transaction-data-1.129"

*/

#define SOAP_NAMESPACE_OF_ns2	"urn:schemas-cybersource-com:transaction-data-1.129"
//gsoap ns2   schema namespace:	urn:schemas-cybersource-com:transaction-data-1.129
//gsoap ns2   schema elementForm:	qualified
//gsoap ns2   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Primitive built-in type "xs:integer".
typedef wchar_t* xsd__integer;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns2__Item.
class ns2__Item;

//  Forward declaration of class ns2__CCAuthService.
class ns2__CCAuthService;

//  Forward declaration of class ns2__OCTService.
class ns2__OCTService;

//  Forward declaration of class ns2__VerificationService.
class ns2__VerificationService;

//  Forward declaration of class ns2__CCSaleService.
class ns2__CCSaleService;

//  Forward declaration of class ns2__CCSaleCreditService.
class ns2__CCSaleCreditService;

//  Forward declaration of class ns2__CCSaleReversalService.
class ns2__CCSaleReversalService;

//  Forward declaration of class ns2__CCIncrementalAuthService.
class ns2__CCIncrementalAuthService;

//  Forward declaration of class ns2__CCCaptureService.
class ns2__CCCaptureService;

//  Forward declaration of class ns2__CCCreditService.
class ns2__CCCreditService;

//  Forward declaration of class ns2__CCAuthReversalService.
class ns2__CCAuthReversalService;

//  Forward declaration of class ns2__CCAutoAuthReversalService.
class ns2__CCAutoAuthReversalService;

//  Forward declaration of class ns2__CCDCCService.
class ns2__CCDCCService;

//  Forward declaration of class ns2__ServiceFeeCalculateService.
class ns2__ServiceFeeCalculateService;

//  Forward declaration of class ns2__ECDebitService.
class ns2__ECDebitService;

//  Forward declaration of class ns2__ECCreditService.
class ns2__ECCreditService;

//  Forward declaration of class ns2__ECAuthenticateService.
class ns2__ECAuthenticateService;

//  Forward declaration of class ns2__PayerAuthEnrollService.
class ns2__PayerAuthEnrollService;

//  Forward declaration of class ns2__PayerAuthValidateService.
class ns2__PayerAuthValidateService;

//  Forward declaration of class ns2__TaxService.
class ns2__TaxService;

//  Forward declaration of class ns2__DMEService.
class ns2__DMEService;

//  Forward declaration of class ns2__AFSService.
class ns2__AFSService;

//  Forward declaration of class ns2__DAVService.
class ns2__DAVService;

//  Forward declaration of class ns2__ExportService.
class ns2__ExportService;

//  Forward declaration of class ns2__FXRatesService.
class ns2__FXRatesService;

//  Forward declaration of class ns2__BankTransferService.
class ns2__BankTransferService;

//  Forward declaration of class ns2__BankTransferRefundService.
class ns2__BankTransferRefundService;

//  Forward declaration of class ns2__BankTransferRealTimeService.
class ns2__BankTransferRealTimeService;

//  Forward declaration of class ns2__DirectDebitMandateService.
class ns2__DirectDebitMandateService;

//  Forward declaration of class ns2__DirectDebitService.
class ns2__DirectDebitService;

//  Forward declaration of class ns2__DirectDebitRefundService.
class ns2__DirectDebitRefundService;

//  Forward declaration of class ns2__DirectDebitValidateService.
class ns2__DirectDebitValidateService;

//  Forward declaration of class ns2__PaySubscriptionCreateService.
class ns2__PaySubscriptionCreateService;

//  Forward declaration of class ns2__PaySubscriptionUpdateService.
class ns2__PaySubscriptionUpdateService;

//  Forward declaration of class ns2__PaySubscriptionEventUpdateService.
class ns2__PaySubscriptionEventUpdateService;

//  Forward declaration of class ns2__PaySubscriptionRetrieveService.
class ns2__PaySubscriptionRetrieveService;

//  Forward declaration of class ns2__PaySubscriptionDeleteService.
class ns2__PaySubscriptionDeleteService;

//  Forward declaration of class ns2__PayPalPaymentService.
class ns2__PayPalPaymentService;

//  Forward declaration of class ns2__PayPalCreditService.
class ns2__PayPalCreditService;

//  Forward declaration of class ns2__PayPalEcSetService.
class ns2__PayPalEcSetService;

//  Forward declaration of class ns2__PayPalEcGetDetailsService.
class ns2__PayPalEcGetDetailsService;

//  Forward declaration of class ns2__PayPalEcDoPaymentService.
class ns2__PayPalEcDoPaymentService;

//  Forward declaration of class ns2__PayPalDoCaptureService.
class ns2__PayPalDoCaptureService;

//  Forward declaration of class ns2__PayPalAuthReversalService.
class ns2__PayPalAuthReversalService;

//  Forward declaration of class ns2__PayPalRefundService.
class ns2__PayPalRefundService;

//  Forward declaration of class ns2__PayPalEcOrderSetupService.
class ns2__PayPalEcOrderSetupService;

//  Forward declaration of class ns2__PayPalAuthorizationService.
class ns2__PayPalAuthorizationService;

//  Forward declaration of class ns2__PayPalUpdateAgreementService.
class ns2__PayPalUpdateAgreementService;

//  Forward declaration of class ns2__PayPalCreateAgreementService.
class ns2__PayPalCreateAgreementService;

//  Forward declaration of class ns2__PayPalDoRefTransactionService.
class ns2__PayPalDoRefTransactionService;

//  Forward declaration of class ns2__VoidService.
class ns2__VoidService;

//  Forward declaration of class ns2__PinlessDebitService.
class ns2__PinlessDebitService;

//  Forward declaration of class ns2__PinlessDebitValidateService.
class ns2__PinlessDebitValidateService;

//  Forward declaration of class ns2__PinlessDebitReversalService.
class ns2__PinlessDebitReversalService;

//  Forward declaration of class ns2__PinDebitPurchaseService.
class ns2__PinDebitPurchaseService;

//  Forward declaration of class ns2__PinDebitCreditService.
class ns2__PinDebitCreditService;

//  Forward declaration of class ns2__PinDebitReversalService.
class ns2__PinDebitReversalService;

//  Forward declaration of class ns2__PayPalButtonCreateService.
class ns2__PayPalButtonCreateService;

//  Forward declaration of class ns2__PayPalPreapprovedPaymentService.
class ns2__PayPalPreapprovedPaymentService;

//  Forward declaration of class ns2__PayPalPreapprovedUpdateService.
class ns2__PayPalPreapprovedUpdateService;

//  Forward declaration of class ns2__ChinaPaymentService.
class ns2__ChinaPaymentService;

//  Forward declaration of class ns2__ChinaRefundService.
class ns2__ChinaRefundService;

//  Forward declaration of class ns2__BoletoPaymentService.
class ns2__BoletoPaymentService;

//  Forward declaration of class ns2__PersonalId.
class ns2__PersonalId;

//  Forward declaration of class ns2__Address.
class ns2__Address;

//  Forward declaration of class ns2__APInitiateService.
class ns2__APInitiateService;

//  Forward declaration of class ns2__APCheckStatusService.
class ns2__APCheckStatusService;

//  Forward declaration of class ns2__RiskUpdateService.
class ns2__RiskUpdateService;

//  Forward declaration of class ns2__FraudUpdateService.
class ns2__FraudUpdateService;

//  Forward declaration of class ns2__CaseManagementActionService.
class ns2__CaseManagementActionService;

//  Forward declaration of class ns2__EncryptPaymentDataService.
class ns2__EncryptPaymentDataService;

//  Forward declaration of class ns2__InvoiceHeader.
class ns2__InvoiceHeader;

//  Forward declaration of class ns2__BusinessRules.
class ns2__BusinessRules;

//  Forward declaration of class ns2__BillTo.
class ns2__BillTo;

//  Forward declaration of class ns2__ShipTo.
class ns2__ShipTo;

//  Forward declaration of class ns2__ShipFrom.
class ns2__ShipFrom;

//  Forward declaration of class ns2__Card.
class ns2__Card;

//  Forward declaration of class ns2__Check.
class ns2__Check;

//  Forward declaration of class ns2__BML.
class ns2__BML;

//  Forward declaration of class ns2__OtherTax.
class ns2__OtherTax;

//  Forward declaration of class ns2__Aft.
class ns2__Aft;

//  Forward declaration of class ns2__Wallet.
class ns2__Wallet;

//  Forward declaration of class ns2__PurchaseTotals.
class ns2__PurchaseTotals;

//  Forward declaration of class ns2__FundingTotals.
class ns2__FundingTotals;

//  Forward declaration of class ns2__GECC.
class ns2__GECC;

//  Forward declaration of class ns2__UCAF.
class ns2__UCAF;

//  Forward declaration of class ns2__FundTransfer.
class ns2__FundTransfer;

//  Forward declaration of class ns2__BankInfo.
class ns2__BankInfo;

//  Forward declaration of class ns2__RecurringSubscriptionInfo.
class ns2__RecurringSubscriptionInfo;

//  Forward declaration of class ns2__PaySubscriptionEvent.
class ns2__PaySubscriptionEvent;

//  Forward declaration of class ns2__Subscription.
class ns2__Subscription;

//  Forward declaration of class ns2__PaymentNetworkToken.
class ns2__PaymentNetworkToken;

//  Forward declaration of class ns2__DecisionManager.
class ns2__DecisionManager;

//  Forward declaration of class ns2__DecisionManagerTravelData.
class ns2__DecisionManagerTravelData;

//  Forward declaration of class ns2__DecisionManagerTravelLeg.
class ns2__DecisionManagerTravelLeg;

//  Forward declaration of class ns2__Batch.
class ns2__Batch;

//  Forward declaration of class ns2__PayPal.
class ns2__PayPal;

//  Forward declaration of class ns2__JPO.
class ns2__JPO;

//  Forward declaration of class ns2__Token.
class ns2__Token;

//  Forward declaration of class ns2__AP.
class ns2__AP;

//  Forward declaration of class ns2__APDevice.
class ns2__APDevice;

//  Forward declaration of class ns2__APAuthService.
class ns2__APAuthService;

//  Forward declaration of class ns2__APAuthReversalService.
class ns2__APAuthReversalService;

//  Forward declaration of class ns2__APCaptureService.
class ns2__APCaptureService;

//  Forward declaration of class ns2__APOptionsService.
class ns2__APOptionsService;

//  Forward declaration of class ns2__APRefundService.
class ns2__APRefundService;

//  Forward declaration of class ns2__APSaleService.
class ns2__APSaleService;

//  Forward declaration of class ns2__APCheckOutDetailsService.
class ns2__APCheckOutDetailsService;

//  Forward declaration of class ns2__APTransactionDetailsService.
class ns2__APTransactionDetailsService;

//  Forward declaration of class ns2__APConfirmPurchaseService.
class ns2__APConfirmPurchaseService;

//  Forward declaration of class ns2__PayPalGetTxnDetailsService.
class ns2__PayPalGetTxnDetailsService;

//  Forward declaration of class ns2__PayPalTransactionSearchService.
class ns2__PayPalTransactionSearchService;

//  Forward declaration of class ns2__Recipient.
class ns2__Recipient;

//  Forward declaration of class ns2__Sender.
class ns2__Sender;

//  Forward declaration of class ns2__RequestMessage.
class ns2__RequestMessage;

//  Forward declaration of class ns2__VC.
class ns2__VC;

//  Forward declaration of class ns2__DecryptVisaCheckoutDataService.
class ns2__DecryptVisaCheckoutDataService;

//  Forward declaration of class ns2__DCC.
class ns2__DCC;

//  Forward declaration of class ns2__Promotion.
class ns2__Promotion;

//  Forward declaration of class ns2__PromotionGroup.
class ns2__PromotionGroup;

//  Forward declaration of class ns2__PromotionGroupReply.
class ns2__PromotionGroupReply;

//  Forward declaration of class ns2__CCAuthReply.
class ns2__CCAuthReply;

//  Forward declaration of class ns2__OCTReply.
class ns2__OCTReply;

//  Forward declaration of class ns2__VerificationReply.
class ns2__VerificationReply;

//  Forward declaration of class ns2__CCSaleReply.
class ns2__CCSaleReply;

//  Forward declaration of class ns2__CCSaleCreditReply.
class ns2__CCSaleCreditReply;

//  Forward declaration of class ns2__CCSaleReversalReply.
class ns2__CCSaleReversalReply;

//  Forward declaration of class ns2__CCIncrementalAuthReply.
class ns2__CCIncrementalAuthReply;

//  Forward declaration of class ns2__CCCaptureReply.
class ns2__CCCaptureReply;

//  Forward declaration of class ns2__ServiceFeeCalculateReply.
class ns2__ServiceFeeCalculateReply;

//  Forward declaration of class ns2__CCCreditReply.
class ns2__CCCreditReply;

//  Forward declaration of class ns2__PinDebitPurchaseReply.
class ns2__PinDebitPurchaseReply;

//  Forward declaration of class ns2__PinDebitCreditReply.
class ns2__PinDebitCreditReply;

//  Forward declaration of class ns2__PinDebitReversalReply.
class ns2__PinDebitReversalReply;

//  Forward declaration of class ns2__CCAuthReversalReply.
class ns2__CCAuthReversalReply;

//  Forward declaration of class ns2__CCAutoAuthReversalReply.
class ns2__CCAutoAuthReversalReply;

//  Forward declaration of class ns2__ECDebitReply.
class ns2__ECDebitReply;

//  Forward declaration of class ns2__ECCreditReply.
class ns2__ECCreditReply;

//  Forward declaration of class ns2__ECAuthenticateReply.
class ns2__ECAuthenticateReply;

//  Forward declaration of class ns2__PayerAuthEnrollReply.
class ns2__PayerAuthEnrollReply;

//  Forward declaration of class ns2__PayerAuthValidateReply.
class ns2__PayerAuthValidateReply;

//  Forward declaration of class ns2__TaxReplyItem.
class ns2__TaxReplyItem;

//  Forward declaration of class ns2__TaxReply.
class ns2__TaxReply;

//  Forward declaration of class ns2__DeviceFingerprint.
class ns2__DeviceFingerprint;

//  Forward declaration of class ns2__AFSReply.
class ns2__AFSReply;

//  Forward declaration of class ns2__DAVReply.
class ns2__DAVReply;

//  Forward declaration of class ns2__DeniedPartiesMatch.
class ns2__DeniedPartiesMatch;

//  Forward declaration of class ns2__ExportReply.
class ns2__ExportReply;

//  Forward declaration of class ns2__FXQuote.
class ns2__FXQuote;

//  Forward declaration of class ns2__FXRatesReply.
class ns2__FXRatesReply;

//  Forward declaration of class ns2__BankTransferReply.
class ns2__BankTransferReply;

//  Forward declaration of class ns2__BankTransferRealTimeReply.
class ns2__BankTransferRealTimeReply;

//  Forward declaration of class ns2__DirectDebitMandateReply.
class ns2__DirectDebitMandateReply;

//  Forward declaration of class ns2__BankTransferRefundReply.
class ns2__BankTransferRefundReply;

//  Forward declaration of class ns2__DirectDebitReply.
class ns2__DirectDebitReply;

//  Forward declaration of class ns2__DirectDebitValidateReply.
class ns2__DirectDebitValidateReply;

//  Forward declaration of class ns2__DirectDebitRefundReply.
class ns2__DirectDebitRefundReply;

//  Forward declaration of class ns2__PaySubscriptionCreateReply.
class ns2__PaySubscriptionCreateReply;

//  Forward declaration of class ns2__PaySubscriptionUpdateReply.
class ns2__PaySubscriptionUpdateReply;

//  Forward declaration of class ns2__PaySubscriptionEventUpdateReply.
class ns2__PaySubscriptionEventUpdateReply;

//  Forward declaration of class ns2__PaySubscriptionRetrieveReply.
class ns2__PaySubscriptionRetrieveReply;

//  Forward declaration of class ns2__PaySubscriptionDeleteReply.
class ns2__PaySubscriptionDeleteReply;

//  Forward declaration of class ns2__PayPalPaymentReply.
class ns2__PayPalPaymentReply;

//  Forward declaration of class ns2__PayPalCreditReply.
class ns2__PayPalCreditReply;

//  Forward declaration of class ns2__VoidReply.
class ns2__VoidReply;

//  Forward declaration of class ns2__PinlessDebitReply.
class ns2__PinlessDebitReply;

//  Forward declaration of class ns2__PinlessDebitValidateReply.
class ns2__PinlessDebitValidateReply;

//  Forward declaration of class ns2__PinlessDebitReversalReply.
class ns2__PinlessDebitReversalReply;

//  Forward declaration of class ns2__PayPalButtonCreateReply.
class ns2__PayPalButtonCreateReply;

//  Forward declaration of class ns2__PayPalPreapprovedPaymentReply.
class ns2__PayPalPreapprovedPaymentReply;

//  Forward declaration of class ns2__PayPalPreapprovedUpdateReply.
class ns2__PayPalPreapprovedUpdateReply;

//  Forward declaration of class ns2__PayPalEcSetReply.
class ns2__PayPalEcSetReply;

//  Forward declaration of class ns2__PayPalEcGetDetailsReply.
class ns2__PayPalEcGetDetailsReply;

//  Forward declaration of class ns2__PayPalEcDoPaymentReply.
class ns2__PayPalEcDoPaymentReply;

//  Forward declaration of class ns2__PayPalDoCaptureReply.
class ns2__PayPalDoCaptureReply;

//  Forward declaration of class ns2__PayPalAuthReversalReply.
class ns2__PayPalAuthReversalReply;

//  Forward declaration of class ns2__PayPalRefundReply.
class ns2__PayPalRefundReply;

//  Forward declaration of class ns2__PayPalEcOrderSetupReply.
class ns2__PayPalEcOrderSetupReply;

//  Forward declaration of class ns2__PayPalAuthorizationReply.
class ns2__PayPalAuthorizationReply;

//  Forward declaration of class ns2__PayPalUpdateAgreementReply.
class ns2__PayPalUpdateAgreementReply;

//  Forward declaration of class ns2__PayPalCreateAgreementReply.
class ns2__PayPalCreateAgreementReply;

//  Forward declaration of class ns2__PayPalDoRefTransactionReply.
class ns2__PayPalDoRefTransactionReply;

//  Forward declaration of class ns2__RiskUpdateReply.
class ns2__RiskUpdateReply;

//  Forward declaration of class ns2__FraudUpdateReply.
class ns2__FraudUpdateReply;

//  Forward declaration of class ns2__CaseManagementActionReply.
class ns2__CaseManagementActionReply;

//  Forward declaration of class ns2__RuleResultItem.
class ns2__RuleResultItem;

//  Forward declaration of class ns2__RuleResultItems.
class ns2__RuleResultItems;

//  Forward declaration of class ns2__DecisionReply.
class ns2__DecisionReply;

//  Forward declaration of class ns2__AdditionalFields.
class ns2__AdditionalFields;

//  Forward declaration of class ns2__Field.
class ns2__Field;

//  Forward declaration of class ns2__DMEReply.
class ns2__DMEReply;

//  Forward declaration of class ns2__ProfileReply.
class ns2__ProfileReply;

//  Forward declaration of class ns2__CCDCCReply.
class ns2__CCDCCReply;

//  Forward declaration of class ns2__CCDCCUpdateReply.
class ns2__CCDCCUpdateReply;

//  Forward declaration of class ns2__ChinaPaymentReply.
class ns2__ChinaPaymentReply;

//  Forward declaration of class ns2__ChinaRefundReply.
class ns2__ChinaRefundReply;

//  Forward declaration of class ns2__BoletoPaymentReply.
class ns2__BoletoPaymentReply;

//  Forward declaration of class ns2__APInitiateReply.
class ns2__APInitiateReply;

//  Forward declaration of class ns2__APCheckStatusReply.
class ns2__APCheckStatusReply;

//  Forward declaration of class ns2__APReply.
class ns2__APReply;

//  Forward declaration of class ns2__APAuthReply.
class ns2__APAuthReply;

//  Forward declaration of class ns2__APAuthReversalReply.
class ns2__APAuthReversalReply;

//  Forward declaration of class ns2__APCaptureReply.
class ns2__APCaptureReply;

//  Forward declaration of class ns2__APOptionsReply.
class ns2__APOptionsReply;

//  Forward declaration of class ns2__APOptionsOption.
class ns2__APOptionsOption;

//  Forward declaration of class ns2__APRefundReply.
class ns2__APRefundReply;

//  Forward declaration of class ns2__APSaleReply.
class ns2__APSaleReply;

//  Forward declaration of class ns2__APCheckOutDetailsReply.
class ns2__APCheckOutDetailsReply;

//  Forward declaration of class ns2__APTransactionDetailsReply.
class ns2__APTransactionDetailsReply;

//  Forward declaration of class ns2__APConfirmPurchaseReply.
class ns2__APConfirmPurchaseReply;

//  Forward declaration of class ns2__ReplyMessage.
class ns2__ReplyMessage;

//  Forward declaration of class ns2__FaultDetails.
class ns2__FaultDetails;

//  Forward declaration of class ns2__AirlineData.
class ns2__AirlineData;

//  Forward declaration of class ns2__Leg.
class ns2__Leg;

//  Forward declaration of class ns2__AncillaryData.
class ns2__AncillaryData;

//  Forward declaration of class ns2__Service.
class ns2__Service;

//  Forward declaration of class ns2__LodgingData.
class ns2__LodgingData;

//  Forward declaration of class ns2__Pos.
class ns2__Pos;

//  Forward declaration of class ns2__EncryptedPayment.
class ns2__EncryptedPayment;

//  Forward declaration of class ns2__Installment.
class ns2__Installment;

//  Forward declaration of class ns2__MDDField.
class ns2__MDDField;

//  Forward declaration of class ns2__MerchantDefinedData.
class ns2__MerchantDefinedData;

//  Forward declaration of class ns2__MerchantSecureData.
class ns2__MerchantSecureData;

//  Forward declaration of class ns2__ReplyReserved.
class ns2__ReplyReserved;

//  Forward declaration of class ns2__RequestReserved.
class ns2__RequestReserved;

//  Forward declaration of class ns2__PayPalGetTxnDetailsReply.
class ns2__PayPalGetTxnDetailsReply;

//  Forward declaration of class ns2__PayPalTransactionSearchReply.
class ns2__PayPalTransactionSearchReply;

//  Forward declaration of class ns2__PaypalTransaction.
class ns2__PaypalTransaction;

//  Forward declaration of class ns2__CCDCCUpdateService.
class ns2__CCDCCUpdateService;

//  Forward declaration of class ns2__ServiceFee.
class ns2__ServiceFee;

//  Forward declaration of class ns2__EmvRequest.
class ns2__EmvRequest;

//  Forward declaration of class ns2__EmvReply.
class ns2__EmvReply;

//  Forward declaration of class ns2__OriginalTransaction.
class ns2__OriginalTransaction;

//  Forward declaration of class ns2__HostedDataCreateService.
class ns2__HostedDataCreateService;

//  Forward declaration of class ns2__HostedDataRetrieveService.
class ns2__HostedDataRetrieveService;

//  Forward declaration of class ns2__HostedDataCreateReply.
class ns2__HostedDataCreateReply;

//  Forward declaration of class ns2__HostedDataRetrieveReply.
class ns2__HostedDataRetrieveReply;

//  Forward declaration of class ns2__AutoRentalData.
class ns2__AutoRentalData;

//  Forward declaration of class ns2__VCReply.
class ns2__VCReply;

//  Forward declaration of class ns2__VCCardArt.
class ns2__VCCardArt;

//  Forward declaration of class ns2__VCCustomData.
class ns2__VCCustomData;

//  Forward declaration of class ns2__DecryptVisaCheckoutDataReply.
class ns2__DecryptVisaCheckoutDataReply;

//  Forward declaration of class ns2__EncryptPaymentDataReply.
class ns2__EncryptPaymentDataReply;

//  Forward declaration of class ns2__BinLookupService.
class ns2__BinLookupService;

//  Forward declaration of class ns2__BinLookupReply.
class ns2__BinLookupReply;

//  Forward declaration of class ns2__issuer.
class ns2__issuer;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:schemas-cybersource-com:transaction-data-1.129                       *
 *                                                                            *
\******************************************************************************/

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":amount is a simpleType restriction of XSD type xs:string.
///
typedef wchar_t* ns2__amount;

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":boolean is a simpleType restriction of XSD type xs:string.
///
typedef wchar_t* ns2__boolean;

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":dateTime is a simpleType restriction of XSD type xs:string.
///
typedef wchar_t* ns2__dateTime;


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:schemas-cybersource-com:transaction-data-1.129                       *
 *                                                                            *
\******************************************************************************/

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":Item is a complexType.
///
/// class ns2__Item operations:
/// - ns2__Item* soap_new_ns2__Item(soap*) allocate
/// - ns2__Item* soap_new_ns2__Item(soap*, int num) allocate array
/// - ns2__Item* soap_new_req_ns2__Item(soap*, ...) allocate, set required members
/// - ns2__Item* soap_new_set_ns2__Item(soap*, ...) allocate, set all public members
/// - ns2__Item::soap_default(soap*) reset members to default
/// - int soap_read_ns2__Item(soap*, ns2__Item*) deserialize from a stream
/// - int soap_write_ns2__Item(soap*, ns2__Item*) serialize to a stream
/// - ns2__Item* ns2__Item::soap_dup(soap*) returns deep copy of ns2__Item, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__Item::soap_del() deep deletes ns2__Item data members, use only after ns2__Item::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__Item
{ public:
/// Element "unitPrice" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         unitPrice                      0;	///< Optional element.
/// Element "quantity" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         quantity                       0;	///< Optional element.
/// Element "productCode" of XSD type xs:string.
    wchar_t*                             productCode                    0;	///< Optional element.
/// Element "productName" of XSD type xs:string.
    wchar_t*                             productName                    0;	///< Optional element.
/// Element "productSKU" of XSD type xs:string.
    wchar_t*                             productSKU                     0;	///< Optional element.
/// Element "productRisk" of XSD type xs:string.
    wchar_t*                             productRisk                    0;	///< Optional element.
/// Element "taxAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         taxAmount                      0;	///< Optional element.
/// Element "cityOverrideAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         cityOverrideAmount             0;	///< Optional element.
/// Element "cityOverrideRate" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         cityOverrideRate               0;	///< Optional element.
/// Element "countyOverrideAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         countyOverrideAmount           0;	///< Optional element.
/// Element "countyOverrideRate" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         countyOverrideRate             0;	///< Optional element.
/// Element "districtOverrideAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         districtOverrideAmount         0;	///< Optional element.
/// Element "districtOverrideRate" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         districtOverrideRate           0;	///< Optional element.
/// Element "stateOverrideAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         stateOverrideAmount            0;	///< Optional element.
/// Element "stateOverrideRate" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         stateOverrideRate              0;	///< Optional element.
/// Element "countryOverrideAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         countryOverrideAmount          0;	///< Optional element.
/// Element "countryOverrideRate" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         countryOverrideRate            0;	///< Optional element.
/// Element "orderAcceptanceCity" of XSD type xs:string.
    wchar_t*                             orderAcceptanceCity            0;	///< Optional element.
/// Element "orderAcceptanceCounty" of XSD type xs:string.
    wchar_t*                             orderAcceptanceCounty          0;	///< Optional element.
/// Element "orderAcceptanceCountry" of XSD type xs:string.
    wchar_t*                             orderAcceptanceCountry         0;	///< Optional element.
/// Element "orderAcceptanceState" of XSD type xs:string.
    wchar_t*                             orderAcceptanceState           0;	///< Optional element.
/// Element "orderAcceptancePostalCode" of XSD type xs:string.
    wchar_t*                             orderAcceptancePostalCode      0;	///< Optional element.
/// Element "orderOriginCity" of XSD type xs:string.
    wchar_t*                             orderOriginCity                0;	///< Optional element.
/// Element "orderOriginCounty" of XSD type xs:string.
    wchar_t*                             orderOriginCounty              0;	///< Optional element.
/// Element "orderOriginCountry" of XSD type xs:string.
    wchar_t*                             orderOriginCountry             0;	///< Optional element.
/// Element "orderOriginState" of XSD type xs:string.
    wchar_t*                             orderOriginState               0;	///< Optional element.
/// Element "orderOriginPostalCode" of XSD type xs:string.
    wchar_t*                             orderOriginPostalCode          0;	///< Optional element.
/// Element "shipFromCity" of XSD type xs:string.
    wchar_t*                             shipFromCity                   0;	///< Optional element.
/// Element "shipFromCounty" of XSD type xs:string.
    wchar_t*                             shipFromCounty                 0;	///< Optional element.
/// Element "shipFromCountry" of XSD type xs:string.
    wchar_t*                             shipFromCountry                0;	///< Optional element.
/// Element "shipFromState" of XSD type xs:string.
    wchar_t*                             shipFromState                  0;	///< Optional element.
/// Element "shipFromPostalCode" of XSD type xs:string.
    wchar_t*                             shipFromPostalCode             0;	///< Optional element.
/// Element "export" of XSD type xs:string.
    wchar_t*                             export_                        0;	///< Optional element.
/// Element "noExport" of XSD type xs:string.
    wchar_t*                             noExport                       0;	///< Optional element.
/// Element "nationalTax" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         nationalTax                    0;	///< Optional element.
/// Element "vatRate" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         vatRate                        0;	///< Optional element.
/// Element "sellerRegistration" of XSD type xs:string.
    wchar_t*                             sellerRegistration             0;	///< Optional element.
/// Element "sellerRegistration0" of XSD type xs:string.
    wchar_t*                             sellerRegistration0            0;	///< Optional element.
/// Element "sellerRegistration1" of XSD type xs:string.
    wchar_t*                             sellerRegistration1            0;	///< Optional element.
/// Element "sellerRegistration2" of XSD type xs:string.
    wchar_t*                             sellerRegistration2            0;	///< Optional element.
/// Element "sellerRegistration3" of XSD type xs:string.
    wchar_t*                             sellerRegistration3            0;	///< Optional element.
/// Element "sellerRegistration4" of XSD type xs:string.
    wchar_t*                             sellerRegistration4            0;	///< Optional element.
/// Element "sellerRegistration5" of XSD type xs:string.
    wchar_t*                             sellerRegistration5            0;	///< Optional element.
/// Element "sellerRegistration6" of XSD type xs:string.
    wchar_t*                             sellerRegistration6            0;	///< Optional element.
/// Element "sellerRegistration7" of XSD type xs:string.
    wchar_t*                             sellerRegistration7            0;	///< Optional element.
/// Element "sellerRegistration8" of XSD type xs:string.
    wchar_t*                             sellerRegistration8            0;	///< Optional element.
/// Element "sellerRegistration9" of XSD type xs:string.
    wchar_t*                             sellerRegistration9            0;	///< Optional element.
/// Element "buyerRegistration" of XSD type xs:string.
    wchar_t*                             buyerRegistration              0;	///< Optional element.
/// Element "middlemanRegistration" of XSD type xs:string.
    wchar_t*                             middlemanRegistration          0;	///< Optional element.
/// Element "pointOfTitleTransfer" of XSD type xs:string.
    wchar_t*                             pointOfTitleTransfer           0;	///< Optional element.
/// Element "giftCategory" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        giftCategory                   0;	///< Optional element.
/// Element "timeCategory" of XSD type xs:string.
    wchar_t*                             timeCategory                   0;	///< Optional element.
/// Element "hostHedge" of XSD type xs:string.
    wchar_t*                             hostHedge                      0;	///< Optional element.
/// Element "timeHedge" of XSD type xs:string.
    wchar_t*                             timeHedge                      0;	///< Optional element.
/// Element "velocityHedge" of XSD type xs:string.
    wchar_t*                             velocityHedge                  0;	///< Optional element.
/// Element "nonsensicalHedge" of XSD type xs:string.
    wchar_t*                             nonsensicalHedge               0;	///< Optional element.
/// Element "phoneHedge" of XSD type xs:string.
    wchar_t*                             phoneHedge                     0;	///< Optional element.
/// Element "obscenitiesHedge" of XSD type xs:string.
    wchar_t*                             obscenitiesHedge               0;	///< Optional element.
/// Element "unitOfMeasure" of XSD type xs:string.
    wchar_t*                             unitOfMeasure                  0;	///< Optional element.
/// Element "taxRate" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         taxRate                        0;	///< Optional element.
/// Element "totalAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         totalAmount                    0;	///< Optional element.
/// Element "discountAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         discountAmount                 0;	///< Optional element.
/// Element "discountRate" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         discountRate                   0;	///< Optional element.
/// Element "commodityCode" of XSD type xs:string.
    wchar_t*                             commodityCode                  0;	///< Optional element.
/// Element "grossNetIndicator" of XSD type xs:string.
    wchar_t*                             grossNetIndicator              0;	///< Optional element.
/// Element "taxTypeApplied" of XSD type xs:string.
    wchar_t*                             taxTypeApplied                 0;	///< Optional element.
/// Element "discountIndicator" of XSD type xs:string.
    wchar_t*                             discountIndicator              0;	///< Optional element.
/// Element "alternateTaxID" of XSD type xs:string.
    wchar_t*                             alternateTaxID                 0;	///< Optional element.
/// Element "alternateTaxAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         alternateTaxAmount             0;	///< Optional element.
/// Element "alternateTaxTypeApplied" of XSD type xs:string.
    wchar_t*                             alternateTaxTypeApplied        0;	///< Optional element.
/// Element "alternateTaxRate" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         alternateTaxRate               0;	///< Optional element.
/// Element "alternateTaxType" of XSD type xs:string.
    wchar_t*                             alternateTaxType               0;	///< Optional element.
/// Element "localTax" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         localTax                       0;	///< Optional element.
/// Element "zeroCostToCustomerIndicator" of XSD type xs:string.
    wchar_t*                             zeroCostToCustomerIndicator    0;	///< Optional element.
/// Element "passengerFirstName" of XSD type xs:string.
    wchar_t*                             passengerFirstName             0;	///< Optional element.
/// Element "passengerLastName" of XSD type xs:string.
    wchar_t*                             passengerLastName              0;	///< Optional element.
/// Element "passengerID" of XSD type xs:string.
    wchar_t*                             passengerID                    0;	///< Optional element.
/// Element "passengerStatus" of XSD type xs:string.
    wchar_t*                             passengerStatus                0;	///< Optional element.
/// Element "passengerType" of XSD type xs:string.
    wchar_t*                             passengerType                  0;	///< Optional element.
/// Element "passengerEmail" of XSD type xs:string.
    wchar_t*                             passengerEmail                 0;	///< Optional element.
/// Element "passengerPhone" of XSD type xs:string.
    wchar_t*                             passengerPhone                 0;	///< Optional element.
/// Element "invoiceNumber" of XSD type xs:string.
    wchar_t*                             invoiceNumber                  0;	///< Optional element.
/// Element "productDescription" of XSD type xs:string.
    wchar_t*                             productDescription             0;	///< Optional element.
/// Element "taxStatusIndicator" of XSD type xs:string.
    wchar_t*                             taxStatusIndicator             0;	///< Optional element.
/// Element "discountManagementIndicator" of XSD type xs:string.
    wchar_t*                             discountManagementIndicator    0;	///< Optional element.
/// Element "typeOfSupply" of XSD type xs:string.
    wchar_t*                             typeOfSupply                   0;	///< Optional element.
/// Element "sign" of XSD type xs:string.
    wchar_t*                             sign                           0;	///< Optional element.
/// Attribute "id" of XSD type xs:integer.
   @xsd__integer*                        id                             0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCAuthService is a complexType.
///
/// class ns2__CCAuthService operations:
/// - ns2__CCAuthService* soap_new_ns2__CCAuthService(soap*) allocate
/// - ns2__CCAuthService* soap_new_ns2__CCAuthService(soap*, int num) allocate array
/// - ns2__CCAuthService* soap_new_req_ns2__CCAuthService(soap*, ...) allocate, set required members
/// - ns2__CCAuthService* soap_new_set_ns2__CCAuthService(soap*, ...) allocate, set all public members
/// - ns2__CCAuthService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCAuthService(soap*, ns2__CCAuthService*) deserialize from a stream
/// - int soap_write_ns2__CCAuthService(soap*, ns2__CCAuthService*) serialize to a stream
/// - ns2__CCAuthService* ns2__CCAuthService::soap_dup(soap*) returns deep copy of ns2__CCAuthService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCAuthService::soap_del() deep deletes ns2__CCAuthService data members, use only after ns2__CCAuthService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCAuthService
{ public:
/// Element "cavv" of XSD type xs:string.
    wchar_t*                             cavv                           0;	///< Optional element.
/// Element "cavvAlgorithm" of XSD type xs:string.
    wchar_t*                             cavvAlgorithm                  0;	///< Optional element.
/// Element "commerceIndicator" of XSD type xs:string.
    wchar_t*                             commerceIndicator              0;	///< Optional element.
/// Element "eciRaw" of XSD type xs:string.
    wchar_t*                             eciRaw                         0;	///< Optional element.
/// Element "xid" of XSD type xs:string.
    wchar_t*                             xid                            0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "avsLevel" of XSD type xs:string.
    wchar_t*                             avsLevel                       0;	///< Optional element.
/// Element "fxQuoteID" of XSD type xs:string.
    wchar_t*                             fxQuoteID                      0;	///< Optional element.
/// Element "returnAuthRecord" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        returnAuthRecord               0;	///< Optional element.
/// Element "authType" of XSD type xs:string.
    wchar_t*                             authType                       0;	///< Optional element.
/// Element "verbalAuthCode" of XSD type xs:string.
    wchar_t*                             verbalAuthCode                 0;	///< Optional element.
/// Element "billPayment" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        billPayment                    0;	///< Optional element.
/// Element "authenticationXID" of XSD type xs:string.
    wchar_t*                             authenticationXID              0;	///< Optional element.
/// Element "authorizationXID" of XSD type xs:string.
    wchar_t*                             authorizationXID               0;	///< Optional element.
/// Element "industryDatatype" of XSD type xs:string.
    wchar_t*                             industryDatatype               0;	///< Optional element.
/// Element "traceNumber" of XSD type xs:string.
    wchar_t*                             traceNumber                    0;	///< Optional element.
/// Element "checksumKey" of XSD type xs:string.
    wchar_t*                             checksumKey                    0;	///< Optional element.
/// Element "aggregatorID" of XSD type xs:string.
    wchar_t*                             aggregatorID                   0;	///< Optional element.
/// Element "aggregatorName" of XSD type xs:string.
    wchar_t*                             aggregatorName                 0;	///< Optional element.
/// Element "splitTenderIndicator" of XSD type xs:string.
    wchar_t*                             splitTenderIndicator           0;	///< Optional element.
/// Element "veresEnrolled" of XSD type xs:string.
    wchar_t*                             veresEnrolled                  0;	///< Optional element.
/// Element "paresStatus" of XSD type xs:string.
    wchar_t*                             paresStatus                    0;	///< Optional element.
/// Element "partialAuthIndicator" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        partialAuthIndicator           0;	///< Optional element.
/// Element "captureDate" of XSD type xs:string.
    wchar_t*                             captureDate                    0;	///< Optional element.
/// Element "firstRecurringPayment" of XSD type xs:string.
    wchar_t*                             firstRecurringPayment          0;	///< Optional element.
/// Element "duration" of XSD type xs:integer.
    xsd__integer*                        duration                       0;	///< Optional element.
/// Element "overridePaymentMethod" of XSD type xs:string.
    wchar_t*                             overridePaymentMethod          0;	///< Optional element.
/// Element "mobileRemotePaymentType" of XSD type xs:string.
    wchar_t*                             mobileRemotePaymentType        0;	///< Optional element.
/// Element "cardholderVerificationMethod" of XSD type xs:string.
    wchar_t*                             cardholderVerificationMethod   0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":OCTService is a complexType.
///
/// class ns2__OCTService operations:
/// - ns2__OCTService* soap_new_ns2__OCTService(soap*) allocate
/// - ns2__OCTService* soap_new_ns2__OCTService(soap*, int num) allocate array
/// - ns2__OCTService* soap_new_req_ns2__OCTService(soap*, ...) allocate, set required members
/// - ns2__OCTService* soap_new_set_ns2__OCTService(soap*, ...) allocate, set all public members
/// - ns2__OCTService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__OCTService(soap*, ns2__OCTService*) deserialize from a stream
/// - int soap_write_ns2__OCTService(soap*, ns2__OCTService*) serialize to a stream
/// - ns2__OCTService* ns2__OCTService::soap_dup(soap*) returns deep copy of ns2__OCTService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__OCTService::soap_del() deep deletes ns2__OCTService data members, use only after ns2__OCTService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__OCTService
{ public:
/// Element "commerceIndicator" of XSD type xs:string.
    wchar_t*                             commerceIndicator              0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "networkOrder" of XSD type xs:string.
    wchar_t*                             networkOrder                   0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":VerificationService is a complexType.
///
/// class ns2__VerificationService operations:
/// - ns2__VerificationService* soap_new_ns2__VerificationService(soap*) allocate
/// - ns2__VerificationService* soap_new_ns2__VerificationService(soap*, int num) allocate array
/// - ns2__VerificationService* soap_new_req_ns2__VerificationService(soap*, ...) allocate, set required members
/// - ns2__VerificationService* soap_new_set_ns2__VerificationService(soap*, ...) allocate, set all public members
/// - ns2__VerificationService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__VerificationService(soap*, ns2__VerificationService*) deserialize from a stream
/// - int soap_write_ns2__VerificationService(soap*, ns2__VerificationService*) serialize to a stream
/// - ns2__VerificationService* ns2__VerificationService::soap_dup(soap*) returns deep copy of ns2__VerificationService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VerificationService::soap_del() deep deletes ns2__VerificationService data members, use only after ns2__VerificationService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VerificationService
{ public:
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCSaleService is a complexType.
///
/// class ns2__CCSaleService operations:
/// - ns2__CCSaleService* soap_new_ns2__CCSaleService(soap*) allocate
/// - ns2__CCSaleService* soap_new_ns2__CCSaleService(soap*, int num) allocate array
/// - ns2__CCSaleService* soap_new_req_ns2__CCSaleService(soap*, ...) allocate, set required members
/// - ns2__CCSaleService* soap_new_set_ns2__CCSaleService(soap*, ...) allocate, set all public members
/// - ns2__CCSaleService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCSaleService(soap*, ns2__CCSaleService*) deserialize from a stream
/// - int soap_write_ns2__CCSaleService(soap*, ns2__CCSaleService*) serialize to a stream
/// - ns2__CCSaleService* ns2__CCSaleService::soap_dup(soap*) returns deep copy of ns2__CCSaleService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCSaleService::soap_del() deep deletes ns2__CCSaleService data members, use only after ns2__CCSaleService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCSaleService
{ public:
/// Element "overridePaymentMethod" of XSD type xs:string.
    wchar_t*                             overridePaymentMethod          0;	///< Optional element.
/// Element "commerceIndicator" of XSD type xs:string.
    wchar_t*                             commerceIndicator              0;	///< Optional element.
/// Element "partialAuthIndicator" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        partialAuthIndicator           0;	///< Optional element.
/// Element "cavv" of XSD type xs:string.
    wchar_t*                             cavv                           0;	///< Optional element.
/// Element "xid" of XSD type xs:string.
    wchar_t*                             xid                            0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "industryDatatype" of XSD type xs:string.
    wchar_t*                             industryDatatype               0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCSaleCreditService is a complexType.
///
/// class ns2__CCSaleCreditService operations:
/// - ns2__CCSaleCreditService* soap_new_ns2__CCSaleCreditService(soap*) allocate
/// - ns2__CCSaleCreditService* soap_new_ns2__CCSaleCreditService(soap*, int num) allocate array
/// - ns2__CCSaleCreditService* soap_new_req_ns2__CCSaleCreditService(soap*, ...) allocate, set required members
/// - ns2__CCSaleCreditService* soap_new_set_ns2__CCSaleCreditService(soap*, ...) allocate, set all public members
/// - ns2__CCSaleCreditService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCSaleCreditService(soap*, ns2__CCSaleCreditService*) deserialize from a stream
/// - int soap_write_ns2__CCSaleCreditService(soap*, ns2__CCSaleCreditService*) serialize to a stream
/// - ns2__CCSaleCreditService* ns2__CCSaleCreditService::soap_dup(soap*) returns deep copy of ns2__CCSaleCreditService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCSaleCreditService::soap_del() deep deletes ns2__CCSaleCreditService data members, use only after ns2__CCSaleCreditService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCSaleCreditService
{ public:
/// Element "overridePaymentMethod" of XSD type xs:string.
    wchar_t*                             overridePaymentMethod          0;	///< Optional element.
/// Element "commerceIndicator" of XSD type xs:string.
    wchar_t*                             commerceIndicator              0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "refundReason" of XSD type xs:string.
    wchar_t*                             refundReason                   0;	///< Optional element.
/// Element "saleRequestID" of XSD type xs:string.
    wchar_t*                             saleRequestID                  0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCSaleReversalService is a complexType.
///
/// class ns2__CCSaleReversalService operations:
/// - ns2__CCSaleReversalService* soap_new_ns2__CCSaleReversalService(soap*) allocate
/// - ns2__CCSaleReversalService* soap_new_ns2__CCSaleReversalService(soap*, int num) allocate array
/// - ns2__CCSaleReversalService* soap_new_req_ns2__CCSaleReversalService(soap*, ...) allocate, set required members
/// - ns2__CCSaleReversalService* soap_new_set_ns2__CCSaleReversalService(soap*, ...) allocate, set all public members
/// - ns2__CCSaleReversalService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCSaleReversalService(soap*, ns2__CCSaleReversalService*) deserialize from a stream
/// - int soap_write_ns2__CCSaleReversalService(soap*, ns2__CCSaleReversalService*) serialize to a stream
/// - ns2__CCSaleReversalService* ns2__CCSaleReversalService::soap_dup(soap*) returns deep copy of ns2__CCSaleReversalService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCSaleReversalService::soap_del() deep deletes ns2__CCSaleReversalService data members, use only after ns2__CCSaleReversalService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCSaleReversalService
{ public:
/// Element "saleRequestID" of XSD type xs:string.
    wchar_t*                             saleRequestID                  0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCIncrementalAuthService is a complexType.
///
/// class ns2__CCIncrementalAuthService operations:
/// - ns2__CCIncrementalAuthService* soap_new_ns2__CCIncrementalAuthService(soap*) allocate
/// - ns2__CCIncrementalAuthService* soap_new_ns2__CCIncrementalAuthService(soap*, int num) allocate array
/// - ns2__CCIncrementalAuthService* soap_new_req_ns2__CCIncrementalAuthService(soap*, ...) allocate, set required members
/// - ns2__CCIncrementalAuthService* soap_new_set_ns2__CCIncrementalAuthService(soap*, ...) allocate, set all public members
/// - ns2__CCIncrementalAuthService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCIncrementalAuthService(soap*, ns2__CCIncrementalAuthService*) deserialize from a stream
/// - int soap_write_ns2__CCIncrementalAuthService(soap*, ns2__CCIncrementalAuthService*) serialize to a stream
/// - ns2__CCIncrementalAuthService* ns2__CCIncrementalAuthService::soap_dup(soap*) returns deep copy of ns2__CCIncrementalAuthService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCIncrementalAuthService::soap_del() deep deletes ns2__CCIncrementalAuthService data members, use only after ns2__CCIncrementalAuthService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCIncrementalAuthService
{ public:
/// Element "authRequestID" of XSD type xs:string.
    wchar_t*                             authRequestID                  0;	///< Optional element.
/// Element "duration" of XSD type xs:integer.
    xsd__integer*                        duration                       0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCCaptureService is a complexType.
///
/// class ns2__CCCaptureService operations:
/// - ns2__CCCaptureService* soap_new_ns2__CCCaptureService(soap*) allocate
/// - ns2__CCCaptureService* soap_new_ns2__CCCaptureService(soap*, int num) allocate array
/// - ns2__CCCaptureService* soap_new_req_ns2__CCCaptureService(soap*, ...) allocate, set required members
/// - ns2__CCCaptureService* soap_new_set_ns2__CCCaptureService(soap*, ...) allocate, set all public members
/// - ns2__CCCaptureService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCCaptureService(soap*, ns2__CCCaptureService*) deserialize from a stream
/// - int soap_write_ns2__CCCaptureService(soap*, ns2__CCCaptureService*) serialize to a stream
/// - ns2__CCCaptureService* ns2__CCCaptureService::soap_dup(soap*) returns deep copy of ns2__CCCaptureService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCCaptureService::soap_del() deep deletes ns2__CCCaptureService data members, use only after ns2__CCCaptureService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCCaptureService
{ public:
/// Element "authType" of XSD type xs:string.
    wchar_t*                             authType                       0;	///< Optional element.
/// Element "verbalAuthCode" of XSD type xs:string.
    wchar_t*                             verbalAuthCode                 0;	///< Optional element.
/// Element "authRequestID" of XSD type xs:string.
    wchar_t*                             authRequestID                  0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "partialPaymentID" of XSD type xs:string.
    wchar_t*                             partialPaymentID               0;	///< Optional element.
/// Element "purchasingLevel" of XSD type xs:string.
    wchar_t*                             purchasingLevel                0;	///< Optional element.
/// Element "industryDatatype" of XSD type xs:string.
    wchar_t*                             industryDatatype               0;	///< Optional element.
/// Element "authRequestToken" of XSD type xs:string.
    wchar_t*                             authRequestToken               0;	///< Optional element.
/// Element "merchantReceiptNumber" of XSD type xs:string.
    wchar_t*                             merchantReceiptNumber          0;	///< Optional element.
/// Element "posData" of XSD type xs:string.
    wchar_t*                             posData                        0;	///< Optional element.
/// Element "transactionID" of XSD type xs:string.
    wchar_t*                             transactionID                  0;	///< Optional element.
/// Element "checksumKey" of XSD type xs:string.
    wchar_t*                             checksumKey                    0;	///< Optional element.
/// Element "gratuityAmount" of XSD type xs:string.
    wchar_t*                             gratuityAmount                 0;	///< Optional element.
/// Element "duration" of XSD type xs:integer.
    xsd__integer*                        duration                       0;	///< Optional element.
/// Element "dpdeBillingMonth" of XSD type xs:integer.
    xsd__integer*                        dpdeBillingMonth               0;	///< Optional element.
/// Element "sequence" of XSD type xs:string.
    wchar_t*                             sequence                       0;	///< Optional element.
/// Element "totalCount" of XSD type xs:string.
    wchar_t*                             totalCount                     0;	///< Optional element.
/// Element "reconciliationIDAlternate" of XSD type xs:string.
    wchar_t*                             reconciliationIDAlternate      0;	///< Optional element.
/// Element "aggregatorID" of XSD type xs:string.
    wchar_t*                             aggregatorID                   0;	///< Optional element.
/// Element "aggregatorName" of XSD type xs:string.
    wchar_t*                             aggregatorName                 0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCCreditService is a complexType.
///
/// class ns2__CCCreditService operations:
/// - ns2__CCCreditService* soap_new_ns2__CCCreditService(soap*) allocate
/// - ns2__CCCreditService* soap_new_ns2__CCCreditService(soap*, int num) allocate array
/// - ns2__CCCreditService* soap_new_req_ns2__CCCreditService(soap*, ...) allocate, set required members
/// - ns2__CCCreditService* soap_new_set_ns2__CCCreditService(soap*, ...) allocate, set all public members
/// - ns2__CCCreditService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCCreditService(soap*, ns2__CCCreditService*) deserialize from a stream
/// - int soap_write_ns2__CCCreditService(soap*, ns2__CCCreditService*) serialize to a stream
/// - ns2__CCCreditService* ns2__CCCreditService::soap_dup(soap*) returns deep copy of ns2__CCCreditService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCCreditService::soap_del() deep deletes ns2__CCCreditService data members, use only after ns2__CCCreditService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCCreditService
{ public:
/// Element "captureRequestID" of XSD type xs:string.
    wchar_t*                             captureRequestID               0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "partialPaymentID" of XSD type xs:string.
    wchar_t*                             partialPaymentID               0;	///< Optional element.
/// Element "purchasingLevel" of XSD type xs:string.
    wchar_t*                             purchasingLevel                0;	///< Optional element.
/// Element "industryDatatype" of XSD type xs:string.
    wchar_t*                             industryDatatype               0;	///< Optional element.
/// Element "commerceIndicator" of XSD type xs:string.
    wchar_t*                             commerceIndicator              0;	///< Optional element.
/// Element "billPayment" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        billPayment                    0;	///< Optional element.
/// Element "authorizationXID" of XSD type xs:string.
    wchar_t*                             authorizationXID               0;	///< Optional element.
/// Element "occurrenceNumber" of XSD type xs:string.
    wchar_t*                             occurrenceNumber               0;	///< Optional element.
/// Element "authCode" of XSD type xs:string.
    wchar_t*                             authCode                       0;	///< Optional element.
/// Element "captureRequestToken" of XSD type xs:string.
    wchar_t*                             captureRequestToken            0;	///< Optional element.
/// Element "merchantReceiptNumber" of XSD type xs:string.
    wchar_t*                             merchantReceiptNumber          0;	///< Optional element.
/// Element "checksumKey" of XSD type xs:string.
    wchar_t*                             checksumKey                    0;	///< Optional element.
/// Element "aggregatorID" of XSD type xs:string.
    wchar_t*                             aggregatorID                   0;	///< Optional element.
/// Element "aggregatorName" of XSD type xs:string.
    wchar_t*                             aggregatorName                 0;	///< Optional element.
/// Element "duration" of XSD type xs:integer.
    xsd__integer*                        duration                       0;	///< Optional element.
/// Element "dpdeBillingMonth" of XSD type xs:integer.
    xsd__integer*                        dpdeBillingMonth               0;	///< Optional element.
/// Element "reconciliationIDAlternate" of XSD type xs:string.
    wchar_t*                             reconciliationIDAlternate      0;	///< Optional element.
/// Element "refundReason" of XSD type xs:string.
    wchar_t*                             refundReason                   0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCAuthReversalService is a complexType.
///
/// class ns2__CCAuthReversalService operations:
/// - ns2__CCAuthReversalService* soap_new_ns2__CCAuthReversalService(soap*) allocate
/// - ns2__CCAuthReversalService* soap_new_ns2__CCAuthReversalService(soap*, int num) allocate array
/// - ns2__CCAuthReversalService* soap_new_req_ns2__CCAuthReversalService(soap*, ...) allocate, set required members
/// - ns2__CCAuthReversalService* soap_new_set_ns2__CCAuthReversalService(soap*, ...) allocate, set all public members
/// - ns2__CCAuthReversalService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCAuthReversalService(soap*, ns2__CCAuthReversalService*) deserialize from a stream
/// - int soap_write_ns2__CCAuthReversalService(soap*, ns2__CCAuthReversalService*) serialize to a stream
/// - ns2__CCAuthReversalService* ns2__CCAuthReversalService::soap_dup(soap*) returns deep copy of ns2__CCAuthReversalService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCAuthReversalService::soap_del() deep deletes ns2__CCAuthReversalService data members, use only after ns2__CCAuthReversalService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCAuthReversalService
{ public:
/// Element "authRequestID" of XSD type xs:string.
    wchar_t*                             authRequestID                  0;	///< Optional element.
/// Element "authRequestToken" of XSD type xs:string.
    wchar_t*                             authRequestToken               0;	///< Optional element.
/// Element "reversalReason" of XSD type xs:string.
    wchar_t*                             reversalReason                 0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCAutoAuthReversalService is a complexType.
///
/// class ns2__CCAutoAuthReversalService operations:
/// - ns2__CCAutoAuthReversalService* soap_new_ns2__CCAutoAuthReversalService(soap*) allocate
/// - ns2__CCAutoAuthReversalService* soap_new_ns2__CCAutoAuthReversalService(soap*, int num) allocate array
/// - ns2__CCAutoAuthReversalService* soap_new_req_ns2__CCAutoAuthReversalService(soap*, ...) allocate, set required members
/// - ns2__CCAutoAuthReversalService* soap_new_set_ns2__CCAutoAuthReversalService(soap*, ...) allocate, set all public members
/// - ns2__CCAutoAuthReversalService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCAutoAuthReversalService(soap*, ns2__CCAutoAuthReversalService*) deserialize from a stream
/// - int soap_write_ns2__CCAutoAuthReversalService(soap*, ns2__CCAutoAuthReversalService*) serialize to a stream
/// - ns2__CCAutoAuthReversalService* ns2__CCAutoAuthReversalService::soap_dup(soap*) returns deep copy of ns2__CCAutoAuthReversalService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCAutoAuthReversalService::soap_del() deep deletes ns2__CCAutoAuthReversalService data members, use only after ns2__CCAutoAuthReversalService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCAutoAuthReversalService
{ public:
/// Element "authPaymentServiceData" of XSD type xs:string.
    wchar_t*                             authPaymentServiceData         0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "authAmount" of XSD type xs:string.
    wchar_t*                             authAmount                     0;	///< Optional element.
/// Element "commerceIndicator" of XSD type xs:string.
    wchar_t*                             commerceIndicator              0;	///< Optional element.
/// Element "authRequestID" of XSD type xs:string.
    wchar_t*                             authRequestID                  0;	///< Optional element.
/// Element "billAmount" of XSD type xs:string.
    wchar_t*                             billAmount                     0;	///< Optional element.
/// Element "authCode" of XSD type xs:string.
    wchar_t*                             authCode                       0;	///< Optional element.
/// Element "authType" of XSD type xs:string.
    wchar_t*                             authType                       0;	///< Optional element.
/// Element "billPayment" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        billPayment                    0;	///< Optional element.
/// Element "dateAdded" of XSD type xs:string.
    wchar_t*                             dateAdded                      0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCDCCService is a complexType.
///
/// class ns2__CCDCCService operations:
/// - ns2__CCDCCService* soap_new_ns2__CCDCCService(soap*) allocate
/// - ns2__CCDCCService* soap_new_ns2__CCDCCService(soap*, int num) allocate array
/// - ns2__CCDCCService* soap_new_req_ns2__CCDCCService(soap*, ...) allocate, set required members
/// - ns2__CCDCCService* soap_new_set_ns2__CCDCCService(soap*, ...) allocate, set all public members
/// - ns2__CCDCCService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCDCCService(soap*, ns2__CCDCCService*) deserialize from a stream
/// - int soap_write_ns2__CCDCCService(soap*, ns2__CCDCCService*) serialize to a stream
/// - ns2__CCDCCService* ns2__CCDCCService::soap_dup(soap*) returns deep copy of ns2__CCDCCService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCDCCService::soap_del() deep deletes ns2__CCDCCService data members, use only after ns2__CCDCCService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCDCCService
{ public:
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":ServiceFeeCalculateService is a complexType.
///
/// class ns2__ServiceFeeCalculateService operations:
/// - ns2__ServiceFeeCalculateService* soap_new_ns2__ServiceFeeCalculateService(soap*) allocate
/// - ns2__ServiceFeeCalculateService* soap_new_ns2__ServiceFeeCalculateService(soap*, int num) allocate array
/// - ns2__ServiceFeeCalculateService* soap_new_req_ns2__ServiceFeeCalculateService(soap*, ...) allocate, set required members
/// - ns2__ServiceFeeCalculateService* soap_new_set_ns2__ServiceFeeCalculateService(soap*, ...) allocate, set all public members
/// - ns2__ServiceFeeCalculateService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ServiceFeeCalculateService(soap*, ns2__ServiceFeeCalculateService*) deserialize from a stream
/// - int soap_write_ns2__ServiceFeeCalculateService(soap*, ns2__ServiceFeeCalculateService*) serialize to a stream
/// - ns2__ServiceFeeCalculateService* ns2__ServiceFeeCalculateService::soap_dup(soap*) returns deep copy of ns2__ServiceFeeCalculateService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ServiceFeeCalculateService::soap_del() deep deletes ns2__ServiceFeeCalculateService data members, use only after ns2__ServiceFeeCalculateService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ServiceFeeCalculateService
{ public:
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":ECDebitService is a complexType.
///
/// class ns2__ECDebitService operations:
/// - ns2__ECDebitService* soap_new_ns2__ECDebitService(soap*) allocate
/// - ns2__ECDebitService* soap_new_ns2__ECDebitService(soap*, int num) allocate array
/// - ns2__ECDebitService* soap_new_req_ns2__ECDebitService(soap*, ...) allocate, set required members
/// - ns2__ECDebitService* soap_new_set_ns2__ECDebitService(soap*, ...) allocate, set all public members
/// - ns2__ECDebitService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ECDebitService(soap*, ns2__ECDebitService*) deserialize from a stream
/// - int soap_write_ns2__ECDebitService(soap*, ns2__ECDebitService*) serialize to a stream
/// - ns2__ECDebitService* ns2__ECDebitService::soap_dup(soap*) returns deep copy of ns2__ECDebitService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ECDebitService::soap_del() deep deletes ns2__ECDebitService data members, use only after ns2__ECDebitService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ECDebitService
{ public:
/// Element "paymentMode" of XSD type xs:integer.
    xsd__integer*                        paymentMode                    0;	///< Optional element.
/// Element "referenceNumber" of XSD type xs:string.
    wchar_t*                             referenceNumber                0;	///< Optional element.
/// Element "settlementMethod" of XSD type xs:string.
    wchar_t*                             settlementMethod               0;	///< Optional element.
/// Element "transactionToken" of XSD type xs:string.
    wchar_t*                             transactionToken               0;	///< Optional element.
/// Element "verificationLevel" of XSD type xs:integer.
    xsd__integer*                        verificationLevel              0;	///< Optional element.
/// Element "partialPaymentID" of XSD type xs:string.
    wchar_t*                             partialPaymentID               0;	///< Optional element.
/// Element "commerceIndicator" of XSD type xs:string.
    wchar_t*                             commerceIndicator              0;	///< Optional element.
/// Element "debitRequestID" of XSD type xs:string.
    wchar_t*                             debitRequestID                 0;	///< Optional element.
/// Element "effectiveDate" of XSD type xs:string.
    wchar_t*                             effectiveDate                  0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":ECCreditService is a complexType.
///
/// class ns2__ECCreditService operations:
/// - ns2__ECCreditService* soap_new_ns2__ECCreditService(soap*) allocate
/// - ns2__ECCreditService* soap_new_ns2__ECCreditService(soap*, int num) allocate array
/// - ns2__ECCreditService* soap_new_req_ns2__ECCreditService(soap*, ...) allocate, set required members
/// - ns2__ECCreditService* soap_new_set_ns2__ECCreditService(soap*, ...) allocate, set all public members
/// - ns2__ECCreditService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ECCreditService(soap*, ns2__ECCreditService*) deserialize from a stream
/// - int soap_write_ns2__ECCreditService(soap*, ns2__ECCreditService*) serialize to a stream
/// - ns2__ECCreditService* ns2__ECCreditService::soap_dup(soap*) returns deep copy of ns2__ECCreditService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ECCreditService::soap_del() deep deletes ns2__ECCreditService data members, use only after ns2__ECCreditService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ECCreditService
{ public:
/// Element "referenceNumber" of XSD type xs:string.
    wchar_t*                             referenceNumber                0;	///< Optional element.
/// Element "settlementMethod" of XSD type xs:string.
    wchar_t*                             settlementMethod               0;	///< Optional element.
/// Element "transactionToken" of XSD type xs:string.
    wchar_t*                             transactionToken               0;	///< Optional element.
/// Element "debitRequestID" of XSD type xs:string.
    wchar_t*                             debitRequestID                 0;	///< Optional element.
/// Element "partialPaymentID" of XSD type xs:string.
    wchar_t*                             partialPaymentID               0;	///< Optional element.
/// Element "commerceIndicator" of XSD type xs:string.
    wchar_t*                             commerceIndicator              0;	///< Optional element.
/// Element "debitRequestToken" of XSD type xs:string.
    wchar_t*                             debitRequestToken              0;	///< Optional element.
/// Element "effectiveDate" of XSD type xs:string.
    wchar_t*                             effectiveDate                  0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":ECAuthenticateService is a complexType.
///
/// class ns2__ECAuthenticateService operations:
/// - ns2__ECAuthenticateService* soap_new_ns2__ECAuthenticateService(soap*) allocate
/// - ns2__ECAuthenticateService* soap_new_ns2__ECAuthenticateService(soap*, int num) allocate array
/// - ns2__ECAuthenticateService* soap_new_req_ns2__ECAuthenticateService(soap*, ...) allocate, set required members
/// - ns2__ECAuthenticateService* soap_new_set_ns2__ECAuthenticateService(soap*, ...) allocate, set all public members
/// - ns2__ECAuthenticateService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ECAuthenticateService(soap*, ns2__ECAuthenticateService*) deserialize from a stream
/// - int soap_write_ns2__ECAuthenticateService(soap*, ns2__ECAuthenticateService*) serialize to a stream
/// - ns2__ECAuthenticateService* ns2__ECAuthenticateService::soap_dup(soap*) returns deep copy of ns2__ECAuthenticateService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ECAuthenticateService::soap_del() deep deletes ns2__ECAuthenticateService data members, use only after ns2__ECAuthenticateService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ECAuthenticateService
{ public:
/// Element "referenceNumber" of XSD type xs:string.
    wchar_t*                             referenceNumber                0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayerAuthEnrollService is a complexType.
///
/// class ns2__PayerAuthEnrollService operations:
/// - ns2__PayerAuthEnrollService* soap_new_ns2__PayerAuthEnrollService(soap*) allocate
/// - ns2__PayerAuthEnrollService* soap_new_ns2__PayerAuthEnrollService(soap*, int num) allocate array
/// - ns2__PayerAuthEnrollService* soap_new_req_ns2__PayerAuthEnrollService(soap*, ...) allocate, set required members
/// - ns2__PayerAuthEnrollService* soap_new_set_ns2__PayerAuthEnrollService(soap*, ...) allocate, set all public members
/// - ns2__PayerAuthEnrollService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayerAuthEnrollService(soap*, ns2__PayerAuthEnrollService*) deserialize from a stream
/// - int soap_write_ns2__PayerAuthEnrollService(soap*, ns2__PayerAuthEnrollService*) serialize to a stream
/// - ns2__PayerAuthEnrollService* ns2__PayerAuthEnrollService::soap_dup(soap*) returns deep copy of ns2__PayerAuthEnrollService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayerAuthEnrollService::soap_del() deep deletes ns2__PayerAuthEnrollService data members, use only after ns2__PayerAuthEnrollService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayerAuthEnrollService
{ public:
/// Element "httpAccept" of XSD type xs:string.
    wchar_t*                             httpAccept                     0;	///< Optional element.
/// Element "httpUserAgent" of XSD type xs:string.
    wchar_t*                             httpUserAgent                  0;	///< Optional element.
/// Element "merchantName" of XSD type xs:string.
    wchar_t*                             merchantName                   0;	///< Optional element.
/// Element "merchantURL" of XSD type xs:string.
    wchar_t*                             merchantURL                    0;	///< Optional element.
/// Element "purchaseDescription" of XSD type xs:string.
    wchar_t*                             purchaseDescription            0;	///< Optional element.
/// Element "purchaseTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       purchaseTime                   0;	///< Optional element.
/// Element "countryCode" of XSD type xs:string.
    wchar_t*                             countryCode                    0;	///< Optional element.
/// Element "acquirerBin" of XSD type xs:string.
    wchar_t*                             acquirerBin                    0;	///< Optional element.
/// Element "loginID" of XSD type xs:string.
    wchar_t*                             loginID                        0;	///< Optional element.
/// Element "password" of XSD type xs:string.
    wchar_t*                             password                       0;	///< Optional element.
/// Element "merchantID" of XSD type xs:string.
    wchar_t*                             merchantID                     0;	///< Optional element.
/// Element "overridePaymentMethod" of XSD type xs:string.
    wchar_t*                             overridePaymentMethod          0;	///< Optional element.
/// Element "mobilePhone" of XSD type xs:string.
    wchar_t*                             mobilePhone                    0;	///< Optional element.
/// Element "MCC" of XSD type xs:string.
    wchar_t*                             MCC                            0;	///< Optional element.
/// Element "productCode" of XSD type xs:string.
    wchar_t*                             productCode                    0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayerAuthValidateService is a complexType.
///
/// class ns2__PayerAuthValidateService operations:
/// - ns2__PayerAuthValidateService* soap_new_ns2__PayerAuthValidateService(soap*) allocate
/// - ns2__PayerAuthValidateService* soap_new_ns2__PayerAuthValidateService(soap*, int num) allocate array
/// - ns2__PayerAuthValidateService* soap_new_req_ns2__PayerAuthValidateService(soap*, ...) allocate, set required members
/// - ns2__PayerAuthValidateService* soap_new_set_ns2__PayerAuthValidateService(soap*, ...) allocate, set all public members
/// - ns2__PayerAuthValidateService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayerAuthValidateService(soap*, ns2__PayerAuthValidateService*) deserialize from a stream
/// - int soap_write_ns2__PayerAuthValidateService(soap*, ns2__PayerAuthValidateService*) serialize to a stream
/// - ns2__PayerAuthValidateService* ns2__PayerAuthValidateService::soap_dup(soap*) returns deep copy of ns2__PayerAuthValidateService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayerAuthValidateService::soap_del() deep deletes ns2__PayerAuthValidateService data members, use only after ns2__PayerAuthValidateService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayerAuthValidateService
{ public:
/// Element "signedPARes" of XSD type xs:string.
    wchar_t*                             signedPARes                    0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":TaxService is a complexType.
///
/// class ns2__TaxService operations:
/// - ns2__TaxService* soap_new_ns2__TaxService(soap*) allocate
/// - ns2__TaxService* soap_new_ns2__TaxService(soap*, int num) allocate array
/// - ns2__TaxService* soap_new_req_ns2__TaxService(soap*, ...) allocate, set required members
/// - ns2__TaxService* soap_new_set_ns2__TaxService(soap*, ...) allocate, set all public members
/// - ns2__TaxService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__TaxService(soap*, ns2__TaxService*) deserialize from a stream
/// - int soap_write_ns2__TaxService(soap*, ns2__TaxService*) serialize to a stream
/// - ns2__TaxService* ns2__TaxService::soap_dup(soap*) returns deep copy of ns2__TaxService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__TaxService::soap_del() deep deletes ns2__TaxService data members, use only after ns2__TaxService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__TaxService
{ public:
/// Element "nexus" of XSD type xs:string.
    wchar_t*                             nexus                          0;	///< Optional element.
/// Element "noNexus" of XSD type xs:string.
    wchar_t*                             noNexus                        0;	///< Optional element.
/// Element "orderAcceptanceCity" of XSD type xs:string.
    wchar_t*                             orderAcceptanceCity            0;	///< Optional element.
/// Element "orderAcceptanceCounty" of XSD type xs:string.
    wchar_t*                             orderAcceptanceCounty          0;	///< Optional element.
/// Element "orderAcceptanceCountry" of XSD type xs:string.
    wchar_t*                             orderAcceptanceCountry         0;	///< Optional element.
/// Element "orderAcceptanceState" of XSD type xs:string.
    wchar_t*                             orderAcceptanceState           0;	///< Optional element.
/// Element "orderAcceptancePostalCode" of XSD type xs:string.
    wchar_t*                             orderAcceptancePostalCode      0;	///< Optional element.
/// Element "orderOriginCity" of XSD type xs:string.
    wchar_t*                             orderOriginCity                0;	///< Optional element.
/// Element "orderOriginCounty" of XSD type xs:string.
    wchar_t*                             orderOriginCounty              0;	///< Optional element.
/// Element "orderOriginCountry" of XSD type xs:string.
    wchar_t*                             orderOriginCountry             0;	///< Optional element.
/// Element "orderOriginState" of XSD type xs:string.
    wchar_t*                             orderOriginState               0;	///< Optional element.
/// Element "orderOriginPostalCode" of XSD type xs:string.
    wchar_t*                             orderOriginPostalCode          0;	///< Optional element.
/// Element "sellerRegistration" of XSD type xs:string.
    wchar_t*                             sellerRegistration             0;	///< Optional element.
/// Element "sellerRegistration0" of XSD type xs:string.
    wchar_t*                             sellerRegistration0            0;	///< Optional element.
/// Element "sellerRegistration1" of XSD type xs:string.
    wchar_t*                             sellerRegistration1            0;	///< Optional element.
/// Element "sellerRegistration2" of XSD type xs:string.
    wchar_t*                             sellerRegistration2            0;	///< Optional element.
/// Element "sellerRegistration3" of XSD type xs:string.
    wchar_t*                             sellerRegistration3            0;	///< Optional element.
/// Element "sellerRegistration4" of XSD type xs:string.
    wchar_t*                             sellerRegistration4            0;	///< Optional element.
/// Element "sellerRegistration5" of XSD type xs:string.
    wchar_t*                             sellerRegistration5            0;	///< Optional element.
/// Element "sellerRegistration6" of XSD type xs:string.
    wchar_t*                             sellerRegistration6            0;	///< Optional element.
/// Element "sellerRegistration7" of XSD type xs:string.
    wchar_t*                             sellerRegistration7            0;	///< Optional element.
/// Element "sellerRegistration8" of XSD type xs:string.
    wchar_t*                             sellerRegistration8            0;	///< Optional element.
/// Element "sellerRegistration9" of XSD type xs:string.
    wchar_t*                             sellerRegistration9            0;	///< Optional element.
/// Element "buyerRegistration" of XSD type xs:string.
    wchar_t*                             buyerRegistration              0;	///< Optional element.
/// Element "middlemanRegistration" of XSD type xs:string.
    wchar_t*                             middlemanRegistration          0;	///< Optional element.
/// Element "pointOfTitleTransfer" of XSD type xs:string.
    wchar_t*                             pointOfTitleTransfer           0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DMEService is a complexType.
///
/// class ns2__DMEService operations:
/// - ns2__DMEService* soap_new_ns2__DMEService(soap*) allocate
/// - ns2__DMEService* soap_new_ns2__DMEService(soap*, int num) allocate array
/// - ns2__DMEService* soap_new_req_ns2__DMEService(soap*, ...) allocate, set required members
/// - ns2__DMEService* soap_new_set_ns2__DMEService(soap*, ...) allocate, set all public members
/// - ns2__DMEService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DMEService(soap*, ns2__DMEService*) deserialize from a stream
/// - int soap_write_ns2__DMEService(soap*, ns2__DMEService*) serialize to a stream
/// - ns2__DMEService* ns2__DMEService::soap_dup(soap*) returns deep copy of ns2__DMEService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DMEService::soap_del() deep deletes ns2__DMEService data members, use only after ns2__DMEService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DMEService
{ public:
/// Element "eventType" of XSD type xs:string.
    wchar_t*                             eventType                      0;	///< Optional element.
/// Element "eventPolicy" of XSD type xs:string.
    wchar_t*                             eventPolicy                    0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":AFSService is a complexType.
///
/// class ns2__AFSService operations:
/// - ns2__AFSService* soap_new_ns2__AFSService(soap*) allocate
/// - ns2__AFSService* soap_new_ns2__AFSService(soap*, int num) allocate array
/// - ns2__AFSService* soap_new_req_ns2__AFSService(soap*, ...) allocate, set required members
/// - ns2__AFSService* soap_new_set_ns2__AFSService(soap*, ...) allocate, set all public members
/// - ns2__AFSService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__AFSService(soap*, ns2__AFSService*) deserialize from a stream
/// - int soap_write_ns2__AFSService(soap*, ns2__AFSService*) serialize to a stream
/// - ns2__AFSService* ns2__AFSService::soap_dup(soap*) returns deep copy of ns2__AFSService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AFSService::soap_del() deep deletes ns2__AFSService data members, use only after ns2__AFSService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AFSService
{ public:
/// Element "avsCode" of XSD type xs:string.
    wchar_t*                             avsCode                        0;	///< Optional element.
/// Element "cvCode" of XSD type xs:string.
    wchar_t*                             cvCode                         0;	///< Optional element.
/// Element "disableAVSScoring" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        disableAVSScoring              0;	///< Optional element.
/// Element "customRiskModel" of XSD type xs:string.
    wchar_t*                             customRiskModel                0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DAVService is a complexType.
///
/// class ns2__DAVService operations:
/// - ns2__DAVService* soap_new_ns2__DAVService(soap*) allocate
/// - ns2__DAVService* soap_new_ns2__DAVService(soap*, int num) allocate array
/// - ns2__DAVService* soap_new_req_ns2__DAVService(soap*, ...) allocate, set required members
/// - ns2__DAVService* soap_new_set_ns2__DAVService(soap*, ...) allocate, set all public members
/// - ns2__DAVService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DAVService(soap*, ns2__DAVService*) deserialize from a stream
/// - int soap_write_ns2__DAVService(soap*, ns2__DAVService*) serialize to a stream
/// - ns2__DAVService* ns2__DAVService::soap_dup(soap*) returns deep copy of ns2__DAVService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DAVService::soap_del() deep deletes ns2__DAVService data members, use only after ns2__DAVService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DAVService
{ public:
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":ExportService is a complexType.
///
/// class ns2__ExportService operations:
/// - ns2__ExportService* soap_new_ns2__ExportService(soap*) allocate
/// - ns2__ExportService* soap_new_ns2__ExportService(soap*, int num) allocate array
/// - ns2__ExportService* soap_new_req_ns2__ExportService(soap*, ...) allocate, set required members
/// - ns2__ExportService* soap_new_set_ns2__ExportService(soap*, ...) allocate, set all public members
/// - ns2__ExportService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ExportService(soap*, ns2__ExportService*) deserialize from a stream
/// - int soap_write_ns2__ExportService(soap*, ns2__ExportService*) serialize to a stream
/// - ns2__ExportService* ns2__ExportService::soap_dup(soap*) returns deep copy of ns2__ExportService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ExportService::soap_del() deep deletes ns2__ExportService data members, use only after ns2__ExportService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ExportService
{ public:
/// Element "addressOperator" of XSD type xs:string.
    wchar_t*                             addressOperator                0;	///< Optional element.
/// Element "addressWeight" of XSD type xs:string.
    wchar_t*                             addressWeight                  0;	///< Optional element.
/// Element "companyWeight" of XSD type xs:string.
    wchar_t*                             companyWeight                  0;	///< Optional element.
/// Element "nameWeight" of XSD type xs:string.
    wchar_t*                             nameWeight                     0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":FXRatesService is a complexType.
///
/// class ns2__FXRatesService operations:
/// - ns2__FXRatesService* soap_new_ns2__FXRatesService(soap*) allocate
/// - ns2__FXRatesService* soap_new_ns2__FXRatesService(soap*, int num) allocate array
/// - ns2__FXRatesService* soap_new_req_ns2__FXRatesService(soap*, ...) allocate, set required members
/// - ns2__FXRatesService* soap_new_set_ns2__FXRatesService(soap*, ...) allocate, set all public members
/// - ns2__FXRatesService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__FXRatesService(soap*, ns2__FXRatesService*) deserialize from a stream
/// - int soap_write_ns2__FXRatesService(soap*, ns2__FXRatesService*) serialize to a stream
/// - ns2__FXRatesService* ns2__FXRatesService::soap_dup(soap*) returns deep copy of ns2__FXRatesService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FXRatesService::soap_del() deep deletes ns2__FXRatesService data members, use only after ns2__FXRatesService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FXRatesService
{ public:
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":BankTransferService is a complexType.
///
/// class ns2__BankTransferService operations:
/// - ns2__BankTransferService* soap_new_ns2__BankTransferService(soap*) allocate
/// - ns2__BankTransferService* soap_new_ns2__BankTransferService(soap*, int num) allocate array
/// - ns2__BankTransferService* soap_new_req_ns2__BankTransferService(soap*, ...) allocate, set required members
/// - ns2__BankTransferService* soap_new_set_ns2__BankTransferService(soap*, ...) allocate, set all public members
/// - ns2__BankTransferService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__BankTransferService(soap*, ns2__BankTransferService*) deserialize from a stream
/// - int soap_write_ns2__BankTransferService(soap*, ns2__BankTransferService*) serialize to a stream
/// - ns2__BankTransferService* ns2__BankTransferService::soap_dup(soap*) returns deep copy of ns2__BankTransferService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BankTransferService::soap_del() deep deletes ns2__BankTransferService data members, use only after ns2__BankTransferService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BankTransferService
{ public:
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":BankTransferRefundService is a complexType.
///
/// class ns2__BankTransferRefundService operations:
/// - ns2__BankTransferRefundService* soap_new_ns2__BankTransferRefundService(soap*) allocate
/// - ns2__BankTransferRefundService* soap_new_ns2__BankTransferRefundService(soap*, int num) allocate array
/// - ns2__BankTransferRefundService* soap_new_req_ns2__BankTransferRefundService(soap*, ...) allocate, set required members
/// - ns2__BankTransferRefundService* soap_new_set_ns2__BankTransferRefundService(soap*, ...) allocate, set all public members
/// - ns2__BankTransferRefundService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__BankTransferRefundService(soap*, ns2__BankTransferRefundService*) deserialize from a stream
/// - int soap_write_ns2__BankTransferRefundService(soap*, ns2__BankTransferRefundService*) serialize to a stream
/// - ns2__BankTransferRefundService* ns2__BankTransferRefundService::soap_dup(soap*) returns deep copy of ns2__BankTransferRefundService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BankTransferRefundService::soap_del() deep deletes ns2__BankTransferRefundService data members, use only after ns2__BankTransferRefundService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BankTransferRefundService
{ public:
/// Element "bankTransferRequestID" of XSD type xs:string.
    wchar_t*                             bankTransferRequestID          0;	///< Optional element.
/// Element "bankTransferRealTimeRequestID" of XSD type xs:string.
    wchar_t*                             bankTransferRealTimeRequestID  0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "bankTransferRealTimeReconciliationID" of XSD type xs:string.
    wchar_t*                             bankTransferRealTimeReconciliationID 0;	///< Optional element.
/// Element "bankTransferRequestToken" of XSD type xs:string.
    wchar_t*                             bankTransferRequestToken       0;	///< Optional element.
/// Element "bankTransferRealTimeRequestToken" of XSD type xs:string.
    wchar_t*                             bankTransferRealTimeRequestToken 0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":BankTransferRealTimeService is a complexType.
///
/// class ns2__BankTransferRealTimeService operations:
/// - ns2__BankTransferRealTimeService* soap_new_ns2__BankTransferRealTimeService(soap*) allocate
/// - ns2__BankTransferRealTimeService* soap_new_ns2__BankTransferRealTimeService(soap*, int num) allocate array
/// - ns2__BankTransferRealTimeService* soap_new_req_ns2__BankTransferRealTimeService(soap*, ...) allocate, set required members
/// - ns2__BankTransferRealTimeService* soap_new_set_ns2__BankTransferRealTimeService(soap*, ...) allocate, set all public members
/// - ns2__BankTransferRealTimeService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__BankTransferRealTimeService(soap*, ns2__BankTransferRealTimeService*) deserialize from a stream
/// - int soap_write_ns2__BankTransferRealTimeService(soap*, ns2__BankTransferRealTimeService*) serialize to a stream
/// - ns2__BankTransferRealTimeService* ns2__BankTransferRealTimeService::soap_dup(soap*) returns deep copy of ns2__BankTransferRealTimeService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BankTransferRealTimeService::soap_del() deep deletes ns2__BankTransferRealTimeService data members, use only after ns2__BankTransferRealTimeService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BankTransferRealTimeService
{ public:
/// Element "bankTransferRealTimeType" of XSD type xs:string.
    wchar_t*                             bankTransferRealTimeType       0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DirectDebitMandateService is a complexType.
///
/// class ns2__DirectDebitMandateService operations:
/// - ns2__DirectDebitMandateService* soap_new_ns2__DirectDebitMandateService(soap*) allocate
/// - ns2__DirectDebitMandateService* soap_new_ns2__DirectDebitMandateService(soap*, int num) allocate array
/// - ns2__DirectDebitMandateService* soap_new_req_ns2__DirectDebitMandateService(soap*, ...) allocate, set required members
/// - ns2__DirectDebitMandateService* soap_new_set_ns2__DirectDebitMandateService(soap*, ...) allocate, set all public members
/// - ns2__DirectDebitMandateService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DirectDebitMandateService(soap*, ns2__DirectDebitMandateService*) deserialize from a stream
/// - int soap_write_ns2__DirectDebitMandateService(soap*, ns2__DirectDebitMandateService*) serialize to a stream
/// - ns2__DirectDebitMandateService* ns2__DirectDebitMandateService::soap_dup(soap*) returns deep copy of ns2__DirectDebitMandateService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DirectDebitMandateService::soap_del() deep deletes ns2__DirectDebitMandateService data members, use only after ns2__DirectDebitMandateService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DirectDebitMandateService
{ public:
/// Element "mandateDescriptor" of XSD type xs:string.
    wchar_t*                             mandateDescriptor              0;	///< Optional element.
/// Element "firstDebitDate" of XSD type xs:string.
    wchar_t*                             firstDebitDate                 0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DirectDebitService is a complexType.
///
/// class ns2__DirectDebitService operations:
/// - ns2__DirectDebitService* soap_new_ns2__DirectDebitService(soap*) allocate
/// - ns2__DirectDebitService* soap_new_ns2__DirectDebitService(soap*, int num) allocate array
/// - ns2__DirectDebitService* soap_new_req_ns2__DirectDebitService(soap*, ...) allocate, set required members
/// - ns2__DirectDebitService* soap_new_set_ns2__DirectDebitService(soap*, ...) allocate, set all public members
/// - ns2__DirectDebitService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DirectDebitService(soap*, ns2__DirectDebitService*) deserialize from a stream
/// - int soap_write_ns2__DirectDebitService(soap*, ns2__DirectDebitService*) serialize to a stream
/// - ns2__DirectDebitService* ns2__DirectDebitService::soap_dup(soap*) returns deep copy of ns2__DirectDebitService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DirectDebitService::soap_del() deep deletes ns2__DirectDebitService data members, use only after ns2__DirectDebitService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DirectDebitService
{ public:
/// Element "dateCollect" of XSD type xs:string.
    wchar_t*                             dateCollect                    0;	///< Optional element.
/// Element "directDebitText" of XSD type xs:string.
    wchar_t*                             directDebitText                0;	///< Optional element.
/// Element "authorizationID" of XSD type xs:string.
    wchar_t*                             authorizationID                0;	///< Optional element.
/// Element "transactionType" of XSD type xs:string.
    wchar_t*                             transactionType                0;	///< Optional element.
/// Element "directDebitType" of XSD type xs:string.
    wchar_t*                             directDebitType                0;	///< Optional element.
/// Element "validateRequestID" of XSD type xs:string.
    wchar_t*                             validateRequestID              0;	///< Optional element.
/// Element "recurringType" of XSD type xs:string.
    wchar_t*                             recurringType                  0;	///< Optional element.
/// Element "mandateID" of XSD type xs:string.
    wchar_t*                             mandateID                      0;	///< Optional element.
/// Element "validateRequestToken" of XSD type xs:string.
    wchar_t*                             validateRequestToken           0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "mandateAuthenticationDate" of XSD type xs:string.
    wchar_t*                             mandateAuthenticationDate      0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DirectDebitRefundService is a complexType.
///
/// class ns2__DirectDebitRefundService operations:
/// - ns2__DirectDebitRefundService* soap_new_ns2__DirectDebitRefundService(soap*) allocate
/// - ns2__DirectDebitRefundService* soap_new_ns2__DirectDebitRefundService(soap*, int num) allocate array
/// - ns2__DirectDebitRefundService* soap_new_req_ns2__DirectDebitRefundService(soap*, ...) allocate, set required members
/// - ns2__DirectDebitRefundService* soap_new_set_ns2__DirectDebitRefundService(soap*, ...) allocate, set all public members
/// - ns2__DirectDebitRefundService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DirectDebitRefundService(soap*, ns2__DirectDebitRefundService*) deserialize from a stream
/// - int soap_write_ns2__DirectDebitRefundService(soap*, ns2__DirectDebitRefundService*) serialize to a stream
/// - ns2__DirectDebitRefundService* ns2__DirectDebitRefundService::soap_dup(soap*) returns deep copy of ns2__DirectDebitRefundService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DirectDebitRefundService::soap_del() deep deletes ns2__DirectDebitRefundService data members, use only after ns2__DirectDebitRefundService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DirectDebitRefundService
{ public:
/// Element "directDebitRequestID" of XSD type xs:string.
    wchar_t*                             directDebitRequestID           0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "directDebitRequestToken" of XSD type xs:string.
    wchar_t*                             directDebitRequestToken        0;	///< Optional element.
/// Element "directDebitType" of XSD type xs:string.
    wchar_t*                             directDebitType                0;	///< Optional element.
/// Element "recurringType" of XSD type xs:string.
    wchar_t*                             recurringType                  0;	///< Optional element.
/// Element "mandateID" of XSD type xs:string.
    wchar_t*                             mandateID                      0;	///< Optional element.
/// Element "mandateAuthenticationDate" of XSD type xs:string.
    wchar_t*                             mandateAuthenticationDate      0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DirectDebitValidateService is a complexType.
///
/// class ns2__DirectDebitValidateService operations:
/// - ns2__DirectDebitValidateService* soap_new_ns2__DirectDebitValidateService(soap*) allocate
/// - ns2__DirectDebitValidateService* soap_new_ns2__DirectDebitValidateService(soap*, int num) allocate array
/// - ns2__DirectDebitValidateService* soap_new_req_ns2__DirectDebitValidateService(soap*, ...) allocate, set required members
/// - ns2__DirectDebitValidateService* soap_new_set_ns2__DirectDebitValidateService(soap*, ...) allocate, set all public members
/// - ns2__DirectDebitValidateService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DirectDebitValidateService(soap*, ns2__DirectDebitValidateService*) deserialize from a stream
/// - int soap_write_ns2__DirectDebitValidateService(soap*, ns2__DirectDebitValidateService*) serialize to a stream
/// - ns2__DirectDebitValidateService* ns2__DirectDebitValidateService::soap_dup(soap*) returns deep copy of ns2__DirectDebitValidateService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DirectDebitValidateService::soap_del() deep deletes ns2__DirectDebitValidateService data members, use only after ns2__DirectDebitValidateService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DirectDebitValidateService
{ public:
/// Element "directDebitValidateText" of XSD type xs:string.
    wchar_t*                             directDebitValidateText        0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionCreateService is a complexType.
///
/// class ns2__PaySubscriptionCreateService operations:
/// - ns2__PaySubscriptionCreateService* soap_new_ns2__PaySubscriptionCreateService(soap*) allocate
/// - ns2__PaySubscriptionCreateService* soap_new_ns2__PaySubscriptionCreateService(soap*, int num) allocate array
/// - ns2__PaySubscriptionCreateService* soap_new_req_ns2__PaySubscriptionCreateService(soap*, ...) allocate, set required members
/// - ns2__PaySubscriptionCreateService* soap_new_set_ns2__PaySubscriptionCreateService(soap*, ...) allocate, set all public members
/// - ns2__PaySubscriptionCreateService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PaySubscriptionCreateService(soap*, ns2__PaySubscriptionCreateService*) deserialize from a stream
/// - int soap_write_ns2__PaySubscriptionCreateService(soap*, ns2__PaySubscriptionCreateService*) serialize to a stream
/// - ns2__PaySubscriptionCreateService* ns2__PaySubscriptionCreateService::soap_dup(soap*) returns deep copy of ns2__PaySubscriptionCreateService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PaySubscriptionCreateService::soap_del() deep deletes ns2__PaySubscriptionCreateService data members, use only after ns2__PaySubscriptionCreateService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PaySubscriptionCreateService
{ public:
/// Element "paymentRequestID" of XSD type xs:string.
    wchar_t*                             paymentRequestID               0;	///< Optional element.
/// Element "paymentRequestToken" of XSD type xs:string.
    wchar_t*                             paymentRequestToken            0;	///< Optional element.
/// Element "disableAutoAuth" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        disableAutoAuth                0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionUpdateService is a complexType.
///
/// class ns2__PaySubscriptionUpdateService operations:
/// - ns2__PaySubscriptionUpdateService* soap_new_ns2__PaySubscriptionUpdateService(soap*) allocate
/// - ns2__PaySubscriptionUpdateService* soap_new_ns2__PaySubscriptionUpdateService(soap*, int num) allocate array
/// - ns2__PaySubscriptionUpdateService* soap_new_req_ns2__PaySubscriptionUpdateService(soap*, ...) allocate, set required members
/// - ns2__PaySubscriptionUpdateService* soap_new_set_ns2__PaySubscriptionUpdateService(soap*, ...) allocate, set all public members
/// - ns2__PaySubscriptionUpdateService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PaySubscriptionUpdateService(soap*, ns2__PaySubscriptionUpdateService*) deserialize from a stream
/// - int soap_write_ns2__PaySubscriptionUpdateService(soap*, ns2__PaySubscriptionUpdateService*) serialize to a stream
/// - ns2__PaySubscriptionUpdateService* ns2__PaySubscriptionUpdateService::soap_dup(soap*) returns deep copy of ns2__PaySubscriptionUpdateService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PaySubscriptionUpdateService::soap_del() deep deletes ns2__PaySubscriptionUpdateService data members, use only after ns2__PaySubscriptionUpdateService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PaySubscriptionUpdateService
{ public:
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionEventUpdateService is a complexType.
///
/// class ns2__PaySubscriptionEventUpdateService operations:
/// - ns2__PaySubscriptionEventUpdateService* soap_new_ns2__PaySubscriptionEventUpdateService(soap*) allocate
/// - ns2__PaySubscriptionEventUpdateService* soap_new_ns2__PaySubscriptionEventUpdateService(soap*, int num) allocate array
/// - ns2__PaySubscriptionEventUpdateService* soap_new_req_ns2__PaySubscriptionEventUpdateService(soap*, ...) allocate, set required members
/// - ns2__PaySubscriptionEventUpdateService* soap_new_set_ns2__PaySubscriptionEventUpdateService(soap*, ...) allocate, set all public members
/// - ns2__PaySubscriptionEventUpdateService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PaySubscriptionEventUpdateService(soap*, ns2__PaySubscriptionEventUpdateService*) deserialize from a stream
/// - int soap_write_ns2__PaySubscriptionEventUpdateService(soap*, ns2__PaySubscriptionEventUpdateService*) serialize to a stream
/// - ns2__PaySubscriptionEventUpdateService* ns2__PaySubscriptionEventUpdateService::soap_dup(soap*) returns deep copy of ns2__PaySubscriptionEventUpdateService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PaySubscriptionEventUpdateService::soap_del() deep deletes ns2__PaySubscriptionEventUpdateService data members, use only after ns2__PaySubscriptionEventUpdateService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PaySubscriptionEventUpdateService
{ public:
/// Element "action" of XSD type xs:string.
    wchar_t*                             action                         0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionRetrieveService is a complexType.
///
/// class ns2__PaySubscriptionRetrieveService operations:
/// - ns2__PaySubscriptionRetrieveService* soap_new_ns2__PaySubscriptionRetrieveService(soap*) allocate
/// - ns2__PaySubscriptionRetrieveService* soap_new_ns2__PaySubscriptionRetrieveService(soap*, int num) allocate array
/// - ns2__PaySubscriptionRetrieveService* soap_new_req_ns2__PaySubscriptionRetrieveService(soap*, ...) allocate, set required members
/// - ns2__PaySubscriptionRetrieveService* soap_new_set_ns2__PaySubscriptionRetrieveService(soap*, ...) allocate, set all public members
/// - ns2__PaySubscriptionRetrieveService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PaySubscriptionRetrieveService(soap*, ns2__PaySubscriptionRetrieveService*) deserialize from a stream
/// - int soap_write_ns2__PaySubscriptionRetrieveService(soap*, ns2__PaySubscriptionRetrieveService*) serialize to a stream
/// - ns2__PaySubscriptionRetrieveService* ns2__PaySubscriptionRetrieveService::soap_dup(soap*) returns deep copy of ns2__PaySubscriptionRetrieveService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PaySubscriptionRetrieveService::soap_del() deep deletes ns2__PaySubscriptionRetrieveService data members, use only after ns2__PaySubscriptionRetrieveService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PaySubscriptionRetrieveService
{ public:
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionDeleteService is a complexType.
///
/// class ns2__PaySubscriptionDeleteService operations:
/// - ns2__PaySubscriptionDeleteService* soap_new_ns2__PaySubscriptionDeleteService(soap*) allocate
/// - ns2__PaySubscriptionDeleteService* soap_new_ns2__PaySubscriptionDeleteService(soap*, int num) allocate array
/// - ns2__PaySubscriptionDeleteService* soap_new_req_ns2__PaySubscriptionDeleteService(soap*, ...) allocate, set required members
/// - ns2__PaySubscriptionDeleteService* soap_new_set_ns2__PaySubscriptionDeleteService(soap*, ...) allocate, set all public members
/// - ns2__PaySubscriptionDeleteService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PaySubscriptionDeleteService(soap*, ns2__PaySubscriptionDeleteService*) deserialize from a stream
/// - int soap_write_ns2__PaySubscriptionDeleteService(soap*, ns2__PaySubscriptionDeleteService*) serialize to a stream
/// - ns2__PaySubscriptionDeleteService* ns2__PaySubscriptionDeleteService::soap_dup(soap*) returns deep copy of ns2__PaySubscriptionDeleteService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PaySubscriptionDeleteService::soap_del() deep deletes ns2__PaySubscriptionDeleteService data members, use only after ns2__PaySubscriptionDeleteService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PaySubscriptionDeleteService
{ public:
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalPaymentService is a complexType.
///
/// class ns2__PayPalPaymentService operations:
/// - ns2__PayPalPaymentService* soap_new_ns2__PayPalPaymentService(soap*) allocate
/// - ns2__PayPalPaymentService* soap_new_ns2__PayPalPaymentService(soap*, int num) allocate array
/// - ns2__PayPalPaymentService* soap_new_req_ns2__PayPalPaymentService(soap*, ...) allocate, set required members
/// - ns2__PayPalPaymentService* soap_new_set_ns2__PayPalPaymentService(soap*, ...) allocate, set all public members
/// - ns2__PayPalPaymentService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalPaymentService(soap*, ns2__PayPalPaymentService*) deserialize from a stream
/// - int soap_write_ns2__PayPalPaymentService(soap*, ns2__PayPalPaymentService*) serialize to a stream
/// - ns2__PayPalPaymentService* ns2__PayPalPaymentService::soap_dup(soap*) returns deep copy of ns2__PayPalPaymentService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalPaymentService::soap_del() deep deletes ns2__PayPalPaymentService data members, use only after ns2__PayPalPaymentService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalPaymentService
{ public:
/// Element "cancelURL" of XSD type xs:string.
    wchar_t*                             cancelURL                      0;	///< Optional element.
/// Element "successURL" of XSD type xs:string.
    wchar_t*                             successURL                     0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalCreditService is a complexType.
///
/// class ns2__PayPalCreditService operations:
/// - ns2__PayPalCreditService* soap_new_ns2__PayPalCreditService(soap*) allocate
/// - ns2__PayPalCreditService* soap_new_ns2__PayPalCreditService(soap*, int num) allocate array
/// - ns2__PayPalCreditService* soap_new_req_ns2__PayPalCreditService(soap*, ...) allocate, set required members
/// - ns2__PayPalCreditService* soap_new_set_ns2__PayPalCreditService(soap*, ...) allocate, set all public members
/// - ns2__PayPalCreditService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalCreditService(soap*, ns2__PayPalCreditService*) deserialize from a stream
/// - int soap_write_ns2__PayPalCreditService(soap*, ns2__PayPalCreditService*) serialize to a stream
/// - ns2__PayPalCreditService* ns2__PayPalCreditService::soap_dup(soap*) returns deep copy of ns2__PayPalCreditService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalCreditService::soap_del() deep deletes ns2__PayPalCreditService data members, use only after ns2__PayPalCreditService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalCreditService
{ public:
/// Element "payPalPaymentRequestID" of XSD type xs:string.
    wchar_t*                             payPalPaymentRequestID         0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "payPalPaymentRequestToken" of XSD type xs:string.
    wchar_t*                             payPalPaymentRequestToken      0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalEcSetService is a complexType.
///
/// class ns2__PayPalEcSetService operations:
/// - ns2__PayPalEcSetService* soap_new_ns2__PayPalEcSetService(soap*) allocate
/// - ns2__PayPalEcSetService* soap_new_ns2__PayPalEcSetService(soap*, int num) allocate array
/// - ns2__PayPalEcSetService* soap_new_req_ns2__PayPalEcSetService(soap*, ...) allocate, set required members
/// - ns2__PayPalEcSetService* soap_new_set_ns2__PayPalEcSetService(soap*, ...) allocate, set all public members
/// - ns2__PayPalEcSetService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalEcSetService(soap*, ns2__PayPalEcSetService*) deserialize from a stream
/// - int soap_write_ns2__PayPalEcSetService(soap*, ns2__PayPalEcSetService*) serialize to a stream
/// - ns2__PayPalEcSetService* ns2__PayPalEcSetService::soap_dup(soap*) returns deep copy of ns2__PayPalEcSetService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalEcSetService::soap_del() deep deletes ns2__PayPalEcSetService data members, use only after ns2__PayPalEcSetService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalEcSetService
{ public:
/// Element "paypalReturn" of XSD type xs:string.
    wchar_t*                             paypalReturn                   0;	///< Optional element.
/// Element "paypalCancelReturn" of XSD type xs:string.
    wchar_t*                             paypalCancelReturn             0;	///< Optional element.
/// Element "paypalMaxamt" of XSD type xs:string.
    wchar_t*                             paypalMaxamt                   0;	///< Optional element.
/// Element "paypalCustomerEmail" of XSD type xs:string.
    wchar_t*                             paypalCustomerEmail            0;	///< Optional element.
/// Element "paypalDesc" of XSD type xs:string.
    wchar_t*                             paypalDesc                     0;	///< Optional element.
/// Element "paypalReqconfirmshipping" of XSD type xs:string.
    wchar_t*                             paypalReqconfirmshipping       0;	///< Optional element.
/// Element "paypalNoshipping" of XSD type xs:string.
    wchar_t*                             paypalNoshipping               0;	///< Optional element.
/// Element "paypalAddressOverride" of XSD type xs:string.
    wchar_t*                             paypalAddressOverride          0;	///< Optional element.
/// Element "paypalToken" of XSD type xs:string.
    wchar_t*                             paypalToken                    0;	///< Optional element.
/// Element "paypalLc" of XSD type xs:string.
    wchar_t*                             paypalLc                       0;	///< Optional element.
/// Element "paypalPagestyle" of XSD type xs:string.
    wchar_t*                             paypalPagestyle                0;	///< Optional element.
/// Element "paypalHdrimg" of XSD type xs:string.
    wchar_t*                             paypalHdrimg                   0;	///< Optional element.
/// Element "paypalHdrbordercolor" of XSD type xs:string.
    wchar_t*                             paypalHdrbordercolor           0;	///< Optional element.
/// Element "paypalHdrbackcolor" of XSD type xs:string.
    wchar_t*                             paypalHdrbackcolor             0;	///< Optional element.
/// Element "paypalPayflowcolor" of XSD type xs:string.
    wchar_t*                             paypalPayflowcolor             0;	///< Optional element.
/// Element "paypalEcSetRequestID" of XSD type xs:string.
    wchar_t*                             paypalEcSetRequestID           0;	///< Optional element.
/// Element "paypalEcSetRequestToken" of XSD type xs:string.
    wchar_t*                             paypalEcSetRequestToken        0;	///< Optional element.
/// Element "promoCode0" of XSD type xs:string.
    wchar_t*                             promoCode0                     0;	///< Optional element.
/// Element "requestBillingAddress" of XSD type xs:string.
    wchar_t*                             requestBillingAddress          0;	///< Optional element.
/// Element "invoiceNumber" of XSD type xs:string.
    wchar_t*                             invoiceNumber                  0;	///< Optional element.
/// Element "paypalBillingType" of XSD type xs:string.
    wchar_t*                             paypalBillingType              0;	///< Optional element.
/// Element "paypalBillingAgreementDesc" of XSD type xs:string.
    wchar_t*                             paypalBillingAgreementDesc     0;	///< Optional element.
/// Element "paypalPaymentType" of XSD type xs:string.
    wchar_t*                             paypalPaymentType              0;	///< Optional element.
/// Element "paypalBillingAgreementCustom" of XSD type xs:string.
    wchar_t*                             paypalBillingAgreementCustom   0;	///< Optional element.
/// Element "paypalLogoimg" of XSD type xs:string.
    wchar_t*                             paypalLogoimg                  0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalEcGetDetailsService is a complexType.
///
/// class ns2__PayPalEcGetDetailsService operations:
/// - ns2__PayPalEcGetDetailsService* soap_new_ns2__PayPalEcGetDetailsService(soap*) allocate
/// - ns2__PayPalEcGetDetailsService* soap_new_ns2__PayPalEcGetDetailsService(soap*, int num) allocate array
/// - ns2__PayPalEcGetDetailsService* soap_new_req_ns2__PayPalEcGetDetailsService(soap*, ...) allocate, set required members
/// - ns2__PayPalEcGetDetailsService* soap_new_set_ns2__PayPalEcGetDetailsService(soap*, ...) allocate, set all public members
/// - ns2__PayPalEcGetDetailsService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalEcGetDetailsService(soap*, ns2__PayPalEcGetDetailsService*) deserialize from a stream
/// - int soap_write_ns2__PayPalEcGetDetailsService(soap*, ns2__PayPalEcGetDetailsService*) serialize to a stream
/// - ns2__PayPalEcGetDetailsService* ns2__PayPalEcGetDetailsService::soap_dup(soap*) returns deep copy of ns2__PayPalEcGetDetailsService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalEcGetDetailsService::soap_del() deep deletes ns2__PayPalEcGetDetailsService data members, use only after ns2__PayPalEcGetDetailsService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalEcGetDetailsService
{ public:
/// Element "paypalToken" of XSD type xs:string.
    wchar_t*                             paypalToken                    0;	///< Optional element.
/// Element "paypalEcSetRequestID" of XSD type xs:string.
    wchar_t*                             paypalEcSetRequestID           0;	///< Optional element.
/// Element "paypalEcSetRequestToken" of XSD type xs:string.
    wchar_t*                             paypalEcSetRequestToken        0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalEcDoPaymentService is a complexType.
///
/// class ns2__PayPalEcDoPaymentService operations:
/// - ns2__PayPalEcDoPaymentService* soap_new_ns2__PayPalEcDoPaymentService(soap*) allocate
/// - ns2__PayPalEcDoPaymentService* soap_new_ns2__PayPalEcDoPaymentService(soap*, int num) allocate array
/// - ns2__PayPalEcDoPaymentService* soap_new_req_ns2__PayPalEcDoPaymentService(soap*, ...) allocate, set required members
/// - ns2__PayPalEcDoPaymentService* soap_new_set_ns2__PayPalEcDoPaymentService(soap*, ...) allocate, set all public members
/// - ns2__PayPalEcDoPaymentService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalEcDoPaymentService(soap*, ns2__PayPalEcDoPaymentService*) deserialize from a stream
/// - int soap_write_ns2__PayPalEcDoPaymentService(soap*, ns2__PayPalEcDoPaymentService*) serialize to a stream
/// - ns2__PayPalEcDoPaymentService* ns2__PayPalEcDoPaymentService::soap_dup(soap*) returns deep copy of ns2__PayPalEcDoPaymentService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalEcDoPaymentService::soap_del() deep deletes ns2__PayPalEcDoPaymentService data members, use only after ns2__PayPalEcDoPaymentService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalEcDoPaymentService
{ public:
/// Element "paypalToken" of XSD type xs:string.
    wchar_t*                             paypalToken                    0;	///< Optional element.
/// Element "paypalPayerId" of XSD type xs:string.
    wchar_t*                             paypalPayerId                  0;	///< Optional element.
/// Element "paypalCustomerEmail" of XSD type xs:string.
    wchar_t*                             paypalCustomerEmail            0;	///< Optional element.
/// Element "paypalDesc" of XSD type xs:string.
    wchar_t*                             paypalDesc                     0;	///< Optional element.
/// Element "paypalEcSetRequestID" of XSD type xs:string.
    wchar_t*                             paypalEcSetRequestID           0;	///< Optional element.
/// Element "paypalEcSetRequestToken" of XSD type xs:string.
    wchar_t*                             paypalEcSetRequestToken        0;	///< Optional element.
/// Element "promoCode0" of XSD type xs:string.
    wchar_t*                             promoCode0                     0;	///< Optional element.
/// Element "invoiceNumber" of XSD type xs:string.
    wchar_t*                             invoiceNumber                  0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalDoCaptureService is a complexType.
///
/// class ns2__PayPalDoCaptureService operations:
/// - ns2__PayPalDoCaptureService* soap_new_ns2__PayPalDoCaptureService(soap*) allocate
/// - ns2__PayPalDoCaptureService* soap_new_ns2__PayPalDoCaptureService(soap*, int num) allocate array
/// - ns2__PayPalDoCaptureService* soap_new_req_ns2__PayPalDoCaptureService(soap*, ...) allocate, set required members
/// - ns2__PayPalDoCaptureService* soap_new_set_ns2__PayPalDoCaptureService(soap*, ...) allocate, set all public members
/// - ns2__PayPalDoCaptureService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalDoCaptureService(soap*, ns2__PayPalDoCaptureService*) deserialize from a stream
/// - int soap_write_ns2__PayPalDoCaptureService(soap*, ns2__PayPalDoCaptureService*) serialize to a stream
/// - ns2__PayPalDoCaptureService* ns2__PayPalDoCaptureService::soap_dup(soap*) returns deep copy of ns2__PayPalDoCaptureService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalDoCaptureService::soap_del() deep deletes ns2__PayPalDoCaptureService data members, use only after ns2__PayPalDoCaptureService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalDoCaptureService
{ public:
/// Element "paypalAuthorizationId" of XSD type xs:string.
    wchar_t*                             paypalAuthorizationId          0;	///< Optional element.
/// Element "completeType" of XSD type xs:string.
    wchar_t*                             completeType                   0;	///< Optional element.
/// Element "paypalEcDoPaymentRequestID" of XSD type xs:string.
    wchar_t*                             paypalEcDoPaymentRequestID     0;	///< Optional element.
/// Element "paypalEcDoPaymentRequestToken" of XSD type xs:string.
    wchar_t*                             paypalEcDoPaymentRequestToken  0;	///< Optional element.
/// Element "paypalAuthorizationRequestID" of XSD type xs:string.
    wchar_t*                             paypalAuthorizationRequestID   0;	///< Optional element.
/// Element "paypalAuthorizationRequestToken" of XSD type xs:string.
    wchar_t*                             paypalAuthorizationRequestToken 0;	///< Optional element.
/// Element "invoiceNumber" of XSD type xs:string.
    wchar_t*                             invoiceNumber                  0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalAuthReversalService is a complexType.
///
/// class ns2__PayPalAuthReversalService operations:
/// - ns2__PayPalAuthReversalService* soap_new_ns2__PayPalAuthReversalService(soap*) allocate
/// - ns2__PayPalAuthReversalService* soap_new_ns2__PayPalAuthReversalService(soap*, int num) allocate array
/// - ns2__PayPalAuthReversalService* soap_new_req_ns2__PayPalAuthReversalService(soap*, ...) allocate, set required members
/// - ns2__PayPalAuthReversalService* soap_new_set_ns2__PayPalAuthReversalService(soap*, ...) allocate, set all public members
/// - ns2__PayPalAuthReversalService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalAuthReversalService(soap*, ns2__PayPalAuthReversalService*) deserialize from a stream
/// - int soap_write_ns2__PayPalAuthReversalService(soap*, ns2__PayPalAuthReversalService*) serialize to a stream
/// - ns2__PayPalAuthReversalService* ns2__PayPalAuthReversalService::soap_dup(soap*) returns deep copy of ns2__PayPalAuthReversalService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalAuthReversalService::soap_del() deep deletes ns2__PayPalAuthReversalService data members, use only after ns2__PayPalAuthReversalService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalAuthReversalService
{ public:
/// Element "paypalAuthorizationId" of XSD type xs:string.
    wchar_t*                             paypalAuthorizationId          0;	///< Optional element.
/// Element "paypalEcDoPaymentRequestID" of XSD type xs:string.
    wchar_t*                             paypalEcDoPaymentRequestID     0;	///< Optional element.
/// Element "paypalEcDoPaymentRequestToken" of XSD type xs:string.
    wchar_t*                             paypalEcDoPaymentRequestToken  0;	///< Optional element.
/// Element "paypalAuthorizationRequestID" of XSD type xs:string.
    wchar_t*                             paypalAuthorizationRequestID   0;	///< Optional element.
/// Element "paypalAuthorizationRequestToken" of XSD type xs:string.
    wchar_t*                             paypalAuthorizationRequestToken 0;	///< Optional element.
/// Element "paypalEcOrderSetupRequestID" of XSD type xs:string.
    wchar_t*                             paypalEcOrderSetupRequestID    0;	///< Optional element.
/// Element "paypalEcOrderSetupRequestToken" of XSD type xs:string.
    wchar_t*                             paypalEcOrderSetupRequestToken 0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalRefundService is a complexType.
///
/// class ns2__PayPalRefundService operations:
/// - ns2__PayPalRefundService* soap_new_ns2__PayPalRefundService(soap*) allocate
/// - ns2__PayPalRefundService* soap_new_ns2__PayPalRefundService(soap*, int num) allocate array
/// - ns2__PayPalRefundService* soap_new_req_ns2__PayPalRefundService(soap*, ...) allocate, set required members
/// - ns2__PayPalRefundService* soap_new_set_ns2__PayPalRefundService(soap*, ...) allocate, set all public members
/// - ns2__PayPalRefundService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalRefundService(soap*, ns2__PayPalRefundService*) deserialize from a stream
/// - int soap_write_ns2__PayPalRefundService(soap*, ns2__PayPalRefundService*) serialize to a stream
/// - ns2__PayPalRefundService* ns2__PayPalRefundService::soap_dup(soap*) returns deep copy of ns2__PayPalRefundService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalRefundService::soap_del() deep deletes ns2__PayPalRefundService data members, use only after ns2__PayPalRefundService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalRefundService
{ public:
/// Element "paypalDoCaptureRequestID" of XSD type xs:string.
    wchar_t*                             paypalDoCaptureRequestID       0;	///< Optional element.
/// Element "paypalDoCaptureRequestToken" of XSD type xs:string.
    wchar_t*                             paypalDoCaptureRequestToken    0;	///< Optional element.
/// Element "paypalCaptureId" of XSD type xs:string.
    wchar_t*                             paypalCaptureId                0;	///< Optional element.
/// Element "paypalNote" of XSD type xs:string.
    wchar_t*                             paypalNote                     0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalEcOrderSetupService is a complexType.
///
/// class ns2__PayPalEcOrderSetupService operations:
/// - ns2__PayPalEcOrderSetupService* soap_new_ns2__PayPalEcOrderSetupService(soap*) allocate
/// - ns2__PayPalEcOrderSetupService* soap_new_ns2__PayPalEcOrderSetupService(soap*, int num) allocate array
/// - ns2__PayPalEcOrderSetupService* soap_new_req_ns2__PayPalEcOrderSetupService(soap*, ...) allocate, set required members
/// - ns2__PayPalEcOrderSetupService* soap_new_set_ns2__PayPalEcOrderSetupService(soap*, ...) allocate, set all public members
/// - ns2__PayPalEcOrderSetupService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalEcOrderSetupService(soap*, ns2__PayPalEcOrderSetupService*) deserialize from a stream
/// - int soap_write_ns2__PayPalEcOrderSetupService(soap*, ns2__PayPalEcOrderSetupService*) serialize to a stream
/// - ns2__PayPalEcOrderSetupService* ns2__PayPalEcOrderSetupService::soap_dup(soap*) returns deep copy of ns2__PayPalEcOrderSetupService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalEcOrderSetupService::soap_del() deep deletes ns2__PayPalEcOrderSetupService data members, use only after ns2__PayPalEcOrderSetupService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalEcOrderSetupService
{ public:
/// Element "paypalToken" of XSD type xs:string.
    wchar_t*                             paypalToken                    0;	///< Optional element.
/// Element "paypalPayerId" of XSD type xs:string.
    wchar_t*                             paypalPayerId                  0;	///< Optional element.
/// Element "paypalCustomerEmail" of XSD type xs:string.
    wchar_t*                             paypalCustomerEmail            0;	///< Optional element.
/// Element "paypalDesc" of XSD type xs:string.
    wchar_t*                             paypalDesc                     0;	///< Optional element.
/// Element "paypalEcSetRequestID" of XSD type xs:string.
    wchar_t*                             paypalEcSetRequestID           0;	///< Optional element.
/// Element "paypalEcSetRequestToken" of XSD type xs:string.
    wchar_t*                             paypalEcSetRequestToken        0;	///< Optional element.
/// Element "promoCode0" of XSD type xs:string.
    wchar_t*                             promoCode0                     0;	///< Optional element.
/// Element "invoiceNumber" of XSD type xs:string.
    wchar_t*                             invoiceNumber                  0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalAuthorizationService is a complexType.
///
/// class ns2__PayPalAuthorizationService operations:
/// - ns2__PayPalAuthorizationService* soap_new_ns2__PayPalAuthorizationService(soap*) allocate
/// - ns2__PayPalAuthorizationService* soap_new_ns2__PayPalAuthorizationService(soap*, int num) allocate array
/// - ns2__PayPalAuthorizationService* soap_new_req_ns2__PayPalAuthorizationService(soap*, ...) allocate, set required members
/// - ns2__PayPalAuthorizationService* soap_new_set_ns2__PayPalAuthorizationService(soap*, ...) allocate, set all public members
/// - ns2__PayPalAuthorizationService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalAuthorizationService(soap*, ns2__PayPalAuthorizationService*) deserialize from a stream
/// - int soap_write_ns2__PayPalAuthorizationService(soap*, ns2__PayPalAuthorizationService*) serialize to a stream
/// - ns2__PayPalAuthorizationService* ns2__PayPalAuthorizationService::soap_dup(soap*) returns deep copy of ns2__PayPalAuthorizationService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalAuthorizationService::soap_del() deep deletes ns2__PayPalAuthorizationService data members, use only after ns2__PayPalAuthorizationService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalAuthorizationService
{ public:
/// Element "paypalOrderId" of XSD type xs:string.
    wchar_t*                             paypalOrderId                  0;	///< Optional element.
/// Element "paypalEcOrderSetupRequestID" of XSD type xs:string.
    wchar_t*                             paypalEcOrderSetupRequestID    0;	///< Optional element.
/// Element "paypalEcOrderSetupRequestToken" of XSD type xs:string.
    wchar_t*                             paypalEcOrderSetupRequestToken 0;	///< Optional element.
/// Element "paypalDoRefTransactionRequestID" of XSD type xs:string.
    wchar_t*                             paypalDoRefTransactionRequestID 0;	///< Optional element.
/// Element "paypalDoRefTransactionRequestToken" of XSD type xs:string.
    wchar_t*                             paypalDoRefTransactionRequestToken 0;	///< Optional element.
/// Element "paypalCustomerEmail" of XSD type xs:string.
    wchar_t*                             paypalCustomerEmail            0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalUpdateAgreementService is a complexType.
///
/// class ns2__PayPalUpdateAgreementService operations:
/// - ns2__PayPalUpdateAgreementService* soap_new_ns2__PayPalUpdateAgreementService(soap*) allocate
/// - ns2__PayPalUpdateAgreementService* soap_new_ns2__PayPalUpdateAgreementService(soap*, int num) allocate array
/// - ns2__PayPalUpdateAgreementService* soap_new_req_ns2__PayPalUpdateAgreementService(soap*, ...) allocate, set required members
/// - ns2__PayPalUpdateAgreementService* soap_new_set_ns2__PayPalUpdateAgreementService(soap*, ...) allocate, set all public members
/// - ns2__PayPalUpdateAgreementService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalUpdateAgreementService(soap*, ns2__PayPalUpdateAgreementService*) deserialize from a stream
/// - int soap_write_ns2__PayPalUpdateAgreementService(soap*, ns2__PayPalUpdateAgreementService*) serialize to a stream
/// - ns2__PayPalUpdateAgreementService* ns2__PayPalUpdateAgreementService::soap_dup(soap*) returns deep copy of ns2__PayPalUpdateAgreementService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalUpdateAgreementService::soap_del() deep deletes ns2__PayPalUpdateAgreementService data members, use only after ns2__PayPalUpdateAgreementService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalUpdateAgreementService
{ public:
/// Element "paypalBillingAgreementId" of XSD type xs:string.
    wchar_t*                             paypalBillingAgreementId       0;	///< Optional element.
/// Element "paypalBillingAgreementStatus" of XSD type xs:string.
    wchar_t*                             paypalBillingAgreementStatus   0;	///< Optional element.
/// Element "paypalBillingAgreementDesc" of XSD type xs:string.
    wchar_t*                             paypalBillingAgreementDesc     0;	///< Optional element.
/// Element "paypalBillingAgreementCustom" of XSD type xs:string.
    wchar_t*                             paypalBillingAgreementCustom   0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalCreateAgreementService is a complexType.
///
/// class ns2__PayPalCreateAgreementService operations:
/// - ns2__PayPalCreateAgreementService* soap_new_ns2__PayPalCreateAgreementService(soap*) allocate
/// - ns2__PayPalCreateAgreementService* soap_new_ns2__PayPalCreateAgreementService(soap*, int num) allocate array
/// - ns2__PayPalCreateAgreementService* soap_new_req_ns2__PayPalCreateAgreementService(soap*, ...) allocate, set required members
/// - ns2__PayPalCreateAgreementService* soap_new_set_ns2__PayPalCreateAgreementService(soap*, ...) allocate, set all public members
/// - ns2__PayPalCreateAgreementService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalCreateAgreementService(soap*, ns2__PayPalCreateAgreementService*) deserialize from a stream
/// - int soap_write_ns2__PayPalCreateAgreementService(soap*, ns2__PayPalCreateAgreementService*) serialize to a stream
/// - ns2__PayPalCreateAgreementService* ns2__PayPalCreateAgreementService::soap_dup(soap*) returns deep copy of ns2__PayPalCreateAgreementService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalCreateAgreementService::soap_del() deep deletes ns2__PayPalCreateAgreementService data members, use only after ns2__PayPalCreateAgreementService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalCreateAgreementService
{ public:
/// Element "paypalToken" of XSD type xs:string.
    wchar_t*                             paypalToken                    0;	///< Optional element.
/// Element "paypalEcSetRequestID" of XSD type xs:string.
    wchar_t*                             paypalEcSetRequestID           0;	///< Optional element.
/// Element "paypalEcSetRequestToken" of XSD type xs:string.
    wchar_t*                             paypalEcSetRequestToken        0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalDoRefTransactionService is a complexType.
///
/// class ns2__PayPalDoRefTransactionService operations:
/// - ns2__PayPalDoRefTransactionService* soap_new_ns2__PayPalDoRefTransactionService(soap*) allocate
/// - ns2__PayPalDoRefTransactionService* soap_new_ns2__PayPalDoRefTransactionService(soap*, int num) allocate array
/// - ns2__PayPalDoRefTransactionService* soap_new_req_ns2__PayPalDoRefTransactionService(soap*, ...) allocate, set required members
/// - ns2__PayPalDoRefTransactionService* soap_new_set_ns2__PayPalDoRefTransactionService(soap*, ...) allocate, set all public members
/// - ns2__PayPalDoRefTransactionService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalDoRefTransactionService(soap*, ns2__PayPalDoRefTransactionService*) deserialize from a stream
/// - int soap_write_ns2__PayPalDoRefTransactionService(soap*, ns2__PayPalDoRefTransactionService*) serialize to a stream
/// - ns2__PayPalDoRefTransactionService* ns2__PayPalDoRefTransactionService::soap_dup(soap*) returns deep copy of ns2__PayPalDoRefTransactionService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalDoRefTransactionService::soap_del() deep deletes ns2__PayPalDoRefTransactionService data members, use only after ns2__PayPalDoRefTransactionService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalDoRefTransactionService
{ public:
/// Element "paypalBillingAgreementId" of XSD type xs:string.
    wchar_t*                             paypalBillingAgreementId       0;	///< Optional element.
/// Element "paypalPaymentType" of XSD type xs:string.
    wchar_t*                             paypalPaymentType              0;	///< Optional element.
/// Element "paypalReqconfirmshipping" of XSD type xs:string.
    wchar_t*                             paypalReqconfirmshipping       0;	///< Optional element.
/// Element "paypalReturnFmfDetails" of XSD type xs:string.
    wchar_t*                             paypalReturnFmfDetails         0;	///< Optional element.
/// Element "paypalSoftDescriptor" of XSD type xs:string.
    wchar_t*                             paypalSoftDescriptor           0;	///< Optional element.
/// Element "paypalShippingdiscount" of XSD type xs:string.
    wchar_t*                             paypalShippingdiscount         0;	///< Optional element.
/// Element "paypalDesc" of XSD type xs:string.
    wchar_t*                             paypalDesc                     0;	///< Optional element.
/// Element "invoiceNumber" of XSD type xs:string.
    wchar_t*                             invoiceNumber                  0;	///< Optional element.
/// Element "paypalEcNotifyUrl" of XSD type xs:string.
    wchar_t*                             paypalEcNotifyUrl              0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":VoidService is a complexType.
///
/// class ns2__VoidService operations:
/// - ns2__VoidService* soap_new_ns2__VoidService(soap*) allocate
/// - ns2__VoidService* soap_new_ns2__VoidService(soap*, int num) allocate array
/// - ns2__VoidService* soap_new_req_ns2__VoidService(soap*, ...) allocate, set required members
/// - ns2__VoidService* soap_new_set_ns2__VoidService(soap*, ...) allocate, set all public members
/// - ns2__VoidService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__VoidService(soap*, ns2__VoidService*) deserialize from a stream
/// - int soap_write_ns2__VoidService(soap*, ns2__VoidService*) serialize to a stream
/// - ns2__VoidService* ns2__VoidService::soap_dup(soap*) returns deep copy of ns2__VoidService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VoidService::soap_del() deep deletes ns2__VoidService data members, use only after ns2__VoidService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VoidService
{ public:
/// Element "voidRequestID" of XSD type xs:string.
    wchar_t*                             voidRequestID                  0;	///< Optional element.
/// Element "voidRequestToken" of XSD type xs:string.
    wchar_t*                             voidRequestToken               0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PinlessDebitService is a complexType.
///
/// class ns2__PinlessDebitService operations:
/// - ns2__PinlessDebitService* soap_new_ns2__PinlessDebitService(soap*) allocate
/// - ns2__PinlessDebitService* soap_new_ns2__PinlessDebitService(soap*, int num) allocate array
/// - ns2__PinlessDebitService* soap_new_req_ns2__PinlessDebitService(soap*, ...) allocate, set required members
/// - ns2__PinlessDebitService* soap_new_set_ns2__PinlessDebitService(soap*, ...) allocate, set all public members
/// - ns2__PinlessDebitService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PinlessDebitService(soap*, ns2__PinlessDebitService*) deserialize from a stream
/// - int soap_write_ns2__PinlessDebitService(soap*, ns2__PinlessDebitService*) serialize to a stream
/// - ns2__PinlessDebitService* ns2__PinlessDebitService::soap_dup(soap*) returns deep copy of ns2__PinlessDebitService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PinlessDebitService::soap_del() deep deletes ns2__PinlessDebitService data members, use only after ns2__PinlessDebitService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PinlessDebitService
{ public:
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "commerceIndicator" of XSD type xs:string.
    wchar_t*                             commerceIndicator              0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PinlessDebitValidateService is a complexType.
///
/// class ns2__PinlessDebitValidateService operations:
/// - ns2__PinlessDebitValidateService* soap_new_ns2__PinlessDebitValidateService(soap*) allocate
/// - ns2__PinlessDebitValidateService* soap_new_ns2__PinlessDebitValidateService(soap*, int num) allocate array
/// - ns2__PinlessDebitValidateService* soap_new_req_ns2__PinlessDebitValidateService(soap*, ...) allocate, set required members
/// - ns2__PinlessDebitValidateService* soap_new_set_ns2__PinlessDebitValidateService(soap*, ...) allocate, set all public members
/// - ns2__PinlessDebitValidateService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PinlessDebitValidateService(soap*, ns2__PinlessDebitValidateService*) deserialize from a stream
/// - int soap_write_ns2__PinlessDebitValidateService(soap*, ns2__PinlessDebitValidateService*) serialize to a stream
/// - ns2__PinlessDebitValidateService* ns2__PinlessDebitValidateService::soap_dup(soap*) returns deep copy of ns2__PinlessDebitValidateService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PinlessDebitValidateService::soap_del() deep deletes ns2__PinlessDebitValidateService data members, use only after ns2__PinlessDebitValidateService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PinlessDebitValidateService
{ public:
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PinlessDebitReversalService is a complexType.
///
/// class ns2__PinlessDebitReversalService operations:
/// - ns2__PinlessDebitReversalService* soap_new_ns2__PinlessDebitReversalService(soap*) allocate
/// - ns2__PinlessDebitReversalService* soap_new_ns2__PinlessDebitReversalService(soap*, int num) allocate array
/// - ns2__PinlessDebitReversalService* soap_new_req_ns2__PinlessDebitReversalService(soap*, ...) allocate, set required members
/// - ns2__PinlessDebitReversalService* soap_new_set_ns2__PinlessDebitReversalService(soap*, ...) allocate, set all public members
/// - ns2__PinlessDebitReversalService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PinlessDebitReversalService(soap*, ns2__PinlessDebitReversalService*) deserialize from a stream
/// - int soap_write_ns2__PinlessDebitReversalService(soap*, ns2__PinlessDebitReversalService*) serialize to a stream
/// - ns2__PinlessDebitReversalService* ns2__PinlessDebitReversalService::soap_dup(soap*) returns deep copy of ns2__PinlessDebitReversalService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PinlessDebitReversalService::soap_del() deep deletes ns2__PinlessDebitReversalService data members, use only after ns2__PinlessDebitReversalService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PinlessDebitReversalService
{ public:
/// Element "pinlessDebitRequestID" of XSD type xs:string.
    wchar_t*                             pinlessDebitRequestID          0;	///< Optional element.
/// Element "pinlessDebitRequestToken" of XSD type xs:string.
    wchar_t*                             pinlessDebitRequestToken       0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PinDebitPurchaseService is a complexType.
///
/// class ns2__PinDebitPurchaseService operations:
/// - ns2__PinDebitPurchaseService* soap_new_ns2__PinDebitPurchaseService(soap*) allocate
/// - ns2__PinDebitPurchaseService* soap_new_ns2__PinDebitPurchaseService(soap*, int num) allocate array
/// - ns2__PinDebitPurchaseService* soap_new_req_ns2__PinDebitPurchaseService(soap*, ...) allocate, set required members
/// - ns2__PinDebitPurchaseService* soap_new_set_ns2__PinDebitPurchaseService(soap*, ...) allocate, set all public members
/// - ns2__PinDebitPurchaseService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PinDebitPurchaseService(soap*, ns2__PinDebitPurchaseService*) deserialize from a stream
/// - int soap_write_ns2__PinDebitPurchaseService(soap*, ns2__PinDebitPurchaseService*) serialize to a stream
/// - ns2__PinDebitPurchaseService* ns2__PinDebitPurchaseService::soap_dup(soap*) returns deep copy of ns2__PinDebitPurchaseService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PinDebitPurchaseService::soap_del() deep deletes ns2__PinDebitPurchaseService data members, use only after ns2__PinDebitPurchaseService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PinDebitPurchaseService
{ public:
/// Element "networkOrder" of XSD type xs:string.
    wchar_t*                             networkOrder                   0;	///< Optional element.
/// Element "commerceIndicator" of XSD type xs:string.
    wchar_t*                             commerceIndicator              0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "partialAuthIndicator" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        partialAuthIndicator           0;	///< Optional element.
/// Element "overridePaymentMethod" of XSD type xs:string.
    wchar_t*                             overridePaymentMethod          0;	///< Optional element.
/// Element "paymentType" of XSD type xs:string.
    wchar_t*                             paymentType                    0;	///< Optional element.
/// Element "ebtCategory" of XSD type xs:string.
    wchar_t*                             ebtCategory                    0;	///< Optional element.
/// Element "transactionType" of XSD type xs:string.
    wchar_t*                             transactionType                0;	///< Optional element.
/// Element "ebtVoucherSerialNumber" of XSD type xs:string.
    wchar_t*                             ebtVoucherSerialNumber         0;	///< Optional element.
/// Element "authorizationCode" of XSD type xs:string.
    wchar_t*                             authorizationCode              0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PinDebitCreditService is a complexType.
///
/// class ns2__PinDebitCreditService operations:
/// - ns2__PinDebitCreditService* soap_new_ns2__PinDebitCreditService(soap*) allocate
/// - ns2__PinDebitCreditService* soap_new_ns2__PinDebitCreditService(soap*, int num) allocate array
/// - ns2__PinDebitCreditService* soap_new_req_ns2__PinDebitCreditService(soap*, ...) allocate, set required members
/// - ns2__PinDebitCreditService* soap_new_set_ns2__PinDebitCreditService(soap*, ...) allocate, set all public members
/// - ns2__PinDebitCreditService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PinDebitCreditService(soap*, ns2__PinDebitCreditService*) deserialize from a stream
/// - int soap_write_ns2__PinDebitCreditService(soap*, ns2__PinDebitCreditService*) serialize to a stream
/// - ns2__PinDebitCreditService* ns2__PinDebitCreditService::soap_dup(soap*) returns deep copy of ns2__PinDebitCreditService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PinDebitCreditService::soap_del() deep deletes ns2__PinDebitCreditService data members, use only after ns2__PinDebitCreditService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PinDebitCreditService
{ public:
/// Element "networkOrder" of XSD type xs:string.
    wchar_t*                             networkOrder                   0;	///< Optional element.
/// Element "commerceIndicator" of XSD type xs:string.
    wchar_t*                             commerceIndicator              0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "overridePaymentMethod" of XSD type xs:string.
    wchar_t*                             overridePaymentMethod          0;	///< Optional element.
/// Element "paymentType" of XSD type xs:string.
    wchar_t*                             paymentType                    0;	///< Optional element.
/// Element "ebtCategory" of XSD type xs:string.
    wchar_t*                             ebtCategory                    0;	///< Optional element.
/// Element "transactionType" of XSD type xs:string.
    wchar_t*                             transactionType                0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PinDebitReversalService is a complexType.
///
/// class ns2__PinDebitReversalService operations:
/// - ns2__PinDebitReversalService* soap_new_ns2__PinDebitReversalService(soap*) allocate
/// - ns2__PinDebitReversalService* soap_new_ns2__PinDebitReversalService(soap*, int num) allocate array
/// - ns2__PinDebitReversalService* soap_new_req_ns2__PinDebitReversalService(soap*, ...) allocate, set required members
/// - ns2__PinDebitReversalService* soap_new_set_ns2__PinDebitReversalService(soap*, ...) allocate, set all public members
/// - ns2__PinDebitReversalService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PinDebitReversalService(soap*, ns2__PinDebitReversalService*) deserialize from a stream
/// - int soap_write_ns2__PinDebitReversalService(soap*, ns2__PinDebitReversalService*) serialize to a stream
/// - ns2__PinDebitReversalService* ns2__PinDebitReversalService::soap_dup(soap*) returns deep copy of ns2__PinDebitReversalService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PinDebitReversalService::soap_del() deep deletes ns2__PinDebitReversalService data members, use only after ns2__PinDebitReversalService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PinDebitReversalService
{ public:
/// Element "pinDebitRequestID" of XSD type xs:string.
    wchar_t*                             pinDebitRequestID              0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalButtonCreateService is a complexType.
///
/// class ns2__PayPalButtonCreateService operations:
/// - ns2__PayPalButtonCreateService* soap_new_ns2__PayPalButtonCreateService(soap*) allocate
/// - ns2__PayPalButtonCreateService* soap_new_ns2__PayPalButtonCreateService(soap*, int num) allocate array
/// - ns2__PayPalButtonCreateService* soap_new_req_ns2__PayPalButtonCreateService(soap*, ...) allocate, set required members
/// - ns2__PayPalButtonCreateService* soap_new_set_ns2__PayPalButtonCreateService(soap*, ...) allocate, set all public members
/// - ns2__PayPalButtonCreateService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalButtonCreateService(soap*, ns2__PayPalButtonCreateService*) deserialize from a stream
/// - int soap_write_ns2__PayPalButtonCreateService(soap*, ns2__PayPalButtonCreateService*) serialize to a stream
/// - ns2__PayPalButtonCreateService* ns2__PayPalButtonCreateService::soap_dup(soap*) returns deep copy of ns2__PayPalButtonCreateService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalButtonCreateService::soap_del() deep deletes ns2__PayPalButtonCreateService data members, use only after ns2__PayPalButtonCreateService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalButtonCreateService
{ public:
/// Element "buttonType" of XSD type xs:string.
    wchar_t*                             buttonType                     0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalPreapprovedPaymentService is a complexType.
///
/// class ns2__PayPalPreapprovedPaymentService operations:
/// - ns2__PayPalPreapprovedPaymentService* soap_new_ns2__PayPalPreapprovedPaymentService(soap*) allocate
/// - ns2__PayPalPreapprovedPaymentService* soap_new_ns2__PayPalPreapprovedPaymentService(soap*, int num) allocate array
/// - ns2__PayPalPreapprovedPaymentService* soap_new_req_ns2__PayPalPreapprovedPaymentService(soap*, ...) allocate, set required members
/// - ns2__PayPalPreapprovedPaymentService* soap_new_set_ns2__PayPalPreapprovedPaymentService(soap*, ...) allocate, set all public members
/// - ns2__PayPalPreapprovedPaymentService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalPreapprovedPaymentService(soap*, ns2__PayPalPreapprovedPaymentService*) deserialize from a stream
/// - int soap_write_ns2__PayPalPreapprovedPaymentService(soap*, ns2__PayPalPreapprovedPaymentService*) serialize to a stream
/// - ns2__PayPalPreapprovedPaymentService* ns2__PayPalPreapprovedPaymentService::soap_dup(soap*) returns deep copy of ns2__PayPalPreapprovedPaymentService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalPreapprovedPaymentService::soap_del() deep deletes ns2__PayPalPreapprovedPaymentService data members, use only after ns2__PayPalPreapprovedPaymentService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalPreapprovedPaymentService
{ public:
/// Element "mpID" of XSD type xs:string.
    wchar_t*                             mpID                           0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalPreapprovedUpdateService is a complexType.
///
/// class ns2__PayPalPreapprovedUpdateService operations:
/// - ns2__PayPalPreapprovedUpdateService* soap_new_ns2__PayPalPreapprovedUpdateService(soap*) allocate
/// - ns2__PayPalPreapprovedUpdateService* soap_new_ns2__PayPalPreapprovedUpdateService(soap*, int num) allocate array
/// - ns2__PayPalPreapprovedUpdateService* soap_new_req_ns2__PayPalPreapprovedUpdateService(soap*, ...) allocate, set required members
/// - ns2__PayPalPreapprovedUpdateService* soap_new_set_ns2__PayPalPreapprovedUpdateService(soap*, ...) allocate, set all public members
/// - ns2__PayPalPreapprovedUpdateService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalPreapprovedUpdateService(soap*, ns2__PayPalPreapprovedUpdateService*) deserialize from a stream
/// - int soap_write_ns2__PayPalPreapprovedUpdateService(soap*, ns2__PayPalPreapprovedUpdateService*) serialize to a stream
/// - ns2__PayPalPreapprovedUpdateService* ns2__PayPalPreapprovedUpdateService::soap_dup(soap*) returns deep copy of ns2__PayPalPreapprovedUpdateService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalPreapprovedUpdateService::soap_del() deep deletes ns2__PayPalPreapprovedUpdateService data members, use only after ns2__PayPalPreapprovedUpdateService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalPreapprovedUpdateService
{ public:
/// Element "mpID" of XSD type xs:string.
    wchar_t*                             mpID                           0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":ChinaPaymentService is a complexType.
///
/// class ns2__ChinaPaymentService operations:
/// - ns2__ChinaPaymentService* soap_new_ns2__ChinaPaymentService(soap*) allocate
/// - ns2__ChinaPaymentService* soap_new_ns2__ChinaPaymentService(soap*, int num) allocate array
/// - ns2__ChinaPaymentService* soap_new_req_ns2__ChinaPaymentService(soap*, ...) allocate, set required members
/// - ns2__ChinaPaymentService* soap_new_set_ns2__ChinaPaymentService(soap*, ...) allocate, set all public members
/// - ns2__ChinaPaymentService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ChinaPaymentService(soap*, ns2__ChinaPaymentService*) deserialize from a stream
/// - int soap_write_ns2__ChinaPaymentService(soap*, ns2__ChinaPaymentService*) serialize to a stream
/// - ns2__ChinaPaymentService* ns2__ChinaPaymentService::soap_dup(soap*) returns deep copy of ns2__ChinaPaymentService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ChinaPaymentService::soap_del() deep deletes ns2__ChinaPaymentService data members, use only after ns2__ChinaPaymentService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ChinaPaymentService
{ public:
/// Element "paymentMode" of XSD type xs:string.
    wchar_t*                             paymentMode                    0;	///< Optional element.
/// Element "returnURL" of XSD type xs:string.
    wchar_t*                             returnURL                      0;	///< Optional element.
/// Element "pickUpAddress" of XSD type xs:string.
    wchar_t*                             pickUpAddress                  0;	///< Optional element.
/// Element "pickUpPhoneNumber" of XSD type xs:string.
    wchar_t*                             pickUpPhoneNumber              0;	///< Optional element.
/// Element "pickUpPostalCode" of XSD type xs:string.
    wchar_t*                             pickUpPostalCode               0;	///< Optional element.
/// Element "pickUpName" of XSD type xs:string.
    wchar_t*                             pickUpName                     0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":ChinaRefundService is a complexType.
///
/// class ns2__ChinaRefundService operations:
/// - ns2__ChinaRefundService* soap_new_ns2__ChinaRefundService(soap*) allocate
/// - ns2__ChinaRefundService* soap_new_ns2__ChinaRefundService(soap*, int num) allocate array
/// - ns2__ChinaRefundService* soap_new_req_ns2__ChinaRefundService(soap*, ...) allocate, set required members
/// - ns2__ChinaRefundService* soap_new_set_ns2__ChinaRefundService(soap*, ...) allocate, set all public members
/// - ns2__ChinaRefundService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ChinaRefundService(soap*, ns2__ChinaRefundService*) deserialize from a stream
/// - int soap_write_ns2__ChinaRefundService(soap*, ns2__ChinaRefundService*) serialize to a stream
/// - ns2__ChinaRefundService* ns2__ChinaRefundService::soap_dup(soap*) returns deep copy of ns2__ChinaRefundService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ChinaRefundService::soap_del() deep deletes ns2__ChinaRefundService data members, use only after ns2__ChinaRefundService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ChinaRefundService
{ public:
/// Element "chinaPaymentRequestID" of XSD type xs:string.
    wchar_t*                             chinaPaymentRequestID          0;	///< Optional element.
/// Element "chinaPaymentRequestToken" of XSD type xs:string.
    wchar_t*                             chinaPaymentRequestToken       0;	///< Optional element.
/// Element "refundReason" of XSD type xs:string.
    wchar_t*                             refundReason                   0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":BoletoPaymentService is a complexType.
///
/// class ns2__BoletoPaymentService operations:
/// - ns2__BoletoPaymentService* soap_new_ns2__BoletoPaymentService(soap*) allocate
/// - ns2__BoletoPaymentService* soap_new_ns2__BoletoPaymentService(soap*, int num) allocate array
/// - ns2__BoletoPaymentService* soap_new_req_ns2__BoletoPaymentService(soap*, ...) allocate, set required members
/// - ns2__BoletoPaymentService* soap_new_set_ns2__BoletoPaymentService(soap*, ...) allocate, set all public members
/// - ns2__BoletoPaymentService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__BoletoPaymentService(soap*, ns2__BoletoPaymentService*) deserialize from a stream
/// - int soap_write_ns2__BoletoPaymentService(soap*, ns2__BoletoPaymentService*) serialize to a stream
/// - ns2__BoletoPaymentService* ns2__BoletoPaymentService::soap_dup(soap*) returns deep copy of ns2__BoletoPaymentService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BoletoPaymentService::soap_del() deep deletes ns2__BoletoPaymentService data members, use only after ns2__BoletoPaymentService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BoletoPaymentService
{ public:
/// Element "instruction" of XSD type xs:string.
    wchar_t*                             instruction                    0;	///< Optional element.
/// Element "expirationDate" of XSD type xs:string.
    wchar_t*                             expirationDate                 0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PersonalId is a complexType.
///
/// class ns2__PersonalId operations:
/// - ns2__PersonalId* soap_new_ns2__PersonalId(soap*) allocate
/// - ns2__PersonalId* soap_new_ns2__PersonalId(soap*, int num) allocate array
/// - ns2__PersonalId* soap_new_req_ns2__PersonalId(soap*, ...) allocate, set required members
/// - ns2__PersonalId* soap_new_set_ns2__PersonalId(soap*, ...) allocate, set all public members
/// - ns2__PersonalId::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PersonalId(soap*, ns2__PersonalId*) deserialize from a stream
/// - int soap_write_ns2__PersonalId(soap*, ns2__PersonalId*) serialize to a stream
/// - ns2__PersonalId* ns2__PersonalId::soap_dup(soap*) returns deep copy of ns2__PersonalId, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PersonalId::soap_del() deep deletes ns2__PersonalId data members, use only after ns2__PersonalId::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PersonalId
{ public:
/// Element "number" of XSD type xs:string.
    wchar_t*                             number                         0;	///< Optional element.
/// Element "type" of XSD type xs:string.
    wchar_t*                             type                           0;	///< Optional element.
/// Element "name" of XSD type xs:string.
    wchar_t*                             name                           0;	///< Optional element.
/// Element "country" of XSD type xs:string.
    wchar_t*                             country                        0;	///< Optional element.
/// Element "address" of XSD type xs:string.
    wchar_t*                             address                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":Address is a complexType.
///
/// class ns2__Address operations:
/// - ns2__Address* soap_new_ns2__Address(soap*) allocate
/// - ns2__Address* soap_new_ns2__Address(soap*, int num) allocate array
/// - ns2__Address* soap_new_req_ns2__Address(soap*, ...) allocate, set required members
/// - ns2__Address* soap_new_set_ns2__Address(soap*, ...) allocate, set all public members
/// - ns2__Address::soap_default(soap*) reset members to default
/// - int soap_read_ns2__Address(soap*, ns2__Address*) deserialize from a stream
/// - int soap_write_ns2__Address(soap*, ns2__Address*) serialize to a stream
/// - ns2__Address* ns2__Address::soap_dup(soap*) returns deep copy of ns2__Address, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__Address::soap_del() deep deletes ns2__Address data members, use only after ns2__Address::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__Address
{ public:
/// Element "street1" of XSD type xs:string.
    wchar_t*                             street1                        0;	///< Optional element.
/// Element "street2" of XSD type xs:string.
    wchar_t*                             street2                        0;	///< Optional element.
/// Element "city" of XSD type xs:string.
    wchar_t*                             city                           0;	///< Optional element.
/// Element "state" of XSD type xs:string.
    wchar_t*                             state                          0;	///< Optional element.
/// Element "postalCode" of XSD type xs:string.
    wchar_t*                             postalCode                     0;	///< Optional element.
/// Element "country" of XSD type xs:string.
    wchar_t*                             country                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APInitiateService is a complexType.
///
/// class ns2__APInitiateService operations:
/// - ns2__APInitiateService* soap_new_ns2__APInitiateService(soap*) allocate
/// - ns2__APInitiateService* soap_new_ns2__APInitiateService(soap*, int num) allocate array
/// - ns2__APInitiateService* soap_new_req_ns2__APInitiateService(soap*, ...) allocate, set required members
/// - ns2__APInitiateService* soap_new_set_ns2__APInitiateService(soap*, ...) allocate, set all public members
/// - ns2__APInitiateService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APInitiateService(soap*, ns2__APInitiateService*) deserialize from a stream
/// - int soap_write_ns2__APInitiateService(soap*, ns2__APInitiateService*) serialize to a stream
/// - ns2__APInitiateService* ns2__APInitiateService::soap_dup(soap*) returns deep copy of ns2__APInitiateService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APInitiateService::soap_del() deep deletes ns2__APInitiateService data members, use only after ns2__APInitiateService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APInitiateService
{ public:
/// Element "returnURL" of XSD type xs:string.
    wchar_t*                             returnURL                      0;	///< Optional element.
/// Element "productName" of XSD type xs:string.
    wchar_t*                             productName                    0;	///< Optional element.
/// Element "productDescription" of XSD type xs:string.
    wchar_t*                             productDescription             0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "bankID" of XSD type xs:string.
    wchar_t*                             bankID                         0;	///< Optional element.
/// Element "countryCode" of XSD type xs:string.
    wchar_t*                             countryCode                    0;	///< Optional element.
/// Element "escrowAgreement" of XSD type xs:string.
    wchar_t*                             escrowAgreement                0;	///< Optional element.
/// Element "languageInterface" of XSD type xs:string.
    wchar_t*                             languageInterface              0;	///< Optional element.
/// Element "intent" of XSD type xs:string.
    wchar_t*                             intent                         0;	///< Optional element.
/// Element "successURL" of XSD type xs:string.
    wchar_t*                             successURL                     0;	///< Optional element.
/// Element "cancelURL" of XSD type xs:string.
    wchar_t*                             cancelURL                      0;	///< Optional element.
/// Element "failureURL" of XSD type xs:string.
    wchar_t*                             failureURL                     0;	///< Optional element.
/// Element "overridePaymentMethod" of XSD type xs:string.
    wchar_t*                             overridePaymentMethod          0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APCheckStatusService is a complexType.
///
/// class ns2__APCheckStatusService operations:
/// - ns2__APCheckStatusService* soap_new_ns2__APCheckStatusService(soap*) allocate
/// - ns2__APCheckStatusService* soap_new_ns2__APCheckStatusService(soap*, int num) allocate array
/// - ns2__APCheckStatusService* soap_new_req_ns2__APCheckStatusService(soap*, ...) allocate, set required members
/// - ns2__APCheckStatusService* soap_new_set_ns2__APCheckStatusService(soap*, ...) allocate, set all public members
/// - ns2__APCheckStatusService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APCheckStatusService(soap*, ns2__APCheckStatusService*) deserialize from a stream
/// - int soap_write_ns2__APCheckStatusService(soap*, ns2__APCheckStatusService*) serialize to a stream
/// - ns2__APCheckStatusService* ns2__APCheckStatusService::soap_dup(soap*) returns deep copy of ns2__APCheckStatusService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APCheckStatusService::soap_del() deep deletes ns2__APCheckStatusService data members, use only after ns2__APCheckStatusService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APCheckStatusService
{ public:
/// Element "apInitiateRequestID" of XSD type xs:string.
    wchar_t*                             apInitiateRequestID            0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "checkStatusRequestID" of XSD type xs:string.
    wchar_t*                             checkStatusRequestID           0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":RiskUpdateService is a complexType.
///
/// class ns2__RiskUpdateService operations:
/// - ns2__RiskUpdateService* soap_new_ns2__RiskUpdateService(soap*) allocate
/// - ns2__RiskUpdateService* soap_new_ns2__RiskUpdateService(soap*, int num) allocate array
/// - ns2__RiskUpdateService* soap_new_req_ns2__RiskUpdateService(soap*, ...) allocate, set required members
/// - ns2__RiskUpdateService* soap_new_set_ns2__RiskUpdateService(soap*, ...) allocate, set all public members
/// - ns2__RiskUpdateService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__RiskUpdateService(soap*, ns2__RiskUpdateService*) deserialize from a stream
/// - int soap_write_ns2__RiskUpdateService(soap*, ns2__RiskUpdateService*) serialize to a stream
/// - ns2__RiskUpdateService* ns2__RiskUpdateService::soap_dup(soap*) returns deep copy of ns2__RiskUpdateService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__RiskUpdateService::soap_del() deep deletes ns2__RiskUpdateService data members, use only after ns2__RiskUpdateService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__RiskUpdateService
{ public:
/// Element "actionCode" of XSD type xs:string.
    wchar_t*                             actionCode                     0;	///< Optional element.
/// Element "recordID" of XSD type xs:string.
    wchar_t*                             recordID                       0;	///< Optional element.
/// Element "recordName" of XSD type xs:string.
    wchar_t*                             recordName                     0;	///< Optional element.
/// Element "negativeAddress" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":Address.
    ns2__Address*                        negativeAddress                0;	///< Optional element.
/// Element "markingReason" of XSD type xs:string.
    wchar_t*                             markingReason                  0;	///< Optional element.
/// Element "markingNotes" of XSD type xs:string.
    wchar_t*                             markingNotes                   0;	///< Optional element.
/// Element "markingRequestID" of XSD type xs:string.
    wchar_t*                             markingRequestID               0;	///< Optional element.
/// Element "deviceFingerprintSmartID" of XSD type xs:string.
    wchar_t*                             deviceFingerprintSmartID       0;	///< Optional element.
/// Element "deviceFingerprintTrueIPAddress" of XSD type xs:string.
    wchar_t*                             deviceFingerprintTrueIPAddress 0;	///< Optional element.
/// Element "deviceFingerprintProxyIPAddress" of XSD type xs:string.
    wchar_t*                             deviceFingerprintProxyIPAddress 0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":FraudUpdateService is a complexType.
///
/// class ns2__FraudUpdateService operations:
/// - ns2__FraudUpdateService* soap_new_ns2__FraudUpdateService(soap*) allocate
/// - ns2__FraudUpdateService* soap_new_ns2__FraudUpdateService(soap*, int num) allocate array
/// - ns2__FraudUpdateService* soap_new_req_ns2__FraudUpdateService(soap*, ...) allocate, set required members
/// - ns2__FraudUpdateService* soap_new_set_ns2__FraudUpdateService(soap*, ...) allocate, set all public members
/// - ns2__FraudUpdateService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__FraudUpdateService(soap*, ns2__FraudUpdateService*) deserialize from a stream
/// - int soap_write_ns2__FraudUpdateService(soap*, ns2__FraudUpdateService*) serialize to a stream
/// - ns2__FraudUpdateService* ns2__FraudUpdateService::soap_dup(soap*) returns deep copy of ns2__FraudUpdateService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FraudUpdateService::soap_del() deep deletes ns2__FraudUpdateService data members, use only after ns2__FraudUpdateService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FraudUpdateService
{ public:
/// Element "actionCode" of XSD type xs:string.
    wchar_t*                             actionCode                     0;	///< Optional element.
/// Element "markedData" of XSD type xs:string.
    wchar_t*                             markedData                     0;	///< Optional element.
/// Element "markingReason" of XSD type xs:string.
    wchar_t*                             markingReason                  0;	///< Optional element.
/// Element "markingNotes" of XSD type xs:string.
    wchar_t*                             markingNotes                   0;	///< Optional element.
/// Element "markingRequestID" of XSD type xs:string.
    wchar_t*                             markingRequestID               0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CaseManagementActionService is a complexType.
///
/// class ns2__CaseManagementActionService operations:
/// - ns2__CaseManagementActionService* soap_new_ns2__CaseManagementActionService(soap*) allocate
/// - ns2__CaseManagementActionService* soap_new_ns2__CaseManagementActionService(soap*, int num) allocate array
/// - ns2__CaseManagementActionService* soap_new_req_ns2__CaseManagementActionService(soap*, ...) allocate, set required members
/// - ns2__CaseManagementActionService* soap_new_set_ns2__CaseManagementActionService(soap*, ...) allocate, set all public members
/// - ns2__CaseManagementActionService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CaseManagementActionService(soap*, ns2__CaseManagementActionService*) deserialize from a stream
/// - int soap_write_ns2__CaseManagementActionService(soap*, ns2__CaseManagementActionService*) serialize to a stream
/// - ns2__CaseManagementActionService* ns2__CaseManagementActionService::soap_dup(soap*) returns deep copy of ns2__CaseManagementActionService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CaseManagementActionService::soap_del() deep deletes ns2__CaseManagementActionService data members, use only after ns2__CaseManagementActionService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CaseManagementActionService
{ public:
/// Element "actionCode" of XSD type xs:string.
    wchar_t*                             actionCode                     0;	///< Optional element.
/// Element "requestID" of XSD type xs:string.
    wchar_t*                             requestID                      0;	///< Optional element.
/// Element "comments" of XSD type xs:string.
    wchar_t*                             comments                       0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":EncryptPaymentDataService is a complexType.
///
/// class ns2__EncryptPaymentDataService operations:
/// - ns2__EncryptPaymentDataService* soap_new_ns2__EncryptPaymentDataService(soap*) allocate
/// - ns2__EncryptPaymentDataService* soap_new_ns2__EncryptPaymentDataService(soap*, int num) allocate array
/// - ns2__EncryptPaymentDataService* soap_new_req_ns2__EncryptPaymentDataService(soap*, ...) allocate, set required members
/// - ns2__EncryptPaymentDataService* soap_new_set_ns2__EncryptPaymentDataService(soap*, ...) allocate, set all public members
/// - ns2__EncryptPaymentDataService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__EncryptPaymentDataService(soap*, ns2__EncryptPaymentDataService*) deserialize from a stream
/// - int soap_write_ns2__EncryptPaymentDataService(soap*, ns2__EncryptPaymentDataService*) serialize to a stream
/// - ns2__EncryptPaymentDataService* ns2__EncryptPaymentDataService::soap_dup(soap*) returns deep copy of ns2__EncryptPaymentDataService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EncryptPaymentDataService::soap_del() deep deletes ns2__EncryptPaymentDataService data members, use only after ns2__EncryptPaymentDataService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EncryptPaymentDataService
{ public:
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":InvoiceHeader is a complexType.
///
/// class ns2__InvoiceHeader operations:
/// - ns2__InvoiceHeader* soap_new_ns2__InvoiceHeader(soap*) allocate
/// - ns2__InvoiceHeader* soap_new_ns2__InvoiceHeader(soap*, int num) allocate array
/// - ns2__InvoiceHeader* soap_new_req_ns2__InvoiceHeader(soap*, ...) allocate, set required members
/// - ns2__InvoiceHeader* soap_new_set_ns2__InvoiceHeader(soap*, ...) allocate, set all public members
/// - ns2__InvoiceHeader::soap_default(soap*) reset members to default
/// - int soap_read_ns2__InvoiceHeader(soap*, ns2__InvoiceHeader*) deserialize from a stream
/// - int soap_write_ns2__InvoiceHeader(soap*, ns2__InvoiceHeader*) serialize to a stream
/// - ns2__InvoiceHeader* ns2__InvoiceHeader::soap_dup(soap*) returns deep copy of ns2__InvoiceHeader, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__InvoiceHeader::soap_del() deep deletes ns2__InvoiceHeader data members, use only after ns2__InvoiceHeader::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__InvoiceHeader
{ public:
/// Element "merchantDescriptor" of XSD type xs:string.
    wchar_t*                             merchantDescriptor             0;	///< Optional element.
/// Element "merchantDescriptorContact" of XSD type xs:string.
    wchar_t*                             merchantDescriptorContact      0;	///< Optional element.
/// Element "merchantDescriptorAlternate" of XSD type xs:string.
    wchar_t*                             merchantDescriptorAlternate    0;	///< Optional element.
/// Element "merchantDescriptorStreet" of XSD type xs:string.
    wchar_t*                             merchantDescriptorStreet       0;	///< Optional element.
/// Element "merchantDescriptorCity" of XSD type xs:string.
    wchar_t*                             merchantDescriptorCity         0;	///< Optional element.
/// Element "merchantDescriptorState" of XSD type xs:string.
    wchar_t*                             merchantDescriptorState        0;	///< Optional element.
/// Element "merchantDescriptorPostalCode" of XSD type xs:string.
    wchar_t*                             merchantDescriptorPostalCode   0;	///< Optional element.
/// Element "merchantDescriptorCountry" of XSD type xs:string.
    wchar_t*                             merchantDescriptorCountry      0;	///< Optional element.
/// Element "isGift" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        isGift                         0;	///< Optional element.
/// Element "returnsAccepted" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        returnsAccepted                0;	///< Optional element.
/// Element "tenderType" of XSD type xs:string.
    wchar_t*                             tenderType                     0;	///< Optional element.
/// Element "merchantVATRegistrationNumber" of XSD type xs:string.
    wchar_t*                             merchantVATRegistrationNumber  0;	///< Optional element.
/// Element "purchaserOrderDate" of XSD type xs:string.
    wchar_t*                             purchaserOrderDate             0;	///< Optional element.
/// Element "purchaserVATRegistrationNumber" of XSD type xs:string.
    wchar_t*                             purchaserVATRegistrationNumber 0;	///< Optional element.
/// Element "vatInvoiceReferenceNumber" of XSD type xs:string.
    wchar_t*                             vatInvoiceReferenceNumber      0;	///< Optional element.
/// Element "summaryCommodityCode" of XSD type xs:string.
    wchar_t*                             summaryCommodityCode           0;	///< Optional element.
/// Element "supplierOrderReference" of XSD type xs:string.
    wchar_t*                             supplierOrderReference         0;	///< Optional element.
/// Element "userPO" of XSD type xs:string.
    wchar_t*                             userPO                         0;	///< Optional element.
/// Element "costCenter" of XSD type xs:string.
    wchar_t*                             costCenter                     0;	///< Optional element.
/// Element "purchaserCode" of XSD type xs:string.
    wchar_t*                             purchaserCode                  0;	///< Optional element.
/// Element "taxable" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        taxable                        0;	///< Optional element.
/// Element "amexDataTAA1" of XSD type xs:string.
    wchar_t*                             amexDataTAA1                   0;	///< Optional element.
/// Element "amexDataTAA2" of XSD type xs:string.
    wchar_t*                             amexDataTAA2                   0;	///< Optional element.
/// Element "amexDataTAA3" of XSD type xs:string.
    wchar_t*                             amexDataTAA3                   0;	///< Optional element.
/// Element "amexDataTAA4" of XSD type xs:string.
    wchar_t*                             amexDataTAA4                   0;	///< Optional element.
/// Element "invoiceDate" of XSD type xs:string.
    wchar_t*                             invoiceDate                    0;	///< Optional element.
/// Element "totalTaxTypeCode" of XSD type xs:string.
    wchar_t*                             totalTaxTypeCode               0;	///< Optional element.
/// Element "cardAcceptorRefNumber" of XSD type xs:string.
    wchar_t*                             cardAcceptorRefNumber          0;	///< Optional element.
/// Element "authorizedContactName" of XSD type xs:string.
    wchar_t*                             authorizedContactName          0;	///< Optional element.
/// Element "businessApplicationID" of XSD type xs:string.
    wchar_t*                             businessApplicationID          0;	///< Optional element.
/// Element "salesOrganizationID" of XSD type xs:integer.
    xsd__integer*                        salesOrganizationID            0;	///< Optional element.
/// Element "submerchantID" of XSD type xs:string.
    wchar_t*                             submerchantID                  0;	///< Optional element.
/// Element "submerchantName" of XSD type xs:string.
    wchar_t*                             submerchantName                0;	///< Optional element.
/// Element "submerchantStreet" of XSD type xs:string.
    wchar_t*                             submerchantStreet              0;	///< Optional element.
/// Element "submerchantCity" of XSD type xs:string.
    wchar_t*                             submerchantCity                0;	///< Optional element.
/// Element "submerchantPostalCode" of XSD type xs:string.
    wchar_t*                             submerchantPostalCode          0;	///< Optional element.
/// Element "submerchantState" of XSD type xs:string.
    wchar_t*                             submerchantState               0;	///< Optional element.
/// Element "submerchantCountry" of XSD type xs:string.
    wchar_t*                             submerchantCountry             0;	///< Optional element.
/// Element "submerchantEmail" of XSD type xs:string.
    wchar_t*                             submerchantEmail               0;	///< Optional element.
/// Element "submerchantTelephoneNumber" of XSD type xs:string.
    wchar_t*                             submerchantTelephoneNumber     0;	///< Optional element.
/// Element "submerchantRegion" of XSD type xs:string.
    wchar_t*                             submerchantRegion              0;	///< Optional element.
/// Element "submerchantMerchantID" of XSD type xs:string.
    wchar_t*                             submerchantMerchantID          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":BusinessRules is a complexType.
///
/// class ns2__BusinessRules operations:
/// - ns2__BusinessRules* soap_new_ns2__BusinessRules(soap*) allocate
/// - ns2__BusinessRules* soap_new_ns2__BusinessRules(soap*, int num) allocate array
/// - ns2__BusinessRules* soap_new_req_ns2__BusinessRules(soap*, ...) allocate, set required members
/// - ns2__BusinessRules* soap_new_set_ns2__BusinessRules(soap*, ...) allocate, set all public members
/// - ns2__BusinessRules::soap_default(soap*) reset members to default
/// - int soap_read_ns2__BusinessRules(soap*, ns2__BusinessRules*) deserialize from a stream
/// - int soap_write_ns2__BusinessRules(soap*, ns2__BusinessRules*) serialize to a stream
/// - ns2__BusinessRules* ns2__BusinessRules::soap_dup(soap*) returns deep copy of ns2__BusinessRules, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BusinessRules::soap_del() deep deletes ns2__BusinessRules data members, use only after ns2__BusinessRules::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BusinessRules
{ public:
/// Element "ignoreAVSResult" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        ignoreAVSResult                0;	///< Optional element.
/// Element "ignoreCVResult" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        ignoreCVResult                 0;	///< Optional element.
/// Element "ignoreDAVResult" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        ignoreDAVResult                0;	///< Optional element.
/// Element "ignoreExportResult" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        ignoreExportResult             0;	///< Optional element.
/// Element "ignoreValidateResult" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        ignoreValidateResult           0;	///< Optional element.
/// Element "declineAVSFlags" of XSD type xs:string.
    wchar_t*                             declineAVSFlags                0;	///< Optional element.
/// Element "scoreThreshold" of XSD type xs:integer.
    xsd__integer*                        scoreThreshold                 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":BillTo is a complexType.
///
/// class ns2__BillTo operations:
/// - ns2__BillTo* soap_new_ns2__BillTo(soap*) allocate
/// - ns2__BillTo* soap_new_ns2__BillTo(soap*, int num) allocate array
/// - ns2__BillTo* soap_new_req_ns2__BillTo(soap*, ...) allocate, set required members
/// - ns2__BillTo* soap_new_set_ns2__BillTo(soap*, ...) allocate, set all public members
/// - ns2__BillTo::soap_default(soap*) reset members to default
/// - int soap_read_ns2__BillTo(soap*, ns2__BillTo*) deserialize from a stream
/// - int soap_write_ns2__BillTo(soap*, ns2__BillTo*) serialize to a stream
/// - ns2__BillTo* ns2__BillTo::soap_dup(soap*) returns deep copy of ns2__BillTo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BillTo::soap_del() deep deletes ns2__BillTo data members, use only after ns2__BillTo::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BillTo
{ public:
/// Element "title" of XSD type xs:string.
    wchar_t*                             title                          0;	///< Optional element.
/// Element "firstName" of XSD type xs:string.
    wchar_t*                             firstName                      0;	///< Optional element.
/// Element "middleName" of XSD type xs:string.
    wchar_t*                             middleName                     0;	///< Optional element.
/// Element "lastName" of XSD type xs:string.
    wchar_t*                             lastName                       0;	///< Optional element.
/// Element "suffix" of XSD type xs:string.
    wchar_t*                             suffix                         0;	///< Optional element.
/// Element "buildingNumber" of XSD type xs:string.
    wchar_t*                             buildingNumber                 0;	///< Optional element.
/// Element "street1" of XSD type xs:string.
    wchar_t*                             street1                        0;	///< Optional element.
/// Element "street2" of XSD type xs:string.
    wchar_t*                             street2                        0;	///< Optional element.
/// Element "street3" of XSD type xs:string.
    wchar_t*                             street3                        0;	///< Optional element.
/// Element "street4" of XSD type xs:string.
    wchar_t*                             street4                        0;	///< Optional element.
/// Element "city" of XSD type xs:string.
    wchar_t*                             city                           0;	///< Optional element.
/// Element "district" of XSD type xs:string.
    wchar_t*                             district                       0;	///< Optional element.
/// Element "county" of XSD type xs:string.
    wchar_t*                             county                         0;	///< Optional element.
/// Element "state" of XSD type xs:string.
    wchar_t*                             state                          0;	///< Optional element.
/// Element "postalCode" of XSD type xs:string.
    wchar_t*                             postalCode                     0;	///< Optional element.
/// Element "country" of XSD type xs:string.
    wchar_t*                             country                        0;	///< Optional element.
/// Element "company" of XSD type xs:string.
    wchar_t*                             company                        0;	///< Optional element.
/// Element "companyTaxID" of XSD type xs:string.
    wchar_t*                             companyTaxID                   0;	///< Optional element.
/// Element "phoneNumber" of XSD type xs:string.
    wchar_t*                             phoneNumber                    0;	///< Optional element.
/// Element "email" of XSD type xs:string.
    wchar_t*                             email                          0;	///< Optional element.
/// Element "ipAddress" of XSD type xs:string.
    wchar_t*                             ipAddress                      0;	///< Optional element.
/// Element "customerUserName" of XSD type xs:string.
    wchar_t*                             customerUserName               0;	///< Optional element.
/// Element "customerPassword" of XSD type xs:string.
    wchar_t*                             customerPassword               0;	///< Optional element.
/// Element "ipNetworkAddress" of XSD type xs:string.
    wchar_t*                             ipNetworkAddress               0;	///< Optional element.
/// Element "hostname" of XSD type xs:string.
    wchar_t*                             hostname                       0;	///< Optional element.
/// Element "domainName" of XSD type xs:string.
    wchar_t*                             domainName                     0;	///< Optional element.
/// Element "dateOfBirth" of XSD type xs:string.
    wchar_t*                             dateOfBirth                    0;	///< Optional element.
/// Element "driversLicenseNumber" of XSD type xs:string.
    wchar_t*                             driversLicenseNumber           0;	///< Optional element.
/// Element "driversLicenseState" of XSD type xs:string.
    wchar_t*                             driversLicenseState            0;	///< Optional element.
/// Element "ssn" of XSD type xs:string.
    wchar_t*                             ssn                            0;	///< Optional element.
/// Element "customerID" of XSD type xs:string.
    wchar_t*                             customerID                     0;	///< Optional element.
/// Element "httpBrowserType" of XSD type xs:string.
    wchar_t*                             httpBrowserType                0;	///< Optional element.
/// Element "httpBrowserEmail" of XSD type xs:string.
    wchar_t*                             httpBrowserEmail               0;	///< Optional element.
/// Element "httpBrowserCookiesAccepted" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        httpBrowserCookiesAccepted     0;	///< Optional element.
/// Element "nif" of XSD type xs:string.
    wchar_t*                             nif                            0;	///< Optional element.
/// Element "personalID" of XSD type xs:string.
    wchar_t*                             personalID                     0;	///< Optional element.
/// Element "language" of XSD type xs:string.
    wchar_t*                             language                       0;	///< Optional element.
/// Element "name" of XSD type xs:string.
    wchar_t*                             name                           0;	///< Optional element.
/// Element "gender" of XSD type xs:string.
    wchar_t*                             gender                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":ShipTo is a complexType.
///
/// class ns2__ShipTo operations:
/// - ns2__ShipTo* soap_new_ns2__ShipTo(soap*) allocate
/// - ns2__ShipTo* soap_new_ns2__ShipTo(soap*, int num) allocate array
/// - ns2__ShipTo* soap_new_req_ns2__ShipTo(soap*, ...) allocate, set required members
/// - ns2__ShipTo* soap_new_set_ns2__ShipTo(soap*, ...) allocate, set all public members
/// - ns2__ShipTo::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ShipTo(soap*, ns2__ShipTo*) deserialize from a stream
/// - int soap_write_ns2__ShipTo(soap*, ns2__ShipTo*) serialize to a stream
/// - ns2__ShipTo* ns2__ShipTo::soap_dup(soap*) returns deep copy of ns2__ShipTo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ShipTo::soap_del() deep deletes ns2__ShipTo data members, use only after ns2__ShipTo::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ShipTo
{ public:
/// Element "title" of XSD type xs:string.
    wchar_t*                             title                          0;	///< Optional element.
/// Element "firstName" of XSD type xs:string.
    wchar_t*                             firstName                      0;	///< Optional element.
/// Element "middleName" of XSD type xs:string.
    wchar_t*                             middleName                     0;	///< Optional element.
/// Element "lastName" of XSD type xs:string.
    wchar_t*                             lastName                       0;	///< Optional element.
/// Element "suffix" of XSD type xs:string.
    wchar_t*                             suffix                         0;	///< Optional element.
/// Element "street1" of XSD type xs:string.
    wchar_t*                             street1                        0;	///< Optional element.
/// Element "street2" of XSD type xs:string.
    wchar_t*                             street2                        0;	///< Optional element.
/// Element "street3" of XSD type xs:string.
    wchar_t*                             street3                        0;	///< Optional element.
/// Element "street4" of XSD type xs:string.
    wchar_t*                             street4                        0;	///< Optional element.
/// Element "city" of XSD type xs:string.
    wchar_t*                             city                           0;	///< Optional element.
/// Element "county" of XSD type xs:string.
    wchar_t*                             county                         0;	///< Optional element.
/// Element "state" of XSD type xs:string.
    wchar_t*                             state                          0;	///< Optional element.
/// Element "buildingNumber" of XSD type xs:string.
    wchar_t*                             buildingNumber                 0;	///< Optional element.
/// Element "district" of XSD type xs:string.
    wchar_t*                             district                       0;	///< Optional element.
/// Element "postalCode" of XSD type xs:string.
    wchar_t*                             postalCode                     0;	///< Optional element.
/// Element "country" of XSD type xs:string.
    wchar_t*                             country                        0;	///< Optional element.
/// Element "company" of XSD type xs:string.
    wchar_t*                             company                        0;	///< Optional element.
/// Element "phoneNumber" of XSD type xs:string.
    wchar_t*                             phoneNumber                    0;	///< Optional element.
/// Element "email" of XSD type xs:string.
    wchar_t*                             email                          0;	///< Optional element.
/// Element "shippingMethod" of XSD type xs:string.
    wchar_t*                             shippingMethod                 0;	///< Optional element.
/// Element "name" of XSD type xs:string.
    wchar_t*                             name                           0;	///< Optional element.
/// Element "id" of XSD type xs:string.
    wchar_t*                             id                             0;	///< Optional element.
/// Element "addressVerificationStatus" of XSD type xs:string.
    wchar_t*                             addressVerificationStatus      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":ShipFrom is a complexType.
///
/// class ns2__ShipFrom operations:
/// - ns2__ShipFrom* soap_new_ns2__ShipFrom(soap*) allocate
/// - ns2__ShipFrom* soap_new_ns2__ShipFrom(soap*, int num) allocate array
/// - ns2__ShipFrom* soap_new_req_ns2__ShipFrom(soap*, ...) allocate, set required members
/// - ns2__ShipFrom* soap_new_set_ns2__ShipFrom(soap*, ...) allocate, set all public members
/// - ns2__ShipFrom::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ShipFrom(soap*, ns2__ShipFrom*) deserialize from a stream
/// - int soap_write_ns2__ShipFrom(soap*, ns2__ShipFrom*) serialize to a stream
/// - ns2__ShipFrom* ns2__ShipFrom::soap_dup(soap*) returns deep copy of ns2__ShipFrom, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ShipFrom::soap_del() deep deletes ns2__ShipFrom data members, use only after ns2__ShipFrom::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ShipFrom
{ public:
/// Element "title" of XSD type xs:string.
    wchar_t*                             title                          0;	///< Optional element.
/// Element "firstName" of XSD type xs:string.
    wchar_t*                             firstName                      0;	///< Optional element.
/// Element "middleName" of XSD type xs:string.
    wchar_t*                             middleName                     0;	///< Optional element.
/// Element "lastName" of XSD type xs:string.
    wchar_t*                             lastName                       0;	///< Optional element.
/// Element "suffix" of XSD type xs:string.
    wchar_t*                             suffix                         0;	///< Optional element.
/// Element "street1" of XSD type xs:string.
    wchar_t*                             street1                        0;	///< Optional element.
/// Element "street2" of XSD type xs:string.
    wchar_t*                             street2                        0;	///< Optional element.
/// Element "street3" of XSD type xs:string.
    wchar_t*                             street3                        0;	///< Optional element.
/// Element "street4" of XSD type xs:string.
    wchar_t*                             street4                        0;	///< Optional element.
/// Element "city" of XSD type xs:string.
    wchar_t*                             city                           0;	///< Optional element.
/// Element "county" of XSD type xs:string.
    wchar_t*                             county                         0;	///< Optional element.
/// Element "state" of XSD type xs:string.
    wchar_t*                             state                          0;	///< Optional element.
/// Element "postalCode" of XSD type xs:string.
    wchar_t*                             postalCode                     0;	///< Optional element.
/// Element "country" of XSD type xs:string.
    wchar_t*                             country                        0;	///< Optional element.
/// Element "company" of XSD type xs:string.
    wchar_t*                             company                        0;	///< Optional element.
/// Element "phoneNumber" of XSD type xs:string.
    wchar_t*                             phoneNumber                    0;	///< Optional element.
/// Element "email" of XSD type xs:string.
    wchar_t*                             email                          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":Card is a complexType.
///
/// class ns2__Card operations:
/// - ns2__Card* soap_new_ns2__Card(soap*) allocate
/// - ns2__Card* soap_new_ns2__Card(soap*, int num) allocate array
/// - ns2__Card* soap_new_req_ns2__Card(soap*, ...) allocate, set required members
/// - ns2__Card* soap_new_set_ns2__Card(soap*, ...) allocate, set all public members
/// - ns2__Card::soap_default(soap*) reset members to default
/// - int soap_read_ns2__Card(soap*, ns2__Card*) deserialize from a stream
/// - int soap_write_ns2__Card(soap*, ns2__Card*) serialize to a stream
/// - ns2__Card* ns2__Card::soap_dup(soap*) returns deep copy of ns2__Card, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__Card::soap_del() deep deletes ns2__Card data members, use only after ns2__Card::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__Card
{ public:
/// Element "fullName" of XSD type xs:string.
    wchar_t*                             fullName                       0;	///< Optional element.
/// Element "accountNumber" of XSD type xs:string.
    wchar_t*                             accountNumber                  0;	///< Optional element.
/// Element "expirationMonth" of XSD type xs:integer.
    xsd__integer*                        expirationMonth                0;	///< Optional element.
/// Element "expirationYear" of XSD type xs:integer.
    xsd__integer*                        expirationYear                 0;	///< Optional element.
/// Element "cvIndicator" of XSD type xs:string.
    wchar_t*                             cvIndicator                    0;	///< Optional element.
/// Element "cvNumber" of XSD type xs:string.
    wchar_t*                             cvNumber                       0;	///< Optional element.
/// Element "cardType" of XSD type xs:string.
    wchar_t*                             cardType                       0;	///< Optional element.
/// Element "issueNumber" of XSD type xs:string.
    wchar_t*                             issueNumber                    0;	///< Optional element.
/// Element "startMonth" of XSD type xs:integer.
    xsd__integer*                        startMonth                     0;	///< Optional element.
/// Element "startYear" of XSD type xs:integer.
    xsd__integer*                        startYear                      0;	///< Optional element.
/// Element "pin" of XSD type xs:string.
    wchar_t*                             pin                            0;	///< Optional element.
/// Element "accountEncoderID" of XSD type xs:string.
    wchar_t*                             accountEncoderID               0;	///< Optional element.
/// Element "bin" of XSD type xs:string.
    wchar_t*                             bin                            0;	///< Optional element.
/// Element "encryptedData" of XSD type xs:string.
    wchar_t*                             encryptedData                  0;	///< Optional element.
/// Element "suffix" of XSD type xs:string.
    wchar_t*                             suffix                         0;	///< Optional element.
/// Element "prefix" of XSD type xs:string.
    wchar_t*                             prefix                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":Check is a complexType.
///
/// class ns2__Check operations:
/// - ns2__Check* soap_new_ns2__Check(soap*) allocate
/// - ns2__Check* soap_new_ns2__Check(soap*, int num) allocate array
/// - ns2__Check* soap_new_req_ns2__Check(soap*, ...) allocate, set required members
/// - ns2__Check* soap_new_set_ns2__Check(soap*, ...) allocate, set all public members
/// - ns2__Check::soap_default(soap*) reset members to default
/// - int soap_read_ns2__Check(soap*, ns2__Check*) deserialize from a stream
/// - int soap_write_ns2__Check(soap*, ns2__Check*) serialize to a stream
/// - ns2__Check* ns2__Check::soap_dup(soap*) returns deep copy of ns2__Check, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__Check::soap_del() deep deletes ns2__Check data members, use only after ns2__Check::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__Check
{ public:
/// Element "fullName" of XSD type xs:string.
    wchar_t*                             fullName                       0;	///< Optional element.
/// Element "accountNumber" of XSD type xs:string.
    wchar_t*                             accountNumber                  0;	///< Optional element.
/// Element "accountType" of XSD type xs:string.
    wchar_t*                             accountType                    0;	///< Optional element.
/// Element "bankTransitNumber" of XSD type xs:string.
    wchar_t*                             bankTransitNumber              0;	///< Optional element.
/// Element "checkNumber" of XSD type xs:string.
    wchar_t*                             checkNumber                    0;	///< Optional element.
/// Element "secCode" of XSD type xs:string.
    wchar_t*                             secCode                        0;	///< Optional element.
/// Element "accountEncoderID" of XSD type xs:string.
    wchar_t*                             accountEncoderID               0;	///< Optional element.
/// Element "authenticateID" of XSD type xs:string.
    wchar_t*                             authenticateID                 0;	///< Optional element.
/// Element "paymentInfo" of XSD type xs:string.
    wchar_t*                             paymentInfo                    0;	///< Optional element.
/// Element "imageReferenceNumber" of XSD type xs:string.
    wchar_t*                             imageReferenceNumber           0;	///< Optional element.
/// Element "terminalCity" of XSD type xs:string.
    wchar_t*                             terminalCity                   0;	///< Optional element.
/// Element "terminalState" of XSD type xs:string.
    wchar_t*                             terminalState                  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":BML is a complexType.
///
/// class ns2__BML operations:
/// - ns2__BML* soap_new_ns2__BML(soap*) allocate
/// - ns2__BML* soap_new_ns2__BML(soap*, int num) allocate array
/// - ns2__BML* soap_new_req_ns2__BML(soap*, ...) allocate, set required members
/// - ns2__BML* soap_new_set_ns2__BML(soap*, ...) allocate, set all public members
/// - ns2__BML::soap_default(soap*) reset members to default
/// - int soap_read_ns2__BML(soap*, ns2__BML*) deserialize from a stream
/// - int soap_write_ns2__BML(soap*, ns2__BML*) serialize to a stream
/// - ns2__BML* ns2__BML::soap_dup(soap*) returns deep copy of ns2__BML, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BML::soap_del() deep deletes ns2__BML data members, use only after ns2__BML::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BML
{ public:
/// Element "customerBillingAddressChange" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        customerBillingAddressChange   0;	///< Optional element.
/// Element "customerEmailChange" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        customerEmailChange            0;	///< Optional element.
/// Element "customerHasCheckingAccount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        customerHasCheckingAccount     0;	///< Optional element.
/// Element "customerHasSavingsAccount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        customerHasSavingsAccount      0;	///< Optional element.
/// Element "customerPasswordChange" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        customerPasswordChange         0;	///< Optional element.
/// Element "customerPhoneChange" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        customerPhoneChange            0;	///< Optional element.
/// Element "customerRegistrationDate" of XSD type xs:string.
    wchar_t*                             customerRegistrationDate       0;	///< Optional element.
/// Element "customerTypeFlag" of XSD type xs:string.
    wchar_t*                             customerTypeFlag               0;	///< Optional element.
/// Element "grossHouseholdIncome" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         grossHouseholdIncome           0;	///< Optional element.
/// Element "householdIncomeCurrency" of XSD type xs:string.
    wchar_t*                             householdIncomeCurrency        0;	///< Optional element.
/// Element "itemCategory" of XSD type xs:string.
    wchar_t*                             itemCategory                   0;	///< Optional element.
/// Element "merchantPromotionCode" of XSD type xs:string.
    wchar_t*                             merchantPromotionCode          0;	///< Optional element.
/// Element "preapprovalNumber" of XSD type xs:string.
    wchar_t*                             preapprovalNumber              0;	///< Optional element.
/// Element "productDeliveryTypeIndicator" of XSD type xs:string.
    wchar_t*                             productDeliveryTypeIndicator   0;	///< Optional element.
/// Element "residenceStatus" of XSD type xs:string.
    wchar_t*                             residenceStatus                0;	///< Optional element.
/// Element "tcVersion" of XSD type xs:string.
    wchar_t*                             tcVersion                      0;	///< Optional element.
/// Element "yearsAtCurrentResidence" of XSD type xs:integer.
    xsd__integer*                        yearsAtCurrentResidence        0;	///< Optional element.
/// Element "yearsWithCurrentEmployer" of XSD type xs:integer.
    xsd__integer*                        yearsWithCurrentEmployer       0;	///< Optional element.
/// Element "employerStreet1" of XSD type xs:string.
    wchar_t*                             employerStreet1                0;	///< Optional element.
/// Element "employerStreet2" of XSD type xs:string.
    wchar_t*                             employerStreet2                0;	///< Optional element.
/// Element "employerCity" of XSD type xs:string.
    wchar_t*                             employerCity                   0;	///< Optional element.
/// Element "employerCompanyName" of XSD type xs:string.
    wchar_t*                             employerCompanyName            0;	///< Optional element.
/// Element "employerCountry" of XSD type xs:string.
    wchar_t*                             employerCountry                0;	///< Optional element.
/// Element "employerPhoneNumber" of XSD type xs:string.
    wchar_t*                             employerPhoneNumber            0;	///< Optional element.
/// Element "employerPhoneType" of XSD type xs:string.
    wchar_t*                             employerPhoneType              0;	///< Optional element.
/// Element "employerState" of XSD type xs:string.
    wchar_t*                             employerState                  0;	///< Optional element.
/// Element "employerPostalCode" of XSD type xs:string.
    wchar_t*                             employerPostalCode             0;	///< Optional element.
/// Element "shipToPhoneType" of XSD type xs:string.
    wchar_t*                             shipToPhoneType                0;	///< Optional element.
/// Element "billToPhoneType" of XSD type xs:string.
    wchar_t*                             billToPhoneType                0;	///< Optional element.
/// Element "methodOfPayment" of XSD type xs:string.
    wchar_t*                             methodOfPayment                0;	///< Optional element.
/// Element "productType" of XSD type xs:string.
    wchar_t*                             productType                    0;	///< Optional element.
/// Element "customerAuthenticatedByMerchant" of XSD type xs:string.
    wchar_t*                             customerAuthenticatedByMerchant 0;	///< Optional element.
/// Element "backOfficeIndicator" of XSD type xs:string.
    wchar_t*                             backOfficeIndicator            0;	///< Optional element.
/// Element "shipToEqualsBillToNameIndicator" of XSD type xs:string.
    wchar_t*                             shipToEqualsBillToNameIndicator 0;	///< Optional element.
/// Element "shipToEqualsBillToAddressIndicator" of XSD type xs:string.
    wchar_t*                             shipToEqualsBillToAddressIndicator 0;	///< Optional element.
/// Element "alternateIPAddress" of XSD type xs:string.
    wchar_t*                             alternateIPAddress             0;	///< Optional element.
/// Element "businessLegalName" of XSD type xs:string.
    wchar_t*                             businessLegalName              0;	///< Optional element.
/// Element "dbaName" of XSD type xs:string.
    wchar_t*                             dbaName                        0;	///< Optional element.
/// Element "businessAddress1" of XSD type xs:string.
    wchar_t*                             businessAddress1               0;	///< Optional element.
/// Element "businessAddress2" of XSD type xs:string.
    wchar_t*                             businessAddress2               0;	///< Optional element.
/// Element "businessCity" of XSD type xs:string.
    wchar_t*                             businessCity                   0;	///< Optional element.
/// Element "businessState" of XSD type xs:string.
    wchar_t*                             businessState                  0;	///< Optional element.
/// Element "businessPostalCode" of XSD type xs:string.
    wchar_t*                             businessPostalCode             0;	///< Optional element.
/// Element "businessCountry" of XSD type xs:string.
    wchar_t*                             businessCountry                0;	///< Optional element.
/// Element "businessMainPhone" of XSD type xs:string.
    wchar_t*                             businessMainPhone              0;	///< Optional element.
/// Element "userID" of XSD type xs:string.
    wchar_t*                             userID                         0;	///< Optional element.
/// Element "pin" of XSD type xs:string.
    wchar_t*                             pin                            0;	///< Optional element.
/// Element "adminLastName" of XSD type xs:string.
    wchar_t*                             adminLastName                  0;	///< Optional element.
/// Element "adminFirstName" of XSD type xs:string.
    wchar_t*                             adminFirstName                 0;	///< Optional element.
/// Element "adminPhone" of XSD type xs:string.
    wchar_t*                             adminPhone                     0;	///< Optional element.
/// Element "adminFax" of XSD type xs:string.
    wchar_t*                             adminFax                       0;	///< Optional element.
/// Element "adminEmailAddress" of XSD type xs:string.
    wchar_t*                             adminEmailAddress              0;	///< Optional element.
/// Element "adminTitle" of XSD type xs:string.
    wchar_t*                             adminTitle                     0;	///< Optional element.
/// Element "supervisorLastName" of XSD type xs:string.
    wchar_t*                             supervisorLastName             0;	///< Optional element.
/// Element "supervisorFirstName" of XSD type xs:string.
    wchar_t*                             supervisorFirstName            0;	///< Optional element.
/// Element "supervisorEmailAddress" of XSD type xs:string.
    wchar_t*                             supervisorEmailAddress         0;	///< Optional element.
/// Element "businessDAndBNumber" of XSD type xs:string.
    wchar_t*                             businessDAndBNumber            0;	///< Optional element.
/// Element "businessTaxID" of XSD type xs:string.
    wchar_t*                             businessTaxID                  0;	///< Optional element.
/// Element "businessNAICSCode" of XSD type xs:string.
    wchar_t*                             businessNAICSCode              0;	///< Optional element.
/// Element "businessType" of XSD type xs:string.
    wchar_t*                             businessType                   0;	///< Optional element.
/// Element "businessYearsInBusiness" of XSD type xs:string.
    wchar_t*                             businessYearsInBusiness        0;	///< Optional element.
/// Element "businessNumberOfEmployees" of XSD type xs:string.
    wchar_t*                             businessNumberOfEmployees      0;	///< Optional element.
/// Element "businessPONumber" of XSD type xs:string.
    wchar_t*                             businessPONumber               0;	///< Optional element.
/// Element "businessLoanType" of XSD type xs:string.
    wchar_t*                             businessLoanType               0;	///< Optional element.
/// Element "businessApplicationID" of XSD type xs:string.
    wchar_t*                             businessApplicationID          0;	///< Optional element.
/// Element "businessProductCode" of XSD type xs:string.
    wchar_t*                             businessProductCode            0;	///< Optional element.
/// Element "pgLastName" of XSD type xs:string.
    wchar_t*                             pgLastName                     0;	///< Optional element.
/// Element "pgFirstName" of XSD type xs:string.
    wchar_t*                             pgFirstName                    0;	///< Optional element.
/// Element "pgSSN" of XSD type xs:string.
    wchar_t*                             pgSSN                          0;	///< Optional element.
/// Element "pgDateOfBirth" of XSD type xs:string.
    wchar_t*                             pgDateOfBirth                  0;	///< Optional element.
/// Element "pgAnnualIncome" of XSD type xs:string.
    wchar_t*                             pgAnnualIncome                 0;	///< Optional element.
/// Element "pgIncomeCurrencyType" of XSD type xs:string.
    wchar_t*                             pgIncomeCurrencyType           0;	///< Optional element.
/// Element "pgResidenceStatus" of XSD type xs:string.
    wchar_t*                             pgResidenceStatus              0;	///< Optional element.
/// Element "pgCheckingAccountIndicator" of XSD type xs:string.
    wchar_t*                             pgCheckingAccountIndicator     0;	///< Optional element.
/// Element "pgSavingsAccountIndicator" of XSD type xs:string.
    wchar_t*                             pgSavingsAccountIndicator      0;	///< Optional element.
/// Element "pgYearsAtEmployer" of XSD type xs:string.
    wchar_t*                             pgYearsAtEmployer              0;	///< Optional element.
/// Element "pgYearsAtResidence" of XSD type xs:string.
    wchar_t*                             pgYearsAtResidence             0;	///< Optional element.
/// Element "pgHomeAddress1" of XSD type xs:string.
    wchar_t*                             pgHomeAddress1                 0;	///< Optional element.
/// Element "pgHomeAddress2" of XSD type xs:string.
    wchar_t*                             pgHomeAddress2                 0;	///< Optional element.
/// Element "pgHomeCity" of XSD type xs:string.
    wchar_t*                             pgHomeCity                     0;	///< Optional element.
/// Element "pgHomeState" of XSD type xs:string.
    wchar_t*                             pgHomeState                    0;	///< Optional element.
/// Element "pgHomePostalCode" of XSD type xs:string.
    wchar_t*                             pgHomePostalCode               0;	///< Optional element.
/// Element "pgHomeCountry" of XSD type xs:string.
    wchar_t*                             pgHomeCountry                  0;	///< Optional element.
/// Element "pgEmailAddress" of XSD type xs:string.
    wchar_t*                             pgEmailAddress                 0;	///< Optional element.
/// Element "pgHomePhone" of XSD type xs:string.
    wchar_t*                             pgHomePhone                    0;	///< Optional element.
/// Element "pgTitle" of XSD type xs:string.
    wchar_t*                             pgTitle                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":OtherTax is a complexType.
///
/// class ns2__OtherTax operations:
/// - ns2__OtherTax* soap_new_ns2__OtherTax(soap*) allocate
/// - ns2__OtherTax* soap_new_ns2__OtherTax(soap*, int num) allocate array
/// - ns2__OtherTax* soap_new_req_ns2__OtherTax(soap*, ...) allocate, set required members
/// - ns2__OtherTax* soap_new_set_ns2__OtherTax(soap*, ...) allocate, set all public members
/// - ns2__OtherTax::soap_default(soap*) reset members to default
/// - int soap_read_ns2__OtherTax(soap*, ns2__OtherTax*) deserialize from a stream
/// - int soap_write_ns2__OtherTax(soap*, ns2__OtherTax*) serialize to a stream
/// - ns2__OtherTax* ns2__OtherTax::soap_dup(soap*) returns deep copy of ns2__OtherTax, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__OtherTax::soap_del() deep deletes ns2__OtherTax data members, use only after ns2__OtherTax::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__OtherTax
{ public:
/// Element "vatTaxAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         vatTaxAmount                   0;	///< Optional element.
/// Element "vatTaxRate" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         vatTaxRate                     0;	///< Optional element.
/// Element "vatTaxAmountSign" of XSD type xs:string.
    wchar_t*                             vatTaxAmountSign               0;	///< Optional element.
/// Element "alternateTaxAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         alternateTaxAmount             0;	///< Optional element.
/// Element "alternateTaxIndicator" of XSD type xs:string.
    wchar_t*                             alternateTaxIndicator          0;	///< Optional element.
/// Element "alternateTaxID" of XSD type xs:string.
    wchar_t*                             alternateTaxID                 0;	///< Optional element.
/// Element "localTaxAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         localTaxAmount                 0;	///< Optional element.
/// Element "localTaxIndicator" of XSD type xs:integer.
    xsd__integer*                        localTaxIndicator              0;	///< Optional element.
/// Element "nationalTaxAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         nationalTaxAmount              0;	///< Optional element.
/// Element "nationalTaxIndicator" of XSD type xs:integer.
    xsd__integer*                        nationalTaxIndicator           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":Aft is a complexType.
///
/// class ns2__Aft operations:
/// - ns2__Aft* soap_new_ns2__Aft(soap*) allocate
/// - ns2__Aft* soap_new_ns2__Aft(soap*, int num) allocate array
/// - ns2__Aft* soap_new_req_ns2__Aft(soap*, ...) allocate, set required members
/// - ns2__Aft* soap_new_set_ns2__Aft(soap*, ...) allocate, set all public members
/// - ns2__Aft::soap_default(soap*) reset members to default
/// - int soap_read_ns2__Aft(soap*, ns2__Aft*) deserialize from a stream
/// - int soap_write_ns2__Aft(soap*, ns2__Aft*) serialize to a stream
/// - ns2__Aft* ns2__Aft::soap_dup(soap*) returns deep copy of ns2__Aft, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__Aft::soap_del() deep deletes ns2__Aft data members, use only after ns2__Aft::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__Aft
{ public:
/// Element "indicator" of XSD type xs:string.
    wchar_t*                             indicator                      0;	///< Optional element.
/// Element "serviceFee" of XSD type xs:string.
    wchar_t*                             serviceFee                     0;	///< Optional element.
/// Element "foreignExchangeFee" of XSD type xs:string.
    wchar_t*                             foreignExchangeFee             0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":Wallet is a complexType.
///
/// class ns2__Wallet operations:
/// - ns2__Wallet* soap_new_ns2__Wallet(soap*) allocate
/// - ns2__Wallet* soap_new_ns2__Wallet(soap*, int num) allocate array
/// - ns2__Wallet* soap_new_req_ns2__Wallet(soap*, ...) allocate, set required members
/// - ns2__Wallet* soap_new_set_ns2__Wallet(soap*, ...) allocate, set all public members
/// - ns2__Wallet::soap_default(soap*) reset members to default
/// - int soap_read_ns2__Wallet(soap*, ns2__Wallet*) deserialize from a stream
/// - int soap_write_ns2__Wallet(soap*, ns2__Wallet*) serialize to a stream
/// - ns2__Wallet* ns2__Wallet::soap_dup(soap*) returns deep copy of ns2__Wallet, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__Wallet::soap_del() deep deletes ns2__Wallet data members, use only after ns2__Wallet::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__Wallet
{ public:
/// Element "type" of XSD type xs:string.
    wchar_t*                             type                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PurchaseTotals is a complexType.
///
/// class ns2__PurchaseTotals operations:
/// - ns2__PurchaseTotals* soap_new_ns2__PurchaseTotals(soap*) allocate
/// - ns2__PurchaseTotals* soap_new_ns2__PurchaseTotals(soap*, int num) allocate array
/// - ns2__PurchaseTotals* soap_new_req_ns2__PurchaseTotals(soap*, ...) allocate, set required members
/// - ns2__PurchaseTotals* soap_new_set_ns2__PurchaseTotals(soap*, ...) allocate, set all public members
/// - ns2__PurchaseTotals::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PurchaseTotals(soap*, ns2__PurchaseTotals*) deserialize from a stream
/// - int soap_write_ns2__PurchaseTotals(soap*, ns2__PurchaseTotals*) serialize to a stream
/// - ns2__PurchaseTotals* ns2__PurchaseTotals::soap_dup(soap*) returns deep copy of ns2__PurchaseTotals, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PurchaseTotals::soap_del() deep deletes ns2__PurchaseTotals data members, use only after ns2__PurchaseTotals::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PurchaseTotals
{ public:
/// Element "currency" of XSD type xs:string.
    wchar_t*                             currency                       0;	///< Optional element.
/// Element "discountAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         discountAmount                 0;	///< Optional element.
/// Element "discountAmountSign" of XSD type xs:string.
    wchar_t*                             discountAmountSign             0;	///< Optional element.
/// Element "discountManagementIndicator" of XSD type xs:string.
    wchar_t*                             discountManagementIndicator    0;	///< Optional element.
/// Element "taxAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         taxAmount                      0;	///< Optional element.
/// Element "dutyAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         dutyAmount                     0;	///< Optional element.
/// Element "dutyAmountSign" of XSD type xs:string.
    wchar_t*                             dutyAmountSign                 0;	///< Optional element.
/// Element "grandTotalAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         grandTotalAmount               0;	///< Optional element.
/// Element "freightAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         freightAmount                  0;	///< Optional element.
/// Element "freightAmountSign" of XSD type xs:string.
    wchar_t*                             freightAmountSign              0;	///< Optional element.
/// Element "foreignAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         foreignAmount                  0;	///< Optional element.
/// Element "foreignCurrency" of XSD type xs:string.
    wchar_t*                             foreignCurrency                0;	///< Optional element.
/// Element "originalAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         originalAmount                 0;	///< Optional element.
/// Element "originalCurrency" of XSD type xs:string.
    wchar_t*                             originalCurrency               0;	///< Optional element.
/// Element "exchangeRate" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         exchangeRate                   0;	///< Optional element.
/// Element "exchangeRateTimeStamp" of XSD type xs:string.
    wchar_t*                             exchangeRateTimeStamp          0;	///< Optional element.
/// Element "additionalAmountType0" of XSD type xs:string.
    wchar_t*                             additionalAmountType0          0;	///< Optional element.
/// Element "additionalAmount0" of XSD type xs:string.
    wchar_t*                             additionalAmount0              0;	///< Optional element.
/// Element "additionalAmountType1" of XSD type xs:string.
    wchar_t*                             additionalAmountType1          0;	///< Optional element.
/// Element "additionalAmount1" of XSD type xs:string.
    wchar_t*                             additionalAmount1              0;	///< Optional element.
/// Element "additionalAmountType2" of XSD type xs:string.
    wchar_t*                             additionalAmountType2          0;	///< Optional element.
/// Element "additionalAmount2" of XSD type xs:string.
    wchar_t*                             additionalAmount2              0;	///< Optional element.
/// Element "additionalAmountType3" of XSD type xs:string.
    wchar_t*                             additionalAmountType3          0;	///< Optional element.
/// Element "additionalAmount3" of XSD type xs:string.
    wchar_t*                             additionalAmount3              0;	///< Optional element.
/// Element "additionalAmountType4" of XSD type xs:string.
    wchar_t*                             additionalAmountType4          0;	///< Optional element.
/// Element "additionalAmount4" of XSD type xs:string.
    wchar_t*                             additionalAmount4              0;	///< Optional element.
/// Element "serviceFeeAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         serviceFeeAmount               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":FundingTotals is a complexType.
///
/// class ns2__FundingTotals operations:
/// - ns2__FundingTotals* soap_new_ns2__FundingTotals(soap*) allocate
/// - ns2__FundingTotals* soap_new_ns2__FundingTotals(soap*, int num) allocate array
/// - ns2__FundingTotals* soap_new_req_ns2__FundingTotals(soap*, ...) allocate, set required members
/// - ns2__FundingTotals* soap_new_set_ns2__FundingTotals(soap*, ...) allocate, set all public members
/// - ns2__FundingTotals::soap_default(soap*) reset members to default
/// - int soap_read_ns2__FundingTotals(soap*, ns2__FundingTotals*) deserialize from a stream
/// - int soap_write_ns2__FundingTotals(soap*, ns2__FundingTotals*) serialize to a stream
/// - ns2__FundingTotals* ns2__FundingTotals::soap_dup(soap*) returns deep copy of ns2__FundingTotals, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FundingTotals::soap_del() deep deletes ns2__FundingTotals data members, use only after ns2__FundingTotals::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FundingTotals
{ public:
/// Element "currency" of XSD type xs:string.
    wchar_t*                             currency                       0;	///< Optional element.
/// Element "grandTotalAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         grandTotalAmount               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":GECC is a complexType.
///
/// class ns2__GECC operations:
/// - ns2__GECC* soap_new_ns2__GECC(soap*) allocate
/// - ns2__GECC* soap_new_ns2__GECC(soap*, int num) allocate array
/// - ns2__GECC* soap_new_req_ns2__GECC(soap*, ...) allocate, set required members
/// - ns2__GECC* soap_new_set_ns2__GECC(soap*, ...) allocate, set all public members
/// - ns2__GECC::soap_default(soap*) reset members to default
/// - int soap_read_ns2__GECC(soap*, ns2__GECC*) deserialize from a stream
/// - int soap_write_ns2__GECC(soap*, ns2__GECC*) serialize to a stream
/// - ns2__GECC* ns2__GECC::soap_dup(soap*) returns deep copy of ns2__GECC, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__GECC::soap_del() deep deletes ns2__GECC data members, use only after ns2__GECC::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__GECC
{ public:
/// Element "saleType" of XSD type xs:string.
    wchar_t*                             saleType                       0;	///< Optional element.
/// Element "planNumber" of XSD type xs:string.
    wchar_t*                             planNumber                     0;	///< Optional element.
/// Element "sequenceNumber" of XSD type xs:string.
    wchar_t*                             sequenceNumber                 0;	///< Optional element.
/// Element "promotionEndDate" of XSD type xs:string.
    wchar_t*                             promotionEndDate               0;	///< Optional element.
/// Element "promotionPlan" of XSD type xs:string.
    wchar_t*                             promotionPlan                  0;	///< Optional element.
/// Vector of wchar_t* of length 0..7.
    std::vector<wchar_t*               > line                           0:7;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":UCAF is a complexType.
///
/// class ns2__UCAF operations:
/// - ns2__UCAF* soap_new_ns2__UCAF(soap*) allocate
/// - ns2__UCAF* soap_new_ns2__UCAF(soap*, int num) allocate array
/// - ns2__UCAF* soap_new_req_ns2__UCAF(soap*, ...) allocate, set required members
/// - ns2__UCAF* soap_new_set_ns2__UCAF(soap*, ...) allocate, set all public members
/// - ns2__UCAF::soap_default(soap*) reset members to default
/// - int soap_read_ns2__UCAF(soap*, ns2__UCAF*) deserialize from a stream
/// - int soap_write_ns2__UCAF(soap*, ns2__UCAF*) serialize to a stream
/// - ns2__UCAF* ns2__UCAF::soap_dup(soap*) returns deep copy of ns2__UCAF, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__UCAF::soap_del() deep deletes ns2__UCAF data members, use only after ns2__UCAF::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__UCAF
{ public:
/// Element "authenticationData" of XSD type xs:string.
    wchar_t*                             authenticationData             0;	///< Optional element.
/// Element "collectionIndicator" of XSD type xs:string.
    wchar_t*                             collectionIndicator            0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":FundTransfer is a complexType.
///
/// class ns2__FundTransfer operations:
/// - ns2__FundTransfer* soap_new_ns2__FundTransfer(soap*) allocate
/// - ns2__FundTransfer* soap_new_ns2__FundTransfer(soap*, int num) allocate array
/// - ns2__FundTransfer* soap_new_req_ns2__FundTransfer(soap*, ...) allocate, set required members
/// - ns2__FundTransfer* soap_new_set_ns2__FundTransfer(soap*, ...) allocate, set all public members
/// - ns2__FundTransfer::soap_default(soap*) reset members to default
/// - int soap_read_ns2__FundTransfer(soap*, ns2__FundTransfer*) deserialize from a stream
/// - int soap_write_ns2__FundTransfer(soap*, ns2__FundTransfer*) serialize to a stream
/// - ns2__FundTransfer* ns2__FundTransfer::soap_dup(soap*) returns deep copy of ns2__FundTransfer, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FundTransfer::soap_del() deep deletes ns2__FundTransfer data members, use only after ns2__FundTransfer::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FundTransfer
{ public:
/// Element "accountNumber" of XSD type xs:string.
    wchar_t*                             accountNumber                  0;	///< Optional element.
/// Element "accountName" of XSD type xs:string.
    wchar_t*                             accountName                    0;	///< Optional element.
/// Element "bankCheckDigit" of XSD type xs:string.
    wchar_t*                             bankCheckDigit                 0;	///< Optional element.
/// Element "iban" of XSD type xs:string.
    wchar_t*                             iban                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":BankInfo is a complexType.
///
/// class ns2__BankInfo operations:
/// - ns2__BankInfo* soap_new_ns2__BankInfo(soap*) allocate
/// - ns2__BankInfo* soap_new_ns2__BankInfo(soap*, int num) allocate array
/// - ns2__BankInfo* soap_new_req_ns2__BankInfo(soap*, ...) allocate, set required members
/// - ns2__BankInfo* soap_new_set_ns2__BankInfo(soap*, ...) allocate, set all public members
/// - ns2__BankInfo::soap_default(soap*) reset members to default
/// - int soap_read_ns2__BankInfo(soap*, ns2__BankInfo*) deserialize from a stream
/// - int soap_write_ns2__BankInfo(soap*, ns2__BankInfo*) serialize to a stream
/// - ns2__BankInfo* ns2__BankInfo::soap_dup(soap*) returns deep copy of ns2__BankInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BankInfo::soap_del() deep deletes ns2__BankInfo data members, use only after ns2__BankInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BankInfo
{ public:
/// Element "bankCode" of XSD type xs:string.
    wchar_t*                             bankCode                       0;	///< Optional element.
/// Element "name" of XSD type xs:string.
    wchar_t*                             name                           0;	///< Optional element.
/// Element "address" of XSD type xs:string.
    wchar_t*                             address                        0;	///< Optional element.
/// Element "city" of XSD type xs:string.
    wchar_t*                             city                           0;	///< Optional element.
/// Element "country" of XSD type xs:string.
    wchar_t*                             country                        0;	///< Optional element.
/// Element "branchCode" of XSD type xs:string.
    wchar_t*                             branchCode                     0;	///< Optional element.
/// Element "swiftCode" of XSD type xs:string.
    wchar_t*                             swiftCode                      0;	///< Optional element.
/// Element "sortCode" of XSD type xs:string.
    wchar_t*                             sortCode                       0;	///< Optional element.
/// Element "issuerID" of XSD type xs:string.
    wchar_t*                             issuerID                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":RecurringSubscriptionInfo is a complexType.
///
/// class ns2__RecurringSubscriptionInfo operations:
/// - ns2__RecurringSubscriptionInfo* soap_new_ns2__RecurringSubscriptionInfo(soap*) allocate
/// - ns2__RecurringSubscriptionInfo* soap_new_ns2__RecurringSubscriptionInfo(soap*, int num) allocate array
/// - ns2__RecurringSubscriptionInfo* soap_new_req_ns2__RecurringSubscriptionInfo(soap*, ...) allocate, set required members
/// - ns2__RecurringSubscriptionInfo* soap_new_set_ns2__RecurringSubscriptionInfo(soap*, ...) allocate, set all public members
/// - ns2__RecurringSubscriptionInfo::soap_default(soap*) reset members to default
/// - int soap_read_ns2__RecurringSubscriptionInfo(soap*, ns2__RecurringSubscriptionInfo*) deserialize from a stream
/// - int soap_write_ns2__RecurringSubscriptionInfo(soap*, ns2__RecurringSubscriptionInfo*) serialize to a stream
/// - ns2__RecurringSubscriptionInfo* ns2__RecurringSubscriptionInfo::soap_dup(soap*) returns deep copy of ns2__RecurringSubscriptionInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__RecurringSubscriptionInfo::soap_del() deep deletes ns2__RecurringSubscriptionInfo data members, use only after ns2__RecurringSubscriptionInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__RecurringSubscriptionInfo
{ public:
/// Element "subscriptionID" of XSD type xs:string.
    wchar_t*                             subscriptionID                 0;	///< Optional element.
/// Element "status" of XSD type xs:string.
    wchar_t*                             status                         0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "numberOfPayments" of XSD type xs:integer.
    xsd__integer*                        numberOfPayments               0;	///< Optional element.
/// Element "numberOfPaymentsToAdd" of XSD type xs:integer.
    xsd__integer*                        numberOfPaymentsToAdd          0;	///< Optional element.
/// Element "automaticRenew" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        automaticRenew                 0;	///< Optional element.
/// Element "frequency" of XSD type xs:string.
    wchar_t*                             frequency                      0;	///< Optional element.
/// Element "startDate" of XSD type xs:string.
    wchar_t*                             startDate                      0;	///< Optional element.
/// Element "endDate" of XSD type xs:string.
    wchar_t*                             endDate                        0;	///< Optional element.
/// Element "approvalRequired" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        approvalRequired               0;	///< Optional element.
/// Element "event" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionEvent.
    ns2__PaySubscriptionEvent*           event                          0;	///< Optional element.
/// Element "billPayment" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        billPayment                    0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionEvent is a complexType.
///
/// class ns2__PaySubscriptionEvent operations:
/// - ns2__PaySubscriptionEvent* soap_new_ns2__PaySubscriptionEvent(soap*) allocate
/// - ns2__PaySubscriptionEvent* soap_new_ns2__PaySubscriptionEvent(soap*, int num) allocate array
/// - ns2__PaySubscriptionEvent* soap_new_req_ns2__PaySubscriptionEvent(soap*, ...) allocate, set required members
/// - ns2__PaySubscriptionEvent* soap_new_set_ns2__PaySubscriptionEvent(soap*, ...) allocate, set all public members
/// - ns2__PaySubscriptionEvent::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PaySubscriptionEvent(soap*, ns2__PaySubscriptionEvent*) deserialize from a stream
/// - int soap_write_ns2__PaySubscriptionEvent(soap*, ns2__PaySubscriptionEvent*) serialize to a stream
/// - ns2__PaySubscriptionEvent* ns2__PaySubscriptionEvent::soap_dup(soap*) returns deep copy of ns2__PaySubscriptionEvent, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PaySubscriptionEvent::soap_del() deep deletes ns2__PaySubscriptionEvent data members, use only after ns2__PaySubscriptionEvent::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PaySubscriptionEvent
{ public:
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "approvedBy" of XSD type xs:string.
    wchar_t*                             approvedBy                     0;	///< Optional element.
/// Element "number" of XSD type xs:integer.
    xsd__integer*                        number                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":Subscription is a complexType.
///
/// class ns2__Subscription operations:
/// - ns2__Subscription* soap_new_ns2__Subscription(soap*) allocate
/// - ns2__Subscription* soap_new_ns2__Subscription(soap*, int num) allocate array
/// - ns2__Subscription* soap_new_req_ns2__Subscription(soap*, ...) allocate, set required members
/// - ns2__Subscription* soap_new_set_ns2__Subscription(soap*, ...) allocate, set all public members
/// - ns2__Subscription::soap_default(soap*) reset members to default
/// - int soap_read_ns2__Subscription(soap*, ns2__Subscription*) deserialize from a stream
/// - int soap_write_ns2__Subscription(soap*, ns2__Subscription*) serialize to a stream
/// - ns2__Subscription* ns2__Subscription::soap_dup(soap*) returns deep copy of ns2__Subscription, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__Subscription::soap_del() deep deletes ns2__Subscription data members, use only after ns2__Subscription::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__Subscription
{ public:
/// Element "title" of XSD type xs:string.
    wchar_t*                             title                          0;	///< Optional element.
/// Element "paymentMethod" of XSD type xs:string.
    wchar_t*                             paymentMethod                  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PaymentNetworkToken is a complexType.
///
/// class ns2__PaymentNetworkToken operations:
/// - ns2__PaymentNetworkToken* soap_new_ns2__PaymentNetworkToken(soap*) allocate
/// - ns2__PaymentNetworkToken* soap_new_ns2__PaymentNetworkToken(soap*, int num) allocate array
/// - ns2__PaymentNetworkToken* soap_new_req_ns2__PaymentNetworkToken(soap*, ...) allocate, set required members
/// - ns2__PaymentNetworkToken* soap_new_set_ns2__PaymentNetworkToken(soap*, ...) allocate, set all public members
/// - ns2__PaymentNetworkToken::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PaymentNetworkToken(soap*, ns2__PaymentNetworkToken*) deserialize from a stream
/// - int soap_write_ns2__PaymentNetworkToken(soap*, ns2__PaymentNetworkToken*) serialize to a stream
/// - ns2__PaymentNetworkToken* ns2__PaymentNetworkToken::soap_dup(soap*) returns deep copy of ns2__PaymentNetworkToken, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PaymentNetworkToken::soap_del() deep deletes ns2__PaymentNetworkToken data members, use only after ns2__PaymentNetworkToken::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PaymentNetworkToken
{ public:
/// Element "requestorID" of XSD type xs:string.
    wchar_t*                             requestorID                    0;	///< Optional element.
/// Element "transactionType" of XSD type xs:string.
    wchar_t*                             transactionType                0;	///< Optional element.
/// Element "assuranceLevel" of XSD type xs:string.
    wchar_t*                             assuranceLevel                 0;	///< Optional element.
/// Element "accountStatus" of XSD type xs:string.
    wchar_t*                             accountStatus                  0;	///< Optional element.
/// Element "originalCardCategory" of XSD type xs:string.
    wchar_t*                             originalCardCategory           0;	///< Optional element.
/// Element "deviceTechType" of XSD type xs:string.
    wchar_t*                             deviceTechType                 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DecisionManager is a complexType.
///
/// class ns2__DecisionManager operations:
/// - ns2__DecisionManager* soap_new_ns2__DecisionManager(soap*) allocate
/// - ns2__DecisionManager* soap_new_ns2__DecisionManager(soap*, int num) allocate array
/// - ns2__DecisionManager* soap_new_req_ns2__DecisionManager(soap*, ...) allocate, set required members
/// - ns2__DecisionManager* soap_new_set_ns2__DecisionManager(soap*, ...) allocate, set all public members
/// - ns2__DecisionManager::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DecisionManager(soap*, ns2__DecisionManager*) deserialize from a stream
/// - int soap_write_ns2__DecisionManager(soap*, ns2__DecisionManager*) serialize to a stream
/// - ns2__DecisionManager* ns2__DecisionManager::soap_dup(soap*) returns deep copy of ns2__DecisionManager, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DecisionManager::soap_del() deep deletes ns2__DecisionManager data members, use only after ns2__DecisionManager::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DecisionManager
{ public:
/// Element "enabled" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        enabled                        0;	///< Optional element.
/// Element "profile" of XSD type xs:string.
    wchar_t*                             profile                        0;	///< Optional element.
/// Element "travelData" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":DecisionManagerTravelData.
    ns2__DecisionManagerTravelData*      travelData                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DecisionManagerTravelData is a complexType.
///
/// class ns2__DecisionManagerTravelData operations:
/// - ns2__DecisionManagerTravelData* soap_new_ns2__DecisionManagerTravelData(soap*) allocate
/// - ns2__DecisionManagerTravelData* soap_new_ns2__DecisionManagerTravelData(soap*, int num) allocate array
/// - ns2__DecisionManagerTravelData* soap_new_req_ns2__DecisionManagerTravelData(soap*, ...) allocate, set required members
/// - ns2__DecisionManagerTravelData* soap_new_set_ns2__DecisionManagerTravelData(soap*, ...) allocate, set all public members
/// - ns2__DecisionManagerTravelData::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DecisionManagerTravelData(soap*, ns2__DecisionManagerTravelData*) deserialize from a stream
/// - int soap_write_ns2__DecisionManagerTravelData(soap*, ns2__DecisionManagerTravelData*) serialize to a stream
/// - ns2__DecisionManagerTravelData* ns2__DecisionManagerTravelData::soap_dup(soap*) returns deep copy of ns2__DecisionManagerTravelData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DecisionManagerTravelData::soap_del() deep deletes ns2__DecisionManagerTravelData data members, use only after ns2__DecisionManagerTravelData::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DecisionManagerTravelData
{ public:
/// Vector of ns2__DecisionManagerTravelLeg* of length 0..100.
    std::vector<ns2__DecisionManagerTravelLeg*> leg                            0:100;
/// Element "departureDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       departureDateTime              0;	///< Optional element.
/// Element "completeRoute" of XSD type xs:string.
    wchar_t*                             completeRoute                  0;	///< Optional element.
/// Element "journeyType" of XSD type xs:string.
    wchar_t*                             journeyType                    0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DecisionManagerTravelLeg is a complexType.
///
/// class ns2__DecisionManagerTravelLeg operations:
/// - ns2__DecisionManagerTravelLeg* soap_new_ns2__DecisionManagerTravelLeg(soap*) allocate
/// - ns2__DecisionManagerTravelLeg* soap_new_ns2__DecisionManagerTravelLeg(soap*, int num) allocate array
/// - ns2__DecisionManagerTravelLeg* soap_new_req_ns2__DecisionManagerTravelLeg(soap*, ...) allocate, set required members
/// - ns2__DecisionManagerTravelLeg* soap_new_set_ns2__DecisionManagerTravelLeg(soap*, ...) allocate, set all public members
/// - ns2__DecisionManagerTravelLeg::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DecisionManagerTravelLeg(soap*, ns2__DecisionManagerTravelLeg*) deserialize from a stream
/// - int soap_write_ns2__DecisionManagerTravelLeg(soap*, ns2__DecisionManagerTravelLeg*) serialize to a stream
/// - ns2__DecisionManagerTravelLeg* ns2__DecisionManagerTravelLeg::soap_dup(soap*) returns deep copy of ns2__DecisionManagerTravelLeg, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DecisionManagerTravelLeg::soap_del() deep deletes ns2__DecisionManagerTravelLeg data members, use only after ns2__DecisionManagerTravelLeg::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DecisionManagerTravelLeg
{ public:
/// Element "origin" of XSD type xs:string.
    wchar_t*                             origin                         0;	///< Optional element.
/// Element "destination" of XSD type xs:string.
    wchar_t*                             destination                    0;	///< Optional element.
/// Attribute "id" of XSD type xs:integer.
   @xsd__integer*                        id                             0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":Batch is a complexType.
///
/// class ns2__Batch operations:
/// - ns2__Batch* soap_new_ns2__Batch(soap*) allocate
/// - ns2__Batch* soap_new_ns2__Batch(soap*, int num) allocate array
/// - ns2__Batch* soap_new_req_ns2__Batch(soap*, ...) allocate, set required members
/// - ns2__Batch* soap_new_set_ns2__Batch(soap*, ...) allocate, set all public members
/// - ns2__Batch::soap_default(soap*) reset members to default
/// - int soap_read_ns2__Batch(soap*, ns2__Batch*) deserialize from a stream
/// - int soap_write_ns2__Batch(soap*, ns2__Batch*) serialize to a stream
/// - ns2__Batch* ns2__Batch::soap_dup(soap*) returns deep copy of ns2__Batch, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__Batch::soap_del() deep deletes ns2__Batch data members, use only after ns2__Batch::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__Batch
{ public:
/// Element "batchID" of XSD type xs:string.
    wchar_t*                             batchID                        0;	///< Optional element.
/// Element "recordID" of XSD type xs:string.
    wchar_t*                             recordID                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPal is a complexType.
///
/// class ns2__PayPal operations:
/// - ns2__PayPal* soap_new_ns2__PayPal(soap*) allocate
/// - ns2__PayPal* soap_new_ns2__PayPal(soap*, int num) allocate array
/// - ns2__PayPal* soap_new_req_ns2__PayPal(soap*, ...) allocate, set required members
/// - ns2__PayPal* soap_new_set_ns2__PayPal(soap*, ...) allocate, set all public members
/// - ns2__PayPal::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPal(soap*, ns2__PayPal*) deserialize from a stream
/// - int soap_write_ns2__PayPal(soap*, ns2__PayPal*) serialize to a stream
/// - ns2__PayPal* ns2__PayPal::soap_dup(soap*) returns deep copy of ns2__PayPal, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPal::soap_del() deep deletes ns2__PayPal data members, use only after ns2__PayPal::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPal
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="999">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..999.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":JPO is a complexType.
///
/// class ns2__JPO operations:
/// - ns2__JPO* soap_new_ns2__JPO(soap*) allocate
/// - ns2__JPO* soap_new_ns2__JPO(soap*, int num) allocate array
/// - ns2__JPO* soap_new_req_ns2__JPO(soap*, ...) allocate, set required members
/// - ns2__JPO* soap_new_set_ns2__JPO(soap*, ...) allocate, set all public members
/// - ns2__JPO::soap_default(soap*) reset members to default
/// - int soap_read_ns2__JPO(soap*, ns2__JPO*) deserialize from a stream
/// - int soap_write_ns2__JPO(soap*, ns2__JPO*) serialize to a stream
/// - ns2__JPO* ns2__JPO::soap_dup(soap*) returns deep copy of ns2__JPO, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__JPO::soap_del() deep deletes ns2__JPO data members, use only after ns2__JPO::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__JPO
{ public:
/// Element "paymentMethod" of XSD type xs:integer.
    xsd__integer*                        paymentMethod                  0;	///< Optional element.
/// Element "bonusAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         bonusAmount                    0;	///< Optional element.
/// Element "bonuses" of XSD type xs:integer.
    xsd__integer*                        bonuses                        0;	///< Optional element.
/// Element "installments" of XSD type xs:integer.
    xsd__integer*                        installments                   0;	///< Optional element.
/// Element "firstBillingMonth" of XSD type xs:integer.
    xsd__integer*                        firstBillingMonth              0;	///< Optional element.
/// Element "jccaTerminalID" of XSD type xs:integer.
    xsd__integer*                        jccaTerminalID                 0;	///< Optional element.
/// Element "issuerMessage" of XSD type xs:integer.
    xsd__integer*                        issuerMessage                  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":Token is a complexType.
///
/// class ns2__Token operations:
/// - ns2__Token* soap_new_ns2__Token(soap*) allocate
/// - ns2__Token* soap_new_ns2__Token(soap*, int num) allocate array
/// - ns2__Token* soap_new_req_ns2__Token(soap*, ...) allocate, set required members
/// - ns2__Token* soap_new_set_ns2__Token(soap*, ...) allocate, set all public members
/// - ns2__Token::soap_default(soap*) reset members to default
/// - int soap_read_ns2__Token(soap*, ns2__Token*) deserialize from a stream
/// - int soap_write_ns2__Token(soap*, ns2__Token*) serialize to a stream
/// - ns2__Token* ns2__Token::soap_dup(soap*) returns deep copy of ns2__Token, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__Token::soap_del() deep deletes ns2__Token data members, use only after ns2__Token::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__Token
{ public:
/// Element "prefix" of XSD type xs:string.
    wchar_t*                             prefix                         0;	///< Optional element.
/// Element "suffix" of XSD type xs:string.
    wchar_t*                             suffix                         0;	///< Optional element.
/// Element "expirationMonth" of XSD type xs:string.
    wchar_t*                             expirationMonth                0;	///< Optional element.
/// Element "expirationYear" of XSD type xs:string.
    wchar_t*                             expirationYear                 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":AP is a complexType.
///
/// class ns2__AP operations:
/// - ns2__AP* soap_new_ns2__AP(soap*) allocate
/// - ns2__AP* soap_new_ns2__AP(soap*, int num) allocate array
/// - ns2__AP* soap_new_req_ns2__AP(soap*, ...) allocate, set required members
/// - ns2__AP* soap_new_set_ns2__AP(soap*, ...) allocate, set all public members
/// - ns2__AP::soap_default(soap*) reset members to default
/// - int soap_read_ns2__AP(soap*, ns2__AP*) deserialize from a stream
/// - int soap_write_ns2__AP(soap*, ns2__AP*) serialize to a stream
/// - ns2__AP* ns2__AP::soap_dup(soap*) returns deep copy of ns2__AP, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AP::soap_del() deep deletes ns2__AP data members, use only after ns2__AP::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AP
{ public:
/// Element "orderID" of XSD type xs:string.
    wchar_t*                             orderID                        0;	///< Optional element.
/// Element "customerRepresentativeID" of XSD type xs:string.
    wchar_t*                             customerRepresentativeID       0;	///< Optional element.
/// Element "productDescription" of XSD type xs:string.
    wchar_t*                             productDescription             0;	///< Optional element.
/// Element "settlementCurrency" of XSD type xs:string.
    wchar_t*                             settlementCurrency             0;	///< Optional element.
/// Element "subtotalAmount" of XSD type xs:string.
    wchar_t*                             subtotalAmount                 0;	///< Optional element.
/// Element "shippingAmount" of XSD type xs:string.
    wchar_t*                             shippingAmount                 0;	///< Optional element.
/// Element "handlingAmount" of XSD type xs:string.
    wchar_t*                             handlingAmount                 0;	///< Optional element.
/// Element "shippingHandlingAmount" of XSD type xs:string.
    wchar_t*                             shippingHandlingAmount         0;	///< Optional element.
/// Element "additionalAmount" of XSD type xs:string.
    wchar_t*                             additionalAmount               0;	///< Optional element.
/// Element "taxAmount" of XSD type xs:string.
    wchar_t*                             taxAmount                      0;	///< Optional element.
/// Element "giftWrapAmount" of XSD type xs:string.
    wchar_t*                             giftWrapAmount                 0;	///< Optional element.
/// Element "discountAmount" of XSD type xs:string.
    wchar_t*                             discountAmount                 0;	///< Optional element.
/// Element "purchaseID" of XSD type xs:string.
    wchar_t*                             purchaseID                     0;	///< Optional element.
/// Element "productID" of XSD type xs:string.
    wchar_t*                             productID                      0;	///< Optional element.
/// Element "device" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APDevice.
    ns2__APDevice*                       device                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APDevice is a complexType.
///
/// class ns2__APDevice operations:
/// - ns2__APDevice* soap_new_ns2__APDevice(soap*) allocate
/// - ns2__APDevice* soap_new_ns2__APDevice(soap*, int num) allocate array
/// - ns2__APDevice* soap_new_req_ns2__APDevice(soap*, ...) allocate, set required members
/// - ns2__APDevice* soap_new_set_ns2__APDevice(soap*, ...) allocate, set all public members
/// - ns2__APDevice::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APDevice(soap*, ns2__APDevice*) deserialize from a stream
/// - int soap_write_ns2__APDevice(soap*, ns2__APDevice*) serialize to a stream
/// - ns2__APDevice* ns2__APDevice::soap_dup(soap*) returns deep copy of ns2__APDevice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APDevice::soap_del() deep deletes ns2__APDevice data members, use only after ns2__APDevice::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APDevice
{ public:
/// Element "id" of XSD type xs:string.
    wchar_t*                             id                             0;	///< Optional element.
/// Element "type" of XSD type xs:string.
    wchar_t*                             type                           0;	///< Optional element.
/// Element "userAgent" of XSD type xs:string.
    wchar_t*                             userAgent                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APAuthService is a complexType.
///
/// class ns2__APAuthService operations:
/// - ns2__APAuthService* soap_new_ns2__APAuthService(soap*) allocate
/// - ns2__APAuthService* soap_new_ns2__APAuthService(soap*, int num) allocate array
/// - ns2__APAuthService* soap_new_req_ns2__APAuthService(soap*, ...) allocate, set required members
/// - ns2__APAuthService* soap_new_set_ns2__APAuthService(soap*, ...) allocate, set all public members
/// - ns2__APAuthService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APAuthService(soap*, ns2__APAuthService*) deserialize from a stream
/// - int soap_write_ns2__APAuthService(soap*, ns2__APAuthService*) serialize to a stream
/// - ns2__APAuthService* ns2__APAuthService::soap_dup(soap*) returns deep copy of ns2__APAuthService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APAuthService::soap_del() deep deletes ns2__APAuthService data members, use only after ns2__APAuthService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APAuthService
{ public:
/// Element "cancelURL" of XSD type xs:string.
    wchar_t*                             cancelURL                      0;	///< Optional element.
/// Element "successURL" of XSD type xs:string.
    wchar_t*                             successURL                     0;	///< Optional element.
/// Element "failureURL" of XSD type xs:string.
    wchar_t*                             failureURL                     0;	///< Optional element.
/// Element "overridePaymentMethod" of XSD type xs:string.
    wchar_t*                             overridePaymentMethod          0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "preapprovalToken" of XSD type xs:string.
    wchar_t*                             preapprovalToken               0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APAuthReversalService is a complexType.
///
/// class ns2__APAuthReversalService operations:
/// - ns2__APAuthReversalService* soap_new_ns2__APAuthReversalService(soap*) allocate
/// - ns2__APAuthReversalService* soap_new_ns2__APAuthReversalService(soap*, int num) allocate array
/// - ns2__APAuthReversalService* soap_new_req_ns2__APAuthReversalService(soap*, ...) allocate, set required members
/// - ns2__APAuthReversalService* soap_new_set_ns2__APAuthReversalService(soap*, ...) allocate, set all public members
/// - ns2__APAuthReversalService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APAuthReversalService(soap*, ns2__APAuthReversalService*) deserialize from a stream
/// - int soap_write_ns2__APAuthReversalService(soap*, ns2__APAuthReversalService*) serialize to a stream
/// - ns2__APAuthReversalService* ns2__APAuthReversalService::soap_dup(soap*) returns deep copy of ns2__APAuthReversalService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APAuthReversalService::soap_del() deep deletes ns2__APAuthReversalService data members, use only after ns2__APAuthReversalService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APAuthReversalService
{ public:
/// Element "authRequestID" of XSD type xs:string.
    wchar_t*                             authRequestID                  0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APCaptureService is a complexType.
///
/// class ns2__APCaptureService operations:
/// - ns2__APCaptureService* soap_new_ns2__APCaptureService(soap*) allocate
/// - ns2__APCaptureService* soap_new_ns2__APCaptureService(soap*, int num) allocate array
/// - ns2__APCaptureService* soap_new_req_ns2__APCaptureService(soap*, ...) allocate, set required members
/// - ns2__APCaptureService* soap_new_set_ns2__APCaptureService(soap*, ...) allocate, set all public members
/// - ns2__APCaptureService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APCaptureService(soap*, ns2__APCaptureService*) deserialize from a stream
/// - int soap_write_ns2__APCaptureService(soap*, ns2__APCaptureService*) serialize to a stream
/// - ns2__APCaptureService* ns2__APCaptureService::soap_dup(soap*) returns deep copy of ns2__APCaptureService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APCaptureService::soap_del() deep deletes ns2__APCaptureService data members, use only after ns2__APCaptureService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APCaptureService
{ public:
/// Element "authRequestID" of XSD type xs:string.
    wchar_t*                             authRequestID                  0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APOptionsService is a complexType.
///
/// class ns2__APOptionsService operations:
/// - ns2__APOptionsService* soap_new_ns2__APOptionsService(soap*) allocate
/// - ns2__APOptionsService* soap_new_ns2__APOptionsService(soap*, int num) allocate array
/// - ns2__APOptionsService* soap_new_req_ns2__APOptionsService(soap*, ...) allocate, set required members
/// - ns2__APOptionsService* soap_new_set_ns2__APOptionsService(soap*, ...) allocate, set all public members
/// - ns2__APOptionsService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APOptionsService(soap*, ns2__APOptionsService*) deserialize from a stream
/// - int soap_write_ns2__APOptionsService(soap*, ns2__APOptionsService*) serialize to a stream
/// - ns2__APOptionsService* ns2__APOptionsService::soap_dup(soap*) returns deep copy of ns2__APOptionsService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APOptionsService::soap_del() deep deletes ns2__APOptionsService data members, use only after ns2__APOptionsService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APOptionsService
{ public:
/// Element "limit" of XSD type xs:string.
    wchar_t*                             limit                          0;	///< Optional element.
/// Element "offset" of XSD type xs:string.
    wchar_t*                             offset                         0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APRefundService is a complexType.
///
/// class ns2__APRefundService operations:
/// - ns2__APRefundService* soap_new_ns2__APRefundService(soap*) allocate
/// - ns2__APRefundService* soap_new_ns2__APRefundService(soap*, int num) allocate array
/// - ns2__APRefundService* soap_new_req_ns2__APRefundService(soap*, ...) allocate, set required members
/// - ns2__APRefundService* soap_new_set_ns2__APRefundService(soap*, ...) allocate, set all public members
/// - ns2__APRefundService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APRefundService(soap*, ns2__APRefundService*) deserialize from a stream
/// - int soap_write_ns2__APRefundService(soap*, ns2__APRefundService*) serialize to a stream
/// - ns2__APRefundService* ns2__APRefundService::soap_dup(soap*) returns deep copy of ns2__APRefundService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APRefundService::soap_del() deep deletes ns2__APRefundService data members, use only after ns2__APRefundService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APRefundService
{ public:
/// Element "captureRequestID" of XSD type xs:string.
    wchar_t*                             captureRequestID               0;	///< Optional element.
/// Element "refundRequestID" of XSD type xs:string.
    wchar_t*                             refundRequestID                0;	///< Optional element.
/// Element "reason" of XSD type xs:string.
    wchar_t*                             reason                         0;	///< Optional element.
/// Element "note" of XSD type xs:string.
    wchar_t*                             note                           0;	///< Optional element.
/// Element "apInitiateRequestID" of XSD type xs:string.
    wchar_t*                             apInitiateRequestID            0;	///< Optional element.
/// Element "returnRef" of XSD type xs:string.
    wchar_t*                             returnRef                      0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APSaleService is a complexType.
///
/// class ns2__APSaleService operations:
/// - ns2__APSaleService* soap_new_ns2__APSaleService(soap*) allocate
/// - ns2__APSaleService* soap_new_ns2__APSaleService(soap*, int num) allocate array
/// - ns2__APSaleService* soap_new_req_ns2__APSaleService(soap*, ...) allocate, set required members
/// - ns2__APSaleService* soap_new_set_ns2__APSaleService(soap*, ...) allocate, set all public members
/// - ns2__APSaleService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APSaleService(soap*, ns2__APSaleService*) deserialize from a stream
/// - int soap_write_ns2__APSaleService(soap*, ns2__APSaleService*) serialize to a stream
/// - ns2__APSaleService* ns2__APSaleService::soap_dup(soap*) returns deep copy of ns2__APSaleService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APSaleService::soap_del() deep deletes ns2__APSaleService data members, use only after ns2__APSaleService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APSaleService
{ public:
/// Element "cancelURL" of XSD type xs:string.
    wchar_t*                             cancelURL                      0;	///< Optional element.
/// Element "successURL" of XSD type xs:string.
    wchar_t*                             successURL                     0;	///< Optional element.
/// Element "failureURL" of XSD type xs:string.
    wchar_t*                             failureURL                     0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "overridePaymentMethod" of XSD type xs:string.
    wchar_t*                             overridePaymentMethod          0;	///< Optional element.
/// Element "paymentOptionID" of XSD type xs:string.
    wchar_t*                             paymentOptionID                0;	///< Optional element.
/// Element "transactionTimeout" of XSD type xs:string.
    wchar_t*                             transactionTimeout             0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APCheckOutDetailsService is a complexType.
///
/// class ns2__APCheckOutDetailsService operations:
/// - ns2__APCheckOutDetailsService* soap_new_ns2__APCheckOutDetailsService(soap*) allocate
/// - ns2__APCheckOutDetailsService* soap_new_ns2__APCheckOutDetailsService(soap*, int num) allocate array
/// - ns2__APCheckOutDetailsService* soap_new_req_ns2__APCheckOutDetailsService(soap*, ...) allocate, set required members
/// - ns2__APCheckOutDetailsService* soap_new_set_ns2__APCheckOutDetailsService(soap*, ...) allocate, set all public members
/// - ns2__APCheckOutDetailsService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APCheckOutDetailsService(soap*, ns2__APCheckOutDetailsService*) deserialize from a stream
/// - int soap_write_ns2__APCheckOutDetailsService(soap*, ns2__APCheckOutDetailsService*) serialize to a stream
/// - ns2__APCheckOutDetailsService* ns2__APCheckOutDetailsService::soap_dup(soap*) returns deep copy of ns2__APCheckOutDetailsService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APCheckOutDetailsService::soap_del() deep deletes ns2__APCheckOutDetailsService data members, use only after ns2__APCheckOutDetailsService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APCheckOutDetailsService
{ public:
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APTransactionDetailsService is a complexType.
///
/// class ns2__APTransactionDetailsService operations:
/// - ns2__APTransactionDetailsService* soap_new_ns2__APTransactionDetailsService(soap*) allocate
/// - ns2__APTransactionDetailsService* soap_new_ns2__APTransactionDetailsService(soap*, int num) allocate array
/// - ns2__APTransactionDetailsService* soap_new_req_ns2__APTransactionDetailsService(soap*, ...) allocate, set required members
/// - ns2__APTransactionDetailsService* soap_new_set_ns2__APTransactionDetailsService(soap*, ...) allocate, set all public members
/// - ns2__APTransactionDetailsService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APTransactionDetailsService(soap*, ns2__APTransactionDetailsService*) deserialize from a stream
/// - int soap_write_ns2__APTransactionDetailsService(soap*, ns2__APTransactionDetailsService*) serialize to a stream
/// - ns2__APTransactionDetailsService* ns2__APTransactionDetailsService::soap_dup(soap*) returns deep copy of ns2__APTransactionDetailsService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APTransactionDetailsService::soap_del() deep deletes ns2__APTransactionDetailsService data members, use only after ns2__APTransactionDetailsService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APTransactionDetailsService
{ public:
/// Element "transactionDetailsRequestID" of XSD type xs:string.
    wchar_t*                             transactionDetailsRequestID    0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APConfirmPurchaseService is a complexType.
///
/// class ns2__APConfirmPurchaseService operations:
/// - ns2__APConfirmPurchaseService* soap_new_ns2__APConfirmPurchaseService(soap*) allocate
/// - ns2__APConfirmPurchaseService* soap_new_ns2__APConfirmPurchaseService(soap*, int num) allocate array
/// - ns2__APConfirmPurchaseService* soap_new_req_ns2__APConfirmPurchaseService(soap*, ...) allocate, set required members
/// - ns2__APConfirmPurchaseService* soap_new_set_ns2__APConfirmPurchaseService(soap*, ...) allocate, set all public members
/// - ns2__APConfirmPurchaseService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APConfirmPurchaseService(soap*, ns2__APConfirmPurchaseService*) deserialize from a stream
/// - int soap_write_ns2__APConfirmPurchaseService(soap*, ns2__APConfirmPurchaseService*) serialize to a stream
/// - ns2__APConfirmPurchaseService* ns2__APConfirmPurchaseService::soap_dup(soap*) returns deep copy of ns2__APConfirmPurchaseService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APConfirmPurchaseService::soap_del() deep deletes ns2__APConfirmPurchaseService data members, use only after ns2__APConfirmPurchaseService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APConfirmPurchaseService
{ public:
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalGetTxnDetailsService is a complexType.
///
/// class ns2__PayPalGetTxnDetailsService operations:
/// - ns2__PayPalGetTxnDetailsService* soap_new_ns2__PayPalGetTxnDetailsService(soap*) allocate
/// - ns2__PayPalGetTxnDetailsService* soap_new_ns2__PayPalGetTxnDetailsService(soap*, int num) allocate array
/// - ns2__PayPalGetTxnDetailsService* soap_new_req_ns2__PayPalGetTxnDetailsService(soap*, ...) allocate, set required members
/// - ns2__PayPalGetTxnDetailsService* soap_new_set_ns2__PayPalGetTxnDetailsService(soap*, ...) allocate, set all public members
/// - ns2__PayPalGetTxnDetailsService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalGetTxnDetailsService(soap*, ns2__PayPalGetTxnDetailsService*) deserialize from a stream
/// - int soap_write_ns2__PayPalGetTxnDetailsService(soap*, ns2__PayPalGetTxnDetailsService*) serialize to a stream
/// - ns2__PayPalGetTxnDetailsService* ns2__PayPalGetTxnDetailsService::soap_dup(soap*) returns deep copy of ns2__PayPalGetTxnDetailsService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalGetTxnDetailsService::soap_del() deep deletes ns2__PayPalGetTxnDetailsService data members, use only after ns2__PayPalGetTxnDetailsService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalGetTxnDetailsService
{ public:
/// Element "transactionID" of XSD type xs:string.
    wchar_t*                             transactionID                  0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalTransactionSearchService is a complexType.
///
/// class ns2__PayPalTransactionSearchService operations:
/// - ns2__PayPalTransactionSearchService* soap_new_ns2__PayPalTransactionSearchService(soap*) allocate
/// - ns2__PayPalTransactionSearchService* soap_new_ns2__PayPalTransactionSearchService(soap*, int num) allocate array
/// - ns2__PayPalTransactionSearchService* soap_new_req_ns2__PayPalTransactionSearchService(soap*, ...) allocate, set required members
/// - ns2__PayPalTransactionSearchService* soap_new_set_ns2__PayPalTransactionSearchService(soap*, ...) allocate, set all public members
/// - ns2__PayPalTransactionSearchService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalTransactionSearchService(soap*, ns2__PayPalTransactionSearchService*) deserialize from a stream
/// - int soap_write_ns2__PayPalTransactionSearchService(soap*, ns2__PayPalTransactionSearchService*) serialize to a stream
/// - ns2__PayPalTransactionSearchService* ns2__PayPalTransactionSearchService::soap_dup(soap*) returns deep copy of ns2__PayPalTransactionSearchService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalTransactionSearchService::soap_del() deep deletes ns2__PayPalTransactionSearchService data members, use only after ns2__PayPalTransactionSearchService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalTransactionSearchService
{ public:
/// Element "startDate" of XSD type xs:string.
    wchar_t*                             startDate                      0;	///< Optional element.
/// Element "endDate" of XSD type xs:string.
    wchar_t*                             endDate                        0;	///< Optional element.
/// Element "paypalCustomerEmail" of XSD type xs:string.
    wchar_t*                             paypalCustomerEmail            0;	///< Optional element.
/// Element "paypalReceiptId" of XSD type xs:string.
    wchar_t*                             paypalReceiptId                0;	///< Optional element.
/// Element "transactionID" of XSD type xs:string.
    wchar_t*                             transactionID                  0;	///< Optional element.
/// Element "invoiceNumber" of XSD type xs:string.
    wchar_t*                             invoiceNumber                  0;	///< Optional element.
/// Element "grandTotalAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         grandTotalAmount               0;	///< Optional element.
/// Element "currency" of XSD type xs:string.
    wchar_t*                             currency                       0;	///< Optional element.
/// Element "paymentStatus" of XSD type xs:string.
    wchar_t*                             paymentStatus                  0;	///< Optional element.
/// Element "payerSalutation" of XSD type xs:string.
    wchar_t*                             payerSalutation                0;	///< Optional element.
/// Element "payerFirstname" of XSD type xs:string.
    wchar_t*                             payerFirstname                 0;	///< Optional element.
/// Element "payerMiddlename" of XSD type xs:string.
    wchar_t*                             payerMiddlename                0;	///< Optional element.
/// Element "payerLastname" of XSD type xs:string.
    wchar_t*                             payerLastname                  0;	///< Optional element.
/// Element "payerSuffix" of XSD type xs:string.
    wchar_t*                             payerSuffix                    0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":Recipient is a complexType.
///
/// class ns2__Recipient operations:
/// - ns2__Recipient* soap_new_ns2__Recipient(soap*) allocate
/// - ns2__Recipient* soap_new_ns2__Recipient(soap*, int num) allocate array
/// - ns2__Recipient* soap_new_req_ns2__Recipient(soap*, ...) allocate, set required members
/// - ns2__Recipient* soap_new_set_ns2__Recipient(soap*, ...) allocate, set all public members
/// - ns2__Recipient::soap_default(soap*) reset members to default
/// - int soap_read_ns2__Recipient(soap*, ns2__Recipient*) deserialize from a stream
/// - int soap_write_ns2__Recipient(soap*, ns2__Recipient*) serialize to a stream
/// - ns2__Recipient* ns2__Recipient::soap_dup(soap*) returns deep copy of ns2__Recipient, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__Recipient::soap_del() deep deletes ns2__Recipient data members, use only after ns2__Recipient::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__Recipient
{ public:
/// Element "dateOfBirth" of XSD type xs:string.
    wchar_t*                             dateOfBirth                    0;	///< Optional element.
/// Element "postalCode" of XSD type xs:string.
    wchar_t*                             postalCode                     0;	///< Optional element.
/// Element "accountID" of XSD type xs:string.
    wchar_t*                             accountID                      0;	///< Optional element.
/// Element "lastName" of XSD type xs:string.
    wchar_t*                             lastName                       0;	///< Optional element.
/// Element "name" of XSD type xs:string.
    wchar_t*                             name                           0;	///< Optional element.
/// Element "billingAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         billingAmount                  0;	///< Optional element.
/// Element "billingCurrency" of XSD type xs:string.
    wchar_t*                             billingCurrency                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":Sender is a complexType.
///
/// class ns2__Sender operations:
/// - ns2__Sender* soap_new_ns2__Sender(soap*) allocate
/// - ns2__Sender* soap_new_ns2__Sender(soap*, int num) allocate array
/// - ns2__Sender* soap_new_req_ns2__Sender(soap*, ...) allocate, set required members
/// - ns2__Sender* soap_new_set_ns2__Sender(soap*, ...) allocate, set all public members
/// - ns2__Sender::soap_default(soap*) reset members to default
/// - int soap_read_ns2__Sender(soap*, ns2__Sender*) deserialize from a stream
/// - int soap_write_ns2__Sender(soap*, ns2__Sender*) serialize to a stream
/// - ns2__Sender* ns2__Sender::soap_dup(soap*) returns deep copy of ns2__Sender, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__Sender::soap_del() deep deletes ns2__Sender data members, use only after ns2__Sender::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__Sender
{ public:
/// Element "referenceNumber" of XSD type xs:string.
    wchar_t*                             referenceNumber                0;	///< Optional element.
/// Element "sourceOfFunds" of XSD type xs:string.
    wchar_t*                             sourceOfFunds                  0;	///< Optional element.
/// Element "name" of XSD type xs:string.
    wchar_t*                             name                           0;	///< Optional element.
/// Element "address" of XSD type xs:string.
    wchar_t*                             address                        0;	///< Optional element.
/// Element "city" of XSD type xs:string.
    wchar_t*                             city                           0;	///< Optional element.
/// Element "state" of XSD type xs:string.
    wchar_t*                             state                          0;	///< Optional element.
/// Element "postalCode" of XSD type xs:string.
    wchar_t*                             postalCode                     0;	///< Optional element.
/// Element "country" of XSD type xs:string.
    wchar_t*                             country                        0;	///< Optional element.
/// Element "accountNumber" of XSD type xs:string.
    wchar_t*                             accountNumber                  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":RequestMessage is a complexType.
///
/// class ns2__RequestMessage operations:
/// - ns2__RequestMessage* soap_new_ns2__RequestMessage(soap*) allocate
/// - ns2__RequestMessage* soap_new_ns2__RequestMessage(soap*, int num) allocate array
/// - ns2__RequestMessage* soap_new_req_ns2__RequestMessage(soap*, ...) allocate, set required members
/// - ns2__RequestMessage* soap_new_set_ns2__RequestMessage(soap*, ...) allocate, set all public members
/// - ns2__RequestMessage::soap_default(soap*) reset members to default
/// - int soap_read_ns2__RequestMessage(soap*, ns2__RequestMessage*) deserialize from a stream
/// - int soap_write_ns2__RequestMessage(soap*, ns2__RequestMessage*) serialize to a stream
/// - ns2__RequestMessage* ns2__RequestMessage::soap_dup(soap*) returns deep copy of ns2__RequestMessage, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__RequestMessage::soap_del() deep deletes ns2__RequestMessage data members, use only after ns2__RequestMessage::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__RequestMessage
{ public:
/// Element "merchantID" of XSD type xs:string.
    wchar_t*                             merchantID                     0;	///< Optional element.
/// Element "merchantReferenceCode" of XSD type xs:string.
    wchar_t*                             merchantReferenceCode          0;	///< Optional element.
/// Element "debtIndicator" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        debtIndicator                  0;	///< Optional element.
/// Element "clientLibrary" of XSD type xs:string.
    wchar_t*                             clientLibrary                  0;	///< Optional element.
/// Element "clientLibraryVersion" of XSD type xs:string.
    wchar_t*                             clientLibraryVersion           0;	///< Optional element.
/// Element "clientEnvironment" of XSD type xs:string.
    wchar_t*                             clientEnvironment              0;	///< Optional element.
/// Element "clientSecurityLibraryVersion" of XSD type xs:string.
    wchar_t*                             clientSecurityLibraryVersion   0;	///< Optional element.
/// Element "clientApplication" of XSD type xs:string.
    wchar_t*                             clientApplication              0;	///< Optional element.
/// Element "clientApplicationVersion" of XSD type xs:string.
    wchar_t*                             clientApplicationVersion       0;	///< Optional element.
/// Element "clientApplicationUser" of XSD type xs:string.
    wchar_t*                             clientApplicationUser          0;	///< Optional element.
/// Element "routingCode" of XSD type xs:string.
    wchar_t*                             routingCode                    0;	///< Optional element.
/// Element "comments" of XSD type xs:string.
    wchar_t*                             comments                       0;	///< Optional element.
/// Element "returnURL" of XSD type xs:string.
    wchar_t*                             returnURL                      0;	///< Optional element.
/// Element "invoiceHeader" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":InvoiceHeader.
    ns2__InvoiceHeader*                  invoiceHeader                  0;	///< Optional element.
/// Element "aggregatorMerchantIdentifier" of XSD type xs:string.
    wchar_t*                             aggregatorMerchantIdentifier   0;	///< Optional element.
/// Element "customerID" of XSD type xs:string.
    wchar_t*                             customerID                     0;	///< Optional element.
/// Element "customerFirstName" of XSD type xs:string.
    wchar_t*                             customerFirstName              0;	///< Optional element.
/// Element "customerLastName" of XSD type xs:string.
    wchar_t*                             customerLastName               0;	///< Optional element.
/// Element "billTo" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":BillTo.
    ns2__BillTo*                         billTo                         0;	///< Optional element.
/// Element "shipTo" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ShipTo.
    ns2__ShipTo*                         shipTo                         0;	///< Optional element.
/// Element "personalId" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PersonalId.
    ns2__PersonalId*                     personalId                     0;	///< Optional element.
/// Element "shipFrom" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ShipFrom.
    ns2__ShipFrom*                       shipFrom                       0;	///< Optional element.
/// Vector of ns2__Item* of length 0..1000.
    std::vector<ns2__Item*             > item                           0:1000;
/// Element "purchaseTotals" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PurchaseTotals.
    ns2__PurchaseTotals*                 purchaseTotals                 0;	///< Optional element.
/// Element "fundingTotals" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":FundingTotals.
    ns2__FundingTotals*                  fundingTotals                  0;	///< Optional element.
/// Element "dcc" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":DCC.
    ns2__DCC*                            dcc                            0;	///< Optional element.
/// Element "pos" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":Pos.
    ns2__Pos*                            pos                            0;	///< Optional element.
/// Element "encryptedPayment" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":EncryptedPayment.
    ns2__EncryptedPayment*               encryptedPayment               0;	///< Optional element.
/// Element "installment" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":Installment.
    ns2__Installment*                    installment                    0;	///< Optional element.
/// Element "card" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":Card.
    ns2__Card*                           card                           0;	///< Optional element.
/// Element "check" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":Check.
    ns2__Check*                          check                          0;	///< Optional element.
/// Element "bml" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":BML.
    ns2__BML*                            bml                            0;	///< Optional element.
/// Element "gecc" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":GECC.
    ns2__GECC*                           gecc                           0;	///< Optional element.
/// Element "ucaf" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":UCAF.
    ns2__UCAF*                           ucaf                           0;	///< Optional element.
/// Element "fundTransfer" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":FundTransfer.
    ns2__FundTransfer*                   fundTransfer                   0;	///< Optional element.
/// Element "bankInfo" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":BankInfo.
    ns2__BankInfo*                       bankInfo                       0;	///< Optional element.
/// Element "subscription" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":Subscription.
    ns2__Subscription*                   subscription                   0;	///< Optional element.
/// Element "recurringSubscriptionInfo" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":RecurringSubscriptionInfo.
    ns2__RecurringSubscriptionInfo*      recurringSubscriptionInfo      0;	///< Optional element.
/// Element "decisionManager" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":DecisionManager.
    ns2__DecisionManager*                decisionManager                0;	///< Optional element.
/// Element "otherTax" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":OtherTax.
    ns2__OtherTax*                       otherTax                       0;	///< Optional element.
/// Element "paypal" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPal.
    ns2__PayPal*                         paypal                         0;	///< Optional element.
/// Element "merchantDefinedData" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":MerchantDefinedData.
    ns2__MerchantDefinedData*            merchantDefinedData            0;	///< Optional element.
/// Element "merchantSecureData" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":MerchantSecureData.
    ns2__MerchantSecureData*             merchantSecureData             0;	///< Optional element.
/// Element "jpo" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":JPO.
    ns2__JPO*                            jpo                            0;	///< Optional element.
/// Element "orderRequestToken" of XSD type xs:string.
    wchar_t*                             orderRequestToken              0;	///< Optional element.
/// Element "linkToRequest" of XSD type xs:string.
    wchar_t*                             linkToRequest                  0;	///< Optional element.
/// Element "serviceFee" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ServiceFee.
    ns2__ServiceFee*                     serviceFee                     0;	///< Optional element.
/// Element "ccAuthService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCAuthService.
    ns2__CCAuthService*                  ccAuthService                  0;	///< Optional element.
/// Element "octService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":OCTService.
    ns2__OCTService*                     octService                     0;	///< Optional element.
/// Element "verificationService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":VerificationService.
    ns2__VerificationService*            verificationService            0;	///< Optional element.
/// Element "ccSaleService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCSaleService.
    ns2__CCSaleService*                  ccSaleService                  0;	///< Optional element.
/// Element "ccSaleCreditService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCSaleCreditService.
    ns2__CCSaleCreditService*            ccSaleCreditService            0;	///< Optional element.
/// Element "ccSaleReversalService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCSaleReversalService.
    ns2__CCSaleReversalService*          ccSaleReversalService          0;	///< Optional element.
/// Element "ccIncrementalAuthService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCIncrementalAuthService.
    ns2__CCIncrementalAuthService*       ccIncrementalAuthService       0;	///< Optional element.
/// Element "ccCaptureService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCCaptureService.
    ns2__CCCaptureService*               ccCaptureService               0;	///< Optional element.
/// Element "ccCreditService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCCreditService.
    ns2__CCCreditService*                ccCreditService                0;	///< Optional element.
/// Element "ccAuthReversalService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCAuthReversalService.
    ns2__CCAuthReversalService*          ccAuthReversalService          0;	///< Optional element.
/// Element "ccAutoAuthReversalService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCAutoAuthReversalService.
    ns2__CCAutoAuthReversalService*      ccAutoAuthReversalService      0;	///< Optional element.
/// Element "ccDCCService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCDCCService.
    ns2__CCDCCService*                   ccDCCService                   0;	///< Optional element.
/// Element "serviceFeeCalculateService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ServiceFeeCalculateService.
    ns2__ServiceFeeCalculateService*     serviceFeeCalculateService     0;	///< Optional element.
/// Element "ecDebitService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ECDebitService.
    ns2__ECDebitService*                 ecDebitService                 0;	///< Optional element.
/// Element "ecCreditService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ECCreditService.
    ns2__ECCreditService*                ecCreditService                0;	///< Optional element.
/// Element "ecAuthenticateService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ECAuthenticateService.
    ns2__ECAuthenticateService*          ecAuthenticateService          0;	///< Optional element.
/// Element "payerAuthEnrollService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayerAuthEnrollService.
    ns2__PayerAuthEnrollService*         payerAuthEnrollService         0;	///< Optional element.
/// Element "payerAuthValidateService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayerAuthValidateService.
    ns2__PayerAuthValidateService*       payerAuthValidateService       0;	///< Optional element.
/// Element "taxService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":TaxService.
    ns2__TaxService*                     taxService                     0;	///< Optional element.
/// Element "dmeService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":DMEService.
    ns2__DMEService*                     dmeService                     0;	///< Optional element.
/// Element "afsService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":AFSService.
    ns2__AFSService*                     afsService                     0;	///< Optional element.
/// Element "davService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":DAVService.
    ns2__DAVService*                     davService                     0;	///< Optional element.
/// Element "exportService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ExportService.
    ns2__ExportService*                  exportService                  0;	///< Optional element.
/// Element "fxRatesService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":FXRatesService.
    ns2__FXRatesService*                 fxRatesService                 0;	///< Optional element.
/// Element "bankTransferService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":BankTransferService.
    ns2__BankTransferService*            bankTransferService            0;	///< Optional element.
/// Element "bankTransferRefundService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":BankTransferRefundService.
    ns2__BankTransferRefundService*      bankTransferRefundService      0;	///< Optional element.
/// Element "bankTransferRealTimeService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":BankTransferRealTimeService.
    ns2__BankTransferRealTimeService*    bankTransferRealTimeService    0;	///< Optional element.
/// Element "directDebitMandateService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":DirectDebitMandateService.
    ns2__DirectDebitMandateService*      directDebitMandateService      0;	///< Optional element.
/// Element "directDebitService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":DirectDebitService.
    ns2__DirectDebitService*             directDebitService             0;	///< Optional element.
/// Element "directDebitRefundService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":DirectDebitRefundService.
    ns2__DirectDebitRefundService*       directDebitRefundService       0;	///< Optional element.
/// Element "directDebitValidateService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":DirectDebitValidateService.
    ns2__DirectDebitValidateService*     directDebitValidateService     0;	///< Optional element.
/// Element "paySubscriptionCreateService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionCreateService.
    ns2__PaySubscriptionCreateService*   paySubscriptionCreateService   0;	///< Optional element.
/// Element "paySubscriptionUpdateService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionUpdateService.
    ns2__PaySubscriptionUpdateService*   paySubscriptionUpdateService   0;	///< Optional element.
/// Element "paySubscriptionEventUpdateService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionEventUpdateService.
    ns2__PaySubscriptionEventUpdateService*  paySubscriptionEventUpdateService 0;	///< Optional element.
/// Element "paySubscriptionRetrieveService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionRetrieveService.
    ns2__PaySubscriptionRetrieveService*  paySubscriptionRetrieveService 0;	///< Optional element.
/// Element "paySubscriptionDeleteService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionDeleteService.
    ns2__PaySubscriptionDeleteService*   paySubscriptionDeleteService   0;	///< Optional element.
/// Element "payPalPaymentService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalPaymentService.
    ns2__PayPalPaymentService*           payPalPaymentService           0;	///< Optional element.
/// Element "payPalCreditService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalCreditService.
    ns2__PayPalCreditService*            payPalCreditService            0;	///< Optional element.
/// Element "voidService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":VoidService.
    ns2__VoidService*                    voidService                    0;	///< Optional element.
/// Element "businessRules" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":BusinessRules.
    ns2__BusinessRules*                  businessRules                  0;	///< Optional element.
/// Element "pinlessDebitService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PinlessDebitService.
    ns2__PinlessDebitService*            pinlessDebitService            0;	///< Optional element.
/// Element "pinlessDebitValidateService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PinlessDebitValidateService.
    ns2__PinlessDebitValidateService*    pinlessDebitValidateService    0;	///< Optional element.
/// Element "pinlessDebitReversalService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PinlessDebitReversalService.
    ns2__PinlessDebitReversalService*    pinlessDebitReversalService    0;	///< Optional element.
/// Element "batch" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":Batch.
    ns2__Batch*                          batch                          0;	///< Optional element.
/// Element "airlineData" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":AirlineData.
    ns2__AirlineData*                    airlineData                    0;	///< Optional element.
/// Element "ancillaryData" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":AncillaryData.
    ns2__AncillaryData*                  ancillaryData                  0;	///< Optional element.
/// Element "lodgingData" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":LodgingData.
    ns2__LodgingData*                    lodgingData                    0;	///< Optional element.
/// Element "payPalButtonCreateService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalButtonCreateService.
    ns2__PayPalButtonCreateService*      payPalButtonCreateService      0;	///< Optional element.
/// Element "payPalPreapprovedPaymentService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalPreapprovedPaymentService.
    ns2__PayPalPreapprovedPaymentService*  payPalPreapprovedPaymentService 0;	///< Optional element.
/// Element "payPalPreapprovedUpdateService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalPreapprovedUpdateService.
    ns2__PayPalPreapprovedUpdateService*  payPalPreapprovedUpdateService 0;	///< Optional element.
/// Element "riskUpdateService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":RiskUpdateService.
    ns2__RiskUpdateService*              riskUpdateService              0;	///< Optional element.
/// Element "fraudUpdateService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":FraudUpdateService.
    ns2__FraudUpdateService*             fraudUpdateService             0;	///< Optional element.
/// Element "caseManagementActionService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CaseManagementActionService.
    ns2__CaseManagementActionService*    caseManagementActionService    0;	///< Optional element.
/// Vector of ns2__RequestReserved* of length 0..999.
    std::vector<ns2__RequestReserved*  > reserved                       0:999;
/// Element "deviceFingerprintID" of XSD type xs:string.
    wchar_t*                             deviceFingerprintID            0;	///< Optional element.
/// Element "deviceFingerprintRaw" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        deviceFingerprintRaw           0;	///< Optional element.
/// Element "deviceFingerprintHash" of XSD type xs:string.
    wchar_t*                             deviceFingerprintHash          0;	///< Optional element.
/// Element "payPalRefundService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalRefundService.
    ns2__PayPalRefundService*            payPalRefundService            0;	///< Optional element.
/// Element "payPalAuthReversalService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalAuthReversalService.
    ns2__PayPalAuthReversalService*      payPalAuthReversalService      0;	///< Optional element.
/// Element "payPalDoCaptureService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalDoCaptureService.
    ns2__PayPalDoCaptureService*         payPalDoCaptureService         0;	///< Optional element.
/// Element "payPalEcDoPaymentService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalEcDoPaymentService.
    ns2__PayPalEcDoPaymentService*       payPalEcDoPaymentService       0;	///< Optional element.
/// Element "payPalEcGetDetailsService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalEcGetDetailsService.
    ns2__PayPalEcGetDetailsService*      payPalEcGetDetailsService      0;	///< Optional element.
/// Element "payPalEcSetService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalEcSetService.
    ns2__PayPalEcSetService*             payPalEcSetService             0;	///< Optional element.
/// Element "payPalEcOrderSetupService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalEcOrderSetupService.
    ns2__PayPalEcOrderSetupService*      payPalEcOrderSetupService      0;	///< Optional element.
/// Element "payPalAuthorizationService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalAuthorizationService.
    ns2__PayPalAuthorizationService*     payPalAuthorizationService     0;	///< Optional element.
/// Element "payPalUpdateAgreementService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalUpdateAgreementService.
    ns2__PayPalUpdateAgreementService*   payPalUpdateAgreementService   0;	///< Optional element.
/// Element "payPalCreateAgreementService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalCreateAgreementService.
    ns2__PayPalCreateAgreementService*   payPalCreateAgreementService   0;	///< Optional element.
/// Element "payPalDoRefTransactionService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalDoRefTransactionService.
    ns2__PayPalDoRefTransactionService*  payPalDoRefTransactionService  0;	///< Optional element.
/// Element "chinaPaymentService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ChinaPaymentService.
    ns2__ChinaPaymentService*            chinaPaymentService            0;	///< Optional element.
/// Element "chinaRefundService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ChinaRefundService.
    ns2__ChinaRefundService*             chinaRefundService             0;	///< Optional element.
/// Element "boletoPaymentService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":BoletoPaymentService.
    ns2__BoletoPaymentService*           boletoPaymentService           0;	///< Optional element.
/// Element "apPaymentType" of XSD type xs:string.
    wchar_t*                             apPaymentType                  0;	///< Optional element.
/// Element "apInitiateService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APInitiateService.
    ns2__APInitiateService*              apInitiateService              0;	///< Optional element.
/// Element "apCheckStatusService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APCheckStatusService.
    ns2__APCheckStatusService*           apCheckStatusService           0;	///< Optional element.
/// Element "ignoreCardExpiration" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        ignoreCardExpiration           0;	///< Optional element.
/// Element "reportGroup" of XSD type xs:string.
    wchar_t*                             reportGroup                    0;	///< Optional element.
/// Element "processorID" of XSD type xs:string.
    wchar_t*                             processorID                    0;	///< Optional element.
/// Element "thirdPartyCertificationNumber" of XSD type xs:string.
    wchar_t*                             thirdPartyCertificationNumber  0;	///< Optional element.
/// Element "transactionLocalDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       transactionLocalDateTime       0;	///< Optional element.
/// Element "solutionProviderTransactionID" of XSD type xs:string.
    wchar_t*                             solutionProviderTransactionID  0;	///< Optional element.
/// Element "surchargeAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         surchargeAmount                0;	///< Optional element.
/// Element "surchargeSign" of XSD type xs:string.
    wchar_t*                             surchargeSign                  0;	///< Optional element.
/// Element "pinDataEncryptedPIN" of XSD type xs:string.
    wchar_t*                             pinDataEncryptedPIN            0;	///< Optional element.
/// Element "pinDataKeySerialNumber" of XSD type xs:string.
    wchar_t*                             pinDataKeySerialNumber         0;	///< Optional element.
/// Element "cashbackAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         cashbackAmount                 0;	///< Optional element.
/// Element "pinDebitPurchaseService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PinDebitPurchaseService.
    ns2__PinDebitPurchaseService*        pinDebitPurchaseService        0;	///< Optional element.
/// Element "pinDebitCreditService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PinDebitCreditService.
    ns2__PinDebitCreditService*          pinDebitCreditService          0;	///< Optional element.
/// Element "pinDebitReversalService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PinDebitReversalService.
    ns2__PinDebitReversalService*        pinDebitReversalService        0;	///< Optional element.
/// Element "ap" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":AP.
    ns2__AP*                             ap                             0;	///< Optional element.
/// Element "apAuthService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APAuthService.
    ns2__APAuthService*                  apAuthService                  0;	///< Optional element.
/// Element "apAuthReversalService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APAuthReversalService.
    ns2__APAuthReversalService*          apAuthReversalService          0;	///< Optional element.
/// Element "apCaptureService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APCaptureService.
    ns2__APCaptureService*               apCaptureService               0;	///< Optional element.
/// Element "apOptionsService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APOptionsService.
    ns2__APOptionsService*               apOptionsService               0;	///< Optional element.
/// Element "apRefundService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APRefundService.
    ns2__APRefundService*                apRefundService                0;	///< Optional element.
/// Element "apSaleService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APSaleService.
    ns2__APSaleService*                  apSaleService                  0;	///< Optional element.
/// Element "apCheckoutDetailsService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APCheckOutDetailsService.
    ns2__APCheckOutDetailsService*       apCheckoutDetailsService       0;	///< Optional element.
/// Element "apTransactionDetailsService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APTransactionDetailsService.
    ns2__APTransactionDetailsService*    apTransactionDetailsService    0;	///< Optional element.
/// Element "apConfirmPurchaseService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APConfirmPurchaseService.
    ns2__APConfirmPurchaseService*       apConfirmPurchaseService       0;	///< Optional element.
/// Element "payPalGetTxnDetailsService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalGetTxnDetailsService.
    ns2__PayPalGetTxnDetailsService*     payPalGetTxnDetailsService     0;	///< Optional element.
/// Element "payPalTransactionSearchService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalTransactionSearchService.
    ns2__PayPalTransactionSearchService*  payPalTransactionSearchService 0;	///< Optional element.
/// Element "ccDCCUpdateService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCDCCUpdateService.
    ns2__CCDCCUpdateService*             ccDCCUpdateService             0;	///< Optional element.
/// Element "emvRequest" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":EmvRequest.
    ns2__EmvRequest*                     emvRequest                     0;	///< Optional element.
/// Element "merchantTransactionIdentifier" of XSD type xs:string.
    wchar_t*                             merchantTransactionIdentifier  0;	///< Optional element.
/// Element "hostedDataCreateService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":HostedDataCreateService.
    ns2__HostedDataCreateService*        hostedDataCreateService        0;	///< Optional element.
/// Element "hostedDataRetrieveService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":HostedDataRetrieveService.
    ns2__HostedDataRetrieveService*      hostedDataRetrieveService      0;	///< Optional element.
/// Element "merchantCategoryCode" of XSD type xs:string.
    wchar_t*                             merchantCategoryCode           0;	///< Optional element.
/// Element "salesSlipNumber" of XSD type xs:string.
    wchar_t*                             salesSlipNumber                0;	///< Optional element.
/// Element "merchandiseCode" of XSD type xs:string.
    wchar_t*                             merchandiseCode                0;	///< Optional element.
/// Element "merchandiseDescription" of XSD type xs:string.
    wchar_t*                             merchandiseDescription         0;	///< Optional element.
/// Element "paymentInitiationChannel" of XSD type xs:string.
    wchar_t*                             paymentInitiationChannel       0;	///< Optional element.
/// Element "extendedCreditTotalCount" of XSD type xs:string.
    wchar_t*                             extendedCreditTotalCount       0;	///< Optional element.
/// Element "authIndicator" of XSD type xs:string.
    wchar_t*                             authIndicator                  0;	///< Optional element.
/// Element "paymentNetworkToken" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PaymentNetworkToken.
    ns2__PaymentNetworkToken*            paymentNetworkToken            0;	///< Optional element.
/// Element "recipient" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":Recipient.
    ns2__Recipient*                      recipient                      0;	///< Optional element.
/// Element "sender" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":Sender.
    ns2__Sender*                         sender                         0;	///< Optional element.
/// Element "autoRentalData" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":AutoRentalData.
    ns2__AutoRentalData*                 autoRentalData                 0;	///< Optional element.
/// Element "paymentSolution" of XSD type xs:string.
    wchar_t*                             paymentSolution                0;	///< Optional element.
/// Element "vc" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":VC.
    ns2__VC*                             vc                             0;	///< Optional element.
/// Element "decryptVisaCheckoutDataService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":DecryptVisaCheckoutDataService.
    ns2__DecryptVisaCheckoutDataService*  decryptVisaCheckoutDataService 0;	///< Optional element.
/// Element "taxManagementIndicator" of XSD type xs:string.
    wchar_t*                             taxManagementIndicator         0;	///< Optional element.
/// Vector of ns2__PromotionGroup* of length 0..100.
    std::vector<ns2__PromotionGroup*   > promotionGroup                 0:100;
/// Element "wallet" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":Wallet.
    ns2__Wallet*                         wallet                         0;	///< Optional element.
/// Element "aft" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":Aft.
    ns2__Aft*                            aft                            0;	///< Optional element.
/// Element "balanceInquiry" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        balanceInquiry                 0;	///< Optional element.
/// Element "prenoteTransaction" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        prenoteTransaction             0;	///< Optional element.
/// Element "encryptPaymentDataService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":EncryptPaymentDataService.
    ns2__EncryptPaymentDataService*      encryptPaymentDataService      0;	///< Optional element.
/// Element "nationalNetDomesticData" of XSD type xs:string.
    wchar_t*                             nationalNetDomesticData        0;	///< Optional element.
/// Element "subsequentAuth" of XSD type xs:string.
    wchar_t*                             subsequentAuth                 0;	///< Optional element.
/// Element "binLookupService" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":BinLookupService.
    ns2__BinLookupService*               binLookupService               0;	///< Optional element.
/// Element "verificationCode" of XSD type xs:string.
    wchar_t*                             verificationCode               0;	///< Optional element.
/// Element "mobileNumber" of XSD type xs:string.
    wchar_t*                             mobileNumber                   0;	///< Optional element.
/// Element "issuer" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":issuer.
    ns2__issuer*                         issuer                         0;	///< Optional element.
/// Element "partnerSolutionID" of XSD type xs:string.
    wchar_t*                             partnerSolutionID              0;	///< Optional element.
/// Element "developerID" of XSD type xs:string.
    wchar_t*                             developerID                    0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":VC is a complexType.
///
/// class ns2__VC operations:
/// - ns2__VC* soap_new_ns2__VC(soap*) allocate
/// - ns2__VC* soap_new_ns2__VC(soap*, int num) allocate array
/// - ns2__VC* soap_new_req_ns2__VC(soap*, ...) allocate, set required members
/// - ns2__VC* soap_new_set_ns2__VC(soap*, ...) allocate, set all public members
/// - ns2__VC::soap_default(soap*) reset members to default
/// - int soap_read_ns2__VC(soap*, ns2__VC*) deserialize from a stream
/// - int soap_write_ns2__VC(soap*, ns2__VC*) serialize to a stream
/// - ns2__VC* ns2__VC::soap_dup(soap*) returns deep copy of ns2__VC, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VC::soap_del() deep deletes ns2__VC data members, use only after ns2__VC::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VC
{ public:
/// Element "orderID" of XSD type xs:string.
    wchar_t*                             orderID                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DecryptVisaCheckoutDataService is a complexType.
///
/// class ns2__DecryptVisaCheckoutDataService operations:
/// - ns2__DecryptVisaCheckoutDataService* soap_new_ns2__DecryptVisaCheckoutDataService(soap*) allocate
/// - ns2__DecryptVisaCheckoutDataService* soap_new_ns2__DecryptVisaCheckoutDataService(soap*, int num) allocate array
/// - ns2__DecryptVisaCheckoutDataService* soap_new_req_ns2__DecryptVisaCheckoutDataService(soap*, ...) allocate, set required members
/// - ns2__DecryptVisaCheckoutDataService* soap_new_set_ns2__DecryptVisaCheckoutDataService(soap*, ...) allocate, set all public members
/// - ns2__DecryptVisaCheckoutDataService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DecryptVisaCheckoutDataService(soap*, ns2__DecryptVisaCheckoutDataService*) deserialize from a stream
/// - int soap_write_ns2__DecryptVisaCheckoutDataService(soap*, ns2__DecryptVisaCheckoutDataService*) serialize to a stream
/// - ns2__DecryptVisaCheckoutDataService* ns2__DecryptVisaCheckoutDataService::soap_dup(soap*) returns deep copy of ns2__DecryptVisaCheckoutDataService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DecryptVisaCheckoutDataService::soap_del() deep deletes ns2__DecryptVisaCheckoutDataService data members, use only after ns2__DecryptVisaCheckoutDataService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DecryptVisaCheckoutDataService
{ public:
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DCC is a complexType.
///
/// class ns2__DCC operations:
/// - ns2__DCC* soap_new_ns2__DCC(soap*) allocate
/// - ns2__DCC* soap_new_ns2__DCC(soap*, int num) allocate array
/// - ns2__DCC* soap_new_req_ns2__DCC(soap*, ...) allocate, set required members
/// - ns2__DCC* soap_new_set_ns2__DCC(soap*, ...) allocate, set all public members
/// - ns2__DCC::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DCC(soap*, ns2__DCC*) deserialize from a stream
/// - int soap_write_ns2__DCC(soap*, ns2__DCC*) serialize to a stream
/// - ns2__DCC* ns2__DCC::soap_dup(soap*) returns deep copy of ns2__DCC, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DCC::soap_del() deep deletes ns2__DCC data members, use only after ns2__DCC::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DCC
{ public:
/// Element "dccIndicator" of XSD type xs:integer.
    xsd__integer*                        dccIndicator                   0;	///< Optional element.
/// Element "referenceNumber" of XSD type xs:string.
    wchar_t*                             referenceNumber                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":Promotion is a complexType.
///
/// class ns2__Promotion operations:
/// - ns2__Promotion* soap_new_ns2__Promotion(soap*) allocate
/// - ns2__Promotion* soap_new_ns2__Promotion(soap*, int num) allocate array
/// - ns2__Promotion* soap_new_req_ns2__Promotion(soap*, ...) allocate, set required members
/// - ns2__Promotion* soap_new_set_ns2__Promotion(soap*, ...) allocate, set all public members
/// - ns2__Promotion::soap_default(soap*) reset members to default
/// - int soap_read_ns2__Promotion(soap*, ns2__Promotion*) deserialize from a stream
/// - int soap_write_ns2__Promotion(soap*, ns2__Promotion*) serialize to a stream
/// - ns2__Promotion* ns2__Promotion::soap_dup(soap*) returns deep copy of ns2__Promotion, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__Promotion::soap_del() deep deletes ns2__Promotion data members, use only after ns2__Promotion::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__Promotion
{ public:
/// Element "discountedAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         discountedAmount               0;	///< Optional element.
/// Element "type" of XSD type xs:string.
    wchar_t*                             type                           0;	///< Optional element.
/// Element "code" of XSD type xs:string.
    wchar_t*                             code                           0;	///< Optional element.
/// Element "receiptData" of XSD type xs:string.
    wchar_t*                             receiptData                    0;	///< Optional element.
/// Element "discountApplied" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         discountApplied                0;	///< Optional element.
/// Element "description" of XSD type xs:string.
    wchar_t*                             description                    0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PromotionGroup is a complexType.
///
/// class ns2__PromotionGroup operations:
/// - ns2__PromotionGroup* soap_new_ns2__PromotionGroup(soap*) allocate
/// - ns2__PromotionGroup* soap_new_ns2__PromotionGroup(soap*, int num) allocate array
/// - ns2__PromotionGroup* soap_new_req_ns2__PromotionGroup(soap*, ...) allocate, set required members
/// - ns2__PromotionGroup* soap_new_set_ns2__PromotionGroup(soap*, ...) allocate, set all public members
/// - ns2__PromotionGroup::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PromotionGroup(soap*, ns2__PromotionGroup*) deserialize from a stream
/// - int soap_write_ns2__PromotionGroup(soap*, ns2__PromotionGroup*) serialize to a stream
/// - ns2__PromotionGroup* ns2__PromotionGroup::soap_dup(soap*) returns deep copy of ns2__PromotionGroup, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PromotionGroup::soap_del() deep deletes ns2__PromotionGroup data members, use only after ns2__PromotionGroup::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PromotionGroup
{ public:
/// Element "subtotalAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         subtotalAmount                 0;	///< Optional element.
/// Element "taxRate" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         taxRate                        0;	///< Optional element.
/// Attribute "id" of XSD type xs:integer.
   @xsd__integer*                        id                             0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PromotionGroupReply is a complexType.
///
/// class ns2__PromotionGroupReply operations:
/// - ns2__PromotionGroupReply* soap_new_ns2__PromotionGroupReply(soap*) allocate
/// - ns2__PromotionGroupReply* soap_new_ns2__PromotionGroupReply(soap*, int num) allocate array
/// - ns2__PromotionGroupReply* soap_new_req_ns2__PromotionGroupReply(soap*, ...) allocate, set required members
/// - ns2__PromotionGroupReply* soap_new_set_ns2__PromotionGroupReply(soap*, ...) allocate, set all public members
/// - ns2__PromotionGroupReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PromotionGroupReply(soap*, ns2__PromotionGroupReply*) deserialize from a stream
/// - int soap_write_ns2__PromotionGroupReply(soap*, ns2__PromotionGroupReply*) serialize to a stream
/// - ns2__PromotionGroupReply* ns2__PromotionGroupReply::soap_dup(soap*) returns deep copy of ns2__PromotionGroupReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PromotionGroupReply::soap_del() deep deletes ns2__PromotionGroupReply data members, use only after ns2__PromotionGroupReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PromotionGroupReply
{ public:
/// Element "discountApplied" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         discountApplied                0;	///< Optional element.
/// Attribute "id" of XSD type xs:integer.
   @xsd__integer*                        id                             0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCAuthReply is a complexType.
///
/// class ns2__CCAuthReply operations:
/// - ns2__CCAuthReply* soap_new_ns2__CCAuthReply(soap*) allocate
/// - ns2__CCAuthReply* soap_new_ns2__CCAuthReply(soap*, int num) allocate array
/// - ns2__CCAuthReply* soap_new_req_ns2__CCAuthReply(soap*, ...) allocate, set required members
/// - ns2__CCAuthReply* soap_new_set_ns2__CCAuthReply(soap*, ...) allocate, set all public members
/// - ns2__CCAuthReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCAuthReply(soap*, ns2__CCAuthReply*) deserialize from a stream
/// - int soap_write_ns2__CCAuthReply(soap*, ns2__CCAuthReply*) serialize to a stream
/// - ns2__CCAuthReply* ns2__CCAuthReply::soap_dup(soap*) returns deep copy of ns2__CCAuthReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCAuthReply::soap_del() deep deletes ns2__CCAuthReply data members, use only after ns2__CCAuthReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCAuthReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "authorizationCode" of XSD type xs:string.
    wchar_t*                             authorizationCode              0;	///< Optional element.
/// Element "avsCode" of XSD type xs:string.
    wchar_t*                             avsCode                        0;	///< Optional element.
/// Element "avsCodeRaw" of XSD type xs:string.
    wchar_t*                             avsCodeRaw                     0;	///< Optional element.
/// Element "cvCode" of XSD type xs:string.
    wchar_t*                             cvCode                         0;	///< Optional element.
/// Element "cvCodeRaw" of XSD type xs:string.
    wchar_t*                             cvCodeRaw                      0;	///< Optional element.
/// Element "personalIDCode" of XSD type xs:string.
    wchar_t*                             personalIDCode                 0;	///< Optional element.
/// Element "authorizedDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       authorizedDateTime             0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "bmlAccountNumber" of XSD type xs:string.
    wchar_t*                             bmlAccountNumber               0;	///< Optional element.
/// Element "authFactorCode" of XSD type xs:string.
    wchar_t*                             authFactorCode                 0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "fundingTotals" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":FundingTotals.
    ns2__FundingTotals*                  fundingTotals                  0;	///< Optional element.
/// Element "fxQuoteID" of XSD type xs:string.
    wchar_t*                             fxQuoteID                      0;	///< Optional element.
/// Element "fxQuoteRate" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       fxQuoteRate                    0;	///< Optional element.
/// Element "fxQuoteType" of XSD type xs:string.
    wchar_t*                             fxQuoteType                    0;	///< Optional element.
/// Element "fxQuoteExpirationDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       fxQuoteExpirationDateTime      0;	///< Optional element.
/// Element "authRecord" of XSD type xs:string.
    wchar_t*                             authRecord                     0;	///< Optional element.
/// Element "merchantAdviceCode" of XSD type xs:string.
    wchar_t*                             merchantAdviceCode             0;	///< Optional element.
/// Element "merchantAdviceCodeRaw" of XSD type xs:string.
    wchar_t*                             merchantAdviceCodeRaw          0;	///< Optional element.
/// Element "cavvResponseCode" of XSD type xs:string.
    wchar_t*                             cavvResponseCode               0;	///< Optional element.
/// Element "cavvResponseCodeRaw" of XSD type xs:string.
    wchar_t*                             cavvResponseCodeRaw            0;	///< Optional element.
/// Element "authenticationXID" of XSD type xs:string.
    wchar_t*                             authenticationXID              0;	///< Optional element.
/// Element "authorizationXID" of XSD type xs:string.
    wchar_t*                             authorizationXID               0;	///< Optional element.
/// Element "processorCardType" of XSD type xs:string.
    wchar_t*                             processorCardType              0;	///< Optional element.
/// Element "accountBalance" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         accountBalance                 0;	///< Optional element.
/// Element "forwardCode" of XSD type xs:string.
    wchar_t*                             forwardCode                    0;	///< Optional element.
/// Element "enhancedDataEnabled" of XSD type xs:string.
    wchar_t*                             enhancedDataEnabled            0;	///< Optional element.
/// Element "referralResponseNumber" of XSD type xs:string.
    wchar_t*                             referralResponseNumber         0;	///< Optional element.
/// Element "subResponseCode" of XSD type xs:string.
    wchar_t*                             subResponseCode                0;	///< Optional element.
/// Element "approvedAmount" of XSD type xs:string.
    wchar_t*                             approvedAmount                 0;	///< Optional element.
/// Element "creditLine" of XSD type xs:string.
    wchar_t*                             creditLine                     0;	///< Optional element.
/// Element "approvedTerms" of XSD type xs:string.
    wchar_t*                             approvedTerms                  0;	///< Optional element.
/// Element "paymentNetworkTransactionID" of XSD type xs:string.
    wchar_t*                             paymentNetworkTransactionID    0;	///< Optional element.
/// Element "cardCategory" of XSD type xs:string.
    wchar_t*                             cardCategory                   0;	///< Optional element.
/// Element "ownerMerchantID" of XSD type xs:string.
    wchar_t*                             ownerMerchantID                0;	///< Optional element.
/// Element "requestAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         requestAmount                  0;	///< Optional element.
/// Element "requestCurrency" of XSD type xs:string.
    wchar_t*                             requestCurrency                0;	///< Optional element.
/// Element "accountBalanceCurrency" of XSD type xs:string.
    wchar_t*                             accountBalanceCurrency         0;	///< Optional element.
/// Element "accountBalanceSign" of XSD type xs:string.
    wchar_t*                             accountBalanceSign             0;	///< Optional element.
/// Element "amountType" of XSD type xs:string.
    wchar_t*                             amountType                     0;	///< Optional element.
/// Element "accountType" of XSD type xs:string.
    wchar_t*                             accountType                    0;	///< Optional element.
/// Element "affluenceIndicator" of XSD type xs:string.
    wchar_t*                             affluenceIndicator             0;	///< Optional element.
/// Element "evEmail" of XSD type xs:string.
    wchar_t*                             evEmail                        0;	///< Optional element.
/// Element "evPhoneNumber" of XSD type xs:string.
    wchar_t*                             evPhoneNumber                  0;	///< Optional element.
/// Element "evPostalCode" of XSD type xs:string.
    wchar_t*                             evPostalCode                   0;	///< Optional element.
/// Element "evName" of XSD type xs:string.
    wchar_t*                             evName                         0;	///< Optional element.
/// Element "evStreet" of XSD type xs:string.
    wchar_t*                             evStreet                       0;	///< Optional element.
/// Element "evEmailRaw" of XSD type xs:string.
    wchar_t*                             evEmailRaw                     0;	///< Optional element.
/// Element "evPhoneNumberRaw" of XSD type xs:string.
    wchar_t*                             evPhoneNumberRaw               0;	///< Optional element.
/// Element "evPostalCodeRaw" of XSD type xs:string.
    wchar_t*                             evPostalCodeRaw                0;	///< Optional element.
/// Element "evNameRaw" of XSD type xs:string.
    wchar_t*                             evNameRaw                      0;	///< Optional element.
/// Element "evStreetRaw" of XSD type xs:string.
    wchar_t*                             evStreetRaw                    0;	///< Optional element.
/// Element "cardGroup" of XSD type xs:string.
    wchar_t*                             cardGroup                      0;	///< Optional element.
/// Element "posData" of XSD type xs:string.
    wchar_t*                             posData                        0;	///< Optional element.
/// Element "transactionID" of XSD type xs:string.
    wchar_t*                             transactionID                  0;	///< Optional element.
/// Element "cardIssuerCountry" of XSD type xs:string.
    wchar_t*                             cardIssuerCountry              0;	///< Optional element.
/// Element "cardRegulated" of XSD type xs:string.
    wchar_t*                             cardRegulated                  0;	///< Optional element.
/// Element "cardCommercial" of XSD type xs:string.
    wchar_t*                             cardCommercial                 0;	///< Optional element.
/// Element "cardPrepaid" of XSD type xs:string.
    wchar_t*                             cardPrepaid                    0;	///< Optional element.
/// Element "cardPayroll" of XSD type xs:string.
    wchar_t*                             cardPayroll                    0;	///< Optional element.
/// Element "cardHealthcare" of XSD type xs:string.
    wchar_t*                             cardHealthcare                 0;	///< Optional element.
/// Element "cardSignatureDebit" of XSD type xs:string.
    wchar_t*                             cardSignatureDebit             0;	///< Optional element.
/// Element "cardPINlessDebit" of XSD type xs:string.
    wchar_t*                             cardPINlessDebit               0;	///< Optional element.
/// Element "cardLevel3Eligible" of XSD type xs:string.
    wchar_t*                             cardLevel3Eligible             0;	///< Optional element.
/// Element "processorTransactionID" of XSD type xs:string.
    wchar_t*                             processorTransactionID         0;	///< Optional element.
/// Element "providerReasonCode" of XSD type xs:string.
    wchar_t*                             providerReasonCode             0;	///< Optional element.
/// Element "providerReasonDescription" of XSD type xs:string.
    wchar_t*                             providerReasonDescription      0;	///< Optional element.
/// Element "providerPassThroughData" of XSD type xs:string.
    wchar_t*                             providerPassThroughData        0;	///< Optional element.
/// Element "providerCVNResponseCode" of XSD type xs:string.
    wchar_t*                             providerCVNResponseCode        0;	///< Optional element.
/// Element "providerAVSResponseCode" of XSD type xs:string.
    wchar_t*                             providerAVSResponseCode        0;	///< Optional element.
/// Element "providerAcquirerBankCode" of XSD type xs:string.
    wchar_t*                             providerAcquirerBankCode       0;	///< Optional element.
/// Element "paymentCardService" of XSD type xs:string.
    wchar_t*                             paymentCardService             0;	///< Optional element.
/// Element "paymentCardServiceResult" of XSD type xs:string.
    wchar_t*                             paymentCardServiceResult       0;	///< Optional element.
/// Element "transactionQualification" of XSD type xs:string.
    wchar_t*                             transactionQualification       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":OCTReply is a complexType.
///
/// class ns2__OCTReply operations:
/// - ns2__OCTReply* soap_new_ns2__OCTReply(soap*) allocate
/// - ns2__OCTReply* soap_new_ns2__OCTReply(soap*, int num) allocate array
/// - ns2__OCTReply* soap_new_req_ns2__OCTReply(soap*, ...) allocate, set required members
/// - ns2__OCTReply* soap_new_set_ns2__OCTReply(soap*, ...) allocate, set all public members
/// - ns2__OCTReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__OCTReply(soap*, ns2__OCTReply*) deserialize from a stream
/// - int soap_write_ns2__OCTReply(soap*, ns2__OCTReply*) serialize to a stream
/// - ns2__OCTReply* ns2__OCTReply::soap_dup(soap*) returns deep copy of ns2__OCTReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__OCTReply::soap_del() deep deletes ns2__OCTReply data members, use only after ns2__OCTReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__OCTReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "approvalCode" of XSD type xs:string.
    wchar_t*                             approvalCode                   0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "paymentNetworkTransactionID" of XSD type xs:string.
    wchar_t*                             paymentNetworkTransactionID    0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":VerificationReply is a complexType.
///
/// class ns2__VerificationReply operations:
/// - ns2__VerificationReply* soap_new_ns2__VerificationReply(soap*) allocate
/// - ns2__VerificationReply* soap_new_ns2__VerificationReply(soap*, int num) allocate array
/// - ns2__VerificationReply* soap_new_req_ns2__VerificationReply(soap*, ...) allocate, set required members
/// - ns2__VerificationReply* soap_new_set_ns2__VerificationReply(soap*, ...) allocate, set all public members
/// - ns2__VerificationReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__VerificationReply(soap*, ns2__VerificationReply*) deserialize from a stream
/// - int soap_write_ns2__VerificationReply(soap*, ns2__VerificationReply*) serialize to a stream
/// - ns2__VerificationReply* ns2__VerificationReply::soap_dup(soap*) returns deep copy of ns2__VerificationReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VerificationReply::soap_del() deep deletes ns2__VerificationReply data members, use only after ns2__VerificationReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VerificationReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "processorTransactionID" of XSD type xs:string.
    wchar_t*                             processorTransactionID         0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "verifiedDateTime" of XSD type xs:string.
    wchar_t*                             verifiedDateTime               0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCSaleReply is a complexType.
///
/// class ns2__CCSaleReply operations:
/// - ns2__CCSaleReply* soap_new_ns2__CCSaleReply(soap*) allocate
/// - ns2__CCSaleReply* soap_new_ns2__CCSaleReply(soap*, int num) allocate array
/// - ns2__CCSaleReply* soap_new_req_ns2__CCSaleReply(soap*, ...) allocate, set required members
/// - ns2__CCSaleReply* soap_new_set_ns2__CCSaleReply(soap*, ...) allocate, set all public members
/// - ns2__CCSaleReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCSaleReply(soap*, ns2__CCSaleReply*) deserialize from a stream
/// - int soap_write_ns2__CCSaleReply(soap*, ns2__CCSaleReply*) serialize to a stream
/// - ns2__CCSaleReply* ns2__CCSaleReply::soap_dup(soap*) returns deep copy of ns2__CCSaleReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCSaleReply::soap_del() deep deletes ns2__CCSaleReply data members, use only after ns2__CCSaleReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCSaleReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "authorizationCode" of XSD type xs:string.
    wchar_t*                             authorizationCode              0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "avsCode" of XSD type xs:string.
    wchar_t*                             avsCode                        0;	///< Optional element.
/// Element "avsCodeRaw" of XSD type xs:string.
    wchar_t*                             avsCodeRaw                     0;	///< Optional element.
/// Element "cvCode" of XSD type xs:string.
    wchar_t*                             cvCode                         0;	///< Optional element.
/// Element "cvCodeRaw" of XSD type xs:string.
    wchar_t*                             cvCodeRaw                      0;	///< Optional element.
/// Element "cavvResponseCode" of XSD type xs:string.
    wchar_t*                             cavvResponseCode               0;	///< Optional element.
/// Element "cavvResponseCodeRaw" of XSD type xs:string.
    wchar_t*                             cavvResponseCodeRaw            0;	///< Optional element.
/// Element "cardGroup" of XSD type xs:string.
    wchar_t*                             cardGroup                      0;	///< Optional element.
/// Element "paymentNetworkTransactionID" of XSD type xs:string.
    wchar_t*                             paymentNetworkTransactionID    0;	///< Optional element.
/// Element "cardCategory" of XSD type xs:string.
    wchar_t*                             cardCategory                   0;	///< Optional element.
/// Element "accountBalance" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         accountBalance                 0;	///< Optional element.
/// Element "authorizedDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       authorizedDateTime             0;	///< Optional element.
/// Element "requestAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         requestAmount                  0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "accountBalanceCurrency" of XSD type xs:string.
    wchar_t*                             accountBalanceCurrency         0;	///< Optional element.
/// Element "accountBalanceSign" of XSD type xs:string.
    wchar_t*                             accountBalanceSign             0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCSaleCreditReply is a complexType.
///
/// class ns2__CCSaleCreditReply operations:
/// - ns2__CCSaleCreditReply* soap_new_ns2__CCSaleCreditReply(soap*) allocate
/// - ns2__CCSaleCreditReply* soap_new_ns2__CCSaleCreditReply(soap*, int num) allocate array
/// - ns2__CCSaleCreditReply* soap_new_req_ns2__CCSaleCreditReply(soap*, ...) allocate, set required members
/// - ns2__CCSaleCreditReply* soap_new_set_ns2__CCSaleCreditReply(soap*, ...) allocate, set all public members
/// - ns2__CCSaleCreditReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCSaleCreditReply(soap*, ns2__CCSaleCreditReply*) deserialize from a stream
/// - int soap_write_ns2__CCSaleCreditReply(soap*, ns2__CCSaleCreditReply*) serialize to a stream
/// - ns2__CCSaleCreditReply* ns2__CCSaleCreditReply::soap_dup(soap*) returns deep copy of ns2__CCSaleCreditReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCSaleCreditReply::soap_del() deep deletes ns2__CCSaleCreditReply data members, use only after ns2__CCSaleCreditReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCSaleCreditReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "authorizationCode" of XSD type xs:string.
    wchar_t*                             authorizationCode              0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "authorizedDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       authorizedDateTime             0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "paymentNetworkTransactionID" of XSD type xs:string.
    wchar_t*                             paymentNetworkTransactionID    0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCSaleReversalReply is a complexType.
///
/// class ns2__CCSaleReversalReply operations:
/// - ns2__CCSaleReversalReply* soap_new_ns2__CCSaleReversalReply(soap*) allocate
/// - ns2__CCSaleReversalReply* soap_new_ns2__CCSaleReversalReply(soap*, int num) allocate array
/// - ns2__CCSaleReversalReply* soap_new_req_ns2__CCSaleReversalReply(soap*, ...) allocate, set required members
/// - ns2__CCSaleReversalReply* soap_new_set_ns2__CCSaleReversalReply(soap*, ...) allocate, set all public members
/// - ns2__CCSaleReversalReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCSaleReversalReply(soap*, ns2__CCSaleReversalReply*) deserialize from a stream
/// - int soap_write_ns2__CCSaleReversalReply(soap*, ns2__CCSaleReversalReply*) serialize to a stream
/// - ns2__CCSaleReversalReply* ns2__CCSaleReversalReply::soap_dup(soap*) returns deep copy of ns2__CCSaleReversalReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCSaleReversalReply::soap_del() deep deletes ns2__CCSaleReversalReply data members, use only after ns2__CCSaleReversalReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCSaleReversalReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "authorizationCode" of XSD type xs:string.
    wchar_t*                             authorizationCode              0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCIncrementalAuthReply is a complexType.
///
/// class ns2__CCIncrementalAuthReply operations:
/// - ns2__CCIncrementalAuthReply* soap_new_ns2__CCIncrementalAuthReply(soap*) allocate
/// - ns2__CCIncrementalAuthReply* soap_new_ns2__CCIncrementalAuthReply(soap*, int num) allocate array
/// - ns2__CCIncrementalAuthReply* soap_new_req_ns2__CCIncrementalAuthReply(soap*, ...) allocate, set required members
/// - ns2__CCIncrementalAuthReply* soap_new_set_ns2__CCIncrementalAuthReply(soap*, ...) allocate, set all public members
/// - ns2__CCIncrementalAuthReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCIncrementalAuthReply(soap*, ns2__CCIncrementalAuthReply*) deserialize from a stream
/// - int soap_write_ns2__CCIncrementalAuthReply(soap*, ns2__CCIncrementalAuthReply*) serialize to a stream
/// - ns2__CCIncrementalAuthReply* ns2__CCIncrementalAuthReply::soap_dup(soap*) returns deep copy of ns2__CCIncrementalAuthReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCIncrementalAuthReply::soap_del() deep deletes ns2__CCIncrementalAuthReply data members, use only after ns2__CCIncrementalAuthReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCIncrementalAuthReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "authorizationCode" of XSD type xs:string.
    wchar_t*                             authorizationCode              0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "authorizedDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       authorizedDateTime             0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "paymentNetworkTransactionID" of XSD type xs:string.
    wchar_t*                             paymentNetworkTransactionID    0;	///< Optional element.
/// Element "cardCategory" of XSD type xs:string.
    wchar_t*                             cardCategory                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCCaptureReply is a complexType.
///
/// class ns2__CCCaptureReply operations:
/// - ns2__CCCaptureReply* soap_new_ns2__CCCaptureReply(soap*) allocate
/// - ns2__CCCaptureReply* soap_new_ns2__CCCaptureReply(soap*, int num) allocate array
/// - ns2__CCCaptureReply* soap_new_req_ns2__CCCaptureReply(soap*, ...) allocate, set required members
/// - ns2__CCCaptureReply* soap_new_set_ns2__CCCaptureReply(soap*, ...) allocate, set all public members
/// - ns2__CCCaptureReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCCaptureReply(soap*, ns2__CCCaptureReply*) deserialize from a stream
/// - int soap_write_ns2__CCCaptureReply(soap*, ns2__CCCaptureReply*) serialize to a stream
/// - ns2__CCCaptureReply* ns2__CCCaptureReply::soap_dup(soap*) returns deep copy of ns2__CCCaptureReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCCaptureReply::soap_del() deep deletes ns2__CCCaptureReply data members, use only after ns2__CCCaptureReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCCaptureReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "fundingTotals" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":FundingTotals.
    ns2__FundingTotals*                  fundingTotals                  0;	///< Optional element.
/// Element "fxQuoteID" of XSD type xs:string.
    wchar_t*                             fxQuoteID                      0;	///< Optional element.
/// Element "fxQuoteRate" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       fxQuoteRate                    0;	///< Optional element.
/// Element "fxQuoteType" of XSD type xs:string.
    wchar_t*                             fxQuoteType                    0;	///< Optional element.
/// Element "fxQuoteExpirationDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       fxQuoteExpirationDateTime      0;	///< Optional element.
/// Element "purchasingLevel3Enabled" of XSD type xs:string.
    wchar_t*                             purchasingLevel3Enabled        0;	///< Optional element.
/// Element "enhancedDataEnabled" of XSD type xs:string.
    wchar_t*                             enhancedDataEnabled            0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":ServiceFeeCalculateReply is a complexType.
///
/// class ns2__ServiceFeeCalculateReply operations:
/// - ns2__ServiceFeeCalculateReply* soap_new_ns2__ServiceFeeCalculateReply(soap*) allocate
/// - ns2__ServiceFeeCalculateReply* soap_new_ns2__ServiceFeeCalculateReply(soap*, int num) allocate array
/// - ns2__ServiceFeeCalculateReply* soap_new_req_ns2__ServiceFeeCalculateReply(soap*, ...) allocate, set required members
/// - ns2__ServiceFeeCalculateReply* soap_new_set_ns2__ServiceFeeCalculateReply(soap*, ...) allocate, set all public members
/// - ns2__ServiceFeeCalculateReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ServiceFeeCalculateReply(soap*, ns2__ServiceFeeCalculateReply*) deserialize from a stream
/// - int soap_write_ns2__ServiceFeeCalculateReply(soap*, ns2__ServiceFeeCalculateReply*) serialize to a stream
/// - ns2__ServiceFeeCalculateReply* ns2__ServiceFeeCalculateReply::soap_dup(soap*) returns deep copy of ns2__ServiceFeeCalculateReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ServiceFeeCalculateReply::soap_del() deep deletes ns2__ServiceFeeCalculateReply data members, use only after ns2__ServiceFeeCalculateReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ServiceFeeCalculateReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCCreditReply is a complexType.
///
/// class ns2__CCCreditReply operations:
/// - ns2__CCCreditReply* soap_new_ns2__CCCreditReply(soap*) allocate
/// - ns2__CCCreditReply* soap_new_ns2__CCCreditReply(soap*, int num) allocate array
/// - ns2__CCCreditReply* soap_new_req_ns2__CCCreditReply(soap*, ...) allocate, set required members
/// - ns2__CCCreditReply* soap_new_set_ns2__CCCreditReply(soap*, ...) allocate, set all public members
/// - ns2__CCCreditReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCCreditReply(soap*, ns2__CCCreditReply*) deserialize from a stream
/// - int soap_write_ns2__CCCreditReply(soap*, ns2__CCCreditReply*) serialize to a stream
/// - ns2__CCCreditReply* ns2__CCCreditReply::soap_dup(soap*) returns deep copy of ns2__CCCreditReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCCreditReply::soap_del() deep deletes ns2__CCCreditReply data members, use only after ns2__CCCreditReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCCreditReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "purchasingLevel3Enabled" of XSD type xs:string.
    wchar_t*                             purchasingLevel3Enabled        0;	///< Optional element.
/// Element "enhancedDataEnabled" of XSD type xs:string.
    wchar_t*                             enhancedDataEnabled            0;	///< Optional element.
/// Element "authorizationXID" of XSD type xs:string.
    wchar_t*                             authorizationXID               0;	///< Optional element.
/// Element "forwardCode" of XSD type xs:string.
    wchar_t*                             forwardCode                    0;	///< Optional element.
/// Element "ownerMerchantID" of XSD type xs:string.
    wchar_t*                             ownerMerchantID                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PinDebitPurchaseReply is a complexType.
///
/// class ns2__PinDebitPurchaseReply operations:
/// - ns2__PinDebitPurchaseReply* soap_new_ns2__PinDebitPurchaseReply(soap*) allocate
/// - ns2__PinDebitPurchaseReply* soap_new_ns2__PinDebitPurchaseReply(soap*, int num) allocate array
/// - ns2__PinDebitPurchaseReply* soap_new_req_ns2__PinDebitPurchaseReply(soap*, ...) allocate, set required members
/// - ns2__PinDebitPurchaseReply* soap_new_set_ns2__PinDebitPurchaseReply(soap*, ...) allocate, set all public members
/// - ns2__PinDebitPurchaseReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PinDebitPurchaseReply(soap*, ns2__PinDebitPurchaseReply*) deserialize from a stream
/// - int soap_write_ns2__PinDebitPurchaseReply(soap*, ns2__PinDebitPurchaseReply*) serialize to a stream
/// - ns2__PinDebitPurchaseReply* ns2__PinDebitPurchaseReply::soap_dup(soap*) returns deep copy of ns2__PinDebitPurchaseReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PinDebitPurchaseReply::soap_del() deep deletes ns2__PinDebitPurchaseReply data members, use only after ns2__PinDebitPurchaseReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PinDebitPurchaseReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "authorizationCode" of XSD type xs:string.
    wchar_t*                             authorizationCode              0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "networkCode" of XSD type xs:string.
    wchar_t*                             networkCode                    0;	///< Optional element.
/// Element "transactionID" of XSD type xs:string.
    wchar_t*                             transactionID                  0;	///< Optional element.
/// Element "requestAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         requestAmount                  0;	///< Optional element.
/// Element "requestCurrency" of XSD type xs:string.
    wchar_t*                             requestCurrency                0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "dateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       dateTime                       0;	///< Optional element.
/// Element "accountType" of XSD type xs:string.
    wchar_t*                             accountType                    0;	///< Optional element.
/// Element "amountType" of XSD type xs:string.
    wchar_t*                             amountType                     0;	///< Optional element.
/// Element "accountBalance" of XSD type xs:string.
    wchar_t*                             accountBalance                 0;	///< Optional element.
/// Element "accountBalanceCurrency" of XSD type xs:string.
    wchar_t*                             accountBalanceCurrency         0;	///< Optional element.
/// Element "accountBalanceSign" of XSD type xs:string.
    wchar_t*                             accountBalanceSign             0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PinDebitCreditReply is a complexType.
///
/// class ns2__PinDebitCreditReply operations:
/// - ns2__PinDebitCreditReply* soap_new_ns2__PinDebitCreditReply(soap*) allocate
/// - ns2__PinDebitCreditReply* soap_new_ns2__PinDebitCreditReply(soap*, int num) allocate array
/// - ns2__PinDebitCreditReply* soap_new_req_ns2__PinDebitCreditReply(soap*, ...) allocate, set required members
/// - ns2__PinDebitCreditReply* soap_new_set_ns2__PinDebitCreditReply(soap*, ...) allocate, set all public members
/// - ns2__PinDebitCreditReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PinDebitCreditReply(soap*, ns2__PinDebitCreditReply*) deserialize from a stream
/// - int soap_write_ns2__PinDebitCreditReply(soap*, ns2__PinDebitCreditReply*) serialize to a stream
/// - ns2__PinDebitCreditReply* ns2__PinDebitCreditReply::soap_dup(soap*) returns deep copy of ns2__PinDebitCreditReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PinDebitCreditReply::soap_del() deep deletes ns2__PinDebitCreditReply data members, use only after ns2__PinDebitCreditReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PinDebitCreditReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "authorizationCode" of XSD type xs:string.
    wchar_t*                             authorizationCode              0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "networkCode" of XSD type xs:string.
    wchar_t*                             networkCode                    0;	///< Optional element.
/// Element "transactionID" of XSD type xs:string.
    wchar_t*                             transactionID                  0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "dateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       dateTime                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PinDebitReversalReply is a complexType.
///
/// class ns2__PinDebitReversalReply operations:
/// - ns2__PinDebitReversalReply* soap_new_ns2__PinDebitReversalReply(soap*) allocate
/// - ns2__PinDebitReversalReply* soap_new_ns2__PinDebitReversalReply(soap*, int num) allocate array
/// - ns2__PinDebitReversalReply* soap_new_req_ns2__PinDebitReversalReply(soap*, ...) allocate, set required members
/// - ns2__PinDebitReversalReply* soap_new_set_ns2__PinDebitReversalReply(soap*, ...) allocate, set all public members
/// - ns2__PinDebitReversalReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PinDebitReversalReply(soap*, ns2__PinDebitReversalReply*) deserialize from a stream
/// - int soap_write_ns2__PinDebitReversalReply(soap*, ns2__PinDebitReversalReply*) serialize to a stream
/// - ns2__PinDebitReversalReply* ns2__PinDebitReversalReply::soap_dup(soap*) returns deep copy of ns2__PinDebitReversalReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PinDebitReversalReply::soap_del() deep deletes ns2__PinDebitReversalReply data members, use only after ns2__PinDebitReversalReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PinDebitReversalReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "dateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       dateTime                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCAuthReversalReply is a complexType.
///
/// class ns2__CCAuthReversalReply operations:
/// - ns2__CCAuthReversalReply* soap_new_ns2__CCAuthReversalReply(soap*) allocate
/// - ns2__CCAuthReversalReply* soap_new_ns2__CCAuthReversalReply(soap*, int num) allocate array
/// - ns2__CCAuthReversalReply* soap_new_req_ns2__CCAuthReversalReply(soap*, ...) allocate, set required members
/// - ns2__CCAuthReversalReply* soap_new_set_ns2__CCAuthReversalReply(soap*, ...) allocate, set all public members
/// - ns2__CCAuthReversalReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCAuthReversalReply(soap*, ns2__CCAuthReversalReply*) deserialize from a stream
/// - int soap_write_ns2__CCAuthReversalReply(soap*, ns2__CCAuthReversalReply*) serialize to a stream
/// - ns2__CCAuthReversalReply* ns2__CCAuthReversalReply::soap_dup(soap*) returns deep copy of ns2__CCAuthReversalReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCAuthReversalReply::soap_del() deep deletes ns2__CCAuthReversalReply data members, use only after ns2__CCAuthReversalReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCAuthReversalReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "authorizationCode" of XSD type xs:string.
    wchar_t*                             authorizationCode              0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "forwardCode" of XSD type xs:string.
    wchar_t*                             forwardCode                    0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "processorTransactionID" of XSD type xs:string.
    wchar_t*                             processorTransactionID         0;	///< Optional element.
/// Element "paymentCardService" of XSD type xs:string.
    wchar_t*                             paymentCardService             0;	///< Optional element.
/// Element "paymentCardServiceResult" of XSD type xs:string.
    wchar_t*                             paymentCardServiceResult       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCAutoAuthReversalReply is a complexType.
///
/// class ns2__CCAutoAuthReversalReply operations:
/// - ns2__CCAutoAuthReversalReply* soap_new_ns2__CCAutoAuthReversalReply(soap*) allocate
/// - ns2__CCAutoAuthReversalReply* soap_new_ns2__CCAutoAuthReversalReply(soap*, int num) allocate array
/// - ns2__CCAutoAuthReversalReply* soap_new_req_ns2__CCAutoAuthReversalReply(soap*, ...) allocate, set required members
/// - ns2__CCAutoAuthReversalReply* soap_new_set_ns2__CCAutoAuthReversalReply(soap*, ...) allocate, set all public members
/// - ns2__CCAutoAuthReversalReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCAutoAuthReversalReply(soap*, ns2__CCAutoAuthReversalReply*) deserialize from a stream
/// - int soap_write_ns2__CCAutoAuthReversalReply(soap*, ns2__CCAutoAuthReversalReply*) serialize to a stream
/// - ns2__CCAutoAuthReversalReply* ns2__CCAutoAuthReversalReply::soap_dup(soap*) returns deep copy of ns2__CCAutoAuthReversalReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCAutoAuthReversalReply::soap_del() deep deletes ns2__CCAutoAuthReversalReply data members, use only after ns2__CCAutoAuthReversalReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCAutoAuthReversalReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "result" of XSD type xs:string.
    wchar_t*                             result                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":ECDebitReply is a complexType.
///
/// class ns2__ECDebitReply operations:
/// - ns2__ECDebitReply* soap_new_ns2__ECDebitReply(soap*) allocate
/// - ns2__ECDebitReply* soap_new_ns2__ECDebitReply(soap*, int num) allocate array
/// - ns2__ECDebitReply* soap_new_req_ns2__ECDebitReply(soap*, ...) allocate, set required members
/// - ns2__ECDebitReply* soap_new_set_ns2__ECDebitReply(soap*, ...) allocate, set all public members
/// - ns2__ECDebitReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ECDebitReply(soap*, ns2__ECDebitReply*) deserialize from a stream
/// - int soap_write_ns2__ECDebitReply(soap*, ns2__ECDebitReply*) serialize to a stream
/// - ns2__ECDebitReply* ns2__ECDebitReply::soap_dup(soap*) returns deep copy of ns2__ECDebitReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ECDebitReply::soap_del() deep deletes ns2__ECDebitReply data members, use only after ns2__ECDebitReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ECDebitReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "settlementMethod" of XSD type xs:string.
    wchar_t*                             settlementMethod               0;	///< Optional element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "verificationLevel" of XSD type xs:integer.
    xsd__integer*                        verificationLevel              0;	///< Optional element.
/// Element "processorTransactionID" of XSD type xs:string.
    wchar_t*                             processorTransactionID         0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "avsCode" of XSD type xs:string.
    wchar_t*                             avsCode                        0;	///< Optional element.
/// Element "avsCodeRaw" of XSD type xs:string.
    wchar_t*                             avsCodeRaw                     0;	///< Optional element.
/// Element "verificationCode" of XSD type xs:string.
    wchar_t*                             verificationCode               0;	///< Optional element.
/// Element "verificationCodeRaw" of XSD type xs:string.
    wchar_t*                             verificationCodeRaw            0;	///< Optional element.
/// Element "correctedAccountNumber" of XSD type xs:string.
    wchar_t*                             correctedAccountNumber         0;	///< Optional element.
/// Element "correctedRoutingNumber" of XSD type xs:string.
    wchar_t*                             correctedRoutingNumber         0;	///< Optional element.
/// Element "ownerMerchantID" of XSD type xs:string.
    wchar_t*                             ownerMerchantID                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":ECCreditReply is a complexType.
///
/// class ns2__ECCreditReply operations:
/// - ns2__ECCreditReply* soap_new_ns2__ECCreditReply(soap*) allocate
/// - ns2__ECCreditReply* soap_new_ns2__ECCreditReply(soap*, int num) allocate array
/// - ns2__ECCreditReply* soap_new_req_ns2__ECCreditReply(soap*, ...) allocate, set required members
/// - ns2__ECCreditReply* soap_new_set_ns2__ECCreditReply(soap*, ...) allocate, set all public members
/// - ns2__ECCreditReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ECCreditReply(soap*, ns2__ECCreditReply*) deserialize from a stream
/// - int soap_write_ns2__ECCreditReply(soap*, ns2__ECCreditReply*) serialize to a stream
/// - ns2__ECCreditReply* ns2__ECCreditReply::soap_dup(soap*) returns deep copy of ns2__ECCreditReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ECCreditReply::soap_del() deep deletes ns2__ECCreditReply data members, use only after ns2__ECCreditReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ECCreditReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "settlementMethod" of XSD type xs:string.
    wchar_t*                             settlementMethod               0;	///< Optional element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "processorTransactionID" of XSD type xs:string.
    wchar_t*                             processorTransactionID         0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "verificationCode" of XSD type xs:string.
    wchar_t*                             verificationCode               0;	///< Optional element.
/// Element "verificationCodeRaw" of XSD type xs:string.
    wchar_t*                             verificationCodeRaw            0;	///< Optional element.
/// Element "correctedAccountNumber" of XSD type xs:string.
    wchar_t*                             correctedAccountNumber         0;	///< Optional element.
/// Element "correctedRoutingNumber" of XSD type xs:string.
    wchar_t*                             correctedRoutingNumber         0;	///< Optional element.
/// Element "ownerMerchantID" of XSD type xs:string.
    wchar_t*                             ownerMerchantID                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":ECAuthenticateReply is a complexType.
///
/// class ns2__ECAuthenticateReply operations:
/// - ns2__ECAuthenticateReply* soap_new_ns2__ECAuthenticateReply(soap*) allocate
/// - ns2__ECAuthenticateReply* soap_new_ns2__ECAuthenticateReply(soap*, int num) allocate array
/// - ns2__ECAuthenticateReply* soap_new_req_ns2__ECAuthenticateReply(soap*, ...) allocate, set required members
/// - ns2__ECAuthenticateReply* soap_new_set_ns2__ECAuthenticateReply(soap*, ...) allocate, set all public members
/// - ns2__ECAuthenticateReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ECAuthenticateReply(soap*, ns2__ECAuthenticateReply*) deserialize from a stream
/// - int soap_write_ns2__ECAuthenticateReply(soap*, ns2__ECAuthenticateReply*) serialize to a stream
/// - ns2__ECAuthenticateReply* ns2__ECAuthenticateReply::soap_dup(soap*) returns deep copy of ns2__ECAuthenticateReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ECAuthenticateReply::soap_del() deep deletes ns2__ECAuthenticateReply data members, use only after ns2__ECAuthenticateReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ECAuthenticateReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "checkpointSummary" of XSD type xs:string.
    wchar_t*                             checkpointSummary              0;	///< Optional element.
/// Element "fraudShieldIndicators" of XSD type xs:string.
    wchar_t*                             fraudShieldIndicators          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayerAuthEnrollReply is a complexType.
///
/// class ns2__PayerAuthEnrollReply operations:
/// - ns2__PayerAuthEnrollReply* soap_new_ns2__PayerAuthEnrollReply(soap*) allocate
/// - ns2__PayerAuthEnrollReply* soap_new_ns2__PayerAuthEnrollReply(soap*, int num) allocate array
/// - ns2__PayerAuthEnrollReply* soap_new_req_ns2__PayerAuthEnrollReply(soap*, ...) allocate, set required members
/// - ns2__PayerAuthEnrollReply* soap_new_set_ns2__PayerAuthEnrollReply(soap*, ...) allocate, set all public members
/// - ns2__PayerAuthEnrollReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayerAuthEnrollReply(soap*, ns2__PayerAuthEnrollReply*) deserialize from a stream
/// - int soap_write_ns2__PayerAuthEnrollReply(soap*, ns2__PayerAuthEnrollReply*) serialize to a stream
/// - ns2__PayerAuthEnrollReply* ns2__PayerAuthEnrollReply::soap_dup(soap*) returns deep copy of ns2__PayerAuthEnrollReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayerAuthEnrollReply::soap_del() deep deletes ns2__PayerAuthEnrollReply data members, use only after ns2__PayerAuthEnrollReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayerAuthEnrollReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "acsURL" of XSD type xs:string.
    wchar_t*                             acsURL                         0;	///< Optional element.
/// Element "commerceIndicator" of XSD type xs:string.
    wchar_t*                             commerceIndicator              0;	///< Optional element.
/// Element "eci" of XSD type xs:string.
    wchar_t*                             eci                            0;	///< Optional element.
/// Element "paReq" of XSD type xs:string.
    wchar_t*                             paReq                          0;	///< Optional element.
/// Element "proxyPAN" of XSD type xs:string.
    wchar_t*                             proxyPAN                       0;	///< Optional element.
/// Element "xid" of XSD type xs:string.
    wchar_t*                             xid                            0;	///< Optional element.
/// Element "proofXML" of XSD type xs:string.
    wchar_t*                             proofXML                       0;	///< Optional element.
/// Element "ucafCollectionIndicator" of XSD type xs:string.
    wchar_t*                             ucafCollectionIndicator        0;	///< Optional element.
/// Element "veresEnrolled" of XSD type xs:string.
    wchar_t*                             veresEnrolled                  0;	///< Optional element.
/// Element "authenticationPath" of XSD type xs:string.
    wchar_t*                             authenticationPath             0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayerAuthValidateReply is a complexType.
///
/// class ns2__PayerAuthValidateReply operations:
/// - ns2__PayerAuthValidateReply* soap_new_ns2__PayerAuthValidateReply(soap*) allocate
/// - ns2__PayerAuthValidateReply* soap_new_ns2__PayerAuthValidateReply(soap*, int num) allocate array
/// - ns2__PayerAuthValidateReply* soap_new_req_ns2__PayerAuthValidateReply(soap*, ...) allocate, set required members
/// - ns2__PayerAuthValidateReply* soap_new_set_ns2__PayerAuthValidateReply(soap*, ...) allocate, set all public members
/// - ns2__PayerAuthValidateReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayerAuthValidateReply(soap*, ns2__PayerAuthValidateReply*) deserialize from a stream
/// - int soap_write_ns2__PayerAuthValidateReply(soap*, ns2__PayerAuthValidateReply*) serialize to a stream
/// - ns2__PayerAuthValidateReply* ns2__PayerAuthValidateReply::soap_dup(soap*) returns deep copy of ns2__PayerAuthValidateReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayerAuthValidateReply::soap_del() deep deletes ns2__PayerAuthValidateReply data members, use only after ns2__PayerAuthValidateReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayerAuthValidateReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "authenticationResult" of XSD type xs:string.
    wchar_t*                             authenticationResult           0;	///< Optional element.
/// Element "authenticationStatusMessage" of XSD type xs:string.
    wchar_t*                             authenticationStatusMessage    0;	///< Optional element.
/// Element "cavv" of XSD type xs:string.
    wchar_t*                             cavv                           0;	///< Optional element.
/// Element "cavvAlgorithm" of XSD type xs:string.
    wchar_t*                             cavvAlgorithm                  0;	///< Optional element.
/// Element "commerceIndicator" of XSD type xs:string.
    wchar_t*                             commerceIndicator              0;	///< Optional element.
/// Element "eci" of XSD type xs:string.
    wchar_t*                             eci                            0;	///< Optional element.
/// Element "eciRaw" of XSD type xs:string.
    wchar_t*                             eciRaw                         0;	///< Optional element.
/// Element "xid" of XSD type xs:string.
    wchar_t*                             xid                            0;	///< Optional element.
/// Element "ucafAuthenticationData" of XSD type xs:string.
    wchar_t*                             ucafAuthenticationData         0;	///< Optional element.
/// Element "ucafCollectionIndicator" of XSD type xs:string.
    wchar_t*                             ucafCollectionIndicator        0;	///< Optional element.
/// Element "paresStatus" of XSD type xs:string.
    wchar_t*                             paresStatus                    0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":TaxReplyItem is a complexType.
///
/// class ns2__TaxReplyItem operations:
/// - ns2__TaxReplyItem* soap_new_ns2__TaxReplyItem(soap*) allocate
/// - ns2__TaxReplyItem* soap_new_ns2__TaxReplyItem(soap*, int num) allocate array
/// - ns2__TaxReplyItem* soap_new_req_ns2__TaxReplyItem(soap*, ...) allocate, set required members
/// - ns2__TaxReplyItem* soap_new_set_ns2__TaxReplyItem(soap*, ...) allocate, set all public members
/// - ns2__TaxReplyItem::soap_default(soap*) reset members to default
/// - int soap_read_ns2__TaxReplyItem(soap*, ns2__TaxReplyItem*) deserialize from a stream
/// - int soap_write_ns2__TaxReplyItem(soap*, ns2__TaxReplyItem*) serialize to a stream
/// - ns2__TaxReplyItem* ns2__TaxReplyItem::soap_dup(soap*) returns deep copy of ns2__TaxReplyItem, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__TaxReplyItem::soap_del() deep deletes ns2__TaxReplyItem data members, use only after ns2__TaxReplyItem::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__TaxReplyItem
{ public:
/// Element "cityTaxAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         cityTaxAmount                  0;	///< Optional element.
/// Element "countyTaxAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         countyTaxAmount                0;	///< Optional element.
/// Element "districtTaxAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         districtTaxAmount              0;	///< Optional element.
/// Element "stateTaxAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         stateTaxAmount                 0;	///< Optional element.
/// Element "totalTaxAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount                          totalTaxAmount                 1;	///< Required element.
/// Attribute "id" of XSD type xs:integer.
   @xsd__integer                         id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":TaxReply is a complexType.
///
/// class ns2__TaxReply operations:
/// - ns2__TaxReply* soap_new_ns2__TaxReply(soap*) allocate
/// - ns2__TaxReply* soap_new_ns2__TaxReply(soap*, int num) allocate array
/// - ns2__TaxReply* soap_new_req_ns2__TaxReply(soap*, ...) allocate, set required members
/// - ns2__TaxReply* soap_new_set_ns2__TaxReply(soap*, ...) allocate, set all public members
/// - ns2__TaxReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__TaxReply(soap*, ns2__TaxReply*) deserialize from a stream
/// - int soap_write_ns2__TaxReply(soap*, ns2__TaxReply*) serialize to a stream
/// - ns2__TaxReply* ns2__TaxReply::soap_dup(soap*) returns deep copy of ns2__TaxReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__TaxReply::soap_del() deep deletes ns2__TaxReply data members, use only after ns2__TaxReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__TaxReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "currency" of XSD type xs:string.
    wchar_t*                             currency                       0;	///< Optional element.
/// Element "grandTotalAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         grandTotalAmount               0;	///< Optional element.
/// Element "totalCityTaxAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         totalCityTaxAmount             0;	///< Optional element.
/// Element "city" of XSD type xs:string.
    wchar_t*                             city                           0;	///< Optional element.
/// Element "totalCountyTaxAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         totalCountyTaxAmount           0;	///< Optional element.
/// Element "county" of XSD type xs:string.
    wchar_t*                             county                         0;	///< Optional element.
/// Element "totalDistrictTaxAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         totalDistrictTaxAmount         0;	///< Optional element.
/// Element "totalStateTaxAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         totalStateTaxAmount            0;	///< Optional element.
/// Element "state" of XSD type xs:string.
    wchar_t*                             state                          0;	///< Optional element.
/// Element "totalTaxAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         totalTaxAmount                 0;	///< Optional element.
/// Element "postalCode" of XSD type xs:string.
    wchar_t*                             postalCode                     0;	///< Optional element.
/// Element "geocode" of XSD type xs:string.
    wchar_t*                             geocode                        0;	///< Optional element.
/// Vector of ns2__TaxReplyItem* of length 0..1000.
    std::vector<ns2__TaxReplyItem*     > item                           0:1000;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DeviceFingerprint is a complexType.
///
/// class ns2__DeviceFingerprint operations:
/// - ns2__DeviceFingerprint* soap_new_ns2__DeviceFingerprint(soap*) allocate
/// - ns2__DeviceFingerprint* soap_new_ns2__DeviceFingerprint(soap*, int num) allocate array
/// - ns2__DeviceFingerprint* soap_new_req_ns2__DeviceFingerprint(soap*, ...) allocate, set required members
/// - ns2__DeviceFingerprint* soap_new_set_ns2__DeviceFingerprint(soap*, ...) allocate, set all public members
/// - ns2__DeviceFingerprint::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DeviceFingerprint(soap*, ns2__DeviceFingerprint*) deserialize from a stream
/// - int soap_write_ns2__DeviceFingerprint(soap*, ns2__DeviceFingerprint*) serialize to a stream
/// - ns2__DeviceFingerprint* ns2__DeviceFingerprint::soap_dup(soap*) returns deep copy of ns2__DeviceFingerprint, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DeviceFingerprint::soap_del() deep deletes ns2__DeviceFingerprint data members, use only after ns2__DeviceFingerprint::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DeviceFingerprint
{ public:
/// Element "cookiesEnabled" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        cookiesEnabled                 0;	///< Optional element.
/// Element "flashEnabled" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        flashEnabled                   0;	///< Optional element.
/// Element "hash" of XSD type xs:string.
    wchar_t*                             hash                           0;	///< Optional element.
/// Element "imagesEnabled" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        imagesEnabled                  0;	///< Optional element.
/// Element "javascriptEnabled" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        javascriptEnabled              0;	///< Optional element.
/// Element "proxyIPAddress" of XSD type xs:string.
    wchar_t*                             proxyIPAddress                 0;	///< Optional element.
/// Element "proxyIPAddressActivities" of XSD type xs:string.
    wchar_t*                             proxyIPAddressActivities       0;	///< Optional element.
/// Element "proxyIPAddressAttributes" of XSD type xs:string.
    wchar_t*                             proxyIPAddressAttributes       0;	///< Optional element.
/// Element "proxyServerType" of XSD type xs:string.
    wchar_t*                             proxyServerType                0;	///< Optional element.
/// Element "trueIPAddress" of XSD type xs:string.
    wchar_t*                             trueIPAddress                  0;	///< Optional element.
/// Element "trueIPAddressActivities" of XSD type xs:string.
    wchar_t*                             trueIPAddressActivities        0;	///< Optional element.
/// Element "trueIPAddressAttributes" of XSD type xs:string.
    wchar_t*                             trueIPAddressAttributes        0;	///< Optional element.
/// Element "trueIPAddressCity" of XSD type xs:string.
    wchar_t*                             trueIPAddressCity              0;	///< Optional element.
/// Element "trueIPAddressCountry" of XSD type xs:string.
    wchar_t*                             trueIPAddressCountry           0;	///< Optional element.
/// Element "smartID" of XSD type xs:string.
    wchar_t*                             smartID                        0;	///< Optional element.
/// Element "smartIDConfidenceLevel" of XSD type xs:string.
    wchar_t*                             smartIDConfidenceLevel         0;	///< Optional element.
/// Element "screenResolution" of XSD type xs:string.
    wchar_t*                             screenResolution               0;	///< Optional element.
/// Element "browserLanguage" of XSD type xs:string.
    wchar_t*                             browserLanguage                0;	///< Optional element.
/// Element "agentType" of XSD type xs:string.
    wchar_t*                             agentType                      0;	///< Optional element.
/// Element "dateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       dateTime                       0;	///< Optional element.
/// Element "profileDuration" of XSD type xs:integer.
    xsd__integer*                        profileDuration                0;	///< Optional element.
/// Element "profiledURL" of XSD type xs:string.
    wchar_t*                             profiledURL                    0;	///< Optional element.
/// Element "timeOnPage" of XSD type xs:integer.
    xsd__integer*                        timeOnPage                     0;	///< Optional element.
/// Element "deviceMatch" of XSD type xs:string.
    wchar_t*                             deviceMatch                    0;	///< Optional element.
/// Element "firstEncounter" of XSD type xs:string.
    wchar_t*                             firstEncounter                 0;	///< Optional element.
/// Element "flashOS" of XSD type xs:string.
    wchar_t*                             flashOS                        0;	///< Optional element.
/// Element "flashVersion" of XSD type xs:string.
    wchar_t*                             flashVersion                   0;	///< Optional element.
/// Element "deviceLatitude" of XSD type xs:string.
    wchar_t*                             deviceLatitude                 0;	///< Optional element.
/// Element "deviceLongitude" of XSD type xs:string.
    wchar_t*                             deviceLongitude                0;	///< Optional element.
/// Element "gpsAccuracy" of XSD type xs:string.
    wchar_t*                             gpsAccuracy                    0;	///< Optional element.
/// Element "jbRoot" of XSD type xs:integer.
    xsd__integer*                        jbRoot                         0;	///< Optional element.
/// Element "jbRootReason" of XSD type xs:string.
    wchar_t*                             jbRootReason                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":AFSReply is a complexType.
///
/// class ns2__AFSReply operations:
/// - ns2__AFSReply* soap_new_ns2__AFSReply(soap*) allocate
/// - ns2__AFSReply* soap_new_ns2__AFSReply(soap*, int num) allocate array
/// - ns2__AFSReply* soap_new_req_ns2__AFSReply(soap*, ...) allocate, set required members
/// - ns2__AFSReply* soap_new_set_ns2__AFSReply(soap*, ...) allocate, set all public members
/// - ns2__AFSReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__AFSReply(soap*, ns2__AFSReply*) deserialize from a stream
/// - int soap_write_ns2__AFSReply(soap*, ns2__AFSReply*) serialize to a stream
/// - ns2__AFSReply* ns2__AFSReply::soap_dup(soap*) returns deep copy of ns2__AFSReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AFSReply::soap_del() deep deletes ns2__AFSReply data members, use only after ns2__AFSReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AFSReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "afsResult" of XSD type xs:integer.
    xsd__integer*                        afsResult                      0;	///< Optional element.
/// Element "hostSeverity" of XSD type xs:integer.
    xsd__integer*                        hostSeverity                   0;	///< Optional element.
/// Element "consumerLocalTime" of XSD type xs:string.
    wchar_t*                             consumerLocalTime              0;	///< Optional element.
/// Element "afsFactorCode" of XSD type xs:string.
    wchar_t*                             afsFactorCode                  0;	///< Optional element.
/// Element "addressInfoCode" of XSD type xs:string.
    wchar_t*                             addressInfoCode                0;	///< Optional element.
/// Element "hotlistInfoCode" of XSD type xs:string.
    wchar_t*                             hotlistInfoCode                0;	///< Optional element.
/// Element "internetInfoCode" of XSD type xs:string.
    wchar_t*                             internetInfoCode               0;	///< Optional element.
/// Element "phoneInfoCode" of XSD type xs:string.
    wchar_t*                             phoneInfoCode                  0;	///< Optional element.
/// Element "suspiciousInfoCode" of XSD type xs:string.
    wchar_t*                             suspiciousInfoCode             0;	///< Optional element.
/// Element "velocityInfoCode" of XSD type xs:string.
    wchar_t*                             velocityInfoCode               0;	///< Optional element.
/// Element "identityInfoCode" of XSD type xs:string.
    wchar_t*                             identityInfoCode               0;	///< Optional element.
/// Element "ipCountry" of XSD type xs:string.
    wchar_t*                             ipCountry                      0;	///< Optional element.
/// Element "ipState" of XSD type xs:string.
    wchar_t*                             ipState                        0;	///< Optional element.
/// Element "ipCity" of XSD type xs:string.
    wchar_t*                             ipCity                         0;	///< Optional element.
/// Element "ipRoutingMethod" of XSD type xs:string.
    wchar_t*                             ipRoutingMethod                0;	///< Optional element.
/// Element "ipAnonymizerStatus" of XSD type xs:string.
    wchar_t*                             ipAnonymizerStatus             0;	///< Optional element.
/// Element "scoreModelUsed" of XSD type xs:string.
    wchar_t*                             scoreModelUsed                 0;	///< Optional element.
/// Element "cardBin" of XSD type xs:string.
    wchar_t*                             cardBin                        0;	///< Optional element.
/// Element "binCountry" of XSD type xs:string.
    wchar_t*                             binCountry                     0;	///< Optional element.
/// Element "cardAccountType" of XSD type xs:string.
    wchar_t*                             cardAccountType                0;	///< Optional element.
/// Element "cardScheme" of XSD type xs:string.
    wchar_t*                             cardScheme                     0;	///< Optional element.
/// Element "cardIssuer" of XSD type xs:string.
    wchar_t*                             cardIssuer                     0;	///< Optional element.
/// Element "deviceFingerprint" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":DeviceFingerprint.
    ns2__DeviceFingerprint*              deviceFingerprint              0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DAVReply is a complexType.
///
/// class ns2__DAVReply operations:
/// - ns2__DAVReply* soap_new_ns2__DAVReply(soap*) allocate
/// - ns2__DAVReply* soap_new_ns2__DAVReply(soap*, int num) allocate array
/// - ns2__DAVReply* soap_new_req_ns2__DAVReply(soap*, ...) allocate, set required members
/// - ns2__DAVReply* soap_new_set_ns2__DAVReply(soap*, ...) allocate, set all public members
/// - ns2__DAVReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DAVReply(soap*, ns2__DAVReply*) deserialize from a stream
/// - int soap_write_ns2__DAVReply(soap*, ns2__DAVReply*) serialize to a stream
/// - ns2__DAVReply* ns2__DAVReply::soap_dup(soap*) returns deep copy of ns2__DAVReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DAVReply::soap_del() deep deletes ns2__DAVReply data members, use only after ns2__DAVReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DAVReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "addressType" of XSD type xs:string.
    wchar_t*                             addressType                    0;	///< Optional element.
/// Element "apartmentInfo" of XSD type xs:string.
    wchar_t*                             apartmentInfo                  0;	///< Optional element.
/// Element "barCode" of XSD type xs:string.
    wchar_t*                             barCode                        0;	///< Optional element.
/// Element "barCodeCheckDigit" of XSD type xs:string.
    wchar_t*                             barCodeCheckDigit              0;	///< Optional element.
/// Element "careOf" of XSD type xs:string.
    wchar_t*                             careOf                         0;	///< Optional element.
/// Element "cityInfo" of XSD type xs:string.
    wchar_t*                             cityInfo                       0;	///< Optional element.
/// Element "countryInfo" of XSD type xs:string.
    wchar_t*                             countryInfo                    0;	///< Optional element.
/// Element "directionalInfo" of XSD type xs:string.
    wchar_t*                             directionalInfo                0;	///< Optional element.
/// Element "lvrInfo" of XSD type xs:string.
    wchar_t*                             lvrInfo                        0;	///< Optional element.
/// Element "matchScore" of XSD type xs:integer.
    xsd__integer*                        matchScore                     0;	///< Optional element.
/// Element "standardizedAddress1" of XSD type xs:string.
    wchar_t*                             standardizedAddress1           0;	///< Optional element.
/// Element "standardizedAddress2" of XSD type xs:string.
    wchar_t*                             standardizedAddress2           0;	///< Optional element.
/// Element "standardizedAddress3" of XSD type xs:string.
    wchar_t*                             standardizedAddress3           0;	///< Optional element.
/// Element "standardizedAddress4" of XSD type xs:string.
    wchar_t*                             standardizedAddress4           0;	///< Optional element.
/// Element "standardizedAddressNoApt" of XSD type xs:string.
    wchar_t*                             standardizedAddressNoApt       0;	///< Optional element.
/// Element "standardizedCity" of XSD type xs:string.
    wchar_t*                             standardizedCity               0;	///< Optional element.
/// Element "standardizedCounty" of XSD type xs:string.
    wchar_t*                             standardizedCounty             0;	///< Optional element.
/// Element "standardizedCSP" of XSD type xs:string.
    wchar_t*                             standardizedCSP                0;	///< Optional element.
/// Element "standardizedState" of XSD type xs:string.
    wchar_t*                             standardizedState              0;	///< Optional element.
/// Element "standardizedPostalCode" of XSD type xs:string.
    wchar_t*                             standardizedPostalCode         0;	///< Optional element.
/// Element "standardizedCountry" of XSD type xs:string.
    wchar_t*                             standardizedCountry            0;	///< Optional element.
/// Element "standardizedISOCountry" of XSD type xs:string.
    wchar_t*                             standardizedISOCountry         0;	///< Optional element.
/// Element "stateInfo" of XSD type xs:string.
    wchar_t*                             stateInfo                      0;	///< Optional element.
/// Element "streetInfo" of XSD type xs:string.
    wchar_t*                             streetInfo                     0;	///< Optional element.
/// Element "suffixInfo" of XSD type xs:string.
    wchar_t*                             suffixInfo                     0;	///< Optional element.
/// Element "postalCodeInfo" of XSD type xs:string.
    wchar_t*                             postalCodeInfo                 0;	///< Optional element.
/// Element "overallInfo" of XSD type xs:string.
    wchar_t*                             overallInfo                    0;	///< Optional element.
/// Element "usInfo" of XSD type xs:string.
    wchar_t*                             usInfo                         0;	///< Optional element.
/// Element "caInfo" of XSD type xs:string.
    wchar_t*                             caInfo                         0;	///< Optional element.
/// Element "intlInfo" of XSD type xs:string.
    wchar_t*                             intlInfo                       0;	///< Optional element.
/// Element "usErrorInfo" of XSD type xs:string.
    wchar_t*                             usErrorInfo                    0;	///< Optional element.
/// Element "caErrorInfo" of XSD type xs:string.
    wchar_t*                             caErrorInfo                    0;	///< Optional element.
/// Element "intlErrorInfo" of XSD type xs:string.
    wchar_t*                             intlErrorInfo                  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DeniedPartiesMatch is a complexType.
///
/// class ns2__DeniedPartiesMatch operations:
/// - ns2__DeniedPartiesMatch* soap_new_ns2__DeniedPartiesMatch(soap*) allocate
/// - ns2__DeniedPartiesMatch* soap_new_ns2__DeniedPartiesMatch(soap*, int num) allocate array
/// - ns2__DeniedPartiesMatch* soap_new_req_ns2__DeniedPartiesMatch(soap*, ...) allocate, set required members
/// - ns2__DeniedPartiesMatch* soap_new_set_ns2__DeniedPartiesMatch(soap*, ...) allocate, set all public members
/// - ns2__DeniedPartiesMatch::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DeniedPartiesMatch(soap*, ns2__DeniedPartiesMatch*) deserialize from a stream
/// - int soap_write_ns2__DeniedPartiesMatch(soap*, ns2__DeniedPartiesMatch*) serialize to a stream
/// - ns2__DeniedPartiesMatch* ns2__DeniedPartiesMatch::soap_dup(soap*) returns deep copy of ns2__DeniedPartiesMatch, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DeniedPartiesMatch::soap_del() deep deletes ns2__DeniedPartiesMatch data members, use only after ns2__DeniedPartiesMatch::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DeniedPartiesMatch
{ public:
/// Element "list" of XSD type xs:string.
    wchar_t*                             list                           0;	///< Optional element.
/// Vector of wchar_t* of length 0..100.
    std::vector<wchar_t*               > name                           0:100;
/// Vector of wchar_t* of length 0..100.
    std::vector<wchar_t*               > address                        0:100;
/// Vector of wchar_t* of length 0..100.
    std::vector<wchar_t*               > program                        0:100;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":ExportReply is a complexType.
///
/// class ns2__ExportReply operations:
/// - ns2__ExportReply* soap_new_ns2__ExportReply(soap*) allocate
/// - ns2__ExportReply* soap_new_ns2__ExportReply(soap*, int num) allocate array
/// - ns2__ExportReply* soap_new_req_ns2__ExportReply(soap*, ...) allocate, set required members
/// - ns2__ExportReply* soap_new_set_ns2__ExportReply(soap*, ...) allocate, set all public members
/// - ns2__ExportReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ExportReply(soap*, ns2__ExportReply*) deserialize from a stream
/// - int soap_write_ns2__ExportReply(soap*, ns2__ExportReply*) serialize to a stream
/// - ns2__ExportReply* ns2__ExportReply::soap_dup(soap*) returns deep copy of ns2__ExportReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ExportReply::soap_del() deep deletes ns2__ExportReply data members, use only after ns2__ExportReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ExportReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "ipCountryConfidence" of XSD type xs:integer.
    xsd__integer*                        ipCountryConfidence            0;	///< Optional element.
/// Element "infoCode" of XSD type xs:string.
    wchar_t*                             infoCode                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":FXQuote is a complexType.
///
/// class ns2__FXQuote operations:
/// - ns2__FXQuote* soap_new_ns2__FXQuote(soap*) allocate
/// - ns2__FXQuote* soap_new_ns2__FXQuote(soap*, int num) allocate array
/// - ns2__FXQuote* soap_new_req_ns2__FXQuote(soap*, ...) allocate, set required members
/// - ns2__FXQuote* soap_new_set_ns2__FXQuote(soap*, ...) allocate, set all public members
/// - ns2__FXQuote::soap_default(soap*) reset members to default
/// - int soap_read_ns2__FXQuote(soap*, ns2__FXQuote*) deserialize from a stream
/// - int soap_write_ns2__FXQuote(soap*, ns2__FXQuote*) serialize to a stream
/// - ns2__FXQuote* ns2__FXQuote::soap_dup(soap*) returns deep copy of ns2__FXQuote, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FXQuote::soap_del() deep deletes ns2__FXQuote data members, use only after ns2__FXQuote::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FXQuote
{ public:
/// Element "id" of XSD type xs:string.
    wchar_t*                             id                             0;	///< Optional element.
/// Element "rate" of XSD type xs:string.
    wchar_t*                             rate                           0;	///< Optional element.
/// Element "type" of XSD type xs:string.
    wchar_t*                             type                           0;	///< Optional element.
/// Element "expirationDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       expirationDateTime             0;	///< Optional element.
/// Element "currency" of XSD type xs:string.
    wchar_t*                             currency                       0;	///< Optional element.
/// Element "fundingCurrency" of XSD type xs:string.
    wchar_t*                             fundingCurrency                0;	///< Optional element.
/// Element "receivedDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       receivedDateTime               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":FXRatesReply is a complexType.
///
/// class ns2__FXRatesReply operations:
/// - ns2__FXRatesReply* soap_new_ns2__FXRatesReply(soap*) allocate
/// - ns2__FXRatesReply* soap_new_ns2__FXRatesReply(soap*, int num) allocate array
/// - ns2__FXRatesReply* soap_new_req_ns2__FXRatesReply(soap*, ...) allocate, set required members
/// - ns2__FXRatesReply* soap_new_set_ns2__FXRatesReply(soap*, ...) allocate, set all public members
/// - ns2__FXRatesReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__FXRatesReply(soap*, ns2__FXRatesReply*) deserialize from a stream
/// - int soap_write_ns2__FXRatesReply(soap*, ns2__FXRatesReply*) serialize to a stream
/// - ns2__FXRatesReply* ns2__FXRatesReply::soap_dup(soap*) returns deep copy of ns2__FXRatesReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FXRatesReply::soap_del() deep deletes ns2__FXRatesReply data members, use only after ns2__FXRatesReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FXRatesReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Vector of ns2__FXQuote* of length 0..999.
    std::vector<ns2__FXQuote*          > quote                          0:999;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":BankTransferReply is a complexType.
///
/// class ns2__BankTransferReply operations:
/// - ns2__BankTransferReply* soap_new_ns2__BankTransferReply(soap*) allocate
/// - ns2__BankTransferReply* soap_new_ns2__BankTransferReply(soap*, int num) allocate array
/// - ns2__BankTransferReply* soap_new_req_ns2__BankTransferReply(soap*, ...) allocate, set required members
/// - ns2__BankTransferReply* soap_new_set_ns2__BankTransferReply(soap*, ...) allocate, set all public members
/// - ns2__BankTransferReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__BankTransferReply(soap*, ns2__BankTransferReply*) deserialize from a stream
/// - int soap_write_ns2__BankTransferReply(soap*, ns2__BankTransferReply*) serialize to a stream
/// - ns2__BankTransferReply* ns2__BankTransferReply::soap_dup(soap*) returns deep copy of ns2__BankTransferReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BankTransferReply::soap_del() deep deletes ns2__BankTransferReply data members, use only after ns2__BankTransferReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BankTransferReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "accountHolder" of XSD type xs:string.
    wchar_t*                             accountHolder                  0;	///< Optional element.
/// Element "accountNumber" of XSD type xs:string.
    wchar_t*                             accountNumber                  0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "bankName" of XSD type xs:string.
    wchar_t*                             bankName                       0;	///< Optional element.
/// Element "bankCity" of XSD type xs:string.
    wchar_t*                             bankCity                       0;	///< Optional element.
/// Element "bankCountry" of XSD type xs:string.
    wchar_t*                             bankCountry                    0;	///< Optional element.
/// Element "paymentReference" of XSD type xs:string.
    wchar_t*                             paymentReference               0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "bankSwiftCode" of XSD type xs:string.
    wchar_t*                             bankSwiftCode                  0;	///< Optional element.
/// Element "bankSpecialID" of XSD type xs:string.
    wchar_t*                             bankSpecialID                  0;	///< Optional element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "iban" of XSD type xs:string.
    wchar_t*                             iban                           0;	///< Optional element.
/// Element "bankCode" of XSD type xs:string.
    wchar_t*                             bankCode                       0;	///< Optional element.
/// Element "branchCode" of XSD type xs:string.
    wchar_t*                             branchCode                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":BankTransferRealTimeReply is a complexType.
///
/// class ns2__BankTransferRealTimeReply operations:
/// - ns2__BankTransferRealTimeReply* soap_new_ns2__BankTransferRealTimeReply(soap*) allocate
/// - ns2__BankTransferRealTimeReply* soap_new_ns2__BankTransferRealTimeReply(soap*, int num) allocate array
/// - ns2__BankTransferRealTimeReply* soap_new_req_ns2__BankTransferRealTimeReply(soap*, ...) allocate, set required members
/// - ns2__BankTransferRealTimeReply* soap_new_set_ns2__BankTransferRealTimeReply(soap*, ...) allocate, set all public members
/// - ns2__BankTransferRealTimeReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__BankTransferRealTimeReply(soap*, ns2__BankTransferRealTimeReply*) deserialize from a stream
/// - int soap_write_ns2__BankTransferRealTimeReply(soap*, ns2__BankTransferRealTimeReply*) serialize to a stream
/// - ns2__BankTransferRealTimeReply* ns2__BankTransferRealTimeReply::soap_dup(soap*) returns deep copy of ns2__BankTransferRealTimeReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BankTransferRealTimeReply::soap_del() deep deletes ns2__BankTransferRealTimeReply data members, use only after ns2__BankTransferRealTimeReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BankTransferRealTimeReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "formMethod" of XSD type xs:string.
    wchar_t*                             formMethod                     0;	///< Optional element.
/// Element "formAction" of XSD type xs:string.
    wchar_t*                             formAction                     0;	///< Optional element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "paymentReference" of XSD type xs:string.
    wchar_t*                             paymentReference               0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DirectDebitMandateReply is a complexType.
///
/// class ns2__DirectDebitMandateReply operations:
/// - ns2__DirectDebitMandateReply* soap_new_ns2__DirectDebitMandateReply(soap*) allocate
/// - ns2__DirectDebitMandateReply* soap_new_ns2__DirectDebitMandateReply(soap*, int num) allocate array
/// - ns2__DirectDebitMandateReply* soap_new_req_ns2__DirectDebitMandateReply(soap*, ...) allocate, set required members
/// - ns2__DirectDebitMandateReply* soap_new_set_ns2__DirectDebitMandateReply(soap*, ...) allocate, set all public members
/// - ns2__DirectDebitMandateReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DirectDebitMandateReply(soap*, ns2__DirectDebitMandateReply*) deserialize from a stream
/// - int soap_write_ns2__DirectDebitMandateReply(soap*, ns2__DirectDebitMandateReply*) serialize to a stream
/// - ns2__DirectDebitMandateReply* ns2__DirectDebitMandateReply::soap_dup(soap*) returns deep copy of ns2__DirectDebitMandateReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DirectDebitMandateReply::soap_del() deep deletes ns2__DirectDebitMandateReply data members, use only after ns2__DirectDebitMandateReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DirectDebitMandateReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "mandateID" of XSD type xs:string.
    wchar_t*                             mandateID                      0;	///< Optional element.
/// Element "mandateMaturationDate" of XSD type xs:string.
    wchar_t*                             mandateMaturationDate          0;	///< Optional element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":BankTransferRefundReply is a complexType.
///
/// class ns2__BankTransferRefundReply operations:
/// - ns2__BankTransferRefundReply* soap_new_ns2__BankTransferRefundReply(soap*) allocate
/// - ns2__BankTransferRefundReply* soap_new_ns2__BankTransferRefundReply(soap*, int num) allocate array
/// - ns2__BankTransferRefundReply* soap_new_req_ns2__BankTransferRefundReply(soap*, ...) allocate, set required members
/// - ns2__BankTransferRefundReply* soap_new_set_ns2__BankTransferRefundReply(soap*, ...) allocate, set all public members
/// - ns2__BankTransferRefundReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__BankTransferRefundReply(soap*, ns2__BankTransferRefundReply*) deserialize from a stream
/// - int soap_write_ns2__BankTransferRefundReply(soap*, ns2__BankTransferRefundReply*) serialize to a stream
/// - ns2__BankTransferRefundReply* ns2__BankTransferRefundReply::soap_dup(soap*) returns deep copy of ns2__BankTransferRefundReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BankTransferRefundReply::soap_del() deep deletes ns2__BankTransferRefundReply data members, use only after ns2__BankTransferRefundReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BankTransferRefundReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "iban" of XSD type xs:string.
    wchar_t*                             iban                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DirectDebitReply is a complexType.
///
/// class ns2__DirectDebitReply operations:
/// - ns2__DirectDebitReply* soap_new_ns2__DirectDebitReply(soap*) allocate
/// - ns2__DirectDebitReply* soap_new_ns2__DirectDebitReply(soap*, int num) allocate array
/// - ns2__DirectDebitReply* soap_new_req_ns2__DirectDebitReply(soap*, ...) allocate, set required members
/// - ns2__DirectDebitReply* soap_new_set_ns2__DirectDebitReply(soap*, ...) allocate, set all public members
/// - ns2__DirectDebitReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DirectDebitReply(soap*, ns2__DirectDebitReply*) deserialize from a stream
/// - int soap_write_ns2__DirectDebitReply(soap*, ns2__DirectDebitReply*) serialize to a stream
/// - ns2__DirectDebitReply* ns2__DirectDebitReply::soap_dup(soap*) returns deep copy of ns2__DirectDebitReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DirectDebitReply::soap_del() deep deletes ns2__DirectDebitReply data members, use only after ns2__DirectDebitReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DirectDebitReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "processorTransactionID" of XSD type xs:string.
    wchar_t*                             processorTransactionID         0;	///< Optional element.
/// Element "mandateAuthenticationDate" of XSD type xs:string.
    wchar_t*                             mandateAuthenticationDate      0;	///< Optional element.
/// Element "mandateID" of XSD type xs:string.
    wchar_t*                             mandateID                      0;	///< Optional element.
/// Element "iban" of XSD type xs:string.
    wchar_t*                             iban                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DirectDebitValidateReply is a complexType.
///
/// class ns2__DirectDebitValidateReply operations:
/// - ns2__DirectDebitValidateReply* soap_new_ns2__DirectDebitValidateReply(soap*) allocate
/// - ns2__DirectDebitValidateReply* soap_new_ns2__DirectDebitValidateReply(soap*, int num) allocate array
/// - ns2__DirectDebitValidateReply* soap_new_req_ns2__DirectDebitValidateReply(soap*, ...) allocate, set required members
/// - ns2__DirectDebitValidateReply* soap_new_set_ns2__DirectDebitValidateReply(soap*, ...) allocate, set all public members
/// - ns2__DirectDebitValidateReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DirectDebitValidateReply(soap*, ns2__DirectDebitValidateReply*) deserialize from a stream
/// - int soap_write_ns2__DirectDebitValidateReply(soap*, ns2__DirectDebitValidateReply*) serialize to a stream
/// - ns2__DirectDebitValidateReply* ns2__DirectDebitValidateReply::soap_dup(soap*) returns deep copy of ns2__DirectDebitValidateReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DirectDebitValidateReply::soap_del() deep deletes ns2__DirectDebitValidateReply data members, use only after ns2__DirectDebitValidateReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DirectDebitValidateReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "iban" of XSD type xs:string.
    wchar_t*                             iban                           0;	///< Optional element.
/// Element "bankSwiftCode" of XSD type xs:string.
    wchar_t*                             bankSwiftCode                  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DirectDebitRefundReply is a complexType.
///
/// class ns2__DirectDebitRefundReply operations:
/// - ns2__DirectDebitRefundReply* soap_new_ns2__DirectDebitRefundReply(soap*) allocate
/// - ns2__DirectDebitRefundReply* soap_new_ns2__DirectDebitRefundReply(soap*, int num) allocate array
/// - ns2__DirectDebitRefundReply* soap_new_req_ns2__DirectDebitRefundReply(soap*, ...) allocate, set required members
/// - ns2__DirectDebitRefundReply* soap_new_set_ns2__DirectDebitRefundReply(soap*, ...) allocate, set all public members
/// - ns2__DirectDebitRefundReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DirectDebitRefundReply(soap*, ns2__DirectDebitRefundReply*) deserialize from a stream
/// - int soap_write_ns2__DirectDebitRefundReply(soap*, ns2__DirectDebitRefundReply*) serialize to a stream
/// - ns2__DirectDebitRefundReply* ns2__DirectDebitRefundReply::soap_dup(soap*) returns deep copy of ns2__DirectDebitRefundReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DirectDebitRefundReply::soap_del() deep deletes ns2__DirectDebitRefundReply data members, use only after ns2__DirectDebitRefundReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DirectDebitRefundReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "processorTransactionID" of XSD type xs:string.
    wchar_t*                             processorTransactionID         0;	///< Optional element.
/// Element "iban" of XSD type xs:string.
    wchar_t*                             iban                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionCreateReply is a complexType.
///
/// class ns2__PaySubscriptionCreateReply operations:
/// - ns2__PaySubscriptionCreateReply* soap_new_ns2__PaySubscriptionCreateReply(soap*) allocate
/// - ns2__PaySubscriptionCreateReply* soap_new_ns2__PaySubscriptionCreateReply(soap*, int num) allocate array
/// - ns2__PaySubscriptionCreateReply* soap_new_req_ns2__PaySubscriptionCreateReply(soap*, ...) allocate, set required members
/// - ns2__PaySubscriptionCreateReply* soap_new_set_ns2__PaySubscriptionCreateReply(soap*, ...) allocate, set all public members
/// - ns2__PaySubscriptionCreateReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PaySubscriptionCreateReply(soap*, ns2__PaySubscriptionCreateReply*) deserialize from a stream
/// - int soap_write_ns2__PaySubscriptionCreateReply(soap*, ns2__PaySubscriptionCreateReply*) serialize to a stream
/// - ns2__PaySubscriptionCreateReply* ns2__PaySubscriptionCreateReply::soap_dup(soap*) returns deep copy of ns2__PaySubscriptionCreateReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PaySubscriptionCreateReply::soap_del() deep deletes ns2__PaySubscriptionCreateReply data members, use only after ns2__PaySubscriptionCreateReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PaySubscriptionCreateReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "subscriptionID" of XSD type xs:string.
    wchar_t*                             subscriptionID                 1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionUpdateReply is a complexType.
///
/// class ns2__PaySubscriptionUpdateReply operations:
/// - ns2__PaySubscriptionUpdateReply* soap_new_ns2__PaySubscriptionUpdateReply(soap*) allocate
/// - ns2__PaySubscriptionUpdateReply* soap_new_ns2__PaySubscriptionUpdateReply(soap*, int num) allocate array
/// - ns2__PaySubscriptionUpdateReply* soap_new_req_ns2__PaySubscriptionUpdateReply(soap*, ...) allocate, set required members
/// - ns2__PaySubscriptionUpdateReply* soap_new_set_ns2__PaySubscriptionUpdateReply(soap*, ...) allocate, set all public members
/// - ns2__PaySubscriptionUpdateReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PaySubscriptionUpdateReply(soap*, ns2__PaySubscriptionUpdateReply*) deserialize from a stream
/// - int soap_write_ns2__PaySubscriptionUpdateReply(soap*, ns2__PaySubscriptionUpdateReply*) serialize to a stream
/// - ns2__PaySubscriptionUpdateReply* ns2__PaySubscriptionUpdateReply::soap_dup(soap*) returns deep copy of ns2__PaySubscriptionUpdateReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PaySubscriptionUpdateReply::soap_del() deep deletes ns2__PaySubscriptionUpdateReply data members, use only after ns2__PaySubscriptionUpdateReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PaySubscriptionUpdateReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "subscriptionID" of XSD type xs:string.
    wchar_t*                             subscriptionID                 1;	///< Required element.
/// Element "subscriptionIDNew" of XSD type xs:string.
    wchar_t*                             subscriptionIDNew              0;	///< Optional element.
/// Element "ownerMerchantID" of XSD type xs:string.
    wchar_t*                             ownerMerchantID                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionEventUpdateReply is a complexType.
///
/// class ns2__PaySubscriptionEventUpdateReply operations:
/// - ns2__PaySubscriptionEventUpdateReply* soap_new_ns2__PaySubscriptionEventUpdateReply(soap*) allocate
/// - ns2__PaySubscriptionEventUpdateReply* soap_new_ns2__PaySubscriptionEventUpdateReply(soap*, int num) allocate array
/// - ns2__PaySubscriptionEventUpdateReply* soap_new_req_ns2__PaySubscriptionEventUpdateReply(soap*, ...) allocate, set required members
/// - ns2__PaySubscriptionEventUpdateReply* soap_new_set_ns2__PaySubscriptionEventUpdateReply(soap*, ...) allocate, set all public members
/// - ns2__PaySubscriptionEventUpdateReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PaySubscriptionEventUpdateReply(soap*, ns2__PaySubscriptionEventUpdateReply*) deserialize from a stream
/// - int soap_write_ns2__PaySubscriptionEventUpdateReply(soap*, ns2__PaySubscriptionEventUpdateReply*) serialize to a stream
/// - ns2__PaySubscriptionEventUpdateReply* ns2__PaySubscriptionEventUpdateReply::soap_dup(soap*) returns deep copy of ns2__PaySubscriptionEventUpdateReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PaySubscriptionEventUpdateReply::soap_del() deep deletes ns2__PaySubscriptionEventUpdateReply data members, use only after ns2__PaySubscriptionEventUpdateReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PaySubscriptionEventUpdateReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "ownerMerchantID" of XSD type xs:string.
    wchar_t*                             ownerMerchantID                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionRetrieveReply is a complexType.
///
/// class ns2__PaySubscriptionRetrieveReply operations:
/// - ns2__PaySubscriptionRetrieveReply* soap_new_ns2__PaySubscriptionRetrieveReply(soap*) allocate
/// - ns2__PaySubscriptionRetrieveReply* soap_new_ns2__PaySubscriptionRetrieveReply(soap*, int num) allocate array
/// - ns2__PaySubscriptionRetrieveReply* soap_new_req_ns2__PaySubscriptionRetrieveReply(soap*, ...) allocate, set required members
/// - ns2__PaySubscriptionRetrieveReply* soap_new_set_ns2__PaySubscriptionRetrieveReply(soap*, ...) allocate, set all public members
/// - ns2__PaySubscriptionRetrieveReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PaySubscriptionRetrieveReply(soap*, ns2__PaySubscriptionRetrieveReply*) deserialize from a stream
/// - int soap_write_ns2__PaySubscriptionRetrieveReply(soap*, ns2__PaySubscriptionRetrieveReply*) serialize to a stream
/// - ns2__PaySubscriptionRetrieveReply* ns2__PaySubscriptionRetrieveReply::soap_dup(soap*) returns deep copy of ns2__PaySubscriptionRetrieveReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PaySubscriptionRetrieveReply::soap_del() deep deletes ns2__PaySubscriptionRetrieveReply data members, use only after ns2__PaySubscriptionRetrieveReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PaySubscriptionRetrieveReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "approvalRequired" of XSD type xs:string.
    wchar_t*                             approvalRequired               0;	///< Optional element.
/// Element "automaticRenew" of XSD type xs:string.
    wchar_t*                             automaticRenew                 0;	///< Optional element.
/// Element "cardAccountNumber" of XSD type xs:string.
    wchar_t*                             cardAccountNumber              0;	///< Optional element.
/// Element "cardExpirationMonth" of XSD type xs:string.
    wchar_t*                             cardExpirationMonth            0;	///< Optional element.
/// Element "cardExpirationYear" of XSD type xs:string.
    wchar_t*                             cardExpirationYear             0;	///< Optional element.
/// Element "cardIssueNumber" of XSD type xs:string.
    wchar_t*                             cardIssueNumber                0;	///< Optional element.
/// Element "cardStartMonth" of XSD type xs:string.
    wchar_t*                             cardStartMonth                 0;	///< Optional element.
/// Element "cardStartYear" of XSD type xs:string.
    wchar_t*                             cardStartYear                  0;	///< Optional element.
/// Element "cardType" of XSD type xs:string.
    wchar_t*                             cardType                       0;	///< Optional element.
/// Element "checkAccountNumber" of XSD type xs:string.
    wchar_t*                             checkAccountNumber             0;	///< Optional element.
/// Element "checkAccountType" of XSD type xs:string.
    wchar_t*                             checkAccountType               0;	///< Optional element.
/// Element "checkBankTransitNumber" of XSD type xs:string.
    wchar_t*                             checkBankTransitNumber         0;	///< Optional element.
/// Element "checkSecCode" of XSD type xs:string.
    wchar_t*                             checkSecCode                   0;	///< Optional element.
/// Element "checkAuthenticateID" of XSD type xs:string.
    wchar_t*                             checkAuthenticateID            0;	///< Optional element.
/// Element "city" of XSD type xs:string.
    wchar_t*                             city                           0;	///< Optional element.
/// Element "comments" of XSD type xs:string.
    wchar_t*                             comments                       0;	///< Optional element.
/// Element "companyName" of XSD type xs:string.
    wchar_t*                             companyName                    0;	///< Optional element.
/// Element "country" of XSD type xs:string.
    wchar_t*                             country                        0;	///< Optional element.
/// Element "currency" of XSD type xs:string.
    wchar_t*                             currency                       0;	///< Optional element.
/// Element "customerAccountID" of XSD type xs:string.
    wchar_t*                             customerAccountID              0;	///< Optional element.
/// Element "email" of XSD type xs:string.
    wchar_t*                             email                          0;	///< Optional element.
/// Element "endDate" of XSD type xs:string.
    wchar_t*                             endDate                        0;	///< Optional element.
/// Element "firstName" of XSD type xs:string.
    wchar_t*                             firstName                      0;	///< Optional element.
/// Element "frequency" of XSD type xs:string.
    wchar_t*                             frequency                      0;	///< Optional element.
/// Element "lastName" of XSD type xs:string.
    wchar_t*                             lastName                       0;	///< Optional element.
/// Element "merchantReferenceCode" of XSD type xs:string.
    wchar_t*                             merchantReferenceCode          0;	///< Optional element.
/// Element "paymentMethod" of XSD type xs:string.
    wchar_t*                             paymentMethod                  0;	///< Optional element.
/// Element "paymentsRemaining" of XSD type xs:string.
    wchar_t*                             paymentsRemaining              0;	///< Optional element.
/// Element "phoneNumber" of XSD type xs:string.
    wchar_t*                             phoneNumber                    0;	///< Optional element.
/// Element "postalCode" of XSD type xs:string.
    wchar_t*                             postalCode                     0;	///< Optional element.
/// Element "recurringAmount" of XSD type xs:string.
    wchar_t*                             recurringAmount                0;	///< Optional element.
/// Element "setupAmount" of XSD type xs:string.
    wchar_t*                             setupAmount                    0;	///< Optional element.
/// Element "startDate" of XSD type xs:string.
    wchar_t*                             startDate                      0;	///< Optional element.
/// Element "state" of XSD type xs:string.
    wchar_t*                             state                          0;	///< Optional element.
/// Element "status" of XSD type xs:string.
    wchar_t*                             status                         0;	///< Optional element.
/// Element "street1" of XSD type xs:string.
    wchar_t*                             street1                        0;	///< Optional element.
/// Element "street2" of XSD type xs:string.
    wchar_t*                             street2                        0;	///< Optional element.
/// Element "subscriptionID" of XSD type xs:string.
    wchar_t*                             subscriptionID                 0;	///< Optional element.
/// Element "subscriptionIDNew" of XSD type xs:string.
    wchar_t*                             subscriptionIDNew              1;	///< Required element.
/// Element "title" of XSD type xs:string.
    wchar_t*                             title                          0;	///< Optional element.
/// Element "totalPayments" of XSD type xs:string.
    wchar_t*                             totalPayments                  0;	///< Optional element.
/// Element "shipToFirstName" of XSD type xs:string.
    wchar_t*                             shipToFirstName                0;	///< Optional element.
/// Element "shipToLastName" of XSD type xs:string.
    wchar_t*                             shipToLastName                 0;	///< Optional element.
/// Element "shipToStreet1" of XSD type xs:string.
    wchar_t*                             shipToStreet1                  0;	///< Optional element.
/// Element "shipToStreet2" of XSD type xs:string.
    wchar_t*                             shipToStreet2                  0;	///< Optional element.
/// Element "shipToCity" of XSD type xs:string.
    wchar_t*                             shipToCity                     0;	///< Optional element.
/// Element "shipToState" of XSD type xs:string.
    wchar_t*                             shipToState                    0;	///< Optional element.
/// Element "shipToPostalCode" of XSD type xs:string.
    wchar_t*                             shipToPostalCode               0;	///< Optional element.
/// Element "shipToCompany" of XSD type xs:string.
    wchar_t*                             shipToCompany                  0;	///< Optional element.
/// Element "shipToCountry" of XSD type xs:string.
    wchar_t*                             shipToCountry                  0;	///< Optional element.
/// Element "billPayment" of XSD type xs:string.
    wchar_t*                             billPayment                    0;	///< Optional element.
/// Element "merchantDefinedDataField1" of XSD type xs:string.
    wchar_t*                             merchantDefinedDataField1      0;	///< Optional element.
/// Element "merchantDefinedDataField2" of XSD type xs:string.
    wchar_t*                             merchantDefinedDataField2      0;	///< Optional element.
/// Element "merchantDefinedDataField3" of XSD type xs:string.
    wchar_t*                             merchantDefinedDataField3      0;	///< Optional element.
/// Element "merchantDefinedDataField4" of XSD type xs:string.
    wchar_t*                             merchantDefinedDataField4      0;	///< Optional element.
/// Element "merchantSecureDataField1" of XSD type xs:string.
    wchar_t*                             merchantSecureDataField1       0;	///< Optional element.
/// Element "merchantSecureDataField2" of XSD type xs:string.
    wchar_t*                             merchantSecureDataField2       0;	///< Optional element.
/// Element "merchantSecureDataField3" of XSD type xs:string.
    wchar_t*                             merchantSecureDataField3       0;	///< Optional element.
/// Element "merchantSecureDataField4" of XSD type xs:string.
    wchar_t*                             merchantSecureDataField4       0;	///< Optional element.
/// Element "ownerMerchantID" of XSD type xs:string.
    wchar_t*                             ownerMerchantID                0;	///< Optional element.
/// Element "companyTaxID" of XSD type xs:string.
    wchar_t*                             companyTaxID                   0;	///< Optional element.
/// Element "driversLicenseNumber" of XSD type xs:string.
    wchar_t*                             driversLicenseNumber           0;	///< Optional element.
/// Element "driversLicenseState" of XSD type xs:string.
    wchar_t*                             driversLicenseState            0;	///< Optional element.
/// Element "dateOfBirth" of XSD type xs:string.
    wchar_t*                             dateOfBirth                    0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionDeleteReply is a complexType.
///
/// class ns2__PaySubscriptionDeleteReply operations:
/// - ns2__PaySubscriptionDeleteReply* soap_new_ns2__PaySubscriptionDeleteReply(soap*) allocate
/// - ns2__PaySubscriptionDeleteReply* soap_new_ns2__PaySubscriptionDeleteReply(soap*, int num) allocate array
/// - ns2__PaySubscriptionDeleteReply* soap_new_req_ns2__PaySubscriptionDeleteReply(soap*, ...) allocate, set required members
/// - ns2__PaySubscriptionDeleteReply* soap_new_set_ns2__PaySubscriptionDeleteReply(soap*, ...) allocate, set all public members
/// - ns2__PaySubscriptionDeleteReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PaySubscriptionDeleteReply(soap*, ns2__PaySubscriptionDeleteReply*) deserialize from a stream
/// - int soap_write_ns2__PaySubscriptionDeleteReply(soap*, ns2__PaySubscriptionDeleteReply*) serialize to a stream
/// - ns2__PaySubscriptionDeleteReply* ns2__PaySubscriptionDeleteReply::soap_dup(soap*) returns deep copy of ns2__PaySubscriptionDeleteReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PaySubscriptionDeleteReply::soap_del() deep deletes ns2__PaySubscriptionDeleteReply data members, use only after ns2__PaySubscriptionDeleteReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PaySubscriptionDeleteReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "subscriptionID" of XSD type xs:string.
    wchar_t*                             subscriptionID                 1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalPaymentReply is a complexType.
///
/// class ns2__PayPalPaymentReply operations:
/// - ns2__PayPalPaymentReply* soap_new_ns2__PayPalPaymentReply(soap*) allocate
/// - ns2__PayPalPaymentReply* soap_new_ns2__PayPalPaymentReply(soap*, int num) allocate array
/// - ns2__PayPalPaymentReply* soap_new_req_ns2__PayPalPaymentReply(soap*, ...) allocate, set required members
/// - ns2__PayPalPaymentReply* soap_new_set_ns2__PayPalPaymentReply(soap*, ...) allocate, set all public members
/// - ns2__PayPalPaymentReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalPaymentReply(soap*, ns2__PayPalPaymentReply*) deserialize from a stream
/// - int soap_write_ns2__PayPalPaymentReply(soap*, ns2__PayPalPaymentReply*) serialize to a stream
/// - ns2__PayPalPaymentReply* ns2__PayPalPaymentReply::soap_dup(soap*) returns deep copy of ns2__PayPalPaymentReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalPaymentReply::soap_del() deep deletes ns2__PayPalPaymentReply data members, use only after ns2__PayPalPaymentReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalPaymentReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "secureData" of XSD type xs:string.
    wchar_t*                             secureData                     0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalCreditReply is a complexType.
///
/// class ns2__PayPalCreditReply operations:
/// - ns2__PayPalCreditReply* soap_new_ns2__PayPalCreditReply(soap*) allocate
/// - ns2__PayPalCreditReply* soap_new_ns2__PayPalCreditReply(soap*, int num) allocate array
/// - ns2__PayPalCreditReply* soap_new_req_ns2__PayPalCreditReply(soap*, ...) allocate, set required members
/// - ns2__PayPalCreditReply* soap_new_set_ns2__PayPalCreditReply(soap*, ...) allocate, set all public members
/// - ns2__PayPalCreditReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalCreditReply(soap*, ns2__PayPalCreditReply*) deserialize from a stream
/// - int soap_write_ns2__PayPalCreditReply(soap*, ns2__PayPalCreditReply*) serialize to a stream
/// - ns2__PayPalCreditReply* ns2__PayPalCreditReply::soap_dup(soap*) returns deep copy of ns2__PayPalCreditReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalCreditReply::soap_del() deep deletes ns2__PayPalCreditReply data members, use only after ns2__PayPalCreditReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalCreditReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":VoidReply is a complexType.
///
/// class ns2__VoidReply operations:
/// - ns2__VoidReply* soap_new_ns2__VoidReply(soap*) allocate
/// - ns2__VoidReply* soap_new_ns2__VoidReply(soap*, int num) allocate array
/// - ns2__VoidReply* soap_new_req_ns2__VoidReply(soap*, ...) allocate, set required members
/// - ns2__VoidReply* soap_new_set_ns2__VoidReply(soap*, ...) allocate, set all public members
/// - ns2__VoidReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__VoidReply(soap*, ns2__VoidReply*) deserialize from a stream
/// - int soap_write_ns2__VoidReply(soap*, ns2__VoidReply*) serialize to a stream
/// - ns2__VoidReply* ns2__VoidReply::soap_dup(soap*) returns deep copy of ns2__VoidReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VoidReply::soap_del() deep deletes ns2__VoidReply data members, use only after ns2__VoidReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VoidReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "currency" of XSD type xs:string.
    wchar_t*                             currency                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PinlessDebitReply is a complexType.
///
/// class ns2__PinlessDebitReply operations:
/// - ns2__PinlessDebitReply* soap_new_ns2__PinlessDebitReply(soap*) allocate
/// - ns2__PinlessDebitReply* soap_new_ns2__PinlessDebitReply(soap*, int num) allocate array
/// - ns2__PinlessDebitReply* soap_new_req_ns2__PinlessDebitReply(soap*, ...) allocate, set required members
/// - ns2__PinlessDebitReply* soap_new_set_ns2__PinlessDebitReply(soap*, ...) allocate, set all public members
/// - ns2__PinlessDebitReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PinlessDebitReply(soap*, ns2__PinlessDebitReply*) deserialize from a stream
/// - int soap_write_ns2__PinlessDebitReply(soap*, ns2__PinlessDebitReply*) serialize to a stream
/// - ns2__PinlessDebitReply* ns2__PinlessDebitReply::soap_dup(soap*) returns deep copy of ns2__PinlessDebitReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PinlessDebitReply::soap_del() deep deletes ns2__PinlessDebitReply data members, use only after ns2__PinlessDebitReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PinlessDebitReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "authorizationCode" of XSD type xs:string.
    wchar_t*                             authorizationCode              0;	///< Optional element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "receiptNumber" of XSD type xs:string.
    wchar_t*                             receiptNumber                  0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "ownerMerchantID" of XSD type xs:string.
    wchar_t*                             ownerMerchantID                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PinlessDebitValidateReply is a complexType.
///
/// class ns2__PinlessDebitValidateReply operations:
/// - ns2__PinlessDebitValidateReply* soap_new_ns2__PinlessDebitValidateReply(soap*) allocate
/// - ns2__PinlessDebitValidateReply* soap_new_ns2__PinlessDebitValidateReply(soap*, int num) allocate array
/// - ns2__PinlessDebitValidateReply* soap_new_req_ns2__PinlessDebitValidateReply(soap*, ...) allocate, set required members
/// - ns2__PinlessDebitValidateReply* soap_new_set_ns2__PinlessDebitValidateReply(soap*, ...) allocate, set all public members
/// - ns2__PinlessDebitValidateReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PinlessDebitValidateReply(soap*, ns2__PinlessDebitValidateReply*) deserialize from a stream
/// - int soap_write_ns2__PinlessDebitValidateReply(soap*, ns2__PinlessDebitValidateReply*) serialize to a stream
/// - ns2__PinlessDebitValidateReply* ns2__PinlessDebitValidateReply::soap_dup(soap*) returns deep copy of ns2__PinlessDebitValidateReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PinlessDebitValidateReply::soap_del() deep deletes ns2__PinlessDebitValidateReply data members, use only after ns2__PinlessDebitValidateReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PinlessDebitValidateReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "status" of XSD type xs:string.
    wchar_t*                             status                         0;	///< Optional element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PinlessDebitReversalReply is a complexType.
///
/// class ns2__PinlessDebitReversalReply operations:
/// - ns2__PinlessDebitReversalReply* soap_new_ns2__PinlessDebitReversalReply(soap*) allocate
/// - ns2__PinlessDebitReversalReply* soap_new_ns2__PinlessDebitReversalReply(soap*, int num) allocate array
/// - ns2__PinlessDebitReversalReply* soap_new_req_ns2__PinlessDebitReversalReply(soap*, ...) allocate, set required members
/// - ns2__PinlessDebitReversalReply* soap_new_set_ns2__PinlessDebitReversalReply(soap*, ...) allocate, set all public members
/// - ns2__PinlessDebitReversalReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PinlessDebitReversalReply(soap*, ns2__PinlessDebitReversalReply*) deserialize from a stream
/// - int soap_write_ns2__PinlessDebitReversalReply(soap*, ns2__PinlessDebitReversalReply*) serialize to a stream
/// - ns2__PinlessDebitReversalReply* ns2__PinlessDebitReversalReply::soap_dup(soap*) returns deep copy of ns2__PinlessDebitReversalReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PinlessDebitReversalReply::soap_del() deep deletes ns2__PinlessDebitReversalReply data members, use only after ns2__PinlessDebitReversalReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PinlessDebitReversalReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalButtonCreateReply is a complexType.
///
/// class ns2__PayPalButtonCreateReply operations:
/// - ns2__PayPalButtonCreateReply* soap_new_ns2__PayPalButtonCreateReply(soap*) allocate
/// - ns2__PayPalButtonCreateReply* soap_new_ns2__PayPalButtonCreateReply(soap*, int num) allocate array
/// - ns2__PayPalButtonCreateReply* soap_new_req_ns2__PayPalButtonCreateReply(soap*, ...) allocate, set required members
/// - ns2__PayPalButtonCreateReply* soap_new_set_ns2__PayPalButtonCreateReply(soap*, ...) allocate, set all public members
/// - ns2__PayPalButtonCreateReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalButtonCreateReply(soap*, ns2__PayPalButtonCreateReply*) deserialize from a stream
/// - int soap_write_ns2__PayPalButtonCreateReply(soap*, ns2__PayPalButtonCreateReply*) serialize to a stream
/// - ns2__PayPalButtonCreateReply* ns2__PayPalButtonCreateReply::soap_dup(soap*) returns deep copy of ns2__PayPalButtonCreateReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalButtonCreateReply::soap_del() deep deletes ns2__PayPalButtonCreateReply data members, use only after ns2__PayPalButtonCreateReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalButtonCreateReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "encryptedFormData" of XSD type xs:string.
    wchar_t*                             encryptedFormData              0;	///< Optional element.
/// Element "unencryptedFormData" of XSD type xs:string.
    wchar_t*                             unencryptedFormData            0;	///< Optional element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "buttonType" of XSD type xs:string.
    wchar_t*                             buttonType                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalPreapprovedPaymentReply is a complexType.
///
/// class ns2__PayPalPreapprovedPaymentReply operations:
/// - ns2__PayPalPreapprovedPaymentReply* soap_new_ns2__PayPalPreapprovedPaymentReply(soap*) allocate
/// - ns2__PayPalPreapprovedPaymentReply* soap_new_ns2__PayPalPreapprovedPaymentReply(soap*, int num) allocate array
/// - ns2__PayPalPreapprovedPaymentReply* soap_new_req_ns2__PayPalPreapprovedPaymentReply(soap*, ...) allocate, set required members
/// - ns2__PayPalPreapprovedPaymentReply* soap_new_set_ns2__PayPalPreapprovedPaymentReply(soap*, ...) allocate, set all public members
/// - ns2__PayPalPreapprovedPaymentReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalPreapprovedPaymentReply(soap*, ns2__PayPalPreapprovedPaymentReply*) deserialize from a stream
/// - int soap_write_ns2__PayPalPreapprovedPaymentReply(soap*, ns2__PayPalPreapprovedPaymentReply*) serialize to a stream
/// - ns2__PayPalPreapprovedPaymentReply* ns2__PayPalPreapprovedPaymentReply::soap_dup(soap*) returns deep copy of ns2__PayPalPreapprovedPaymentReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalPreapprovedPaymentReply::soap_del() deep deletes ns2__PayPalPreapprovedPaymentReply data members, use only after ns2__PayPalPreapprovedPaymentReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalPreapprovedPaymentReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "payerStatus" of XSD type xs:string.
    wchar_t*                             payerStatus                    0;	///< Optional element.
/// Element "payerName" of XSD type xs:string.
    wchar_t*                             payerName                      0;	///< Optional element.
/// Element "transactionType" of XSD type xs:string.
    wchar_t*                             transactionType                0;	///< Optional element.
/// Element "feeAmount" of XSD type xs:string.
    wchar_t*                             feeAmount                      0;	///< Optional element.
/// Element "payerCountry" of XSD type xs:string.
    wchar_t*                             payerCountry                   0;	///< Optional element.
/// Element "pendingReason" of XSD type xs:string.
    wchar_t*                             pendingReason                  0;	///< Optional element.
/// Element "paymentStatus" of XSD type xs:string.
    wchar_t*                             paymentStatus                  0;	///< Optional element.
/// Element "mpStatus" of XSD type xs:string.
    wchar_t*                             mpStatus                       0;	///< Optional element.
/// Element "payer" of XSD type xs:string.
    wchar_t*                             payer                          0;	///< Optional element.
/// Element "payerID" of XSD type xs:string.
    wchar_t*                             payerID                        0;	///< Optional element.
/// Element "payerBusiness" of XSD type xs:string.
    wchar_t*                             payerBusiness                  0;	///< Optional element.
/// Element "transactionID" of XSD type xs:string.
    wchar_t*                             transactionID                  0;	///< Optional element.
/// Element "desc" of XSD type xs:string.
    wchar_t*                             desc                           0;	///< Optional element.
/// Element "mpMax" of XSD type xs:string.
    wchar_t*                             mpMax                          0;	///< Optional element.
/// Element "paymentType" of XSD type xs:string.
    wchar_t*                             paymentType                    0;	///< Optional element.
/// Element "paymentDate" of XSD type xs:string.
    wchar_t*                             paymentDate                    0;	///< Optional element.
/// Element "paymentGrossAmount" of XSD type xs:string.
    wchar_t*                             paymentGrossAmount             0;	///< Optional element.
/// Element "settleAmount" of XSD type xs:string.
    wchar_t*                             settleAmount                   0;	///< Optional element.
/// Element "taxAmount" of XSD type xs:string.
    wchar_t*                             taxAmount                      0;	///< Optional element.
/// Element "exchangeRate" of XSD type xs:string.
    wchar_t*                             exchangeRate                   0;	///< Optional element.
/// Element "paymentSourceID" of XSD type xs:string.
    wchar_t*                             paymentSourceID                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalPreapprovedUpdateReply is a complexType.
///
/// class ns2__PayPalPreapprovedUpdateReply operations:
/// - ns2__PayPalPreapprovedUpdateReply* soap_new_ns2__PayPalPreapprovedUpdateReply(soap*) allocate
/// - ns2__PayPalPreapprovedUpdateReply* soap_new_ns2__PayPalPreapprovedUpdateReply(soap*, int num) allocate array
/// - ns2__PayPalPreapprovedUpdateReply* soap_new_req_ns2__PayPalPreapprovedUpdateReply(soap*, ...) allocate, set required members
/// - ns2__PayPalPreapprovedUpdateReply* soap_new_set_ns2__PayPalPreapprovedUpdateReply(soap*, ...) allocate, set all public members
/// - ns2__PayPalPreapprovedUpdateReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalPreapprovedUpdateReply(soap*, ns2__PayPalPreapprovedUpdateReply*) deserialize from a stream
/// - int soap_write_ns2__PayPalPreapprovedUpdateReply(soap*, ns2__PayPalPreapprovedUpdateReply*) serialize to a stream
/// - ns2__PayPalPreapprovedUpdateReply* ns2__PayPalPreapprovedUpdateReply::soap_dup(soap*) returns deep copy of ns2__PayPalPreapprovedUpdateReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalPreapprovedUpdateReply::soap_del() deep deletes ns2__PayPalPreapprovedUpdateReply data members, use only after ns2__PayPalPreapprovedUpdateReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalPreapprovedUpdateReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "payerStatus" of XSD type xs:string.
    wchar_t*                             payerStatus                    0;	///< Optional element.
/// Element "payerName" of XSD type xs:string.
    wchar_t*                             payerName                      0;	///< Optional element.
/// Element "payerCountry" of XSD type xs:string.
    wchar_t*                             payerCountry                   0;	///< Optional element.
/// Element "mpStatus" of XSD type xs:string.
    wchar_t*                             mpStatus                       0;	///< Optional element.
/// Element "payer" of XSD type xs:string.
    wchar_t*                             payer                          0;	///< Optional element.
/// Element "payerID" of XSD type xs:string.
    wchar_t*                             payerID                        0;	///< Optional element.
/// Element "payerBusiness" of XSD type xs:string.
    wchar_t*                             payerBusiness                  0;	///< Optional element.
/// Element "desc" of XSD type xs:string.
    wchar_t*                             desc                           0;	///< Optional element.
/// Element "mpMax" of XSD type xs:string.
    wchar_t*                             mpMax                          0;	///< Optional element.
/// Element "paymentSourceID" of XSD type xs:string.
    wchar_t*                             paymentSourceID                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalEcSetReply is a complexType.
///
/// class ns2__PayPalEcSetReply operations:
/// - ns2__PayPalEcSetReply* soap_new_ns2__PayPalEcSetReply(soap*) allocate
/// - ns2__PayPalEcSetReply* soap_new_ns2__PayPalEcSetReply(soap*, int num) allocate array
/// - ns2__PayPalEcSetReply* soap_new_req_ns2__PayPalEcSetReply(soap*, ...) allocate, set required members
/// - ns2__PayPalEcSetReply* soap_new_set_ns2__PayPalEcSetReply(soap*, ...) allocate, set all public members
/// - ns2__PayPalEcSetReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalEcSetReply(soap*, ns2__PayPalEcSetReply*) deserialize from a stream
/// - int soap_write_ns2__PayPalEcSetReply(soap*, ns2__PayPalEcSetReply*) serialize to a stream
/// - ns2__PayPalEcSetReply* ns2__PayPalEcSetReply::soap_dup(soap*) returns deep copy of ns2__PayPalEcSetReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalEcSetReply::soap_del() deep deletes ns2__PayPalEcSetReply data members, use only after ns2__PayPalEcSetReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalEcSetReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "paypalToken" of XSD type xs:string.
    wchar_t*                             paypalToken                    0;	///< Optional element.
/// Element "amount" of XSD type xs:string.
    wchar_t*                             amount                         0;	///< Optional element.
/// Element "currency" of XSD type xs:string.
    wchar_t*                             currency                       0;	///< Optional element.
/// Element "correlationID" of XSD type xs:string.
    wchar_t*                             correlationID                  0;	///< Optional element.
/// Element "errorCode" of XSD type xs:string.
    wchar_t*                             errorCode                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalEcGetDetailsReply is a complexType.
///
/// class ns2__PayPalEcGetDetailsReply operations:
/// - ns2__PayPalEcGetDetailsReply* soap_new_ns2__PayPalEcGetDetailsReply(soap*) allocate
/// - ns2__PayPalEcGetDetailsReply* soap_new_ns2__PayPalEcGetDetailsReply(soap*, int num) allocate array
/// - ns2__PayPalEcGetDetailsReply* soap_new_req_ns2__PayPalEcGetDetailsReply(soap*, ...) allocate, set required members
/// - ns2__PayPalEcGetDetailsReply* soap_new_set_ns2__PayPalEcGetDetailsReply(soap*, ...) allocate, set all public members
/// - ns2__PayPalEcGetDetailsReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalEcGetDetailsReply(soap*, ns2__PayPalEcGetDetailsReply*) deserialize from a stream
/// - int soap_write_ns2__PayPalEcGetDetailsReply(soap*, ns2__PayPalEcGetDetailsReply*) serialize to a stream
/// - ns2__PayPalEcGetDetailsReply* ns2__PayPalEcGetDetailsReply::soap_dup(soap*) returns deep copy of ns2__PayPalEcGetDetailsReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalEcGetDetailsReply::soap_del() deep deletes ns2__PayPalEcGetDetailsReply data members, use only after ns2__PayPalEcGetDetailsReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalEcGetDetailsReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "paypalToken" of XSD type xs:string.
    wchar_t*                             paypalToken                    0;	///< Optional element.
/// Element "payer" of XSD type xs:string.
    wchar_t*                             payer                          0;	///< Optional element.
/// Element "payerId" of XSD type xs:string.
    wchar_t*                             payerId                        0;	///< Optional element.
/// Element "payerStatus" of XSD type xs:string.
    wchar_t*                             payerStatus                    0;	///< Optional element.
/// Element "payerSalutation" of XSD type xs:string.
    wchar_t*                             payerSalutation                0;	///< Optional element.
/// Element "payerFirstname" of XSD type xs:string.
    wchar_t*                             payerFirstname                 0;	///< Optional element.
/// Element "payerMiddlename" of XSD type xs:string.
    wchar_t*                             payerMiddlename                0;	///< Optional element.
/// Element "payerLastname" of XSD type xs:string.
    wchar_t*                             payerLastname                  0;	///< Optional element.
/// Element "payerSuffix" of XSD type xs:string.
    wchar_t*                             payerSuffix                    0;	///< Optional element.
/// Element "payerCountry" of XSD type xs:string.
    wchar_t*                             payerCountry                   0;	///< Optional element.
/// Element "payerBusiness" of XSD type xs:string.
    wchar_t*                             payerBusiness                  0;	///< Optional element.
/// Element "shipToName" of XSD type xs:string.
    wchar_t*                             shipToName                     0;	///< Optional element.
/// Element "shipToAddress1" of XSD type xs:string.
    wchar_t*                             shipToAddress1                 0;	///< Optional element.
/// Element "shipToAddress2" of XSD type xs:string.
    wchar_t*                             shipToAddress2                 0;	///< Optional element.
/// Element "shipToCity" of XSD type xs:string.
    wchar_t*                             shipToCity                     0;	///< Optional element.
/// Element "shipToState" of XSD type xs:string.
    wchar_t*                             shipToState                    0;	///< Optional element.
/// Element "shipToCountry" of XSD type xs:string.
    wchar_t*                             shipToCountry                  0;	///< Optional element.
/// Element "shipToZip" of XSD type xs:string.
    wchar_t*                             shipToZip                      0;	///< Optional element.
/// Element "addressStatus" of XSD type xs:string.
    wchar_t*                             addressStatus                  0;	///< Optional element.
/// Element "payerPhone" of XSD type xs:string.
    wchar_t*                             payerPhone                     0;	///< Optional element.
/// Element "avsCode" of XSD type xs:string.
    wchar_t*                             avsCode                        0;	///< Optional element.
/// Element "street1" of XSD type xs:string.
    wchar_t*                             street1                        0;	///< Optional element.
/// Element "street2" of XSD type xs:string.
    wchar_t*                             street2                        0;	///< Optional element.
/// Element "city" of XSD type xs:string.
    wchar_t*                             city                           0;	///< Optional element.
/// Element "state" of XSD type xs:string.
    wchar_t*                             state                          0;	///< Optional element.
/// Element "postalCode" of XSD type xs:string.
    wchar_t*                             postalCode                     0;	///< Optional element.
/// Element "countryCode" of XSD type xs:string.
    wchar_t*                             countryCode                    0;	///< Optional element.
/// Element "countryName" of XSD type xs:string.
    wchar_t*                             countryName                    0;	///< Optional element.
/// Element "addressID" of XSD type xs:string.
    wchar_t*                             addressID                      0;	///< Optional element.
/// Element "errorCode" of XSD type xs:string.
    wchar_t*                             errorCode                      0;	///< Optional element.
/// Element "correlationID" of XSD type xs:string.
    wchar_t*                             correlationID                  0;	///< Optional element.
/// Element "paypalBillingAgreementAcceptedStatus" of XSD type xs:string.
    wchar_t*                             paypalBillingAgreementAcceptedStatus 0;	///< Optional element.
/// Element "paypalTaxAmount" of XSD type xs:string.
    wchar_t*                             paypalTaxAmount                0;	///< Optional element.
/// Vector of ns2__Item* of length 0..1000.
    std::vector<ns2__Item*             > item                           0:1000;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalEcDoPaymentReply is a complexType.
///
/// class ns2__PayPalEcDoPaymentReply operations:
/// - ns2__PayPalEcDoPaymentReply* soap_new_ns2__PayPalEcDoPaymentReply(soap*) allocate
/// - ns2__PayPalEcDoPaymentReply* soap_new_ns2__PayPalEcDoPaymentReply(soap*, int num) allocate array
/// - ns2__PayPalEcDoPaymentReply* soap_new_req_ns2__PayPalEcDoPaymentReply(soap*, ...) allocate, set required members
/// - ns2__PayPalEcDoPaymentReply* soap_new_set_ns2__PayPalEcDoPaymentReply(soap*, ...) allocate, set all public members
/// - ns2__PayPalEcDoPaymentReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalEcDoPaymentReply(soap*, ns2__PayPalEcDoPaymentReply*) deserialize from a stream
/// - int soap_write_ns2__PayPalEcDoPaymentReply(soap*, ns2__PayPalEcDoPaymentReply*) serialize to a stream
/// - ns2__PayPalEcDoPaymentReply* ns2__PayPalEcDoPaymentReply::soap_dup(soap*) returns deep copy of ns2__PayPalEcDoPaymentReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalEcDoPaymentReply::soap_del() deep deletes ns2__PayPalEcDoPaymentReply data members, use only after ns2__PayPalEcDoPaymentReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalEcDoPaymentReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "paypalToken" of XSD type xs:string.
    wchar_t*                             paypalToken                    0;	///< Optional element.
/// Element "transactionId" of XSD type xs:string.
    wchar_t*                             transactionId                  0;	///< Optional element.
/// Element "paypalTransactiontype" of XSD type xs:string.
    wchar_t*                             paypalTransactiontype          0;	///< Optional element.
/// Element "paymentType" of XSD type xs:string.
    wchar_t*                             paymentType                    0;	///< Optional element.
/// Element "paypalOrderTime" of XSD type xs:string.
    wchar_t*                             paypalOrderTime                0;	///< Optional element.
/// Element "paypalAmount" of XSD type xs:string.
    wchar_t*                             paypalAmount                   0;	///< Optional element.
/// Element "paypalFeeAmount" of XSD type xs:string.
    wchar_t*                             paypalFeeAmount                0;	///< Optional element.
/// Element "paypalTaxAmount" of XSD type xs:string.
    wchar_t*                             paypalTaxAmount                0;	///< Optional element.
/// Element "paypalExchangeRate" of XSD type xs:string.
    wchar_t*                             paypalExchangeRate             0;	///< Optional element.
/// Element "paypalPaymentStatus" of XSD type xs:string.
    wchar_t*                             paypalPaymentStatus            0;	///< Optional element.
/// Element "paypalPendingReason" of XSD type xs:string.
    wchar_t*                             paypalPendingReason            0;	///< Optional element.
/// Element "orderId" of XSD type xs:string.
    wchar_t*                             orderId                        0;	///< Optional element.
/// Element "paypalReasonCode" of XSD type xs:string.
    wchar_t*                             paypalReasonCode               0;	///< Optional element.
/// Element "amount" of XSD type xs:string.
    wchar_t*                             amount                         0;	///< Optional element.
/// Element "currency" of XSD type xs:string.
    wchar_t*                             currency                       0;	///< Optional element.
/// Element "correlationID" of XSD type xs:string.
    wchar_t*                             correlationID                  0;	///< Optional element.
/// Element "errorCode" of XSD type xs:string.
    wchar_t*                             errorCode                      0;	///< Optional element.
/// Element "paypalBillingAgreementId" of XSD type xs:string.
    wchar_t*                             paypalBillingAgreementId       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalDoCaptureReply is a complexType.
///
/// class ns2__PayPalDoCaptureReply operations:
/// - ns2__PayPalDoCaptureReply* soap_new_ns2__PayPalDoCaptureReply(soap*) allocate
/// - ns2__PayPalDoCaptureReply* soap_new_ns2__PayPalDoCaptureReply(soap*, int num) allocate array
/// - ns2__PayPalDoCaptureReply* soap_new_req_ns2__PayPalDoCaptureReply(soap*, ...) allocate, set required members
/// - ns2__PayPalDoCaptureReply* soap_new_set_ns2__PayPalDoCaptureReply(soap*, ...) allocate, set all public members
/// - ns2__PayPalDoCaptureReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalDoCaptureReply(soap*, ns2__PayPalDoCaptureReply*) deserialize from a stream
/// - int soap_write_ns2__PayPalDoCaptureReply(soap*, ns2__PayPalDoCaptureReply*) serialize to a stream
/// - ns2__PayPalDoCaptureReply* ns2__PayPalDoCaptureReply::soap_dup(soap*) returns deep copy of ns2__PayPalDoCaptureReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalDoCaptureReply::soap_del() deep deletes ns2__PayPalDoCaptureReply data members, use only after ns2__PayPalDoCaptureReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalDoCaptureReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "authorizationId" of XSD type xs:string.
    wchar_t*                             authorizationId                0;	///< Optional element.
/// Element "transactionId" of XSD type xs:string.
    wchar_t*                             transactionId                  0;	///< Optional element.
/// Element "parentTransactionId" of XSD type xs:string.
    wchar_t*                             parentTransactionId            0;	///< Optional element.
/// Element "paypalReceiptId" of XSD type xs:string.
    wchar_t*                             paypalReceiptId                0;	///< Optional element.
/// Element "paypalTransactiontype" of XSD type xs:string.
    wchar_t*                             paypalTransactiontype          0;	///< Optional element.
/// Element "paypalPaymentType" of XSD type xs:string.
    wchar_t*                             paypalPaymentType              0;	///< Optional element.
/// Element "paypalOrderTime" of XSD type xs:string.
    wchar_t*                             paypalOrderTime                0;	///< Optional element.
/// Element "paypalPaymentGrossAmount" of XSD type xs:string.
    wchar_t*                             paypalPaymentGrossAmount       0;	///< Optional element.
/// Element "paypalFeeAmount" of XSD type xs:string.
    wchar_t*                             paypalFeeAmount                0;	///< Optional element.
/// Element "paypalTaxAmount" of XSD type xs:string.
    wchar_t*                             paypalTaxAmount                0;	///< Optional element.
/// Element "paypalExchangeRate" of XSD type xs:string.
    wchar_t*                             paypalExchangeRate             0;	///< Optional element.
/// Element "paypalPaymentStatus" of XSD type xs:string.
    wchar_t*                             paypalPaymentStatus            0;	///< Optional element.
/// Element "amount" of XSD type xs:string.
    wchar_t*                             amount                         0;	///< Optional element.
/// Element "currency" of XSD type xs:string.
    wchar_t*                             currency                       0;	///< Optional element.
/// Element "correlationID" of XSD type xs:string.
    wchar_t*                             correlationID                  0;	///< Optional element.
/// Element "errorCode" of XSD type xs:string.
    wchar_t*                             errorCode                      0;	///< Optional element.
/// Element "paypalPendingReason" of XSD type xs:string.
    wchar_t*                             paypalPendingReason            0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalAuthReversalReply is a complexType.
///
/// class ns2__PayPalAuthReversalReply operations:
/// - ns2__PayPalAuthReversalReply* soap_new_ns2__PayPalAuthReversalReply(soap*) allocate
/// - ns2__PayPalAuthReversalReply* soap_new_ns2__PayPalAuthReversalReply(soap*, int num) allocate array
/// - ns2__PayPalAuthReversalReply* soap_new_req_ns2__PayPalAuthReversalReply(soap*, ...) allocate, set required members
/// - ns2__PayPalAuthReversalReply* soap_new_set_ns2__PayPalAuthReversalReply(soap*, ...) allocate, set all public members
/// - ns2__PayPalAuthReversalReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalAuthReversalReply(soap*, ns2__PayPalAuthReversalReply*) deserialize from a stream
/// - int soap_write_ns2__PayPalAuthReversalReply(soap*, ns2__PayPalAuthReversalReply*) serialize to a stream
/// - ns2__PayPalAuthReversalReply* ns2__PayPalAuthReversalReply::soap_dup(soap*) returns deep copy of ns2__PayPalAuthReversalReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalAuthReversalReply::soap_del() deep deletes ns2__PayPalAuthReversalReply data members, use only after ns2__PayPalAuthReversalReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalAuthReversalReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "authorizationId" of XSD type xs:string.
    wchar_t*                             authorizationId                0;	///< Optional element.
/// Element "correlationID" of XSD type xs:string.
    wchar_t*                             correlationID                  0;	///< Optional element.
/// Element "errorCode" of XSD type xs:string.
    wchar_t*                             errorCode                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalRefundReply is a complexType.
///
/// class ns2__PayPalRefundReply operations:
/// - ns2__PayPalRefundReply* soap_new_ns2__PayPalRefundReply(soap*) allocate
/// - ns2__PayPalRefundReply* soap_new_ns2__PayPalRefundReply(soap*, int num) allocate array
/// - ns2__PayPalRefundReply* soap_new_req_ns2__PayPalRefundReply(soap*, ...) allocate, set required members
/// - ns2__PayPalRefundReply* soap_new_set_ns2__PayPalRefundReply(soap*, ...) allocate, set all public members
/// - ns2__PayPalRefundReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalRefundReply(soap*, ns2__PayPalRefundReply*) deserialize from a stream
/// - int soap_write_ns2__PayPalRefundReply(soap*, ns2__PayPalRefundReply*) serialize to a stream
/// - ns2__PayPalRefundReply* ns2__PayPalRefundReply::soap_dup(soap*) returns deep copy of ns2__PayPalRefundReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalRefundReply::soap_del() deep deletes ns2__PayPalRefundReply data members, use only after ns2__PayPalRefundReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalRefundReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "transactionId" of XSD type xs:string.
    wchar_t*                             transactionId                  0;	///< Optional element.
/// Element "paypalNetRefundAmount" of XSD type xs:string.
    wchar_t*                             paypalNetRefundAmount          0;	///< Optional element.
/// Element "paypalFeeRefundAmount" of XSD type xs:string.
    wchar_t*                             paypalFeeRefundAmount          0;	///< Optional element.
/// Element "paypalGrossRefundAmount" of XSD type xs:string.
    wchar_t*                             paypalGrossRefundAmount        0;	///< Optional element.
/// Element "correlationID" of XSD type xs:string.
    wchar_t*                             correlationID                  0;	///< Optional element.
/// Element "errorCode" of XSD type xs:string.
    wchar_t*                             errorCode                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalEcOrderSetupReply is a complexType.
///
/// class ns2__PayPalEcOrderSetupReply operations:
/// - ns2__PayPalEcOrderSetupReply* soap_new_ns2__PayPalEcOrderSetupReply(soap*) allocate
/// - ns2__PayPalEcOrderSetupReply* soap_new_ns2__PayPalEcOrderSetupReply(soap*, int num) allocate array
/// - ns2__PayPalEcOrderSetupReply* soap_new_req_ns2__PayPalEcOrderSetupReply(soap*, ...) allocate, set required members
/// - ns2__PayPalEcOrderSetupReply* soap_new_set_ns2__PayPalEcOrderSetupReply(soap*, ...) allocate, set all public members
/// - ns2__PayPalEcOrderSetupReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalEcOrderSetupReply(soap*, ns2__PayPalEcOrderSetupReply*) deserialize from a stream
/// - int soap_write_ns2__PayPalEcOrderSetupReply(soap*, ns2__PayPalEcOrderSetupReply*) serialize to a stream
/// - ns2__PayPalEcOrderSetupReply* ns2__PayPalEcOrderSetupReply::soap_dup(soap*) returns deep copy of ns2__PayPalEcOrderSetupReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalEcOrderSetupReply::soap_del() deep deletes ns2__PayPalEcOrderSetupReply data members, use only after ns2__PayPalEcOrderSetupReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalEcOrderSetupReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "paypalToken" of XSD type xs:string.
    wchar_t*                             paypalToken                    0;	///< Optional element.
/// Element "transactionId" of XSD type xs:string.
    wchar_t*                             transactionId                  0;	///< Optional element.
/// Element "paypalTransactiontype" of XSD type xs:string.
    wchar_t*                             paypalTransactiontype          0;	///< Optional element.
/// Element "paymentType" of XSD type xs:string.
    wchar_t*                             paymentType                    0;	///< Optional element.
/// Element "paypalOrderTime" of XSD type xs:string.
    wchar_t*                             paypalOrderTime                0;	///< Optional element.
/// Element "paypalAmount" of XSD type xs:string.
    wchar_t*                             paypalAmount                   0;	///< Optional element.
/// Element "paypalFeeAmount" of XSD type xs:string.
    wchar_t*                             paypalFeeAmount                0;	///< Optional element.
/// Element "paypalTaxAmount" of XSD type xs:string.
    wchar_t*                             paypalTaxAmount                0;	///< Optional element.
/// Element "paypalExchangeRate" of XSD type xs:string.
    wchar_t*                             paypalExchangeRate             0;	///< Optional element.
/// Element "paypalPaymentStatus" of XSD type xs:string.
    wchar_t*                             paypalPaymentStatus            0;	///< Optional element.
/// Element "paypalPendingReason" of XSD type xs:string.
    wchar_t*                             paypalPendingReason            0;	///< Optional element.
/// Element "paypalReasonCode" of XSD type xs:string.
    wchar_t*                             paypalReasonCode               0;	///< Optional element.
/// Element "amount" of XSD type xs:string.
    wchar_t*                             amount                         0;	///< Optional element.
/// Element "currency" of XSD type xs:string.
    wchar_t*                             currency                       0;	///< Optional element.
/// Element "correlationID" of XSD type xs:string.
    wchar_t*                             correlationID                  0;	///< Optional element.
/// Element "errorCode" of XSD type xs:string.
    wchar_t*                             errorCode                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalAuthorizationReply is a complexType.
///
/// class ns2__PayPalAuthorizationReply operations:
/// - ns2__PayPalAuthorizationReply* soap_new_ns2__PayPalAuthorizationReply(soap*) allocate
/// - ns2__PayPalAuthorizationReply* soap_new_ns2__PayPalAuthorizationReply(soap*, int num) allocate array
/// - ns2__PayPalAuthorizationReply* soap_new_req_ns2__PayPalAuthorizationReply(soap*, ...) allocate, set required members
/// - ns2__PayPalAuthorizationReply* soap_new_set_ns2__PayPalAuthorizationReply(soap*, ...) allocate, set all public members
/// - ns2__PayPalAuthorizationReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalAuthorizationReply(soap*, ns2__PayPalAuthorizationReply*) deserialize from a stream
/// - int soap_write_ns2__PayPalAuthorizationReply(soap*, ns2__PayPalAuthorizationReply*) serialize to a stream
/// - ns2__PayPalAuthorizationReply* ns2__PayPalAuthorizationReply::soap_dup(soap*) returns deep copy of ns2__PayPalAuthorizationReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalAuthorizationReply::soap_del() deep deletes ns2__PayPalAuthorizationReply data members, use only after ns2__PayPalAuthorizationReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalAuthorizationReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "transactionId" of XSD type xs:string.
    wchar_t*                             transactionId                  0;	///< Optional element.
/// Element "paypalAmount" of XSD type xs:string.
    wchar_t*                             paypalAmount                   0;	///< Optional element.
/// Element "amount" of XSD type xs:string.
    wchar_t*                             amount                         0;	///< Optional element.
/// Element "currency" of XSD type xs:string.
    wchar_t*                             currency                       0;	///< Optional element.
/// Element "correlationID" of XSD type xs:string.
    wchar_t*                             correlationID                  0;	///< Optional element.
/// Element "errorCode" of XSD type xs:string.
    wchar_t*                             errorCode                      0;	///< Optional element.
/// Element "protectionEligibility" of XSD type xs:string.
    wchar_t*                             protectionEligibility          0;	///< Optional element.
/// Element "protectionEligibilityType" of XSD type xs:string.
    wchar_t*                             protectionEligibilityType      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalUpdateAgreementReply is a complexType.
///
/// class ns2__PayPalUpdateAgreementReply operations:
/// - ns2__PayPalUpdateAgreementReply* soap_new_ns2__PayPalUpdateAgreementReply(soap*) allocate
/// - ns2__PayPalUpdateAgreementReply* soap_new_ns2__PayPalUpdateAgreementReply(soap*, int num) allocate array
/// - ns2__PayPalUpdateAgreementReply* soap_new_req_ns2__PayPalUpdateAgreementReply(soap*, ...) allocate, set required members
/// - ns2__PayPalUpdateAgreementReply* soap_new_set_ns2__PayPalUpdateAgreementReply(soap*, ...) allocate, set all public members
/// - ns2__PayPalUpdateAgreementReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalUpdateAgreementReply(soap*, ns2__PayPalUpdateAgreementReply*) deserialize from a stream
/// - int soap_write_ns2__PayPalUpdateAgreementReply(soap*, ns2__PayPalUpdateAgreementReply*) serialize to a stream
/// - ns2__PayPalUpdateAgreementReply* ns2__PayPalUpdateAgreementReply::soap_dup(soap*) returns deep copy of ns2__PayPalUpdateAgreementReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalUpdateAgreementReply::soap_del() deep deletes ns2__PayPalUpdateAgreementReply data members, use only after ns2__PayPalUpdateAgreementReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalUpdateAgreementReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "paypalBillingAgreementId" of XSD type xs:string.
    wchar_t*                             paypalBillingAgreementId       0;	///< Optional element.
/// Element "paypalBillingAgreementDesc" of XSD type xs:string.
    wchar_t*                             paypalBillingAgreementDesc     0;	///< Optional element.
/// Element "paypalBillingAgreementCustom" of XSD type xs:string.
    wchar_t*                             paypalBillingAgreementCustom   0;	///< Optional element.
/// Element "paypalBillingAgreementStatus" of XSD type xs:string.
    wchar_t*                             paypalBillingAgreementStatus   0;	///< Optional element.
/// Element "payer" of XSD type xs:string.
    wchar_t*                             payer                          0;	///< Optional element.
/// Element "payerId" of XSD type xs:string.
    wchar_t*                             payerId                        0;	///< Optional element.
/// Element "payerStatus" of XSD type xs:string.
    wchar_t*                             payerStatus                    0;	///< Optional element.
/// Element "payerCountry" of XSD type xs:string.
    wchar_t*                             payerCountry                   0;	///< Optional element.
/// Element "payerBusiness" of XSD type xs:string.
    wchar_t*                             payerBusiness                  0;	///< Optional element.
/// Element "payerSalutation" of XSD type xs:string.
    wchar_t*                             payerSalutation                0;	///< Optional element.
/// Element "payerFirstname" of XSD type xs:string.
    wchar_t*                             payerFirstname                 0;	///< Optional element.
/// Element "payerMiddlename" of XSD type xs:string.
    wchar_t*                             payerMiddlename                0;	///< Optional element.
/// Element "payerLastname" of XSD type xs:string.
    wchar_t*                             payerLastname                  0;	///< Optional element.
/// Element "payerSuffix" of XSD type xs:string.
    wchar_t*                             payerSuffix                    0;	///< Optional element.
/// Element "addressStatus" of XSD type xs:string.
    wchar_t*                             addressStatus                  0;	///< Optional element.
/// Element "errorCode" of XSD type xs:string.
    wchar_t*                             errorCode                      0;	///< Optional element.
/// Element "correlationID" of XSD type xs:string.
    wchar_t*                             correlationID                  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalCreateAgreementReply is a complexType.
///
/// class ns2__PayPalCreateAgreementReply operations:
/// - ns2__PayPalCreateAgreementReply* soap_new_ns2__PayPalCreateAgreementReply(soap*) allocate
/// - ns2__PayPalCreateAgreementReply* soap_new_ns2__PayPalCreateAgreementReply(soap*, int num) allocate array
/// - ns2__PayPalCreateAgreementReply* soap_new_req_ns2__PayPalCreateAgreementReply(soap*, ...) allocate, set required members
/// - ns2__PayPalCreateAgreementReply* soap_new_set_ns2__PayPalCreateAgreementReply(soap*, ...) allocate, set all public members
/// - ns2__PayPalCreateAgreementReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalCreateAgreementReply(soap*, ns2__PayPalCreateAgreementReply*) deserialize from a stream
/// - int soap_write_ns2__PayPalCreateAgreementReply(soap*, ns2__PayPalCreateAgreementReply*) serialize to a stream
/// - ns2__PayPalCreateAgreementReply* ns2__PayPalCreateAgreementReply::soap_dup(soap*) returns deep copy of ns2__PayPalCreateAgreementReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalCreateAgreementReply::soap_del() deep deletes ns2__PayPalCreateAgreementReply data members, use only after ns2__PayPalCreateAgreementReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalCreateAgreementReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "paypalBillingAgreementId" of XSD type xs:string.
    wchar_t*                             paypalBillingAgreementId       0;	///< Optional element.
/// Element "errorCode" of XSD type xs:string.
    wchar_t*                             errorCode                      0;	///< Optional element.
/// Element "correlationID" of XSD type xs:string.
    wchar_t*                             correlationID                  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalDoRefTransactionReply is a complexType.
///
/// class ns2__PayPalDoRefTransactionReply operations:
/// - ns2__PayPalDoRefTransactionReply* soap_new_ns2__PayPalDoRefTransactionReply(soap*) allocate
/// - ns2__PayPalDoRefTransactionReply* soap_new_ns2__PayPalDoRefTransactionReply(soap*, int num) allocate array
/// - ns2__PayPalDoRefTransactionReply* soap_new_req_ns2__PayPalDoRefTransactionReply(soap*, ...) allocate, set required members
/// - ns2__PayPalDoRefTransactionReply* soap_new_set_ns2__PayPalDoRefTransactionReply(soap*, ...) allocate, set all public members
/// - ns2__PayPalDoRefTransactionReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalDoRefTransactionReply(soap*, ns2__PayPalDoRefTransactionReply*) deserialize from a stream
/// - int soap_write_ns2__PayPalDoRefTransactionReply(soap*, ns2__PayPalDoRefTransactionReply*) serialize to a stream
/// - ns2__PayPalDoRefTransactionReply* ns2__PayPalDoRefTransactionReply::soap_dup(soap*) returns deep copy of ns2__PayPalDoRefTransactionReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalDoRefTransactionReply::soap_del() deep deletes ns2__PayPalDoRefTransactionReply data members, use only after ns2__PayPalDoRefTransactionReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalDoRefTransactionReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "paypalBillingAgreementId" of XSD type xs:string.
    wchar_t*                             paypalBillingAgreementId       0;	///< Optional element.
/// Element "transactionId" of XSD type xs:string.
    wchar_t*                             transactionId                  0;	///< Optional element.
/// Element "paypalTransactionType" of XSD type xs:string.
    wchar_t*                             paypalTransactionType          0;	///< Optional element.
/// Element "paypalPaymentType" of XSD type xs:string.
    wchar_t*                             paypalPaymentType              0;	///< Optional element.
/// Element "paypalOrderTime" of XSD type xs:string.
    wchar_t*                             paypalOrderTime                0;	///< Optional element.
/// Element "paypalAmount" of XSD type xs:string.
    wchar_t*                             paypalAmount                   0;	///< Optional element.
/// Element "currency" of XSD type xs:string.
    wchar_t*                             currency                       0;	///< Optional element.
/// Element "paypalTaxAmount" of XSD type xs:string.
    wchar_t*                             paypalTaxAmount                0;	///< Optional element.
/// Element "paypalExchangeRate" of XSD type xs:string.
    wchar_t*                             paypalExchangeRate             0;	///< Optional element.
/// Element "paypalPaymentStatus" of XSD type xs:string.
    wchar_t*                             paypalPaymentStatus            0;	///< Optional element.
/// Element "paypalPendingReason" of XSD type xs:string.
    wchar_t*                             paypalPendingReason            0;	///< Optional element.
/// Element "paypalReasonCode" of XSD type xs:string.
    wchar_t*                             paypalReasonCode               0;	///< Optional element.
/// Element "errorCode" of XSD type xs:string.
    wchar_t*                             errorCode                      0;	///< Optional element.
/// Element "correlationID" of XSD type xs:string.
    wchar_t*                             correlationID                  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":RiskUpdateReply is a complexType.
///
/// class ns2__RiskUpdateReply operations:
/// - ns2__RiskUpdateReply* soap_new_ns2__RiskUpdateReply(soap*) allocate
/// - ns2__RiskUpdateReply* soap_new_ns2__RiskUpdateReply(soap*, int num) allocate array
/// - ns2__RiskUpdateReply* soap_new_req_ns2__RiskUpdateReply(soap*, ...) allocate, set required members
/// - ns2__RiskUpdateReply* soap_new_set_ns2__RiskUpdateReply(soap*, ...) allocate, set all public members
/// - ns2__RiskUpdateReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__RiskUpdateReply(soap*, ns2__RiskUpdateReply*) deserialize from a stream
/// - int soap_write_ns2__RiskUpdateReply(soap*, ns2__RiskUpdateReply*) serialize to a stream
/// - ns2__RiskUpdateReply* ns2__RiskUpdateReply::soap_dup(soap*) returns deep copy of ns2__RiskUpdateReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__RiskUpdateReply::soap_del() deep deletes ns2__RiskUpdateReply data members, use only after ns2__RiskUpdateReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__RiskUpdateReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":FraudUpdateReply is a complexType.
///
/// class ns2__FraudUpdateReply operations:
/// - ns2__FraudUpdateReply* soap_new_ns2__FraudUpdateReply(soap*) allocate
/// - ns2__FraudUpdateReply* soap_new_ns2__FraudUpdateReply(soap*, int num) allocate array
/// - ns2__FraudUpdateReply* soap_new_req_ns2__FraudUpdateReply(soap*, ...) allocate, set required members
/// - ns2__FraudUpdateReply* soap_new_set_ns2__FraudUpdateReply(soap*, ...) allocate, set all public members
/// - ns2__FraudUpdateReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__FraudUpdateReply(soap*, ns2__FraudUpdateReply*) deserialize from a stream
/// - int soap_write_ns2__FraudUpdateReply(soap*, ns2__FraudUpdateReply*) serialize to a stream
/// - ns2__FraudUpdateReply* ns2__FraudUpdateReply::soap_dup(soap*) returns deep copy of ns2__FraudUpdateReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FraudUpdateReply::soap_del() deep deletes ns2__FraudUpdateReply data members, use only after ns2__FraudUpdateReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FraudUpdateReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CaseManagementActionReply is a complexType.
///
/// class ns2__CaseManagementActionReply operations:
/// - ns2__CaseManagementActionReply* soap_new_ns2__CaseManagementActionReply(soap*) allocate
/// - ns2__CaseManagementActionReply* soap_new_ns2__CaseManagementActionReply(soap*, int num) allocate array
/// - ns2__CaseManagementActionReply* soap_new_req_ns2__CaseManagementActionReply(soap*, ...) allocate, set required members
/// - ns2__CaseManagementActionReply* soap_new_set_ns2__CaseManagementActionReply(soap*, ...) allocate, set all public members
/// - ns2__CaseManagementActionReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CaseManagementActionReply(soap*, ns2__CaseManagementActionReply*) deserialize from a stream
/// - int soap_write_ns2__CaseManagementActionReply(soap*, ns2__CaseManagementActionReply*) serialize to a stream
/// - ns2__CaseManagementActionReply* ns2__CaseManagementActionReply::soap_dup(soap*) returns deep copy of ns2__CaseManagementActionReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CaseManagementActionReply::soap_del() deep deletes ns2__CaseManagementActionReply data members, use only after ns2__CaseManagementActionReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CaseManagementActionReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":RuleResultItem is a complexType.
///
/// class ns2__RuleResultItem operations:
/// - ns2__RuleResultItem* soap_new_ns2__RuleResultItem(soap*) allocate
/// - ns2__RuleResultItem* soap_new_ns2__RuleResultItem(soap*, int num) allocate array
/// - ns2__RuleResultItem* soap_new_req_ns2__RuleResultItem(soap*, ...) allocate, set required members
/// - ns2__RuleResultItem* soap_new_set_ns2__RuleResultItem(soap*, ...) allocate, set all public members
/// - ns2__RuleResultItem::soap_default(soap*) reset members to default
/// - int soap_read_ns2__RuleResultItem(soap*, ns2__RuleResultItem*) deserialize from a stream
/// - int soap_write_ns2__RuleResultItem(soap*, ns2__RuleResultItem*) serialize to a stream
/// - ns2__RuleResultItem* ns2__RuleResultItem::soap_dup(soap*) returns deep copy of ns2__RuleResultItem, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__RuleResultItem::soap_del() deep deletes ns2__RuleResultItem data members, use only after ns2__RuleResultItem::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__RuleResultItem
{ public:
/// Element "name" of XSD type xs:string.
    wchar_t*                             name                           0;	///< Optional element.
/// Element "decision" of XSD type xs:string.
    wchar_t*                             decision                       0;	///< Optional element.
/// Element "evaluation" of XSD type xs:string.
    wchar_t*                             evaluation                     0;	///< Optional element.
/// Element "ruleID" of XSD type xs:integer.
    xsd__integer*                        ruleID                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":RuleResultItems is a complexType.
///
/// class ns2__RuleResultItems operations:
/// - ns2__RuleResultItems* soap_new_ns2__RuleResultItems(soap*) allocate
/// - ns2__RuleResultItems* soap_new_ns2__RuleResultItems(soap*, int num) allocate array
/// - ns2__RuleResultItems* soap_new_req_ns2__RuleResultItems(soap*, ...) allocate, set required members
/// - ns2__RuleResultItems* soap_new_set_ns2__RuleResultItems(soap*, ...) allocate, set all public members
/// - ns2__RuleResultItems::soap_default(soap*) reset members to default
/// - int soap_read_ns2__RuleResultItems(soap*, ns2__RuleResultItems*) deserialize from a stream
/// - int soap_write_ns2__RuleResultItems(soap*, ns2__RuleResultItems*) serialize to a stream
/// - ns2__RuleResultItems* ns2__RuleResultItems::soap_dup(soap*) returns deep copy of ns2__RuleResultItems, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__RuleResultItems::soap_del() deep deletes ns2__RuleResultItems data members, use only after ns2__RuleResultItems::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__RuleResultItems
{ public:
/// Vector of ns2__RuleResultItem* of length 0..1000.
    std::vector<ns2__RuleResultItem*   > ruleResultItem                 0:1000;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DecisionReply is a complexType.
///
/// class ns2__DecisionReply operations:
/// - ns2__DecisionReply* soap_new_ns2__DecisionReply(soap*) allocate
/// - ns2__DecisionReply* soap_new_ns2__DecisionReply(soap*, int num) allocate array
/// - ns2__DecisionReply* soap_new_req_ns2__DecisionReply(soap*, ...) allocate, set required members
/// - ns2__DecisionReply* soap_new_set_ns2__DecisionReply(soap*, ...) allocate, set all public members
/// - ns2__DecisionReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DecisionReply(soap*, ns2__DecisionReply*) deserialize from a stream
/// - int soap_write_ns2__DecisionReply(soap*, ns2__DecisionReply*) serialize to a stream
/// - ns2__DecisionReply* ns2__DecisionReply::soap_dup(soap*) returns deep copy of ns2__DecisionReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DecisionReply::soap_del() deep deletes ns2__DecisionReply data members, use only after ns2__DecisionReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DecisionReply
{ public:
/// Element "casePriority" of XSD type xs:integer.
    xsd__integer*                        casePriority                   0;	///< Optional element.
/// Element "activeProfileReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ProfileReply.
    ns2__ProfileReply*                   activeProfileReply             0;	///< Optional element.
/// Element "velocityInfoCode" of XSD type xs:string.
    wchar_t*                             velocityInfoCode               0;	///< Optional element.
/// Element "additionalFields" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":AdditionalFields.
    ns2__AdditionalFields*               additionalFields               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":AdditionalFields is a complexType.
///
/// class ns2__AdditionalFields operations:
/// - ns2__AdditionalFields* soap_new_ns2__AdditionalFields(soap*) allocate
/// - ns2__AdditionalFields* soap_new_ns2__AdditionalFields(soap*, int num) allocate array
/// - ns2__AdditionalFields* soap_new_req_ns2__AdditionalFields(soap*, ...) allocate, set required members
/// - ns2__AdditionalFields* soap_new_set_ns2__AdditionalFields(soap*, ...) allocate, set all public members
/// - ns2__AdditionalFields::soap_default(soap*) reset members to default
/// - int soap_read_ns2__AdditionalFields(soap*, ns2__AdditionalFields*) deserialize from a stream
/// - int soap_write_ns2__AdditionalFields(soap*, ns2__AdditionalFields*) serialize to a stream
/// - ns2__AdditionalFields* ns2__AdditionalFields::soap_dup(soap*) returns deep copy of ns2__AdditionalFields, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AdditionalFields::soap_del() deep deletes ns2__AdditionalFields data members, use only after ns2__AdditionalFields::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AdditionalFields
{ public:
/// Vector of ns2__Field* of length 0..3000.
    std::vector<ns2__Field*            > field                          0:3000;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":Field is a complexType.
///
/// class ns2__Field operations:
/// - ns2__Field* soap_new_ns2__Field(soap*) allocate
/// - ns2__Field* soap_new_ns2__Field(soap*, int num) allocate array
/// - ns2__Field* soap_new_req_ns2__Field(soap*, ...) allocate, set required members
/// - ns2__Field* soap_new_set_ns2__Field(soap*, ...) allocate, set all public members
/// - ns2__Field::soap_default(soap*) reset members to default
/// - int soap_read_ns2__Field(soap*, ns2__Field*) deserialize from a stream
/// - int soap_write_ns2__Field(soap*, ns2__Field*) serialize to a stream
/// - ns2__Field* ns2__Field::soap_dup(soap*) returns deep copy of ns2__Field, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__Field::soap_del() deep deletes ns2__Field data members, use only after ns2__Field::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__Field
{ public:
/// Element "provider" of XSD type xs:string.
    wchar_t*                             provider                       1;	///< Required element.
/// Element "name" of XSD type xs:string.
    wchar_t*                             name                           1;	///< Required element.
/// Element "value" of XSD type xs:string.
    wchar_t*                             value                          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DMEReply is a complexType.
///
/// class ns2__DMEReply operations:
/// - ns2__DMEReply* soap_new_ns2__DMEReply(soap*) allocate
/// - ns2__DMEReply* soap_new_ns2__DMEReply(soap*, int num) allocate array
/// - ns2__DMEReply* soap_new_req_ns2__DMEReply(soap*, ...) allocate, set required members
/// - ns2__DMEReply* soap_new_set_ns2__DMEReply(soap*, ...) allocate, set all public members
/// - ns2__DMEReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DMEReply(soap*, ns2__DMEReply*) deserialize from a stream
/// - int soap_write_ns2__DMEReply(soap*, ns2__DMEReply*) serialize to a stream
/// - ns2__DMEReply* ns2__DMEReply::soap_dup(soap*) returns deep copy of ns2__DMEReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DMEReply::soap_del() deep deletes ns2__DMEReply data members, use only after ns2__DMEReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DMEReply
{ public:
/// Element "eventType" of XSD type xs:string.
    wchar_t*                             eventType                      0;	///< Optional element.
/// Element "eventInfo" of XSD type xs:string.
    wchar_t*                             eventInfo                      0;	///< Optional element.
/// Element "eventHotlistInfo" of XSD type xs:string.
    wchar_t*                             eventHotlistInfo               0;	///< Optional element.
/// Element "eventPolicy" of XSD type xs:string.
    wchar_t*                             eventPolicy                    0;	///< Optional element.
/// Element "additionalFields" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":AdditionalFields.
    ns2__AdditionalFields*               additionalFields               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":ProfileReply is a complexType.
///
/// class ns2__ProfileReply operations:
/// - ns2__ProfileReply* soap_new_ns2__ProfileReply(soap*) allocate
/// - ns2__ProfileReply* soap_new_ns2__ProfileReply(soap*, int num) allocate array
/// - ns2__ProfileReply* soap_new_req_ns2__ProfileReply(soap*, ...) allocate, set required members
/// - ns2__ProfileReply* soap_new_set_ns2__ProfileReply(soap*, ...) allocate, set all public members
/// - ns2__ProfileReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ProfileReply(soap*, ns2__ProfileReply*) deserialize from a stream
/// - int soap_write_ns2__ProfileReply(soap*, ns2__ProfileReply*) serialize to a stream
/// - ns2__ProfileReply* ns2__ProfileReply::soap_dup(soap*) returns deep copy of ns2__ProfileReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ProfileReply::soap_del() deep deletes ns2__ProfileReply data members, use only after ns2__ProfileReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ProfileReply
{ public:
/// Element "selectedBy" of XSD type xs:string.
    wchar_t*                             selectedBy                     0;	///< Optional element.
/// Element "name" of XSD type xs:string.
    wchar_t*                             name                           0;	///< Optional element.
/// Element "destinationQueue" of XSD type xs:string.
    wchar_t*                             destinationQueue               0;	///< Optional element.
/// Element "profileScore" of XSD type xs:string.
    wchar_t*                             profileScore                   0;	///< Optional element.
/// Element "rulesTriggered" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":RuleResultItems.
    ns2__RuleResultItems*                rulesTriggered                 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCDCCReply is a complexType.
///
/// class ns2__CCDCCReply operations:
/// - ns2__CCDCCReply* soap_new_ns2__CCDCCReply(soap*) allocate
/// - ns2__CCDCCReply* soap_new_ns2__CCDCCReply(soap*, int num) allocate array
/// - ns2__CCDCCReply* soap_new_req_ns2__CCDCCReply(soap*, ...) allocate, set required members
/// - ns2__CCDCCReply* soap_new_set_ns2__CCDCCReply(soap*, ...) allocate, set all public members
/// - ns2__CCDCCReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCDCCReply(soap*, ns2__CCDCCReply*) deserialize from a stream
/// - int soap_write_ns2__CCDCCReply(soap*, ns2__CCDCCReply*) serialize to a stream
/// - ns2__CCDCCReply* ns2__CCDCCReply::soap_dup(soap*) returns deep copy of ns2__CCDCCReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCDCCReply::soap_del() deep deletes ns2__CCDCCReply data members, use only after ns2__CCDCCReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCDCCReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "dccSupported" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
    ns2__boolean*                        dccSupported                   0;	///< Optional element.
/// Element "validHours" of XSD type xs:string.
    wchar_t*                             validHours                     0;	///< Optional element.
/// Element "marginRatePercentage" of XSD type xs:string.
    wchar_t*                             marginRatePercentage           0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCDCCUpdateReply is a complexType.
///
/// class ns2__CCDCCUpdateReply operations:
/// - ns2__CCDCCUpdateReply* soap_new_ns2__CCDCCUpdateReply(soap*) allocate
/// - ns2__CCDCCUpdateReply* soap_new_ns2__CCDCCUpdateReply(soap*, int num) allocate array
/// - ns2__CCDCCUpdateReply* soap_new_req_ns2__CCDCCUpdateReply(soap*, ...) allocate, set required members
/// - ns2__CCDCCUpdateReply* soap_new_set_ns2__CCDCCUpdateReply(soap*, ...) allocate, set all public members
/// - ns2__CCDCCUpdateReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCDCCUpdateReply(soap*, ns2__CCDCCUpdateReply*) deserialize from a stream
/// - int soap_write_ns2__CCDCCUpdateReply(soap*, ns2__CCDCCUpdateReply*) serialize to a stream
/// - ns2__CCDCCUpdateReply* ns2__CCDCCUpdateReply::soap_dup(soap*) returns deep copy of ns2__CCDCCUpdateReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCDCCUpdateReply::soap_del() deep deletes ns2__CCDCCUpdateReply data members, use only after ns2__CCDCCUpdateReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCDCCUpdateReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":ChinaPaymentReply is a complexType.
///
/// class ns2__ChinaPaymentReply operations:
/// - ns2__ChinaPaymentReply* soap_new_ns2__ChinaPaymentReply(soap*) allocate
/// - ns2__ChinaPaymentReply* soap_new_ns2__ChinaPaymentReply(soap*, int num) allocate array
/// - ns2__ChinaPaymentReply* soap_new_req_ns2__ChinaPaymentReply(soap*, ...) allocate, set required members
/// - ns2__ChinaPaymentReply* soap_new_set_ns2__ChinaPaymentReply(soap*, ...) allocate, set all public members
/// - ns2__ChinaPaymentReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ChinaPaymentReply(soap*, ns2__ChinaPaymentReply*) deserialize from a stream
/// - int soap_write_ns2__ChinaPaymentReply(soap*, ns2__ChinaPaymentReply*) serialize to a stream
/// - ns2__ChinaPaymentReply* ns2__ChinaPaymentReply::soap_dup(soap*) returns deep copy of ns2__ChinaPaymentReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ChinaPaymentReply::soap_del() deep deletes ns2__ChinaPaymentReply data members, use only after ns2__ChinaPaymentReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ChinaPaymentReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "currency" of XSD type xs:string.
    wchar_t*                             currency                       0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "formData" of XSD type xs:string.
    wchar_t*                             formData                       0;	///< Optional element.
/// Element "verifyFailure" of XSD type xs:string.
    wchar_t*                             verifyFailure                  0;	///< Optional element.
/// Element "verifyInProcess" of XSD type xs:string.
    wchar_t*                             verifyInProcess                0;	///< Optional element.
/// Element "verifySuccess" of XSD type xs:string.
    wchar_t*                             verifySuccess                  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":ChinaRefundReply is a complexType.
///
/// class ns2__ChinaRefundReply operations:
/// - ns2__ChinaRefundReply* soap_new_ns2__ChinaRefundReply(soap*) allocate
/// - ns2__ChinaRefundReply* soap_new_ns2__ChinaRefundReply(soap*, int num) allocate array
/// - ns2__ChinaRefundReply* soap_new_req_ns2__ChinaRefundReply(soap*, ...) allocate, set required members
/// - ns2__ChinaRefundReply* soap_new_set_ns2__ChinaRefundReply(soap*, ...) allocate, set all public members
/// - ns2__ChinaRefundReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ChinaRefundReply(soap*, ns2__ChinaRefundReply*) deserialize from a stream
/// - int soap_write_ns2__ChinaRefundReply(soap*, ns2__ChinaRefundReply*) serialize to a stream
/// - ns2__ChinaRefundReply* ns2__ChinaRefundReply::soap_dup(soap*) returns deep copy of ns2__ChinaRefundReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ChinaRefundReply::soap_del() deep deletes ns2__ChinaRefundReply data members, use only after ns2__ChinaRefundReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ChinaRefundReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "currency" of XSD type xs:string.
    wchar_t*                             currency                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":BoletoPaymentReply is a complexType.
///
/// class ns2__BoletoPaymentReply operations:
/// - ns2__BoletoPaymentReply* soap_new_ns2__BoletoPaymentReply(soap*) allocate
/// - ns2__BoletoPaymentReply* soap_new_ns2__BoletoPaymentReply(soap*, int num) allocate array
/// - ns2__BoletoPaymentReply* soap_new_req_ns2__BoletoPaymentReply(soap*, ...) allocate, set required members
/// - ns2__BoletoPaymentReply* soap_new_set_ns2__BoletoPaymentReply(soap*, ...) allocate, set all public members
/// - ns2__BoletoPaymentReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__BoletoPaymentReply(soap*, ns2__BoletoPaymentReply*) deserialize from a stream
/// - int soap_write_ns2__BoletoPaymentReply(soap*, ns2__BoletoPaymentReply*) serialize to a stream
/// - ns2__BoletoPaymentReply* ns2__BoletoPaymentReply::soap_dup(soap*) returns deep copy of ns2__BoletoPaymentReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BoletoPaymentReply::soap_del() deep deletes ns2__BoletoPaymentReply data members, use only after ns2__BoletoPaymentReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BoletoPaymentReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "boletoNumber" of XSD type xs:string.
    wchar_t*                             boletoNumber                   0;	///< Optional element.
/// Element "expirationDate" of XSD type xs:string.
    wchar_t*                             expirationDate                 0;	///< Optional element.
/// Element "url" of XSD type xs:string.
    wchar_t*                             url                            0;	///< Optional element.
/// Element "avsCode" of XSD type xs:string.
    wchar_t*                             avsCode                        0;	///< Optional element.
/// Element "avsCodeRaw" of XSD type xs:string.
    wchar_t*                             avsCodeRaw                     0;	///< Optional element.
/// Element "barCodeNumber" of XSD type xs:string.
    wchar_t*                             barCodeNumber                  0;	///< Optional element.
/// Element "assignor" of XSD type xs:string.
    wchar_t*                             assignor                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APInitiateReply is a complexType.
///
/// class ns2__APInitiateReply operations:
/// - ns2__APInitiateReply* soap_new_ns2__APInitiateReply(soap*) allocate
/// - ns2__APInitiateReply* soap_new_ns2__APInitiateReply(soap*, int num) allocate array
/// - ns2__APInitiateReply* soap_new_req_ns2__APInitiateReply(soap*, ...) allocate, set required members
/// - ns2__APInitiateReply* soap_new_set_ns2__APInitiateReply(soap*, ...) allocate, set all public members
/// - ns2__APInitiateReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APInitiateReply(soap*, ns2__APInitiateReply*) deserialize from a stream
/// - int soap_write_ns2__APInitiateReply(soap*, ns2__APInitiateReply*) serialize to a stream
/// - ns2__APInitiateReply* ns2__APInitiateReply::soap_dup(soap*) returns deep copy of ns2__APInitiateReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APInitiateReply::soap_del() deep deletes ns2__APInitiateReply data members, use only after ns2__APInitiateReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APInitiateReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "merchantURL" of XSD type xs:string.
    wchar_t*                             merchantURL                    0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "dateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       dateTime                       0;	///< Optional element.
/// Element "signature" of XSD type xs:string.
    wchar_t*                             signature                      0;	///< Optional element.
/// Element "publicKey" of XSD type xs:string.
    wchar_t*                             publicKey                      0;	///< Optional element.
/// Element "paymentStatus" of XSD type xs:string.
    wchar_t*                             paymentStatus                  0;	///< Optional element.
/// Element "responseCode" of XSD type xs:string.
    wchar_t*                             responseCode                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APCheckStatusReply is a complexType.
///
/// class ns2__APCheckStatusReply operations:
/// - ns2__APCheckStatusReply* soap_new_ns2__APCheckStatusReply(soap*) allocate
/// - ns2__APCheckStatusReply* soap_new_ns2__APCheckStatusReply(soap*, int num) allocate array
/// - ns2__APCheckStatusReply* soap_new_req_ns2__APCheckStatusReply(soap*, ...) allocate, set required members
/// - ns2__APCheckStatusReply* soap_new_set_ns2__APCheckStatusReply(soap*, ...) allocate, set all public members
/// - ns2__APCheckStatusReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APCheckStatusReply(soap*, ns2__APCheckStatusReply*) deserialize from a stream
/// - int soap_write_ns2__APCheckStatusReply(soap*, ns2__APCheckStatusReply*) serialize to a stream
/// - ns2__APCheckStatusReply* ns2__APCheckStatusReply::soap_dup(soap*) returns deep copy of ns2__APCheckStatusReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APCheckStatusReply::soap_del() deep deletes ns2__APCheckStatusReply data members, use only after ns2__APCheckStatusReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APCheckStatusReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               1;	///< Required element.
/// Element "paymentStatus" of XSD type xs:string.
    wchar_t*                             paymentStatus                  0;	///< Optional element.
/// Element "processorTradeNo" of XSD type xs:string.
    wchar_t*                             processorTradeNo               0;	///< Optional element.
/// Element "processorTransactionID" of XSD type xs:string.
    wchar_t*                             processorTransactionID         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APReply is a complexType.
///
/// class ns2__APReply operations:
/// - ns2__APReply* soap_new_ns2__APReply(soap*) allocate
/// - ns2__APReply* soap_new_ns2__APReply(soap*, int num) allocate array
/// - ns2__APReply* soap_new_req_ns2__APReply(soap*, ...) allocate, set required members
/// - ns2__APReply* soap_new_set_ns2__APReply(soap*, ...) allocate, set all public members
/// - ns2__APReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APReply(soap*, ns2__APReply*) deserialize from a stream
/// - int soap_write_ns2__APReply(soap*, ns2__APReply*) serialize to a stream
/// - ns2__APReply* ns2__APReply::soap_dup(soap*) returns deep copy of ns2__APReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APReply::soap_del() deep deletes ns2__APReply data members, use only after ns2__APReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APReply
{ public:
/// Element "orderID" of XSD type xs:string.
    wchar_t*                             orderID                        0;	///< Optional element.
/// Element "cardGroup" of XSD type xs:string.
    wchar_t*                             cardGroup                      0;	///< Optional element.
/// Element "cardType" of XSD type xs:string.
    wchar_t*                             cardType                       0;	///< Optional element.
/// Element "cardNumberSuffix" of XSD type xs:string.
    wchar_t*                             cardNumberSuffix               0;	///< Optional element.
/// Element "cardExpirationMonth" of XSD type xs:string.
    wchar_t*                             cardExpirationMonth            0;	///< Optional element.
/// Element "cardExpirationYear" of XSD type xs:string.
    wchar_t*                             cardExpirationYear             0;	///< Optional element.
/// Element "avsCodeRaw" of XSD type xs:string.
    wchar_t*                             avsCodeRaw                     0;	///< Optional element.
/// Element "purchaseID" of XSD type xs:string.
    wchar_t*                             purchaseID                     0;	///< Optional element.
/// Element "productID" of XSD type xs:string.
    wchar_t*                             productID                      0;	///< Optional element.
/// Element "productDescription" of XSD type xs:string.
    wchar_t*                             productDescription             0;	///< Optional element.
/// Element "shippingAmount" of XSD type xs:string.
    wchar_t*                             shippingAmount                 0;	///< Optional element.
/// Element "handlingAmount" of XSD type xs:string.
    wchar_t*                             handlingAmount                 0;	///< Optional element.
/// Element "shippingHandlingAmount" of XSD type xs:string.
    wchar_t*                             shippingHandlingAmount         0;	///< Optional element.
/// Element "additionalAmount" of XSD type xs:string.
    wchar_t*                             additionalAmount               0;	///< Optional element.
/// Element "taxAmount" of XSD type xs:string.
    wchar_t*                             taxAmount                      0;	///< Optional element.
/// Element "subtotalAmount" of XSD type xs:string.
    wchar_t*                             subtotalAmount                 0;	///< Optional element.
/// Element "totalPurchaseAmount" of XSD type xs:string.
    wchar_t*                             totalPurchaseAmount            0;	///< Optional element.
/// Element "giftWrapAmount" of XSD type xs:string.
    wchar_t*                             giftWrapAmount                 0;	///< Optional element.
/// Element "discountAmount" of XSD type xs:string.
    wchar_t*                             discountAmount                 0;	///< Optional element.
/// Element "cardNumberPrefix" of XSD type xs:string.
    wchar_t*                             cardNumberPrefix               0;	///< Optional element.
/// Element "riskIndicator" of XSD type xs:string.
    wchar_t*                             riskIndicator                  0;	///< Optional element.
/// Element "merchantUUID" of XSD type xs:string.
    wchar_t*                             merchantUUID                   0;	///< Optional element.
/// Element "merchantSiteID" of XSD type xs:string.
    wchar_t*                             merchantSiteID                 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APAuthReply is a complexType.
///
/// class ns2__APAuthReply operations:
/// - ns2__APAuthReply* soap_new_ns2__APAuthReply(soap*) allocate
/// - ns2__APAuthReply* soap_new_ns2__APAuthReply(soap*, int num) allocate array
/// - ns2__APAuthReply* soap_new_req_ns2__APAuthReply(soap*, ...) allocate, set required members
/// - ns2__APAuthReply* soap_new_set_ns2__APAuthReply(soap*, ...) allocate, set all public members
/// - ns2__APAuthReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APAuthReply(soap*, ns2__APAuthReply*) deserialize from a stream
/// - int soap_write_ns2__APAuthReply(soap*, ns2__APAuthReply*) serialize to a stream
/// - ns2__APAuthReply* ns2__APAuthReply::soap_dup(soap*) returns deep copy of ns2__APAuthReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APAuthReply::soap_del() deep deletes ns2__APAuthReply data members, use only after ns2__APAuthReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APAuthReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "transactionID" of XSD type xs:string.
    wchar_t*                             transactionID                  0;	///< Optional element.
/// Element "status" of XSD type xs:string.
    wchar_t*                             status                         0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "dateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       dateTime                       0;	///< Optional element.
/// Element "providerResponse" of XSD type xs:string.
    wchar_t*                             providerResponse               0;	///< Optional element.
/// Element "paymentStatus" of XSD type xs:string.
    wchar_t*                             paymentStatus                  0;	///< Optional element.
/// Element "responseCode" of XSD type xs:string.
    wchar_t*                             responseCode                   0;	///< Optional element.
/// Element "authorizationCode" of XSD type xs:string.
    wchar_t*                             authorizationCode              0;	///< Optional element.
/// Element "merchantURL" of XSD type xs:string.
    wchar_t*                             merchantURL                    0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "processorTransactionID" of XSD type xs:string.
    wchar_t*                             processorTransactionID         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APAuthReversalReply is a complexType.
///
/// class ns2__APAuthReversalReply operations:
/// - ns2__APAuthReversalReply* soap_new_ns2__APAuthReversalReply(soap*) allocate
/// - ns2__APAuthReversalReply* soap_new_ns2__APAuthReversalReply(soap*, int num) allocate array
/// - ns2__APAuthReversalReply* soap_new_req_ns2__APAuthReversalReply(soap*, ...) allocate, set required members
/// - ns2__APAuthReversalReply* soap_new_set_ns2__APAuthReversalReply(soap*, ...) allocate, set all public members
/// - ns2__APAuthReversalReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APAuthReversalReply(soap*, ns2__APAuthReversalReply*) deserialize from a stream
/// - int soap_write_ns2__APAuthReversalReply(soap*, ns2__APAuthReversalReply*) serialize to a stream
/// - ns2__APAuthReversalReply* ns2__APAuthReversalReply::soap_dup(soap*) returns deep copy of ns2__APAuthReversalReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APAuthReversalReply::soap_del() deep deletes ns2__APAuthReversalReply data members, use only after ns2__APAuthReversalReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APAuthReversalReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "transactionID" of XSD type xs:string.
    wchar_t*                             transactionID                  0;	///< Optional element.
/// Element "status" of XSD type xs:string.
    wchar_t*                             status                         0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "dateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       dateTime                       0;	///< Optional element.
/// Element "providerResponse" of XSD type xs:string.
    wchar_t*                             providerResponse               0;	///< Optional element.
/// Element "paymentStatus" of XSD type xs:string.
    wchar_t*                             paymentStatus                  0;	///< Optional element.
/// Element "responseCode" of XSD type xs:string.
    wchar_t*                             responseCode                   0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APCaptureReply is a complexType.
///
/// class ns2__APCaptureReply operations:
/// - ns2__APCaptureReply* soap_new_ns2__APCaptureReply(soap*) allocate
/// - ns2__APCaptureReply* soap_new_ns2__APCaptureReply(soap*, int num) allocate array
/// - ns2__APCaptureReply* soap_new_req_ns2__APCaptureReply(soap*, ...) allocate, set required members
/// - ns2__APCaptureReply* soap_new_set_ns2__APCaptureReply(soap*, ...) allocate, set all public members
/// - ns2__APCaptureReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APCaptureReply(soap*, ns2__APCaptureReply*) deserialize from a stream
/// - int soap_write_ns2__APCaptureReply(soap*, ns2__APCaptureReply*) serialize to a stream
/// - ns2__APCaptureReply* ns2__APCaptureReply::soap_dup(soap*) returns deep copy of ns2__APCaptureReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APCaptureReply::soap_del() deep deletes ns2__APCaptureReply data members, use only after ns2__APCaptureReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APCaptureReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "transactionID" of XSD type xs:string.
    wchar_t*                             transactionID                  0;	///< Optional element.
/// Element "status" of XSD type xs:string.
    wchar_t*                             status                         0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "dateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       dateTime                       0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "providerResponse" of XSD type xs:string.
    wchar_t*                             providerResponse               0;	///< Optional element.
/// Element "paymentStatus" of XSD type xs:string.
    wchar_t*                             paymentStatus                  0;	///< Optional element.
/// Element "responseCode" of XSD type xs:string.
    wchar_t*                             responseCode                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APOptionsReply is a complexType.
///
/// class ns2__APOptionsReply operations:
/// - ns2__APOptionsReply* soap_new_ns2__APOptionsReply(soap*) allocate
/// - ns2__APOptionsReply* soap_new_ns2__APOptionsReply(soap*, int num) allocate array
/// - ns2__APOptionsReply* soap_new_req_ns2__APOptionsReply(soap*, ...) allocate, set required members
/// - ns2__APOptionsReply* soap_new_set_ns2__APOptionsReply(soap*, ...) allocate, set all public members
/// - ns2__APOptionsReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APOptionsReply(soap*, ns2__APOptionsReply*) deserialize from a stream
/// - int soap_write_ns2__APOptionsReply(soap*, ns2__APOptionsReply*) serialize to a stream
/// - ns2__APOptionsReply* ns2__APOptionsReply::soap_dup(soap*) returns deep copy of ns2__APOptionsReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APOptionsReply::soap_del() deep deletes ns2__APOptionsReply data members, use only after ns2__APOptionsReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APOptionsReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "responseCode" of XSD type xs:string.
    wchar_t*                             responseCode                   0;	///< Optional element.
/// Element "offset" of XSD type xs:string.
    wchar_t*                             offset                         0;	///< Optional element.
/// Element "count" of XSD type xs:string.
    wchar_t*                             count                          0;	///< Optional element.
/// Element "totalCount" of XSD type xs:string.
    wchar_t*                             totalCount                     0;	///< Optional element.
/// Element "option" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APOptionsOption.
    ns2__APOptionsOption*                option                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APOptionsOption is a complexType.
///
/// class ns2__APOptionsOption operations:
/// - ns2__APOptionsOption* soap_new_ns2__APOptionsOption(soap*) allocate
/// - ns2__APOptionsOption* soap_new_ns2__APOptionsOption(soap*, int num) allocate array
/// - ns2__APOptionsOption* soap_new_req_ns2__APOptionsOption(soap*, ...) allocate, set required members
/// - ns2__APOptionsOption* soap_new_set_ns2__APOptionsOption(soap*, ...) allocate, set all public members
/// - ns2__APOptionsOption::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APOptionsOption(soap*, ns2__APOptionsOption*) deserialize from a stream
/// - int soap_write_ns2__APOptionsOption(soap*, ns2__APOptionsOption*) serialize to a stream
/// - ns2__APOptionsOption* ns2__APOptionsOption::soap_dup(soap*) returns deep copy of ns2__APOptionsOption, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APOptionsOption::soap_del() deep deletes ns2__APOptionsOption data members, use only after ns2__APOptionsOption::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APOptionsOption
{ public:
/// Element "id" of XSD type xs:string.
    wchar_t*                             id                             0;	///< Optional element.
/// Element "name" of XSD type xs:string.
    wchar_t*                             name                           0;	///< Optional element.
/// Attribute "data" of XSD type xs:integer.
   @xsd__integer*                        data                           0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APRefundReply is a complexType.
///
/// class ns2__APRefundReply operations:
/// - ns2__APRefundReply* soap_new_ns2__APRefundReply(soap*) allocate
/// - ns2__APRefundReply* soap_new_ns2__APRefundReply(soap*, int num) allocate array
/// - ns2__APRefundReply* soap_new_req_ns2__APRefundReply(soap*, ...) allocate, set required members
/// - ns2__APRefundReply* soap_new_set_ns2__APRefundReply(soap*, ...) allocate, set all public members
/// - ns2__APRefundReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APRefundReply(soap*, ns2__APRefundReply*) deserialize from a stream
/// - int soap_write_ns2__APRefundReply(soap*, ns2__APRefundReply*) serialize to a stream
/// - ns2__APRefundReply* ns2__APRefundReply::soap_dup(soap*) returns deep copy of ns2__APRefundReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APRefundReply::soap_del() deep deletes ns2__APRefundReply data members, use only after ns2__APRefundReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APRefundReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "transactionID" of XSD type xs:string.
    wchar_t*                             transactionID                  0;	///< Optional element.
/// Element "status" of XSD type xs:string.
    wchar_t*                             status                         0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "dateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       dateTime                       0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "returnRef" of XSD type xs:string.
    wchar_t*                             returnRef                      0;	///< Optional element.
/// Element "providerResponse" of XSD type xs:string.
    wchar_t*                             providerResponse               0;	///< Optional element.
/// Element "processorTransactionID" of XSD type xs:string.
    wchar_t*                             processorTransactionID         0;	///< Optional element.
/// Element "paymentStatus" of XSD type xs:string.
    wchar_t*                             paymentStatus                  0;	///< Optional element.
/// Element "responseCode" of XSD type xs:string.
    wchar_t*                             responseCode                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APSaleReply is a complexType.
///
/// class ns2__APSaleReply operations:
/// - ns2__APSaleReply* soap_new_ns2__APSaleReply(soap*) allocate
/// - ns2__APSaleReply* soap_new_ns2__APSaleReply(soap*, int num) allocate array
/// - ns2__APSaleReply* soap_new_req_ns2__APSaleReply(soap*, ...) allocate, set required members
/// - ns2__APSaleReply* soap_new_set_ns2__APSaleReply(soap*, ...) allocate, set all public members
/// - ns2__APSaleReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APSaleReply(soap*, ns2__APSaleReply*) deserialize from a stream
/// - int soap_write_ns2__APSaleReply(soap*, ns2__APSaleReply*) serialize to a stream
/// - ns2__APSaleReply* ns2__APSaleReply::soap_dup(soap*) returns deep copy of ns2__APSaleReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APSaleReply::soap_del() deep deletes ns2__APSaleReply data members, use only after ns2__APSaleReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APSaleReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "paymentStatus" of XSD type xs:string.
    wchar_t*                             paymentStatus                  0;	///< Optional element.
/// Element "responseCode" of XSD type xs:string.
    wchar_t*                             responseCode                   0;	///< Optional element.
/// Element "merchantURL" of XSD type xs:string.
    wchar_t*                             merchantURL                    0;	///< Optional element.
/// Element "processorTransactionID" of XSD type xs:string.
    wchar_t*                             processorTransactionID         0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APCheckOutDetailsReply is a complexType.
///
/// class ns2__APCheckOutDetailsReply operations:
/// - ns2__APCheckOutDetailsReply* soap_new_ns2__APCheckOutDetailsReply(soap*) allocate
/// - ns2__APCheckOutDetailsReply* soap_new_ns2__APCheckOutDetailsReply(soap*, int num) allocate array
/// - ns2__APCheckOutDetailsReply* soap_new_req_ns2__APCheckOutDetailsReply(soap*, ...) allocate, set required members
/// - ns2__APCheckOutDetailsReply* soap_new_set_ns2__APCheckOutDetailsReply(soap*, ...) allocate, set all public members
/// - ns2__APCheckOutDetailsReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APCheckOutDetailsReply(soap*, ns2__APCheckOutDetailsReply*) deserialize from a stream
/// - int soap_write_ns2__APCheckOutDetailsReply(soap*, ns2__APCheckOutDetailsReply*) serialize to a stream
/// - ns2__APCheckOutDetailsReply* ns2__APCheckOutDetailsReply::soap_dup(soap*) returns deep copy of ns2__APCheckOutDetailsReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APCheckOutDetailsReply::soap_del() deep deletes ns2__APCheckOutDetailsReply data members, use only after ns2__APCheckOutDetailsReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APCheckOutDetailsReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "status" of XSD type xs:string.
    wchar_t*                             status                         0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "dateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       dateTime                       0;	///< Optional element.
/// Element "providerResponse" of XSD type xs:string.
    wchar_t*                             providerResponse               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APTransactionDetailsReply is a complexType.
///
/// class ns2__APTransactionDetailsReply operations:
/// - ns2__APTransactionDetailsReply* soap_new_ns2__APTransactionDetailsReply(soap*) allocate
/// - ns2__APTransactionDetailsReply* soap_new_ns2__APTransactionDetailsReply(soap*, int num) allocate array
/// - ns2__APTransactionDetailsReply* soap_new_req_ns2__APTransactionDetailsReply(soap*, ...) allocate, set required members
/// - ns2__APTransactionDetailsReply* soap_new_set_ns2__APTransactionDetailsReply(soap*, ...) allocate, set all public members
/// - ns2__APTransactionDetailsReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APTransactionDetailsReply(soap*, ns2__APTransactionDetailsReply*) deserialize from a stream
/// - int soap_write_ns2__APTransactionDetailsReply(soap*, ns2__APTransactionDetailsReply*) serialize to a stream
/// - ns2__APTransactionDetailsReply* ns2__APTransactionDetailsReply::soap_dup(soap*) returns deep copy of ns2__APTransactionDetailsReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APTransactionDetailsReply::soap_del() deep deletes ns2__APTransactionDetailsReply data members, use only after ns2__APTransactionDetailsReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APTransactionDetailsReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "transactionID" of XSD type xs:string.
    wchar_t*                             transactionID                  0;	///< Optional element.
/// Element "status" of XSD type xs:string.
    wchar_t*                             status                         0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "dateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       dateTime                       0;	///< Optional element.
/// Element "reconciliationID" of XSD type xs:string.
    wchar_t*                             reconciliationID               0;	///< Optional element.
/// Element "providerResponse" of XSD type xs:string.
    wchar_t*                             providerResponse               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":APConfirmPurchaseReply is a complexType.
///
/// class ns2__APConfirmPurchaseReply operations:
/// - ns2__APConfirmPurchaseReply* soap_new_ns2__APConfirmPurchaseReply(soap*) allocate
/// - ns2__APConfirmPurchaseReply* soap_new_ns2__APConfirmPurchaseReply(soap*, int num) allocate array
/// - ns2__APConfirmPurchaseReply* soap_new_req_ns2__APConfirmPurchaseReply(soap*, ...) allocate, set required members
/// - ns2__APConfirmPurchaseReply* soap_new_set_ns2__APConfirmPurchaseReply(soap*, ...) allocate, set all public members
/// - ns2__APConfirmPurchaseReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__APConfirmPurchaseReply(soap*, ns2__APConfirmPurchaseReply*) deserialize from a stream
/// - int soap_write_ns2__APConfirmPurchaseReply(soap*, ns2__APConfirmPurchaseReply*) serialize to a stream
/// - ns2__APConfirmPurchaseReply* ns2__APConfirmPurchaseReply::soap_dup(soap*) returns deep copy of ns2__APConfirmPurchaseReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__APConfirmPurchaseReply::soap_del() deep deletes ns2__APConfirmPurchaseReply data members, use only after ns2__APConfirmPurchaseReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__APConfirmPurchaseReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "status" of XSD type xs:string.
    wchar_t*                             status                         0;	///< Optional element.
/// Element "processorResponse" of XSD type xs:string.
    wchar_t*                             processorResponse              0;	///< Optional element.
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "dateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       dateTime                       0;	///< Optional element.
/// Element "providerResponse" of XSD type xs:string.
    wchar_t*                             providerResponse               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":ReplyMessage is a complexType.
///
/// class ns2__ReplyMessage operations:
/// - ns2__ReplyMessage* soap_new_ns2__ReplyMessage(soap*) allocate
/// - ns2__ReplyMessage* soap_new_ns2__ReplyMessage(soap*, int num) allocate array
/// - ns2__ReplyMessage* soap_new_req_ns2__ReplyMessage(soap*, ...) allocate, set required members
/// - ns2__ReplyMessage* soap_new_set_ns2__ReplyMessage(soap*, ...) allocate, set all public members
/// - ns2__ReplyMessage::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ReplyMessage(soap*, ns2__ReplyMessage*) deserialize from a stream
/// - int soap_write_ns2__ReplyMessage(soap*, ns2__ReplyMessage*) serialize to a stream
/// - ns2__ReplyMessage* ns2__ReplyMessage::soap_dup(soap*) returns deep copy of ns2__ReplyMessage, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ReplyMessage::soap_del() deep deletes ns2__ReplyMessage data members, use only after ns2__ReplyMessage::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ReplyMessage
{ public:
/// Element "merchantReferenceCode" of XSD type xs:string.
    wchar_t*                             merchantReferenceCode          0;	///< Optional element.
/// Element "requestID" of XSD type xs:string.
    wchar_t*                             requestID                      1;	///< Required element.
/// Element "decision" of XSD type xs:string.
    wchar_t*                             decision                       1;	///< Required element.
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Vector of wchar_t* of length 0..1000.
    std::vector<wchar_t*               > missingField                   0:1000;
/// Vector of wchar_t* of length 0..1000.
    std::vector<wchar_t*               > invalidField                   0:1000;
/// Element "requestToken" of XSD type xs:string.
    wchar_t*                             requestToken                   1;	///< Required element.
/// Element "purchaseTotals" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PurchaseTotals.
    ns2__PurchaseTotals*                 purchaseTotals                 0;	///< Optional element.
/// Vector of ns2__DeniedPartiesMatch* of length 0..100.
    std::vector<ns2__DeniedPartiesMatch*> deniedPartiesMatch             0:100;
/// Element "ccAuthReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCAuthReply.
    ns2__CCAuthReply*                    ccAuthReply                    0;	///< Optional element.
/// Element "octReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":OCTReply.
    ns2__OCTReply*                       octReply                       0;	///< Optional element.
/// Element "verificationReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":VerificationReply.
    ns2__VerificationReply*              verificationReply              0;	///< Optional element.
/// Element "ccSaleReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCSaleReply.
    ns2__CCSaleReply*                    ccSaleReply                    0;	///< Optional element.
/// Element "ccSaleCreditReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCSaleCreditReply.
    ns2__CCSaleCreditReply*              ccSaleCreditReply              0;	///< Optional element.
/// Element "ccSaleReversalReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCSaleReversalReply.
    ns2__CCSaleReversalReply*            ccSaleReversalReply            0;	///< Optional element.
/// Element "ccIncrementalAuthReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCIncrementalAuthReply.
    ns2__CCIncrementalAuthReply*         ccIncrementalAuthReply         0;	///< Optional element.
/// Element "serviceFeeCalculateReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ServiceFeeCalculateReply.
    ns2__ServiceFeeCalculateReply*       serviceFeeCalculateReply       0;	///< Optional element.
/// Element "ccCaptureReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCCaptureReply.
    ns2__CCCaptureReply*                 ccCaptureReply                 0;	///< Optional element.
/// Element "ccCreditReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCCreditReply.
    ns2__CCCreditReply*                  ccCreditReply                  0;	///< Optional element.
/// Element "ccAuthReversalReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCAuthReversalReply.
    ns2__CCAuthReversalReply*            ccAuthReversalReply            0;	///< Optional element.
/// Element "ccAutoAuthReversalReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCAutoAuthReversalReply.
    ns2__CCAutoAuthReversalReply*        ccAutoAuthReversalReply        0;	///< Optional element.
/// Element "ccDCCReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCDCCReply.
    ns2__CCDCCReply*                     ccDCCReply                     0;	///< Optional element.
/// Element "ccDCCUpdateReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CCDCCUpdateReply.
    ns2__CCDCCUpdateReply*               ccDCCUpdateReply               0;	///< Optional element.
/// Element "ecDebitReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ECDebitReply.
    ns2__ECDebitReply*                   ecDebitReply                   0;	///< Optional element.
/// Element "ecCreditReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ECCreditReply.
    ns2__ECCreditReply*                  ecCreditReply                  0;	///< Optional element.
/// Element "ecAuthenticateReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ECAuthenticateReply.
    ns2__ECAuthenticateReply*            ecAuthenticateReply            0;	///< Optional element.
/// Element "payerAuthEnrollReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayerAuthEnrollReply.
    ns2__PayerAuthEnrollReply*           payerAuthEnrollReply           0;	///< Optional element.
/// Element "payerAuthValidateReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayerAuthValidateReply.
    ns2__PayerAuthValidateReply*         payerAuthValidateReply         0;	///< Optional element.
/// Element "taxReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":TaxReply.
    ns2__TaxReply*                       taxReply                       0;	///< Optional element.
/// Element "encryptedPayment" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":EncryptedPayment.
    ns2__EncryptedPayment*               encryptedPayment               0;	///< Optional element.
/// Element "encryptPaymentDataReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":EncryptPaymentDataReply.
    ns2__EncryptPaymentDataReply*        encryptPaymentDataReply        0;	///< Optional element.
/// Element "dmeReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":DMEReply.
    ns2__DMEReply*                       dmeReply                       0;	///< Optional element.
/// Element "afsReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":AFSReply.
    ns2__AFSReply*                       afsReply                       0;	///< Optional element.
/// Element "davReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":DAVReply.
    ns2__DAVReply*                       davReply                       0;	///< Optional element.
/// Element "exportReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ExportReply.
    ns2__ExportReply*                    exportReply                    0;	///< Optional element.
/// Element "fxRatesReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":FXRatesReply.
    ns2__FXRatesReply*                   fxRatesReply                   0;	///< Optional element.
/// Element "bankTransferReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":BankTransferReply.
    ns2__BankTransferReply*              bankTransferReply              0;	///< Optional element.
/// Element "bankTransferRefundReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":BankTransferRefundReply.
    ns2__BankTransferRefundReply*        bankTransferRefundReply        0;	///< Optional element.
/// Element "bankTransferRealTimeReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":BankTransferRealTimeReply.
    ns2__BankTransferRealTimeReply*      bankTransferRealTimeReply      0;	///< Optional element.
/// Element "directDebitMandateReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":DirectDebitMandateReply.
    ns2__DirectDebitMandateReply*        directDebitMandateReply        0;	///< Optional element.
/// Element "directDebitReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":DirectDebitReply.
    ns2__DirectDebitReply*               directDebitReply               0;	///< Optional element.
/// Element "directDebitValidateReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":DirectDebitValidateReply.
    ns2__DirectDebitValidateReply*       directDebitValidateReply       0;	///< Optional element.
/// Element "directDebitRefundReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":DirectDebitRefundReply.
    ns2__DirectDebitRefundReply*         directDebitRefundReply         0;	///< Optional element.
/// Element "paySubscriptionCreateReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionCreateReply.
    ns2__PaySubscriptionCreateReply*     paySubscriptionCreateReply     0;	///< Optional element.
/// Element "paySubscriptionUpdateReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionUpdateReply.
    ns2__PaySubscriptionUpdateReply*     paySubscriptionUpdateReply     0;	///< Optional element.
/// Element "paySubscriptionEventUpdateReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionEventUpdateReply.
    ns2__PaySubscriptionEventUpdateReply*  paySubscriptionEventUpdateReply 0;	///< Optional element.
/// Element "paySubscriptionRetrieveReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionRetrieveReply.
    ns2__PaySubscriptionRetrieveReply*   paySubscriptionRetrieveReply   0;	///< Optional element.
/// Element "paySubscriptionDeleteReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PaySubscriptionDeleteReply.
    ns2__PaySubscriptionDeleteReply*     paySubscriptionDeleteReply     0;	///< Optional element.
/// Element "payPalPaymentReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalPaymentReply.
    ns2__PayPalPaymentReply*             payPalPaymentReply             0;	///< Optional element.
/// Element "payPalCreditReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalCreditReply.
    ns2__PayPalCreditReply*              payPalCreditReply              0;	///< Optional element.
/// Element "voidReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":VoidReply.
    ns2__VoidReply*                      voidReply                      0;	///< Optional element.
/// Element "pinlessDebitReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PinlessDebitReply.
    ns2__PinlessDebitReply*              pinlessDebitReply              0;	///< Optional element.
/// Element "pinlessDebitValidateReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PinlessDebitValidateReply.
    ns2__PinlessDebitValidateReply*      pinlessDebitValidateReply      0;	///< Optional element.
/// Element "pinlessDebitReversalReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PinlessDebitReversalReply.
    ns2__PinlessDebitReversalReply*      pinlessDebitReversalReply      0;	///< Optional element.
/// Element "payPalButtonCreateReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalButtonCreateReply.
    ns2__PayPalButtonCreateReply*        payPalButtonCreateReply        0;	///< Optional element.
/// Element "payPalPreapprovedPaymentReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalPreapprovedPaymentReply.
    ns2__PayPalPreapprovedPaymentReply*  payPalPreapprovedPaymentReply  0;	///< Optional element.
/// Element "payPalPreapprovedUpdateReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalPreapprovedUpdateReply.
    ns2__PayPalPreapprovedUpdateReply*   payPalPreapprovedUpdateReply   0;	///< Optional element.
/// Element "riskUpdateReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":RiskUpdateReply.
    ns2__RiskUpdateReply*                riskUpdateReply                0;	///< Optional element.
/// Element "fraudUpdateReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":FraudUpdateReply.
    ns2__FraudUpdateReply*               fraudUpdateReply               0;	///< Optional element.
/// Element "caseManagementActionReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":CaseManagementActionReply.
    ns2__CaseManagementActionReply*      caseManagementActionReply      0;	///< Optional element.
/// Element "decisionReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":DecisionReply.
    ns2__DecisionReply*                  decisionReply                  0;	///< Optional element.
/// Element "payPalRefundReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalRefundReply.
    ns2__PayPalRefundReply*              payPalRefundReply              0;	///< Optional element.
/// Element "payPalAuthReversalReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalAuthReversalReply.
    ns2__PayPalAuthReversalReply*        payPalAuthReversalReply        0;	///< Optional element.
/// Element "payPalDoCaptureReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalDoCaptureReply.
    ns2__PayPalDoCaptureReply*           payPalDoCaptureReply           0;	///< Optional element.
/// Element "payPalEcDoPaymentReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalEcDoPaymentReply.
    ns2__PayPalEcDoPaymentReply*         payPalEcDoPaymentReply         0;	///< Optional element.
/// Element "payPalEcGetDetailsReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalEcGetDetailsReply.
    ns2__PayPalEcGetDetailsReply*        payPalEcGetDetailsReply        0;	///< Optional element.
/// Element "payPalEcSetReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalEcSetReply.
    ns2__PayPalEcSetReply*               payPalEcSetReply               0;	///< Optional element.
/// Element "payPalAuthorizationReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalAuthorizationReply.
    ns2__PayPalAuthorizationReply*       payPalAuthorizationReply       0;	///< Optional element.
/// Element "payPalEcOrderSetupReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalEcOrderSetupReply.
    ns2__PayPalEcOrderSetupReply*        payPalEcOrderSetupReply        0;	///< Optional element.
/// Element "payPalUpdateAgreementReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalUpdateAgreementReply.
    ns2__PayPalUpdateAgreementReply*     payPalUpdateAgreementReply     0;	///< Optional element.
/// Element "payPalCreateAgreementReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalCreateAgreementReply.
    ns2__PayPalCreateAgreementReply*     payPalCreateAgreementReply     0;	///< Optional element.
/// Element "payPalDoRefTransactionReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalDoRefTransactionReply.
    ns2__PayPalDoRefTransactionReply*    payPalDoRefTransactionReply    0;	///< Optional element.
/// Element "chinaPaymentReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ChinaPaymentReply.
    ns2__ChinaPaymentReply*              chinaPaymentReply              0;	///< Optional element.
/// Element "chinaRefundReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ChinaRefundReply.
    ns2__ChinaRefundReply*               chinaRefundReply               0;	///< Optional element.
/// Element "boletoPaymentReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":BoletoPaymentReply.
    ns2__BoletoPaymentReply*             boletoPaymentReply             0;	///< Optional element.
/// Element "pinDebitPurchaseReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PinDebitPurchaseReply.
    ns2__PinDebitPurchaseReply*          pinDebitPurchaseReply          0;	///< Optional element.
/// Element "pinDebitCreditReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PinDebitCreditReply.
    ns2__PinDebitCreditReply*            pinDebitCreditReply            0;	///< Optional element.
/// Element "pinDebitReversalReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PinDebitReversalReply.
    ns2__PinDebitReversalReply*          pinDebitReversalReply          0;	///< Optional element.
/// Element "apInitiateReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APInitiateReply.
    ns2__APInitiateReply*                apInitiateReply                0;	///< Optional element.
/// Element "apCheckStatusReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APCheckStatusReply.
    ns2__APCheckStatusReply*             apCheckStatusReply             0;	///< Optional element.
/// Element "receiptNumber" of XSD type xs:string.
    wchar_t*                             receiptNumber                  0;	///< Optional element.
/// Element "additionalData" of XSD type xs:string.
    wchar_t*                             additionalData                 0;	///< Optional element.
/// Element "solutionProviderTransactionID" of XSD type xs:string.
    wchar_t*                             solutionProviderTransactionID  0;	///< Optional element.
/// Element "apReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APReply.
    ns2__APReply*                        apReply                        0;	///< Optional element.
/// Element "shipTo" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ShipTo.
    ns2__ShipTo*                         shipTo                         0;	///< Optional element.
/// Element "billTo" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":BillTo.
    ns2__BillTo*                         billTo                         0;	///< Optional element.
/// Element "apAuthReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APAuthReply.
    ns2__APAuthReply*                    apAuthReply                    0;	///< Optional element.
/// Element "apAuthReversalReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APAuthReversalReply.
    ns2__APAuthReversalReply*            apAuthReversalReply            0;	///< Optional element.
/// Element "apCaptureReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APCaptureReply.
    ns2__APCaptureReply*                 apCaptureReply                 0;	///< Optional element.
/// Element "apOptionsReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APOptionsReply.
    ns2__APOptionsReply*                 apOptionsReply                 0;	///< Optional element.
/// Element "apRefundReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APRefundReply.
    ns2__APRefundReply*                  apRefundReply                  0;	///< Optional element.
/// Element "apSaleReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APSaleReply.
    ns2__APSaleReply*                    apSaleReply                    0;	///< Optional element.
/// Element "apCheckoutDetailsReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APCheckOutDetailsReply.
    ns2__APCheckOutDetailsReply*         apCheckoutDetailsReply         0;	///< Optional element.
/// Element "apTransactionDetailsReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APTransactionDetailsReply.
    ns2__APTransactionDetailsReply*      apTransactionDetailsReply      0;	///< Optional element.
/// Element "apConfirmPurchaseReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":APConfirmPurchaseReply.
    ns2__APConfirmPurchaseReply*         apConfirmPurchaseReply         0;	///< Optional element.
/// Element "promotion" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":Promotion.
    ns2__Promotion*                      promotion                      0;	///< Optional element.
/// Vector of ns2__PromotionGroupReply* of length 0..100.
    std::vector<ns2__PromotionGroupReply*> promotionGroup                 0:100;
/// Element "payPalGetTxnDetailsReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalGetTxnDetailsReply.
    ns2__PayPalGetTxnDetailsReply*       payPalGetTxnDetailsReply       0;	///< Optional element.
/// Element "payPalTransactionSearchReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PayPalTransactionSearchReply.
    ns2__PayPalTransactionSearchReply*   payPalTransactionSearchReply   0;	///< Optional element.
/// Element "emvReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":EmvReply.
    ns2__EmvReply*                       emvReply                       0;	///< Optional element.
/// Element "originalTransaction" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":OriginalTransaction.
    ns2__OriginalTransaction*            originalTransaction            0;	///< Optional element.
/// Element "hostedDataCreateReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":HostedDataCreateReply.
    ns2__HostedDataCreateReply*          hostedDataCreateReply          0;	///< Optional element.
/// Element "hostedDataRetrieveReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":HostedDataRetrieveReply.
    ns2__HostedDataRetrieveReply*        hostedDataRetrieveReply        0;	///< Optional element.
/// Element "salesSlipNumber" of XSD type xs:string.
    wchar_t*                             salesSlipNumber                0;	///< Optional element.
/// Element "additionalProcessorResponse" of XSD type xs:string.
    wchar_t*                             additionalProcessorResponse    0;	///< Optional element.
/// Element "jpo" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":JPO.
    ns2__JPO*                            jpo                            0;	///< Optional element.
/// Element "card" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":Card.
    ns2__Card*                           card                           0;	///< Optional element.
/// Element "paymentNetworkToken" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":PaymentNetworkToken.
    ns2__PaymentNetworkToken*            paymentNetworkToken            0;	///< Optional element.
/// Element "vcReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":VCReply.
    ns2__VCReply*                        vcReply                        0;	///< Optional element.
/// Element "decryptVisaCheckoutDataReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":DecryptVisaCheckoutDataReply.
    ns2__DecryptVisaCheckoutDataReply*   decryptVisaCheckoutDataReply   0;	///< Optional element.
/// Element "binLookupReply" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":BinLookupReply.
    ns2__BinLookupReply*                 binLookupReply                 0;	///< Optional element.
/// Element "issuerMessage" of XSD type xs:string.
    wchar_t*                             issuerMessage                  0;	///< Optional element.
/// Element "token" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":Token.
    ns2__Token*                          token                          0;	///< Optional element.
/// Element "issuer" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":issuer.
    ns2__issuer*                         issuer                         0;	///< Optional element.
/// Element "recipient" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":Recipient.
    ns2__Recipient*                      recipient                      0;	///< Optional element.
/// Element "reserved" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ReplyReserved.
    ns2__ReplyReserved*                  reserved                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":FaultDetails is a complexType.
///
/// class ns2__FaultDetails operations:
/// - ns2__FaultDetails* soap_new_ns2__FaultDetails(soap*) allocate
/// - ns2__FaultDetails* soap_new_ns2__FaultDetails(soap*, int num) allocate array
/// - ns2__FaultDetails* soap_new_req_ns2__FaultDetails(soap*, ...) allocate, set required members
/// - ns2__FaultDetails* soap_new_set_ns2__FaultDetails(soap*, ...) allocate, set all public members
/// - ns2__FaultDetails::soap_default(soap*) reset members to default
/// - int soap_read_ns2__FaultDetails(soap*, ns2__FaultDetails*) deserialize from a stream
/// - int soap_write_ns2__FaultDetails(soap*, ns2__FaultDetails*) serialize to a stream
/// - ns2__FaultDetails* ns2__FaultDetails::soap_dup(soap*) returns deep copy of ns2__FaultDetails, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FaultDetails::soap_del() deep deletes ns2__FaultDetails data members, use only after ns2__FaultDetails::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FaultDetails
{ public:
/// Element "requestID" of XSD type xs:string.
    wchar_t*                             requestID                      1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":AirlineData is a complexType.
///
/// class ns2__AirlineData operations:
/// - ns2__AirlineData* soap_new_ns2__AirlineData(soap*) allocate
/// - ns2__AirlineData* soap_new_ns2__AirlineData(soap*, int num) allocate array
/// - ns2__AirlineData* soap_new_req_ns2__AirlineData(soap*, ...) allocate, set required members
/// - ns2__AirlineData* soap_new_set_ns2__AirlineData(soap*, ...) allocate, set all public members
/// - ns2__AirlineData::soap_default(soap*) reset members to default
/// - int soap_read_ns2__AirlineData(soap*, ns2__AirlineData*) deserialize from a stream
/// - int soap_write_ns2__AirlineData(soap*, ns2__AirlineData*) serialize to a stream
/// - ns2__AirlineData* ns2__AirlineData::soap_dup(soap*) returns deep copy of ns2__AirlineData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AirlineData::soap_del() deep deletes ns2__AirlineData data members, use only after ns2__AirlineData::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AirlineData
{ public:
/// Element "agentCode" of XSD type xs:string.
    wchar_t*                             agentCode                      0;	///< Optional element.
/// Element "agentName" of XSD type xs:string.
    wchar_t*                             agentName                      0;	///< Optional element.
/// Element "ticketIssuerCity" of XSD type xs:string.
    wchar_t*                             ticketIssuerCity               0;	///< Optional element.
/// Element "ticketIssuerState" of XSD type xs:string.
    wchar_t*                             ticketIssuerState              0;	///< Optional element.
/// Element "ticketIssuerPostalCode" of XSD type xs:string.
    wchar_t*                             ticketIssuerPostalCode         0;	///< Optional element.
/// Element "ticketIssuerCountry" of XSD type xs:string.
    wchar_t*                             ticketIssuerCountry            0;	///< Optional element.
/// Element "ticketIssuerAddress" of XSD type xs:string.
    wchar_t*                             ticketIssuerAddress            0;	///< Optional element.
/// Element "ticketIssuerCode" of XSD type xs:string.
    wchar_t*                             ticketIssuerCode               0;	///< Optional element.
/// Element "ticketIssuerName" of XSD type xs:string.
    wchar_t*                             ticketIssuerName               0;	///< Optional element.
/// Element "ticketNumber" of XSD type xs:string.
    wchar_t*                             ticketNumber                   0;	///< Optional element.
/// Element "checkDigit" of XSD type xs:integer.
    xsd__integer*                        checkDigit                     0;	///< Optional element.
/// Element "restrictedTicketIndicator" of XSD type xs:integer.
    xsd__integer*                        restrictedTicketIndicator      0;	///< Optional element.
/// Element "transactionType" of XSD type xs:string.
    wchar_t*                             transactionType                0;	///< Optional element.
/// Element "extendedPaymentCode" of XSD type xs:string.
    wchar_t*                             extendedPaymentCode            0;	///< Optional element.
/// Element "carrierName" of XSD type xs:string.
    wchar_t*                             carrierName                    0;	///< Optional element.
/// Element "passengerName" of XSD type xs:string.
    wchar_t*                             passengerName                  0;	///< Optional element.
/// Element "customerCode" of XSD type xs:string.
    wchar_t*                             customerCode                   0;	///< Optional element.
/// Element "documentType" of XSD type xs:string.
    wchar_t*                             documentType                   0;	///< Optional element.
/// Element "documentNumber" of XSD type xs:string.
    wchar_t*                             documentNumber                 0;	///< Optional element.
/// Element "documentNumberOfParts" of XSD type xs:string.
    wchar_t*                             documentNumberOfParts          0;	///< Optional element.
/// Element "invoiceNumber" of XSD type xs:string.
    wchar_t*                             invoiceNumber                  0;	///< Optional element.
/// Element "invoiceDate" of XSD type xs:string.
    wchar_t*                             invoiceDate                    0;	///< Optional element.
/// Element "chargeDetails" of XSD type xs:string.
    wchar_t*                             chargeDetails                  0;	///< Optional element.
/// Element "bookingReference" of XSD type xs:string.
    wchar_t*                             bookingReference               0;	///< Optional element.
/// Element "totalFee" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         totalFee                       0;	///< Optional element.
/// Element "clearingSequence" of XSD type xs:string.
    wchar_t*                             clearingSequence               0;	///< Optional element.
/// Element "clearingCount" of XSD type xs:integer.
    xsd__integer*                        clearingCount                  0;	///< Optional element.
/// Element "totalClearingAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         totalClearingAmount            0;	///< Optional element.
/// Vector of ns2__Leg* of length 0..1000.
    std::vector<ns2__Leg*              > leg                            0:1000;
/// Element "numberOfPassengers" of XSD type xs:string.
    wchar_t*                             numberOfPassengers             0;	///< Optional element.
/// Element "reservationSystem" of XSD type xs:string.
    wchar_t*                             reservationSystem              0;	///< Optional element.
/// Element "processIdentifier" of XSD type xs:string.
    wchar_t*                             processIdentifier              0;	///< Optional element.
/// Element "iataNumericCode" of XSD type xs:string.
    wchar_t*                             iataNumericCode                0;	///< Optional element.
/// Element "ticketIssueDate" of XSD type xs:string.
    wchar_t*                             ticketIssueDate                0;	///< Optional element.
/// Element "electronicTicket" of XSD type xs:string.
    wchar_t*                             electronicTicket               0;	///< Optional element.
/// Element "originalTicketNumber" of XSD type xs:string.
    wchar_t*                             originalTicketNumber           0;	///< Optional element.
/// Element "purchaseType" of XSD type xs:string.
    wchar_t*                             purchaseType                   0;	///< Optional element.
/// Element "creditReasonIndicator" of XSD type xs:string.
    wchar_t*                             creditReasonIndicator          0;	///< Optional element.
/// Element "ticketUpdateIndicator" of XSD type xs:string.
    wchar_t*                             ticketUpdateIndicator          0;	///< Optional element.
/// Element "planNumber" of XSD type xs:string.
    wchar_t*                             planNumber                     0;	///< Optional element.
/// Element "arrivalDate" of XSD type xs:string.
    wchar_t*                             arrivalDate                    0;	///< Optional element.
/// Element "ticketRestrictionText" of XSD type xs:string.
    wchar_t*                             ticketRestrictionText          0;	///< Optional element.
/// Element "exchangeTicketAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         exchangeTicketAmount           0;	///< Optional element.
/// Element "exchangeTicketFee" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         exchangeTicketFee              0;	///< Optional element.
/// Element "journeyType" of XSD type xs:string.
    wchar_t*                             journeyType                    0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":Leg is a complexType.
///
/// class ns2__Leg operations:
/// - ns2__Leg* soap_new_ns2__Leg(soap*) allocate
/// - ns2__Leg* soap_new_ns2__Leg(soap*, int num) allocate array
/// - ns2__Leg* soap_new_req_ns2__Leg(soap*, ...) allocate, set required members
/// - ns2__Leg* soap_new_set_ns2__Leg(soap*, ...) allocate, set all public members
/// - ns2__Leg::soap_default(soap*) reset members to default
/// - int soap_read_ns2__Leg(soap*, ns2__Leg*) deserialize from a stream
/// - int soap_write_ns2__Leg(soap*, ns2__Leg*) serialize to a stream
/// - ns2__Leg* ns2__Leg::soap_dup(soap*) returns deep copy of ns2__Leg, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__Leg::soap_del() deep deletes ns2__Leg data members, use only after ns2__Leg::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__Leg
{ public:
/// Element "carrierCode" of XSD type xs:string.
    wchar_t*                             carrierCode                    0;	///< Optional element.
/// Element "flightNumber" of XSD type xs:string.
    wchar_t*                             flightNumber                   0;	///< Optional element.
/// Element "originatingAirportCode" of XSD type xs:string.
    wchar_t*                             originatingAirportCode         0;	///< Optional element.
/// Element "class" of XSD type xs:string.
    wchar_t*                             class_                         0;	///< Optional element.
/// Element "stopoverCode" of XSD type xs:string.
    wchar_t*                             stopoverCode                   0;	///< Optional element.
/// Element "departureDate" of XSD type xs:string.
    wchar_t*                             departureDate                  0;	///< Optional element.
/// Element "destination" of XSD type xs:string.
    wchar_t*                             destination                    0;	///< Optional element.
/// Element "fareBasis" of XSD type xs:string.
    wchar_t*                             fareBasis                      0;	///< Optional element.
/// Element "departTax" of XSD type xs:string.
    wchar_t*                             departTax                      0;	///< Optional element.
/// Element "conjunctionTicket" of XSD type xs:string.
    wchar_t*                             conjunctionTicket              0;	///< Optional element.
/// Element "exchangeTicket" of XSD type xs:string.
    wchar_t*                             exchangeTicket                 0;	///< Optional element.
/// Element "couponNumber" of XSD type xs:string.
    wchar_t*                             couponNumber                   0;	///< Optional element.
/// Element "departureTime" of XSD type xs:string.
    wchar_t*                             departureTime                  0;	///< Optional element.
/// Element "departureTimeSegment" of XSD type xs:string.
    wchar_t*                             departureTimeSegment           0;	///< Optional element.
/// Element "arrivalTime" of XSD type xs:string.
    wchar_t*                             arrivalTime                    0;	///< Optional element.
/// Element "arrivalTimeSegment" of XSD type xs:string.
    wchar_t*                             arrivalTimeSegment             0;	///< Optional element.
/// Element "endorsementsRestrictions" of XSD type xs:string.
    wchar_t*                             endorsementsRestrictions       0;	///< Optional element.
/// Element "fare" of XSD type xs:string.
    wchar_t*                             fare                           0;	///< Optional element.
/// Element "fee" of XSD type xs:string.
    wchar_t*                             fee                            0;	///< Optional element.
/// Element "tax" of XSD type xs:string.
    wchar_t*                             tax                            0;	///< Optional element.
/// Attribute "id" of XSD type xs:integer.
   @xsd__integer                         id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":AncillaryData is a complexType.
///
/// class ns2__AncillaryData operations:
/// - ns2__AncillaryData* soap_new_ns2__AncillaryData(soap*) allocate
/// - ns2__AncillaryData* soap_new_ns2__AncillaryData(soap*, int num) allocate array
/// - ns2__AncillaryData* soap_new_req_ns2__AncillaryData(soap*, ...) allocate, set required members
/// - ns2__AncillaryData* soap_new_set_ns2__AncillaryData(soap*, ...) allocate, set all public members
/// - ns2__AncillaryData::soap_default(soap*) reset members to default
/// - int soap_read_ns2__AncillaryData(soap*, ns2__AncillaryData*) deserialize from a stream
/// - int soap_write_ns2__AncillaryData(soap*, ns2__AncillaryData*) serialize to a stream
/// - ns2__AncillaryData* ns2__AncillaryData::soap_dup(soap*) returns deep copy of ns2__AncillaryData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AncillaryData::soap_del() deep deletes ns2__AncillaryData data members, use only after ns2__AncillaryData::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AncillaryData
{ public:
/// Element "ticketNumber" of XSD type xs:string.
    wchar_t*                             ticketNumber                   0;	///< Optional element.
/// Element "passengerName" of XSD type xs:string.
    wchar_t*                             passengerName                  0;	///< Optional element.
/// Element "connectedTicketNumber" of XSD type xs:string.
    wchar_t*                             connectedTicketNumber          0;	///< Optional element.
/// Element "creditReasonIndicator" of XSD type xs:string.
    wchar_t*                             creditReasonIndicator          0;	///< Optional element.
/// Vector of ns2__Service* of length 0..1000.
    std::vector<ns2__Service*          > service                        0:1000;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":Service is a complexType.
///
/// class ns2__Service operations:
/// - ns2__Service* soap_new_ns2__Service(soap*) allocate
/// - ns2__Service* soap_new_ns2__Service(soap*, int num) allocate array
/// - ns2__Service* soap_new_req_ns2__Service(soap*, ...) allocate, set required members
/// - ns2__Service* soap_new_set_ns2__Service(soap*, ...) allocate, set all public members
/// - ns2__Service::soap_default(soap*) reset members to default
/// - int soap_read_ns2__Service(soap*, ns2__Service*) deserialize from a stream
/// - int soap_write_ns2__Service(soap*, ns2__Service*) serialize to a stream
/// - ns2__Service* ns2__Service::soap_dup(soap*) returns deep copy of ns2__Service, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__Service::soap_del() deep deletes ns2__Service data members, use only after ns2__Service::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__Service
{ public:
/// Element "categoryCode" of XSD type xs:string.
    wchar_t*                             categoryCode                   0;	///< Optional element.
/// Element "subcategoryCode" of XSD type xs:string.
    wchar_t*                             subcategoryCode                0;	///< Optional element.
/// Attribute "id" of XSD type xs:integer.
   @xsd__integer                         id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":LodgingData is a complexType.
///
/// class ns2__LodgingData operations:
/// - ns2__LodgingData* soap_new_ns2__LodgingData(soap*) allocate
/// - ns2__LodgingData* soap_new_ns2__LodgingData(soap*, int num) allocate array
/// - ns2__LodgingData* soap_new_req_ns2__LodgingData(soap*, ...) allocate, set required members
/// - ns2__LodgingData* soap_new_set_ns2__LodgingData(soap*, ...) allocate, set all public members
/// - ns2__LodgingData::soap_default(soap*) reset members to default
/// - int soap_read_ns2__LodgingData(soap*, ns2__LodgingData*) deserialize from a stream
/// - int soap_write_ns2__LodgingData(soap*, ns2__LodgingData*) serialize to a stream
/// - ns2__LodgingData* ns2__LodgingData::soap_dup(soap*) returns deep copy of ns2__LodgingData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__LodgingData::soap_del() deep deletes ns2__LodgingData data members, use only after ns2__LodgingData::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__LodgingData
{ public:
/// Element "checkInDate" of XSD type xs:string.
    wchar_t*                             checkInDate                    0;	///< Optional element.
/// Element "checkOutDate" of XSD type xs:string.
    wchar_t*                             checkOutDate                   0;	///< Optional element.
/// Element "dailyRoomRate1" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         dailyRoomRate1                 0;	///< Optional element.
/// Element "dailyRoomRate2" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         dailyRoomRate2                 0;	///< Optional element.
/// Element "dailyRoomRate3" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         dailyRoomRate3                 0;	///< Optional element.
/// Element "roomNights1" of XSD type xs:integer.
    xsd__integer*                        roomNights1                    0;	///< Optional element.
/// Element "roomNights2" of XSD type xs:integer.
    xsd__integer*                        roomNights2                    0;	///< Optional element.
/// Element "roomNights3" of XSD type xs:integer.
    xsd__integer*                        roomNights3                    0;	///< Optional element.
/// Element "guestSmokingPreference" of XSD type xs:string.
    wchar_t*                             guestSmokingPreference         0;	///< Optional element.
/// Element "numberOfRoomsBooked" of XSD type xs:integer.
    xsd__integer*                        numberOfRoomsBooked            0;	///< Optional element.
/// Element "numberOfGuests" of XSD type xs:integer.
    xsd__integer*                        numberOfGuests                 0;	///< Optional element.
/// Element "roomBedType" of XSD type xs:string.
    wchar_t*                             roomBedType                    0;	///< Optional element.
/// Element "roomTaxElements" of XSD type xs:string.
    wchar_t*                             roomTaxElements                0;	///< Optional element.
/// Element "roomRateType" of XSD type xs:string.
    wchar_t*                             roomRateType                   0;	///< Optional element.
/// Element "guestName" of XSD type xs:string.
    wchar_t*                             guestName                      0;	///< Optional element.
/// Element "customerServicePhoneNumber" of XSD type xs:string.
    wchar_t*                             customerServicePhoneNumber     0;	///< Optional element.
/// Element "corporateClientCode" of XSD type xs:string.
    wchar_t*                             corporateClientCode            0;	///< Optional element.
/// Element "promotionalCode" of XSD type xs:string.
    wchar_t*                             promotionalCode                0;	///< Optional element.
/// Element "additionalCoupon" of XSD type xs:string.
    wchar_t*                             additionalCoupon               0;	///< Optional element.
/// Element "roomLocation" of XSD type xs:string.
    wchar_t*                             roomLocation                   0;	///< Optional element.
/// Element "specialProgramCode" of XSD type xs:string.
    wchar_t*                             specialProgramCode             0;	///< Optional element.
/// Element "tax" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         tax                            0;	///< Optional element.
/// Element "prepaidCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         prepaidCost                    0;	///< Optional element.
/// Element "foodAndBeverageCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         foodAndBeverageCost            0;	///< Optional element.
/// Element "roomTax" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         roomTax                        0;	///< Optional element.
/// Element "adjustmentAmount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         adjustmentAmount               0;	///< Optional element.
/// Element "phoneCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         phoneCost                      0;	///< Optional element.
/// Element "restaurantCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         restaurantCost                 0;	///< Optional element.
/// Element "roomServiceCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         roomServiceCost                0;	///< Optional element.
/// Element "miniBarCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         miniBarCost                    0;	///< Optional element.
/// Element "laundryCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         laundryCost                    0;	///< Optional element.
/// Element "miscellaneousCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         miscellaneousCost              0;	///< Optional element.
/// Element "giftShopCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         giftShopCost                   0;	///< Optional element.
/// Element "movieCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         movieCost                      0;	///< Optional element.
/// Element "healthClubCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         healthClubCost                 0;	///< Optional element.
/// Element "valetParkingCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         valetParkingCost               0;	///< Optional element.
/// Element "cashDisbursementCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         cashDisbursementCost           0;	///< Optional element.
/// Element "nonRoomCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         nonRoomCost                    0;	///< Optional element.
/// Element "businessCenterCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         businessCenterCost             0;	///< Optional element.
/// Element "loungeBarCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         loungeBarCost                  0;	///< Optional element.
/// Element "transportationCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         transportationCost             0;	///< Optional element.
/// Element "gratuityCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         gratuityCost                   0;	///< Optional element.
/// Element "conferenceRoomCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         conferenceRoomCost             0;	///< Optional element.
/// Element "audioVisualCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         audioVisualCost                0;	///< Optional element.
/// Element "banquetCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         banquetCost                    0;	///< Optional element.
/// Element "internetAccessCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         internetAccessCost             0;	///< Optional element.
/// Element "earlyCheckOutCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         earlyCheckOutCost              0;	///< Optional element.
/// Element "nonRoomTax" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         nonRoomTax                     0;	///< Optional element.
/// Element "travelAgencyCode" of XSD type xs:string.
    wchar_t*                             travelAgencyCode               0;	///< Optional element.
/// Element "travelAgencyName" of XSD type xs:string.
    wchar_t*                             travelAgencyName               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":Pos is a complexType.
///
/// class ns2__Pos operations:
/// - ns2__Pos* soap_new_ns2__Pos(soap*) allocate
/// - ns2__Pos* soap_new_ns2__Pos(soap*, int num) allocate array
/// - ns2__Pos* soap_new_req_ns2__Pos(soap*, ...) allocate, set required members
/// - ns2__Pos* soap_new_set_ns2__Pos(soap*, ...) allocate, set all public members
/// - ns2__Pos::soap_default(soap*) reset members to default
/// - int soap_read_ns2__Pos(soap*, ns2__Pos*) deserialize from a stream
/// - int soap_write_ns2__Pos(soap*, ns2__Pos*) serialize to a stream
/// - ns2__Pos* ns2__Pos::soap_dup(soap*) returns deep copy of ns2__Pos, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__Pos::soap_del() deep deletes ns2__Pos data members, use only after ns2__Pos::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__Pos
{ public:
/// Element "entryMode" of XSD type xs:string.
    wchar_t*                             entryMode                      0;	///< Optional element.
/// Element "cardPresent" of XSD type xs:string.
    wchar_t*                             cardPresent                    0;	///< Optional element.
/// Element "terminalCapability" of XSD type xs:string.
    wchar_t*                             terminalCapability             0;	///< Optional element.
/// Element "trackData" of XSD type xs:string.
    wchar_t*                             trackData                      0;	///< Optional element.
/// Element "terminalID" of XSD type xs:string.
    wchar_t*                             terminalID                     0;	///< Optional element.
/// Element "terminalType" of XSD type xs:string.
    wchar_t*                             terminalType                   0;	///< Optional element.
/// Element "terminalLocation" of XSD type xs:string.
    wchar_t*                             terminalLocation               0;	///< Optional element.
/// Element "transactionSecurity" of XSD type xs:string.
    wchar_t*                             transactionSecurity            0;	///< Optional element.
/// Element "catLevel" of XSD type xs:string.
    wchar_t*                             catLevel                       0;	///< Optional element.
/// Element "conditionCode" of XSD type xs:string.
    wchar_t*                             conditionCode                  0;	///< Optional element.
/// Element "environment" of XSD type xs:string.
    wchar_t*                             environment                    0;	///< Optional element.
/// Element "paymentData" of XSD type xs:string.
    wchar_t*                             paymentData                    0;	///< Optional element.
/// Element "deviceReaderData" of XSD type xs:string.
    wchar_t*                             deviceReaderData               0;	///< Optional element.
/// Element "encryptionAlgorithm" of XSD type xs:string.
    wchar_t*                             encryptionAlgorithm            0;	///< Optional element.
/// Element "encodingMethod" of XSD type xs:string.
    wchar_t*                             encodingMethod                 0;	///< Optional element.
/// Element "deviceID" of XSD type xs:string.
    wchar_t*                             deviceID                       0;	///< Optional element.
/// Element "serviceCode" of XSD type xs:string.
    wchar_t*                             serviceCode                    0;	///< Optional element.
/// Element "terminalIDAlternate" of XSD type xs:string.
    wchar_t*                             terminalIDAlternate            0;	///< Optional element.
/// Element "terminalCompliance" of XSD type xs:integer.
    xsd__integer*                        terminalCompliance             0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":EncryptedPayment is a complexType.
///
/// class ns2__EncryptedPayment operations:
/// - ns2__EncryptedPayment* soap_new_ns2__EncryptedPayment(soap*) allocate
/// - ns2__EncryptedPayment* soap_new_ns2__EncryptedPayment(soap*, int num) allocate array
/// - ns2__EncryptedPayment* soap_new_req_ns2__EncryptedPayment(soap*, ...) allocate, set required members
/// - ns2__EncryptedPayment* soap_new_set_ns2__EncryptedPayment(soap*, ...) allocate, set all public members
/// - ns2__EncryptedPayment::soap_default(soap*) reset members to default
/// - int soap_read_ns2__EncryptedPayment(soap*, ns2__EncryptedPayment*) deserialize from a stream
/// - int soap_write_ns2__EncryptedPayment(soap*, ns2__EncryptedPayment*) serialize to a stream
/// - ns2__EncryptedPayment* ns2__EncryptedPayment::soap_dup(soap*) returns deep copy of ns2__EncryptedPayment, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EncryptedPayment::soap_del() deep deletes ns2__EncryptedPayment data members, use only after ns2__EncryptedPayment::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EncryptedPayment
{ public:
/// Element "descriptor" of XSD type xs:string.
    wchar_t*                             descriptor                     0;	///< Optional element.
/// Element "data" of XSD type xs:string.
    wchar_t*                             data                           0;	///< Optional element.
/// Element "encoding" of XSD type xs:string.
    wchar_t*                             encoding                       0;	///< Optional element.
/// Element "wrappedKey" of XSD type xs:string.
    wchar_t*                             wrappedKey                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":Installment is a complexType.
///
/// class ns2__Installment operations:
/// - ns2__Installment* soap_new_ns2__Installment(soap*) allocate
/// - ns2__Installment* soap_new_ns2__Installment(soap*, int num) allocate array
/// - ns2__Installment* soap_new_req_ns2__Installment(soap*, ...) allocate, set required members
/// - ns2__Installment* soap_new_set_ns2__Installment(soap*, ...) allocate, set all public members
/// - ns2__Installment::soap_default(soap*) reset members to default
/// - int soap_read_ns2__Installment(soap*, ns2__Installment*) deserialize from a stream
/// - int soap_write_ns2__Installment(soap*, ns2__Installment*) serialize to a stream
/// - ns2__Installment* ns2__Installment::soap_dup(soap*) returns deep copy of ns2__Installment, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__Installment::soap_del() deep deletes ns2__Installment data members, use only after ns2__Installment::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__Installment
{ public:
/// Element "sequence" of XSD type xs:string.
    wchar_t*                             sequence                       0;	///< Optional element.
/// Element "totalCount" of XSD type xs:string.
    wchar_t*                             totalCount                     0;	///< Optional element.
/// Element "totalAmount" of XSD type xs:string.
    wchar_t*                             totalAmount                    0;	///< Optional element.
/// Element "frequency" of XSD type xs:string.
    wchar_t*                             frequency                      0;	///< Optional element.
/// Element "amount" of XSD type xs:string.
    wchar_t*                             amount                         0;	///< Optional element.
/// Element "planType" of XSD type xs:string.
    wchar_t*                             planType                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":MerchantDefinedData is a complexType.
///
/// class ns2__MerchantDefinedData operations:
/// - ns2__MerchantDefinedData* soap_new_ns2__MerchantDefinedData(soap*) allocate
/// - ns2__MerchantDefinedData* soap_new_ns2__MerchantDefinedData(soap*, int num) allocate array
/// - ns2__MerchantDefinedData* soap_new_req_ns2__MerchantDefinedData(soap*, ...) allocate, set required members
/// - ns2__MerchantDefinedData* soap_new_set_ns2__MerchantDefinedData(soap*, ...) allocate, set all public members
/// - ns2__MerchantDefinedData::soap_default(soap*) reset members to default
/// - int soap_read_ns2__MerchantDefinedData(soap*, ns2__MerchantDefinedData*) deserialize from a stream
/// - int soap_write_ns2__MerchantDefinedData(soap*, ns2__MerchantDefinedData*) serialize to a stream
/// - ns2__MerchantDefinedData* ns2__MerchantDefinedData::soap_dup(soap*) returns deep copy of ns2__MerchantDefinedData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__MerchantDefinedData::soap_del() deep deletes ns2__MerchantDefinedData data members, use only after ns2__MerchantDefinedData::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__MerchantDefinedData
{ public:
/// Element "field1" of XSD type xs:string.
    wchar_t*                             field1                         0;	///< Optional element.
/// Element "field2" of XSD type xs:string.
    wchar_t*                             field2                         0;	///< Optional element.
/// Element "field3" of XSD type xs:string.
    wchar_t*                             field3                         0;	///< Optional element.
/// Element "field4" of XSD type xs:string.
    wchar_t*                             field4                         0;	///< Optional element.
/// Element "field5" of XSD type xs:string.
    wchar_t*                             field5                         0;	///< Optional element.
/// Element "field6" of XSD type xs:string.
    wchar_t*                             field6                         0;	///< Optional element.
/// Element "field7" of XSD type xs:string.
    wchar_t*                             field7                         0;	///< Optional element.
/// Element "field8" of XSD type xs:string.
    wchar_t*                             field8                         0;	///< Optional element.
/// Element "field9" of XSD type xs:string.
    wchar_t*                             field9                         0;	///< Optional element.
/// Element "field10" of XSD type xs:string.
    wchar_t*                             field10                        0;	///< Optional element.
/// Element "field11" of XSD type xs:string.
    wchar_t*                             field11                        0;	///< Optional element.
/// Element "field12" of XSD type xs:string.
    wchar_t*                             field12                        0;	///< Optional element.
/// Element "field13" of XSD type xs:string.
    wchar_t*                             field13                        0;	///< Optional element.
/// Element "field14" of XSD type xs:string.
    wchar_t*                             field14                        0;	///< Optional element.
/// Element "field15" of XSD type xs:string.
    wchar_t*                             field15                        0;	///< Optional element.
/// Element "field16" of XSD type xs:string.
    wchar_t*                             field16                        0;	///< Optional element.
/// Element "field17" of XSD type xs:string.
    wchar_t*                             field17                        0;	///< Optional element.
/// Element "field18" of XSD type xs:string.
    wchar_t*                             field18                        0;	///< Optional element.
/// Element "field19" of XSD type xs:string.
    wchar_t*                             field19                        0;	///< Optional element.
/// Element "field20" of XSD type xs:string.
    wchar_t*                             field20                        0;	///< Optional element.
/// Vector of ns2__MDDField* of length 0..100.
    std::vector<ns2__MDDField*         > mddField                       0:100;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":MerchantSecureData is a complexType.
///
/// class ns2__MerchantSecureData operations:
/// - ns2__MerchantSecureData* soap_new_ns2__MerchantSecureData(soap*) allocate
/// - ns2__MerchantSecureData* soap_new_ns2__MerchantSecureData(soap*, int num) allocate array
/// - ns2__MerchantSecureData* soap_new_req_ns2__MerchantSecureData(soap*, ...) allocate, set required members
/// - ns2__MerchantSecureData* soap_new_set_ns2__MerchantSecureData(soap*, ...) allocate, set all public members
/// - ns2__MerchantSecureData::soap_default(soap*) reset members to default
/// - int soap_read_ns2__MerchantSecureData(soap*, ns2__MerchantSecureData*) deserialize from a stream
/// - int soap_write_ns2__MerchantSecureData(soap*, ns2__MerchantSecureData*) serialize to a stream
/// - ns2__MerchantSecureData* ns2__MerchantSecureData::soap_dup(soap*) returns deep copy of ns2__MerchantSecureData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__MerchantSecureData::soap_del() deep deletes ns2__MerchantSecureData data members, use only after ns2__MerchantSecureData::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__MerchantSecureData
{ public:
/// Element "field1" of XSD type xs:string.
    wchar_t*                             field1                         0;	///< Optional element.
/// Element "field2" of XSD type xs:string.
    wchar_t*                             field2                         0;	///< Optional element.
/// Element "field3" of XSD type xs:string.
    wchar_t*                             field3                         0;	///< Optional element.
/// Element "field4" of XSD type xs:string.
    wchar_t*                             field4                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":ReplyReserved is a complexType.
///
/// class ns2__ReplyReserved operations:
/// - ns2__ReplyReserved* soap_new_ns2__ReplyReserved(soap*) allocate
/// - ns2__ReplyReserved* soap_new_ns2__ReplyReserved(soap*, int num) allocate array
/// - ns2__ReplyReserved* soap_new_req_ns2__ReplyReserved(soap*, ...) allocate, set required members
/// - ns2__ReplyReserved* soap_new_set_ns2__ReplyReserved(soap*, ...) allocate, set all public members
/// - ns2__ReplyReserved::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ReplyReserved(soap*, ns2__ReplyReserved*) deserialize from a stream
/// - int soap_write_ns2__ReplyReserved(soap*, ns2__ReplyReserved*) serialize to a stream
/// - ns2__ReplyReserved* ns2__ReplyReserved::soap_dup(soap*) returns deep copy of ns2__ReplyReserved, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ReplyReserved::soap_del() deep deletes ns2__ReplyReserved data members, use only after ns2__ReplyReserved::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ReplyReserved
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="999">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..999.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":RequestReserved is a complexType.
///
/// class ns2__RequestReserved operations:
/// - ns2__RequestReserved* soap_new_ns2__RequestReserved(soap*) allocate
/// - ns2__RequestReserved* soap_new_ns2__RequestReserved(soap*, int num) allocate array
/// - ns2__RequestReserved* soap_new_req_ns2__RequestReserved(soap*, ...) allocate, set required members
/// - ns2__RequestReserved* soap_new_set_ns2__RequestReserved(soap*, ...) allocate, set all public members
/// - ns2__RequestReserved::soap_default(soap*) reset members to default
/// - int soap_read_ns2__RequestReserved(soap*, ns2__RequestReserved*) deserialize from a stream
/// - int soap_write_ns2__RequestReserved(soap*, ns2__RequestReserved*) serialize to a stream
/// - ns2__RequestReserved* ns2__RequestReserved::soap_dup(soap*) returns deep copy of ns2__RequestReserved, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__RequestReserved::soap_del() deep deletes ns2__RequestReserved data members, use only after ns2__RequestReserved::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__RequestReserved
{ public:
/// Element "name" of XSD type xs:string.
    wchar_t*                             name                           1;	///< Required element.
/// Element "value" of XSD type xs:string.
    wchar_t*                             value                          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalGetTxnDetailsReply is a complexType.
///
/// class ns2__PayPalGetTxnDetailsReply operations:
/// - ns2__PayPalGetTxnDetailsReply* soap_new_ns2__PayPalGetTxnDetailsReply(soap*) allocate
/// - ns2__PayPalGetTxnDetailsReply* soap_new_ns2__PayPalGetTxnDetailsReply(soap*, int num) allocate array
/// - ns2__PayPalGetTxnDetailsReply* soap_new_req_ns2__PayPalGetTxnDetailsReply(soap*, ...) allocate, set required members
/// - ns2__PayPalGetTxnDetailsReply* soap_new_set_ns2__PayPalGetTxnDetailsReply(soap*, ...) allocate, set all public members
/// - ns2__PayPalGetTxnDetailsReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalGetTxnDetailsReply(soap*, ns2__PayPalGetTxnDetailsReply*) deserialize from a stream
/// - int soap_write_ns2__PayPalGetTxnDetailsReply(soap*, ns2__PayPalGetTxnDetailsReply*) serialize to a stream
/// - ns2__PayPalGetTxnDetailsReply* ns2__PayPalGetTxnDetailsReply::soap_dup(soap*) returns deep copy of ns2__PayPalGetTxnDetailsReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalGetTxnDetailsReply::soap_del() deep deletes ns2__PayPalGetTxnDetailsReply data members, use only after ns2__PayPalGetTxnDetailsReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalGetTxnDetailsReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "payer" of XSD type xs:string.
    wchar_t*                             payer                          0;	///< Optional element.
/// Element "payerId" of XSD type xs:string.
    wchar_t*                             payerId                        0;	///< Optional element.
/// Element "payerStatus" of XSD type xs:string.
    wchar_t*                             payerStatus                    0;	///< Optional element.
/// Element "payerCountry" of XSD type xs:string.
    wchar_t*                             payerCountry                   0;	///< Optional element.
/// Element "payerBusiness" of XSD type xs:string.
    wchar_t*                             payerBusiness                  0;	///< Optional element.
/// Element "payerSalutation" of XSD type xs:string.
    wchar_t*                             payerSalutation                0;	///< Optional element.
/// Element "payerFirstname" of XSD type xs:string.
    wchar_t*                             payerFirstname                 0;	///< Optional element.
/// Element "payerMiddlename" of XSD type xs:string.
    wchar_t*                             payerMiddlename                0;	///< Optional element.
/// Element "payerLastname" of XSD type xs:string.
    wchar_t*                             payerLastname                  0;	///< Optional element.
/// Element "payerSuffix" of XSD type xs:string.
    wchar_t*                             payerSuffix                    0;	///< Optional element.
/// Element "addressID" of XSD type xs:string.
    wchar_t*                             addressID                      0;	///< Optional element.
/// Element "addressStatus" of XSD type xs:string.
    wchar_t*                             addressStatus                  0;	///< Optional element.
/// Element "shipToName" of XSD type xs:string.
    wchar_t*                             shipToName                     0;	///< Optional element.
/// Element "shipToAddress1" of XSD type xs:string.
    wchar_t*                             shipToAddress1                 0;	///< Optional element.
/// Element "shipToAddress2" of XSD type xs:string.
    wchar_t*                             shipToAddress2                 0;	///< Optional element.
/// Element "shipToCity" of XSD type xs:string.
    wchar_t*                             shipToCity                     0;	///< Optional element.
/// Element "shipToState" of XSD type xs:string.
    wchar_t*                             shipToState                    0;	///< Optional element.
/// Element "shipToCountry" of XSD type xs:string.
    wchar_t*                             shipToCountry                  0;	///< Optional element.
/// Element "shipToZip" of XSD type xs:string.
    wchar_t*                             shipToZip                      0;	///< Optional element.
/// Element "payerPhone" of XSD type xs:string.
    wchar_t*                             payerPhone                     0;	///< Optional element.
/// Element "transactionId" of XSD type xs:string.
    wchar_t*                             transactionId                  0;	///< Optional element.
/// Element "parentTransactionId" of XSD type xs:string.
    wchar_t*                             parentTransactionId            0;	///< Optional element.
/// Element "paypalReceiptId" of XSD type xs:string.
    wchar_t*                             paypalReceiptId                0;	///< Optional element.
/// Element "paypalTransactiontype" of XSD type xs:string.
    wchar_t*                             paypalTransactiontype          0;	///< Optional element.
/// Element "paypalPaymentType" of XSD type xs:string.
    wchar_t*                             paypalPaymentType              0;	///< Optional element.
/// Element "paypalOrderTime" of XSD type xs:string.
    wchar_t*                             paypalOrderTime                0;	///< Optional element.
/// Element "paypalPaymentGrossAmount" of XSD type xs:string.
    wchar_t*                             paypalPaymentGrossAmount       0;	///< Optional element.
/// Element "paypalFeeAmount" of XSD type xs:string.
    wchar_t*                             paypalFeeAmount                0;	///< Optional element.
/// Element "currency" of XSD type xs:string.
    wchar_t*                             currency                       0;	///< Optional element.
/// Element "paypalSettleAmount" of XSD type xs:string.
    wchar_t*                             paypalSettleAmount             0;	///< Optional element.
/// Element "paypalTaxAmount" of XSD type xs:string.
    wchar_t*                             paypalTaxAmount                0;	///< Optional element.
/// Element "paypalExchangeRate" of XSD type xs:string.
    wchar_t*                             paypalExchangeRate             0;	///< Optional element.
/// Element "paypalPaymentStatus" of XSD type xs:string.
    wchar_t*                             paypalPaymentStatus            0;	///< Optional element.
/// Element "paypalPendingReason" of XSD type xs:string.
    wchar_t*                             paypalPendingReason            0;	///< Optional element.
/// Element "paypalReasonCode" of XSD type xs:string.
    wchar_t*                             paypalReasonCode               0;	///< Optional element.
/// Element "protectionEligibility" of XSD type xs:string.
    wchar_t*                             protectionEligibility          0;	///< Optional element.
/// Element "protectionEligibilityType" of XSD type xs:string.
    wchar_t*                             protectionEligibilityType      0;	///< Optional element.
/// Element "paypalNote" of XSD type xs:string.
    wchar_t*                             paypalNote                     0;	///< Optional element.
/// Element "invoiceNumber" of XSD type xs:string.
    wchar_t*                             invoiceNumber                  0;	///< Optional element.
/// Vector of ns2__Item* of length 0..1000.
    std::vector<ns2__Item*             > item                           0:1000;
/// Element "errorCode" of XSD type xs:string.
    wchar_t*                             errorCode                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PayPalTransactionSearchReply is a complexType.
///
/// class ns2__PayPalTransactionSearchReply operations:
/// - ns2__PayPalTransactionSearchReply* soap_new_ns2__PayPalTransactionSearchReply(soap*) allocate
/// - ns2__PayPalTransactionSearchReply* soap_new_ns2__PayPalTransactionSearchReply(soap*, int num) allocate array
/// - ns2__PayPalTransactionSearchReply* soap_new_req_ns2__PayPalTransactionSearchReply(soap*, ...) allocate, set required members
/// - ns2__PayPalTransactionSearchReply* soap_new_set_ns2__PayPalTransactionSearchReply(soap*, ...) allocate, set all public members
/// - ns2__PayPalTransactionSearchReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PayPalTransactionSearchReply(soap*, ns2__PayPalTransactionSearchReply*) deserialize from a stream
/// - int soap_write_ns2__PayPalTransactionSearchReply(soap*, ns2__PayPalTransactionSearchReply*) serialize to a stream
/// - ns2__PayPalTransactionSearchReply* ns2__PayPalTransactionSearchReply::soap_dup(soap*) returns deep copy of ns2__PayPalTransactionSearchReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PayPalTransactionSearchReply::soap_del() deep deletes ns2__PayPalTransactionSearchReply data members, use only after ns2__PayPalTransactionSearchReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PayPalTransactionSearchReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Vector of ns2__PaypalTransaction* of length 0..999.
    std::vector<ns2__PaypalTransaction*> transaction                    0:999;
/// Element "errorCode" of XSD type xs:string.
    wchar_t*                             errorCode                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":PaypalTransaction is a complexType.
///
/// class ns2__PaypalTransaction operations:
/// - ns2__PaypalTransaction* soap_new_ns2__PaypalTransaction(soap*) allocate
/// - ns2__PaypalTransaction* soap_new_ns2__PaypalTransaction(soap*, int num) allocate array
/// - ns2__PaypalTransaction* soap_new_req_ns2__PaypalTransaction(soap*, ...) allocate, set required members
/// - ns2__PaypalTransaction* soap_new_set_ns2__PaypalTransaction(soap*, ...) allocate, set all public members
/// - ns2__PaypalTransaction::soap_default(soap*) reset members to default
/// - int soap_read_ns2__PaypalTransaction(soap*, ns2__PaypalTransaction*) deserialize from a stream
/// - int soap_write_ns2__PaypalTransaction(soap*, ns2__PaypalTransaction*) serialize to a stream
/// - ns2__PaypalTransaction* ns2__PaypalTransaction::soap_dup(soap*) returns deep copy of ns2__PaypalTransaction, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PaypalTransaction::soap_del() deep deletes ns2__PaypalTransaction data members, use only after ns2__PaypalTransaction::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PaypalTransaction
{ public:
/// Element "transactionTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       transactionTime                0;	///< Optional element.
/// Element "transactionTimeZone" of XSD type xs:string.
    wchar_t*                             transactionTimeZone            0;	///< Optional element.
/// Element "transactionType" of XSD type xs:string.
    wchar_t*                             transactionType                0;	///< Optional element.
/// Element "paypalPayerOrPayeeEmail" of XSD type xs:string.
    wchar_t*                             paypalPayerOrPayeeEmail        0;	///< Optional element.
/// Element "customerDisplayName" of XSD type xs:string.
    wchar_t*                             customerDisplayName            0;	///< Optional element.
/// Element "transactionID" of XSD type xs:string.
    wchar_t*                             transactionID                  0;	///< Optional element.
/// Element "paypalPaymentStatus" of XSD type xs:string.
    wchar_t*                             paypalPaymentStatus            0;	///< Optional element.
/// Element "grandTotalAmount" of XSD type xs:string.
    wchar_t*                             grandTotalAmount               0;	///< Optional element.
/// Element "currency" of XSD type xs:string.
    wchar_t*                             currency                       0;	///< Optional element.
/// Element "paypalFeeAmount" of XSD type xs:string.
    wchar_t*                             paypalFeeAmount                0;	///< Optional element.
/// Element "paypalNetAmount" of XSD type xs:string.
    wchar_t*                             paypalNetAmount                0;	///< Optional element.
/// Attribute "id" of XSD type xs:integer.
   @xsd__integer*                        id                             0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":CCDCCUpdateService is a complexType.
///
/// class ns2__CCDCCUpdateService operations:
/// - ns2__CCDCCUpdateService* soap_new_ns2__CCDCCUpdateService(soap*) allocate
/// - ns2__CCDCCUpdateService* soap_new_ns2__CCDCCUpdateService(soap*, int num) allocate array
/// - ns2__CCDCCUpdateService* soap_new_req_ns2__CCDCCUpdateService(soap*, ...) allocate, set required members
/// - ns2__CCDCCUpdateService* soap_new_set_ns2__CCDCCUpdateService(soap*, ...) allocate, set all public members
/// - ns2__CCDCCUpdateService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__CCDCCUpdateService(soap*, ns2__CCDCCUpdateService*) deserialize from a stream
/// - int soap_write_ns2__CCDCCUpdateService(soap*, ns2__CCDCCUpdateService*) serialize to a stream
/// - ns2__CCDCCUpdateService* ns2__CCDCCUpdateService::soap_dup(soap*) returns deep copy of ns2__CCDCCUpdateService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CCDCCUpdateService::soap_del() deep deletes ns2__CCDCCUpdateService data members, use only after ns2__CCDCCUpdateService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CCDCCUpdateService
{ public:
/// Element "reason" of XSD type xs:string.
    wchar_t*                             reason                         0;	///< Optional element.
/// Element "action" of XSD type xs:string.
    wchar_t*                             action                         0;	///< Optional element.
/// Element "dccRequestID" of XSD type xs:string.
    wchar_t*                             dccRequestID                   0;	///< Optional element.
/// Element "captureRequestID" of XSD type xs:string.
    wchar_t*                             captureRequestID               0;	///< Optional element.
/// Element "creditRequestID" of XSD type xs:string.
    wchar_t*                             creditRequestID                0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":ServiceFee is a complexType.
///
/// class ns2__ServiceFee operations:
/// - ns2__ServiceFee* soap_new_ns2__ServiceFee(soap*) allocate
/// - ns2__ServiceFee* soap_new_ns2__ServiceFee(soap*, int num) allocate array
/// - ns2__ServiceFee* soap_new_req_ns2__ServiceFee(soap*, ...) allocate, set required members
/// - ns2__ServiceFee* soap_new_set_ns2__ServiceFee(soap*, ...) allocate, set all public members
/// - ns2__ServiceFee::soap_default(soap*) reset members to default
/// - int soap_read_ns2__ServiceFee(soap*, ns2__ServiceFee*) deserialize from a stream
/// - int soap_write_ns2__ServiceFee(soap*, ns2__ServiceFee*) serialize to a stream
/// - ns2__ServiceFee* ns2__ServiceFee::soap_dup(soap*) returns deep copy of ns2__ServiceFee, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ServiceFee::soap_del() deep deletes ns2__ServiceFee data members, use only after ns2__ServiceFee::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ServiceFee
{ public:
/// Element "merchantDescriptor" of XSD type xs:string.
    wchar_t*                             merchantDescriptor             0;	///< Optional element.
/// Element "merchantDescriptorContact" of XSD type xs:string.
    wchar_t*                             merchantDescriptorContact      0;	///< Optional element.
/// Element "merchantDescriptorState" of XSD type xs:string.
    wchar_t*                             merchantDescriptorState        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":EmvRequest is a complexType.
///
/// class ns2__EmvRequest operations:
/// - ns2__EmvRequest* soap_new_ns2__EmvRequest(soap*) allocate
/// - ns2__EmvRequest* soap_new_ns2__EmvRequest(soap*, int num) allocate array
/// - ns2__EmvRequest* soap_new_req_ns2__EmvRequest(soap*, ...) allocate, set required members
/// - ns2__EmvRequest* soap_new_set_ns2__EmvRequest(soap*, ...) allocate, set all public members
/// - ns2__EmvRequest::soap_default(soap*) reset members to default
/// - int soap_read_ns2__EmvRequest(soap*, ns2__EmvRequest*) deserialize from a stream
/// - int soap_write_ns2__EmvRequest(soap*, ns2__EmvRequest*) serialize to a stream
/// - ns2__EmvRequest* ns2__EmvRequest::soap_dup(soap*) returns deep copy of ns2__EmvRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EmvRequest::soap_del() deep deletes ns2__EmvRequest data members, use only after ns2__EmvRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EmvRequest
{ public:
/// Element "combinedTags" of XSD type xs:string.
    wchar_t*                             combinedTags                   0;	///< Optional element.
/// Element "cardSequenceNumber" of XSD type xs:string.
    wchar_t*                             cardSequenceNumber             0;	///< Optional element.
/// Element "aidAndDFname" of XSD type xs:string.
    wchar_t*                             aidAndDFname                   0;	///< Optional element.
/// Element "fallback" of XSD type xs:string.
    wchar_t*                             fallback                       0;	///< Optional element.
/// Element "fallbackCondition" of XSD type xs:string.
    wchar_t*                             fallbackCondition              0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":EmvReply is a complexType.
///
/// class ns2__EmvReply operations:
/// - ns2__EmvReply* soap_new_ns2__EmvReply(soap*) allocate
/// - ns2__EmvReply* soap_new_ns2__EmvReply(soap*, int num) allocate array
/// - ns2__EmvReply* soap_new_req_ns2__EmvReply(soap*, ...) allocate, set required members
/// - ns2__EmvReply* soap_new_set_ns2__EmvReply(soap*, ...) allocate, set all public members
/// - ns2__EmvReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__EmvReply(soap*, ns2__EmvReply*) deserialize from a stream
/// - int soap_write_ns2__EmvReply(soap*, ns2__EmvReply*) serialize to a stream
/// - ns2__EmvReply* ns2__EmvReply::soap_dup(soap*) returns deep copy of ns2__EmvReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EmvReply::soap_del() deep deletes ns2__EmvReply data members, use only after ns2__EmvReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EmvReply
{ public:
/// Element "combinedTags" of XSD type xs:string.
    wchar_t*                             combinedTags                   0;	///< Optional element.
/// Element "decryptedRequestTags" of XSD type xs:string.
    wchar_t*                             decryptedRequestTags           0;	///< Optional element.
/// Element "chipValidationResults" of XSD type xs:string.
    wchar_t*                             chipValidationResults          0;	///< Optional element.
/// Element "chipValidationType" of XSD type xs:string.
    wchar_t*                             chipValidationType             0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":OriginalTransaction is a complexType.
///
/// class ns2__OriginalTransaction operations:
/// - ns2__OriginalTransaction* soap_new_ns2__OriginalTransaction(soap*) allocate
/// - ns2__OriginalTransaction* soap_new_ns2__OriginalTransaction(soap*, int num) allocate array
/// - ns2__OriginalTransaction* soap_new_req_ns2__OriginalTransaction(soap*, ...) allocate, set required members
/// - ns2__OriginalTransaction* soap_new_set_ns2__OriginalTransaction(soap*, ...) allocate, set all public members
/// - ns2__OriginalTransaction::soap_default(soap*) reset members to default
/// - int soap_read_ns2__OriginalTransaction(soap*, ns2__OriginalTransaction*) deserialize from a stream
/// - int soap_write_ns2__OriginalTransaction(soap*, ns2__OriginalTransaction*) serialize to a stream
/// - ns2__OriginalTransaction* ns2__OriginalTransaction::soap_dup(soap*) returns deep copy of ns2__OriginalTransaction, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__OriginalTransaction::soap_del() deep deletes ns2__OriginalTransaction data members, use only after ns2__OriginalTransaction::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__OriginalTransaction
{ public:
/// Element "amount" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         amount                         0;	///< Optional element.
/// Element "reasonCode" of XSD type xs:string.
    wchar_t*                             reasonCode                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":HostedDataCreateService is a complexType.
///
/// class ns2__HostedDataCreateService operations:
/// - ns2__HostedDataCreateService* soap_new_ns2__HostedDataCreateService(soap*) allocate
/// - ns2__HostedDataCreateService* soap_new_ns2__HostedDataCreateService(soap*, int num) allocate array
/// - ns2__HostedDataCreateService* soap_new_req_ns2__HostedDataCreateService(soap*, ...) allocate, set required members
/// - ns2__HostedDataCreateService* soap_new_set_ns2__HostedDataCreateService(soap*, ...) allocate, set all public members
/// - ns2__HostedDataCreateService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__HostedDataCreateService(soap*, ns2__HostedDataCreateService*) deserialize from a stream
/// - int soap_write_ns2__HostedDataCreateService(soap*, ns2__HostedDataCreateService*) serialize to a stream
/// - ns2__HostedDataCreateService* ns2__HostedDataCreateService::soap_dup(soap*) returns deep copy of ns2__HostedDataCreateService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__HostedDataCreateService::soap_del() deep deletes ns2__HostedDataCreateService data members, use only after ns2__HostedDataCreateService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__HostedDataCreateService
{ public:
/// Element "profileID" of XSD type xs:string.
    wchar_t*                             profileID                      0;	///< Optional element.
/// Element "paymentMethod" of XSD type xs:string.
    wchar_t*                             paymentMethod                  0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":HostedDataRetrieveService is a complexType.
///
/// class ns2__HostedDataRetrieveService operations:
/// - ns2__HostedDataRetrieveService* soap_new_ns2__HostedDataRetrieveService(soap*) allocate
/// - ns2__HostedDataRetrieveService* soap_new_ns2__HostedDataRetrieveService(soap*, int num) allocate array
/// - ns2__HostedDataRetrieveService* soap_new_req_ns2__HostedDataRetrieveService(soap*, ...) allocate, set required members
/// - ns2__HostedDataRetrieveService* soap_new_set_ns2__HostedDataRetrieveService(soap*, ...) allocate, set all public members
/// - ns2__HostedDataRetrieveService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__HostedDataRetrieveService(soap*, ns2__HostedDataRetrieveService*) deserialize from a stream
/// - int soap_write_ns2__HostedDataRetrieveService(soap*, ns2__HostedDataRetrieveService*) serialize to a stream
/// - ns2__HostedDataRetrieveService* ns2__HostedDataRetrieveService::soap_dup(soap*) returns deep copy of ns2__HostedDataRetrieveService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__HostedDataRetrieveService::soap_del() deep deletes ns2__HostedDataRetrieveService data members, use only after ns2__HostedDataRetrieveService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__HostedDataRetrieveService
{ public:
/// Element "profileID" of XSD type xs:string.
    wchar_t*                             profileID                      0;	///< Optional element.
/// Element "tokenValue" of XSD type xs:string.
    wchar_t*                             tokenValue                     0;	///< Optional element.
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":HostedDataCreateReply is a complexType.
///
/// class ns2__HostedDataCreateReply operations:
/// - ns2__HostedDataCreateReply* soap_new_ns2__HostedDataCreateReply(soap*) allocate
/// - ns2__HostedDataCreateReply* soap_new_ns2__HostedDataCreateReply(soap*, int num) allocate array
/// - ns2__HostedDataCreateReply* soap_new_req_ns2__HostedDataCreateReply(soap*, ...) allocate, set required members
/// - ns2__HostedDataCreateReply* soap_new_set_ns2__HostedDataCreateReply(soap*, ...) allocate, set all public members
/// - ns2__HostedDataCreateReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__HostedDataCreateReply(soap*, ns2__HostedDataCreateReply*) deserialize from a stream
/// - int soap_write_ns2__HostedDataCreateReply(soap*, ns2__HostedDataCreateReply*) serialize to a stream
/// - ns2__HostedDataCreateReply* ns2__HostedDataCreateReply::soap_dup(soap*) returns deep copy of ns2__HostedDataCreateReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__HostedDataCreateReply::soap_del() deep deletes ns2__HostedDataCreateReply data members, use only after ns2__HostedDataCreateReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__HostedDataCreateReply
{ public:
/// Element "responseMessage" of XSD type xs:string.
    wchar_t*                             responseMessage                0;	///< Optional element.
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "cardAccountNumberToken" of XSD type xs:string.
    wchar_t*                             cardAccountNumberToken         0;	///< Optional element.
/// Element "customerID" of XSD type xs:string.
    wchar_t*                             customerID                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":HostedDataRetrieveReply is a complexType.
///
/// class ns2__HostedDataRetrieveReply operations:
/// - ns2__HostedDataRetrieveReply* soap_new_ns2__HostedDataRetrieveReply(soap*) allocate
/// - ns2__HostedDataRetrieveReply* soap_new_ns2__HostedDataRetrieveReply(soap*, int num) allocate array
/// - ns2__HostedDataRetrieveReply* soap_new_req_ns2__HostedDataRetrieveReply(soap*, ...) allocate, set required members
/// - ns2__HostedDataRetrieveReply* soap_new_set_ns2__HostedDataRetrieveReply(soap*, ...) allocate, set all public members
/// - ns2__HostedDataRetrieveReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__HostedDataRetrieveReply(soap*, ns2__HostedDataRetrieveReply*) deserialize from a stream
/// - int soap_write_ns2__HostedDataRetrieveReply(soap*, ns2__HostedDataRetrieveReply*) serialize to a stream
/// - ns2__HostedDataRetrieveReply* ns2__HostedDataRetrieveReply::soap_dup(soap*) returns deep copy of ns2__HostedDataRetrieveReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__HostedDataRetrieveReply::soap_del() deep deletes ns2__HostedDataRetrieveReply data members, use only after ns2__HostedDataRetrieveReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__HostedDataRetrieveReply
{ public:
/// Element "responseMessage" of XSD type xs:string.
    wchar_t*                             responseMessage                0;	///< Optional element.
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "aggregatorMerchantIdentifier" of XSD type xs:string.
    wchar_t*                             aggregatorMerchantIdentifier   0;	///< Optional element.
/// Element "customerFirstName" of XSD type xs:string.
    wchar_t*                             customerFirstName              0;	///< Optional element.
/// Element "customerLastName" of XSD type xs:string.
    wchar_t*                             customerLastName               0;	///< Optional element.
/// Element "customerID" of XSD type xs:string.
    wchar_t*                             customerID                     0;	///< Optional element.
/// Element "paymentMethod" of XSD type xs:string.
    wchar_t*                             paymentMethod                  0;	///< Optional element.
/// Element "billToStreet1" of XSD type xs:string.
    wchar_t*                             billToStreet1                  0;	///< Optional element.
/// Element "billToStreet2" of XSD type xs:string.
    wchar_t*                             billToStreet2                  0;	///< Optional element.
/// Element "billToEmail" of XSD type xs:string.
    wchar_t*                             billToEmail                    0;	///< Optional element.
/// Element "billToState" of XSD type xs:string.
    wchar_t*                             billToState                    0;	///< Optional element.
/// Element "billToFirstName" of XSD type xs:string.
    wchar_t*                             billToFirstName                0;	///< Optional element.
/// Element "billToLastName" of XSD type xs:string.
    wchar_t*                             billToLastName                 0;	///< Optional element.
/// Element "billToCity" of XSD type xs:string.
    wchar_t*                             billToCity                     0;	///< Optional element.
/// Element "billToCountry" of XSD type xs:string.
    wchar_t*                             billToCountry                  0;	///< Optional element.
/// Element "billToPostalCode" of XSD type xs:string.
    wchar_t*                             billToPostalCode               0;	///< Optional element.
/// Element "cardAccountNumber" of XSD type xs:string.
    wchar_t*                             cardAccountNumber              0;	///< Optional element.
/// Element "cardType" of XSD type xs:string.
    wchar_t*                             cardType                       0;	///< Optional element.
/// Element "cardExpirationMonth" of XSD type xs:string.
    wchar_t*                             cardExpirationMonth            0;	///< Optional element.
/// Element "cardExpirationYear" of XSD type xs:string.
    wchar_t*                             cardExpirationYear             0;	///< Optional element.
/// Element "cardIssueNumber" of XSD type xs:string.
    wchar_t*                             cardIssueNumber                0;	///< Optional element.
/// Element "cardStartMonth" of XSD type xs:string.
    wchar_t*                             cardStartMonth                 0;	///< Optional element.
/// Element "cardStartYear" of XSD type xs:string.
    wchar_t*                             cardStartYear                  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":AutoRentalData is a complexType.
///
/// class ns2__AutoRentalData operations:
/// - ns2__AutoRentalData* soap_new_ns2__AutoRentalData(soap*) allocate
/// - ns2__AutoRentalData* soap_new_ns2__AutoRentalData(soap*, int num) allocate array
/// - ns2__AutoRentalData* soap_new_req_ns2__AutoRentalData(soap*, ...) allocate, set required members
/// - ns2__AutoRentalData* soap_new_set_ns2__AutoRentalData(soap*, ...) allocate, set all public members
/// - ns2__AutoRentalData::soap_default(soap*) reset members to default
/// - int soap_read_ns2__AutoRentalData(soap*, ns2__AutoRentalData*) deserialize from a stream
/// - int soap_write_ns2__AutoRentalData(soap*, ns2__AutoRentalData*) serialize to a stream
/// - ns2__AutoRentalData* ns2__AutoRentalData::soap_dup(soap*) returns deep copy of ns2__AutoRentalData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AutoRentalData::soap_del() deep deletes ns2__AutoRentalData data members, use only after ns2__AutoRentalData::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AutoRentalData
{ public:
/// Element "adjustmentCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         adjustmentCost                 0;	///< Optional element.
/// Element "adjustmentCode" of XSD type xs:string.
    wchar_t*                             adjustmentCode                 0;	///< Optional element.
/// Element "agreementNumber" of XSD type xs:string.
    wchar_t*                             agreementNumber                0;	///< Optional element.
/// Element "classCode" of XSD type xs:string.
    wchar_t*                             classCode                      0;	///< Optional element.
/// Element "customerServicePhoneNumber" of XSD type xs:string.
    wchar_t*                             customerServicePhoneNumber     0;	///< Optional element.
/// Element "dailyRate" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         dailyRate                      0;	///< Optional element.
/// Element "mileageCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         mileageCost                    0;	///< Optional element.
/// Element "gasCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         gasCost                        0;	///< Optional element.
/// Element "insuranceCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         insuranceCost                  0;	///< Optional element.
/// Element "lateReturnCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         lateReturnCost                 0;	///< Optional element.
/// Element "maximumFreeMiles" of XSD type xs:integer.
    xsd__integer*                        maximumFreeMiles               0;	///< Optional element.
/// Element "milesTraveled" of XSD type xs:integer.
    xsd__integer*                        milesTraveled                  0;	///< Optional element.
/// Element "oneWayCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         oneWayCost                     0;	///< Optional element.
/// Element "parkingViolationCost" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         parkingViolationCost           0;	///< Optional element.
/// Element "pickUpCity" of XSD type xs:string.
    wchar_t*                             pickUpCity                     0;	///< Optional element.
/// Element "pickUpCountry" of XSD type xs:string.
    wchar_t*                             pickUpCountry                  0;	///< Optional element.
/// Element "pickUpDate" of XSD type xs:string.
    wchar_t*                             pickUpDate                     0;	///< Optional element.
/// Element "pickUpState" of XSD type xs:string.
    wchar_t*                             pickUpState                    0;	///< Optional element.
/// Element "pickUpTime" of XSD type xs:integer.
    xsd__integer*                        pickUpTime                     0;	///< Optional element.
/// Element "ratePerMile" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":amount.
    ns2__amount*                         ratePerMile                    0;	///< Optional element.
/// Element "renterName" of XSD type xs:string.
    wchar_t*                             renterName                     0;	///< Optional element.
/// Element "returnCity" of XSD type xs:string.
    wchar_t*                             returnCity                     0;	///< Optional element.
/// Element "returnCountry" of XSD type xs:string.
    wchar_t*                             returnCountry                  0;	///< Optional element.
/// Element "returnDate" of XSD type xs:string.
    wchar_t*                             returnDate                     0;	///< Optional element.
/// Element "returnLocationID" of XSD type xs:string.
    wchar_t*                             returnLocationID               0;	///< Optional element.
/// Element "returnState" of XSD type xs:string.
    wchar_t*                             returnState                    0;	///< Optional element.
/// Element "returnTime" of XSD type xs:integer.
    xsd__integer*                        returnTime                     0;	///< Optional element.
/// Element "specialProgramCode" of XSD type xs:string.
    wchar_t*                             specialProgramCode             0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":VCReply is a complexType.
///
/// class ns2__VCReply operations:
/// - ns2__VCReply* soap_new_ns2__VCReply(soap*) allocate
/// - ns2__VCReply* soap_new_ns2__VCReply(soap*, int num) allocate array
/// - ns2__VCReply* soap_new_req_ns2__VCReply(soap*, ...) allocate, set required members
/// - ns2__VCReply* soap_new_set_ns2__VCReply(soap*, ...) allocate, set all public members
/// - ns2__VCReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__VCReply(soap*, ns2__VCReply*) deserialize from a stream
/// - int soap_write_ns2__VCReply(soap*, ns2__VCReply*) serialize to a stream
/// - ns2__VCReply* ns2__VCReply::soap_dup(soap*) returns deep copy of ns2__VCReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VCReply::soap_del() deep deletes ns2__VCReply data members, use only after ns2__VCReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VCReply
{ public:
/// Element "creationTimeStamp" of XSD type xs:string.
    wchar_t*                             creationTimeStamp              0;	///< Optional element.
/// Element "alternateShippingAddressCountryCode" of XSD type xs:string.
    wchar_t*                             alternateShippingAddressCountryCode 0;	///< Optional element.
/// Element "alternateShippingAddressPostalCode" of XSD type xs:string.
    wchar_t*                             alternateShippingAddressPostalCode 0;	///< Optional element.
/// Element "vcAccountLoginName" of XSD type xs:string.
    wchar_t*                             vcAccountLoginName             0;	///< Optional element.
/// Element "vcAccountFirstName" of XSD type xs:string.
    wchar_t*                             vcAccountFirstName             0;	///< Optional element.
/// Element "vcAccountLastName" of XSD type xs:string.
    wchar_t*                             vcAccountLastName              0;	///< Optional element.
/// Element "vcAccountEncryptedID" of XSD type xs:string.
    wchar_t*                             vcAccountEncryptedID           0;	///< Optional element.
/// Element "vcAccountEmail" of XSD type xs:string.
    wchar_t*                             vcAccountEmail                 0;	///< Optional element.
/// Element "vcAccountMobilePhoneNumber" of XSD type xs:string.
    wchar_t*                             vcAccountMobilePhoneNumber     0;	///< Optional element.
/// Element "merchantReferenceID" of XSD type xs:string.
    wchar_t*                             merchantReferenceID            0;	///< Optional element.
/// Element "subtotalAmount" of XSD type xs:string.
    wchar_t*                             subtotalAmount                 0;	///< Optional element.
/// Element "shippingHandlingAmount" of XSD type xs:string.
    wchar_t*                             shippingHandlingAmount         0;	///< Optional element.
/// Element "taxAmount" of XSD type xs:string.
    wchar_t*                             taxAmount                      0;	///< Optional element.
/// Element "discountAmount" of XSD type xs:string.
    wchar_t*                             discountAmount                 0;	///< Optional element.
/// Element "giftWrapAmount" of XSD type xs:string.
    wchar_t*                             giftWrapAmount                 0;	///< Optional element.
/// Element "uncategorizedAmount" of XSD type xs:string.
    wchar_t*                             uncategorizedAmount            0;	///< Optional element.
/// Element "totalPurchaseAmount" of XSD type xs:string.
    wchar_t*                             totalPurchaseAmount            0;	///< Optional element.
/// Element "walletReferenceID" of XSD type xs:string.
    wchar_t*                             walletReferenceID              0;	///< Optional element.
/// Element "promotionCode" of XSD type xs:string.
    wchar_t*                             promotionCode                  0;	///< Optional element.
/// Element "paymentInstrumentID" of XSD type xs:string.
    wchar_t*                             paymentInstrumentID            0;	///< Optional element.
/// Element "cardVerificationStatus" of XSD type xs:string.
    wchar_t*                             cardVerificationStatus         0;	///< Optional element.
/// Element "issuerID" of XSD type xs:string.
    wchar_t*                             issuerID                       0;	///< Optional element.
/// Element "paymentInstrumentNickName" of XSD type xs:string.
    wchar_t*                             paymentInstrumentNickName      0;	///< Optional element.
/// Element "nameOnCard" of XSD type xs:string.
    wchar_t*                             nameOnCard                     0;	///< Optional element.
/// Element "cardType" of XSD type xs:string.
    wchar_t*                             cardType                       0;	///< Optional element.
/// Element "cardGroup" of XSD type xs:string.
    wchar_t*                             cardGroup                      0;	///< Optional element.
/// Element "cardArt" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":VCCardArt.
    ns2__VCCardArt*                      cardArt                        0;	///< Optional element.
/// Element "riskAdvice" of XSD type xs:string.
    wchar_t*                             riskAdvice                     0;	///< Optional element.
/// Element "riskScore" of XSD type xs:string.
    wchar_t*                             riskScore                      0;	///< Optional element.
/// Element "riskAdditionalData" of XSD type xs:string.
    wchar_t*                             riskAdditionalData             0;	///< Optional element.
/// Element "avsCodeRaw" of XSD type xs:string.
    wchar_t*                             avsCodeRaw                     0;	///< Optional element.
/// Element "cvnCodeRaw" of XSD type xs:string.
    wchar_t*                             cvnCodeRaw                     0;	///< Optional element.
/// Element "eciRaw" of XSD type xs:string.
    wchar_t*                             eciRaw                         0;	///< Optional element.
/// Element "eci" of XSD type xs:string.
    wchar_t*                             eci                            0;	///< Optional element.
/// Element "cavv" of XSD type xs:string.
    wchar_t*                             cavv                           0;	///< Optional element.
/// Element "veresEnrolled" of XSD type xs:string.
    wchar_t*                             veresEnrolled                  0;	///< Optional element.
/// Element "veresTimeStamp" of XSD type xs:string.
    wchar_t*                             veresTimeStamp                 0;	///< Optional element.
/// Element "paresStatus" of XSD type xs:string.
    wchar_t*                             paresStatus                    0;	///< Optional element.
/// Element "paresTimeStamp" of XSD type xs:string.
    wchar_t*                             paresTimeStamp                 0;	///< Optional element.
/// Element "xid" of XSD type xs:string.
    wchar_t*                             xid                            0;	///< Optional element.
/// Element "customData" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":VCCustomData.
    ns2__VCCustomData*                   customData                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":VCCardArt is a complexType.
///
/// class ns2__VCCardArt operations:
/// - ns2__VCCardArt* soap_new_ns2__VCCardArt(soap*) allocate
/// - ns2__VCCardArt* soap_new_ns2__VCCardArt(soap*, int num) allocate array
/// - ns2__VCCardArt* soap_new_req_ns2__VCCardArt(soap*, ...) allocate, set required members
/// - ns2__VCCardArt* soap_new_set_ns2__VCCardArt(soap*, ...) allocate, set all public members
/// - ns2__VCCardArt::soap_default(soap*) reset members to default
/// - int soap_read_ns2__VCCardArt(soap*, ns2__VCCardArt*) deserialize from a stream
/// - int soap_write_ns2__VCCardArt(soap*, ns2__VCCardArt*) serialize to a stream
/// - ns2__VCCardArt* ns2__VCCardArt::soap_dup(soap*) returns deep copy of ns2__VCCardArt, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VCCardArt::soap_del() deep deletes ns2__VCCardArt data members, use only after ns2__VCCardArt::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VCCardArt
{ public:
/// Element "fileName" of XSD type xs:string.
    wchar_t*                             fileName                       0;	///< Optional element.
/// Element "height" of XSD type xs:string.
    wchar_t*                             height                         0;	///< Optional element.
/// Element "width" of XSD type xs:string.
    wchar_t*                             width                          0;	///< Optional element.
/// Attribute "id" of XSD type xs:integer.
   @xsd__integer*                        id                             0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":VCCustomData is a complexType.
///
/// class ns2__VCCustomData operations:
/// - ns2__VCCustomData* soap_new_ns2__VCCustomData(soap*) allocate
/// - ns2__VCCustomData* soap_new_ns2__VCCustomData(soap*, int num) allocate array
/// - ns2__VCCustomData* soap_new_req_ns2__VCCustomData(soap*, ...) allocate, set required members
/// - ns2__VCCustomData* soap_new_set_ns2__VCCustomData(soap*, ...) allocate, set all public members
/// - ns2__VCCustomData::soap_default(soap*) reset members to default
/// - int soap_read_ns2__VCCustomData(soap*, ns2__VCCustomData*) deserialize from a stream
/// - int soap_write_ns2__VCCustomData(soap*, ns2__VCCustomData*) serialize to a stream
/// - ns2__VCCustomData* ns2__VCCustomData::soap_dup(soap*) returns deep copy of ns2__VCCustomData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VCCustomData::soap_del() deep deletes ns2__VCCustomData data members, use only after ns2__VCCustomData::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VCCustomData
{ public:
/// Element "name" of XSD type xs:string.
    wchar_t*                             name                           0;	///< Optional element.
/// Element "value" of XSD type xs:string.
    wchar_t*                             value                          0;	///< Optional element.
/// Attribute "id" of XSD type xs:integer.
   @xsd__integer*                        id                             0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":DecryptVisaCheckoutDataReply is a complexType.
///
/// class ns2__DecryptVisaCheckoutDataReply operations:
/// - ns2__DecryptVisaCheckoutDataReply* soap_new_ns2__DecryptVisaCheckoutDataReply(soap*) allocate
/// - ns2__DecryptVisaCheckoutDataReply* soap_new_ns2__DecryptVisaCheckoutDataReply(soap*, int num) allocate array
/// - ns2__DecryptVisaCheckoutDataReply* soap_new_req_ns2__DecryptVisaCheckoutDataReply(soap*, ...) allocate, set required members
/// - ns2__DecryptVisaCheckoutDataReply* soap_new_set_ns2__DecryptVisaCheckoutDataReply(soap*, ...) allocate, set all public members
/// - ns2__DecryptVisaCheckoutDataReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__DecryptVisaCheckoutDataReply(soap*, ns2__DecryptVisaCheckoutDataReply*) deserialize from a stream
/// - int soap_write_ns2__DecryptVisaCheckoutDataReply(soap*, ns2__DecryptVisaCheckoutDataReply*) serialize to a stream
/// - ns2__DecryptVisaCheckoutDataReply* ns2__DecryptVisaCheckoutDataReply::soap_dup(soap*) returns deep copy of ns2__DecryptVisaCheckoutDataReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DecryptVisaCheckoutDataReply::soap_del() deep deletes ns2__DecryptVisaCheckoutDataReply data members, use only after ns2__DecryptVisaCheckoutDataReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DecryptVisaCheckoutDataReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":EncryptPaymentDataReply is a complexType.
///
/// class ns2__EncryptPaymentDataReply operations:
/// - ns2__EncryptPaymentDataReply* soap_new_ns2__EncryptPaymentDataReply(soap*) allocate
/// - ns2__EncryptPaymentDataReply* soap_new_ns2__EncryptPaymentDataReply(soap*, int num) allocate array
/// - ns2__EncryptPaymentDataReply* soap_new_req_ns2__EncryptPaymentDataReply(soap*, ...) allocate, set required members
/// - ns2__EncryptPaymentDataReply* soap_new_set_ns2__EncryptPaymentDataReply(soap*, ...) allocate, set all public members
/// - ns2__EncryptPaymentDataReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__EncryptPaymentDataReply(soap*, ns2__EncryptPaymentDataReply*) deserialize from a stream
/// - int soap_write_ns2__EncryptPaymentDataReply(soap*, ns2__EncryptPaymentDataReply*) serialize to a stream
/// - ns2__EncryptPaymentDataReply* ns2__EncryptPaymentDataReply::soap_dup(soap*) returns deep copy of ns2__EncryptPaymentDataReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EncryptPaymentDataReply::soap_del() deep deletes ns2__EncryptPaymentDataReply data members, use only after ns2__EncryptPaymentDataReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EncryptPaymentDataReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":BinLookupService is a complexType.
///
/// class ns2__BinLookupService operations:
/// - ns2__BinLookupService* soap_new_ns2__BinLookupService(soap*) allocate
/// - ns2__BinLookupService* soap_new_ns2__BinLookupService(soap*, int num) allocate array
/// - ns2__BinLookupService* soap_new_req_ns2__BinLookupService(soap*, ...) allocate, set required members
/// - ns2__BinLookupService* soap_new_set_ns2__BinLookupService(soap*, ...) allocate, set all public members
/// - ns2__BinLookupService::soap_default(soap*) reset members to default
/// - int soap_read_ns2__BinLookupService(soap*, ns2__BinLookupService*) deserialize from a stream
/// - int soap_write_ns2__BinLookupService(soap*, ns2__BinLookupService*) serialize to a stream
/// - ns2__BinLookupService* ns2__BinLookupService::soap_dup(soap*) returns deep copy of ns2__BinLookupService, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BinLookupService::soap_del() deep deletes ns2__BinLookupService data members, use only after ns2__BinLookupService::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BinLookupService
{ public:
/// Attribute "run" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":boolean.
   @ns2__boolean                         run                            1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":BinLookupReply is a complexType.
///
/// class ns2__BinLookupReply operations:
/// - ns2__BinLookupReply* soap_new_ns2__BinLookupReply(soap*) allocate
/// - ns2__BinLookupReply* soap_new_ns2__BinLookupReply(soap*, int num) allocate array
/// - ns2__BinLookupReply* soap_new_req_ns2__BinLookupReply(soap*, ...) allocate, set required members
/// - ns2__BinLookupReply* soap_new_set_ns2__BinLookupReply(soap*, ...) allocate, set all public members
/// - ns2__BinLookupReply::soap_default(soap*) reset members to default
/// - int soap_read_ns2__BinLookupReply(soap*, ns2__BinLookupReply*) deserialize from a stream
/// - int soap_write_ns2__BinLookupReply(soap*, ns2__BinLookupReply*) serialize to a stream
/// - ns2__BinLookupReply* ns2__BinLookupReply::soap_dup(soap*) returns deep copy of ns2__BinLookupReply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BinLookupReply::soap_del() deep deletes ns2__BinLookupReply data members, use only after ns2__BinLookupReply::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BinLookupReply
{ public:
/// Element "reasonCode" of XSD type xs:integer.
    xsd__integer                         reasonCode                     1;	///< Required element.
/// Element "cardType" of XSD type xs:string.
    wchar_t*                             cardType                       0;	///< Optional element.
/// Element "cardGroup" of XSD type xs:string.
    wchar_t*                             cardGroup                      0;	///< Optional element.
/// Element "issuerName" of XSD type xs:string.
    wchar_t*                             issuerName                     0;	///< Optional element.
/// Element "issuerCountry" of XSD type xs:string.
    wchar_t*                             issuerCountry                  0;	///< Optional element.
/// Element "issuedCurrency" of XSD type xs:string.
    wchar_t*                             issuedCurrency                 0;	///< Optional element.
/// Element "level2Eligibility" of XSD type xs:string.
    wchar_t*                             level2Eligibility              0;	///< Optional element.
/// Element "level3Eligibility" of XSD type xs:string.
    wchar_t*                             level3Eligibility              0;	///< Optional element.
/// Element "cardCategory" of XSD type xs:string.
    wchar_t*                             cardCategory                   0;	///< Optional element.
/// Element "crossBorderIndicator" of XSD type xs:string.
    wchar_t*                             crossBorderIndicator           0;	///< Optional element.
/// Element "issuerPhoneNumber" of XSD type xs:string.
    wchar_t*                             issuerPhoneNumber              0;	///< Optional element.
/// Element "billingCurrency" of XSD type xs:string.
    wchar_t*                             billingCurrency                0;	///< Optional element.
/// Element "billingCurrencyMinorDigits" of XSD type xs:string.
    wchar_t*                             billingCurrencyMinorDigits     0;	///< Optional element.
/// Element "fastFundsIndicator" of XSD type xs:string.
    wchar_t*                             fastFundsIndicator             0;	///< Optional element.
/// Element "octBlockIndicator" of XSD type xs:string.
    wchar_t*                             octBlockIndicator              0;	///< Optional element.
/// Element "onlineGamblingBlockIndicator" of XSD type xs:string.
    wchar_t*                             onlineGamblingBlockIndicator   0;	///< Optional element.
/// Element "requestDateTime" of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":dateTime.
    ns2__dateTime*                       requestDateTime                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":issuer is a complexType.
///
/// class ns2__issuer operations:
/// - ns2__issuer* soap_new_ns2__issuer(soap*) allocate
/// - ns2__issuer* soap_new_ns2__issuer(soap*, int num) allocate array
/// - ns2__issuer* soap_new_req_ns2__issuer(soap*, ...) allocate, set required members
/// - ns2__issuer* soap_new_set_ns2__issuer(soap*, ...) allocate, set all public members
/// - ns2__issuer::soap_default(soap*) reset members to default
/// - int soap_read_ns2__issuer(soap*, ns2__issuer*) deserialize from a stream
/// - int soap_write_ns2__issuer(soap*, ns2__issuer*) serialize to a stream
/// - ns2__issuer* ns2__issuer::soap_dup(soap*) returns deep copy of ns2__issuer, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__issuer::soap_del() deep deletes ns2__issuer data members, use only after ns2__issuer::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__issuer
{ public:
/// Element "additionalData" of XSD type xs:string.
    wchar_t*                             additionalData                 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "urn:schemas-cybersource-com:transaction-data-1.129":MDDField is a complexType with simpleContent.
///
/// class ns2__MDDField operations:
/// - ns2__MDDField* soap_new_ns2__MDDField(soap*) allocate
/// - ns2__MDDField* soap_new_ns2__MDDField(soap*, int num) allocate array
/// - ns2__MDDField* soap_new_req_ns2__MDDField(soap*, ...) allocate, set required members
/// - ns2__MDDField* soap_new_set_ns2__MDDField(soap*, ...) allocate, set all public members
/// - ns2__MDDField::soap_default(soap*) reset members to default
/// - int soap_read_ns2__MDDField(soap*, ns2__MDDField*) deserialize from a stream
/// - int soap_write_ns2__MDDField(soap*, ns2__MDDField*) serialize to a stream
/// - ns2__MDDField* ns2__MDDField::soap_dup(soap*) returns deep copy of ns2__MDDField, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__MDDField::soap_del() deep deletes ns2__MDDField data members, use only after ns2__MDDField::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__MDDField
{ public:
/// __item wraps "xs:string" simpleContent.
    wchar_t*                             __item                        ;
/// Attribute "id" of XSD type xs:integer.
   @xsd__integer                         id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:schemas-cybersource-com:transaction-data-1.129                       *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "urn:schemas-cybersource-com:transaction-data-1.129":requestMessage of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":RequestMessage.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:schemas-cybersource-com:transaction-data-1.129":replyMessage of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":ReplyMessage.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:schemas-cybersource-com:transaction-data-1.129":nvpRequest of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:schemas-cybersource-com:transaction-data-1.129":nvpReply of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:schemas-cybersource-com:transaction-data-1.129":faultDetails of XSD type "urn:schemas-cybersource-com:transaction-data-1.129":FaultDetails.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:schemas-cybersource-com:transaction-data-1.129                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	INVPTransactionProcessor 
//gsoap ns1  service type:	INVPTransactionProcessor 
//gsoap ns1  service port:	https://ics2wsa.ic3.com:443/commerce/1.x/transactionProcessor 
//gsoap ns1  service namespace:	urn:schemas-cybersource-com:transaction-data:TransactionProcessor 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage NVPCyberSourceTransactionWS Definitions

@section NVPCyberSourceTransactionWS_bindings Service Bindings

  - @ref INVPTransactionProcessor

@section NVPCyberSourceTransactionWS_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page INVPTransactionProcessor Binding "INVPTransactionProcessor"

@section INVPTransactionProcessor_service Service Documentation "INVPTransactionProcessor"
CyberSource Web Service

@section INVPTransactionProcessor_operations Operations of Binding "INVPTransactionProcessor"

  - @ref __ns1__runTransaction

@section INVPTransactionProcessor_ports Endpoints of Binding "INVPTransactionProcessor"

  - https://ics2wsa.ic3.com:443/commerce/1.x/transactionProcessor

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   INVPTransactionProcessor                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__runTransaction                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__runTransaction" of service binding "INVPTransactionProcessor".

  - SOAP document/literal style messaging

  - Action or location: "runTransaction"

  - Addressing input action: "runTransaction"

  - Addressing output action: "runTransactionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__runTransaction(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    wchar_t*                            ns2__nvpRequest,
    // output parameters:
    wchar_t*                           &ns2__nvpReply
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__runTransaction(
    struct soap *soap,
    // input parameters:
    wchar_t*                            ns2__nvpRequest,
    // output parameters:
    wchar_t*                           &ns2__nvpReply
  );
@endcode

C++ proxy class (defined in soapINVPTransactionProcessorProxy.h):
@code
  class INVPTransactionProcessorProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapINVPTransactionProcessorService.h):
@code
  class INVPTransactionProcessorService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	runTransaction SOAP
//gsoap ns1  service method-style:	runTransaction document
//gsoap ns1  service method-encoding:	runTransaction literal
//gsoap ns1  service method-input-action:	runTransaction runTransaction
//gsoap ns1  service method-output-action:	runTransaction runTransactionResponse
int __ns1__runTransaction(
    wchar_t*                            ns2__nvpRequest,	///< Input parameter
    wchar_t*                           &ns2__nvpReply	///< Output parameter
);

/**

@page INVPTransactionProcessor Binding "INVPTransactionProcessor"

@section INVPTransactionProcessor_policy_enablers Policy Enablers of Binding "INVPTransactionProcessor"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section default Top-level root elements of schema ""

@section ns2 Top-level root elements of schema "urn:schemas-cybersource-com:transaction-data-1.129"

  - <ns2:requestMessage> (use wsdl2h option -g to auto-generate type _ns2__requestMessage)

  - <ns2:replyMessage> (use wsdl2h option -g to auto-generate type _ns2__replyMessage)

  - <ns2:nvpRequest> (use wsdl2h option -g to auto-generate type _ns2__nvpRequest)

  - <ns2:nvpReply> (use wsdl2h option -g to auto-generate type _ns2__nvpReply)

  - <ns2:faultDetails> (use wsdl2h option -g to auto-generate type _ns2__faultDetails)

*/

/* End of CyberSourceTransaction_nvp_1.129.h */
